// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gelu_top_gelu_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-sfvc784-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.752000,HLS_SYN_LAT=9510,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=48,HLS_SYN_LUT=148,HLS_VERSION=2020_2}" *)

module gelu_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_stream_V_dout,
        i_stream_V_empty_n,
        i_stream_V_read,
        o_stream_V_din,
        o_stream_V_full_n,
        o_stream_V_write,
        scalars,
        table_r
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] i_stream_V_dout;
input   i_stream_V_empty_n;
output   i_stream_V_read;
output  [31:0] o_stream_V_din;
input   o_stream_V_full_n;
output   o_stream_V_write;
input  [31:0] scalars;
input  [31:0] table_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg i_stream_V_read;
reg o_stream_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] gelu_inst_table_q0;
wire    grp_do_gelu_fu_40_ap_start;
wire    grp_do_gelu_fu_40_ap_done;
wire    grp_do_gelu_fu_40_ap_idle;
wire    grp_do_gelu_fu_40_ap_ready;
wire    grp_do_gelu_fu_40_i_stream_V_read;
wire   [31:0] grp_do_gelu_fu_40_o_stream_V_din;
wire    grp_do_gelu_fu_40_o_stream_V_write;
wire   [5:0] grp_do_gelu_fu_40_this_table_address0;
wire    grp_do_gelu_fu_40_this_table_ce0;
reg    grp_do_gelu_fu_40_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_do_gelu_fu_40_ap_start_reg = 1'b0;
end

gelu_top_gelu_inst_table #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
gelu_inst_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_do_gelu_fu_40_this_table_address0),
    .ce0(grp_do_gelu_fu_40_this_table_ce0),
    .q0(gelu_inst_table_q0)
);

gelu_top_do_gelu grp_do_gelu_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_do_gelu_fu_40_ap_start),
    .ap_done(grp_do_gelu_fu_40_ap_done),
    .ap_idle(grp_do_gelu_fu_40_ap_idle),
    .ap_ready(grp_do_gelu_fu_40_ap_ready),
    .i_stream_V_dout(i_stream_V_dout),
    .i_stream_V_empty_n(i_stream_V_empty_n),
    .i_stream_V_read(grp_do_gelu_fu_40_i_stream_V_read),
    .o_stream_V_din(grp_do_gelu_fu_40_o_stream_V_din),
    .o_stream_V_full_n(o_stream_V_full_n),
    .o_stream_V_write(grp_do_gelu_fu_40_o_stream_V_write),
    .this_table_address0(grp_do_gelu_fu_40_this_table_address0),
    .this_table_ce0(grp_do_gelu_fu_40_this_table_ce0),
    .this_table_q0(gelu_inst_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_do_gelu_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_do_gelu_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_do_gelu_fu_40_ap_ready == 1'b1)) begin
            grp_do_gelu_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_do_gelu_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_do_gelu_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_stream_V_read = grp_do_gelu_fu_40_i_stream_V_read;
    end else begin
        i_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_stream_V_write = grp_do_gelu_fu_40_o_stream_V_write;
    end else begin
        o_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_do_gelu_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_do_gelu_fu_40_ap_start = grp_do_gelu_fu_40_ap_start_reg;

assign o_stream_V_din = grp_do_gelu_fu_40_o_stream_V_din;

endmodule //gelu_top
