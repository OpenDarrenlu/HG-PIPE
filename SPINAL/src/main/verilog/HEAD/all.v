/* verilator lint_off PINMISSING */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HEAD_HEAD,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-sfvc784-1-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.208000,HLS_SYN_LAT=96028,HLS_SYN_TPT=96003,HLS_SYN_MEM=86,HLS_SYN_DSP=0,HLS_SYN_FF=2446,HLS_SYN_LUT=3167,HLS_VERSION=2020_2}" *)

module HEAD (
        i_stream_V_TDATA,
        o_stream_V_TDATA,
        ap_clk,
        ap_rst_n,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        o_stream_V_TVALID,
        o_stream_V_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_V_TDATA;
output  [31:0] o_stream_V_TDATA;
input   ap_clk;
input   ap_rst_n;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [31:0] do_head_U0_o_stream_V_TDATA;
 reg    ap_rst_n_inv;
wire    do_head_U0_i_stream_V_TREADY;
wire    do_head_U0_ap_start;
wire    do_head_U0_o_stream_V_TVALID;
wire    do_head_U0_ap_done;
wire    do_head_U0_ap_ready;
wire    do_head_U0_ap_idle;
wire    do_head_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    do_head_U0_start_full_n;
wire    do_head_U0_start_write;

HEAD_do_head do_head_U0(
    .i_stream_V_TDATA(i_stream_V_TDATA),
    .o_stream_V_TDATA(do_head_U0_o_stream_V_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .i_stream_V_TVALID(i_stream_V_TVALID),
    .i_stream_V_TREADY(do_head_U0_i_stream_V_TREADY),
    .ap_start(do_head_U0_ap_start),
    .o_stream_V_TVALID(do_head_U0_o_stream_V_TVALID),
    .o_stream_V_TREADY(o_stream_V_TREADY),
    .ap_done(do_head_U0_ap_done),
    .ap_ready(do_head_U0_ap_ready),
    .ap_idle(do_head_U0_ap_idle),
    .ap_continue(do_head_U0_ap_continue)
);

assign ap_done = do_head_U0_ap_done;

assign ap_idle = do_head_U0_ap_idle;

assign ap_ready = do_head_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_head_U0_ap_done;

assign ap_sync_ready = do_head_U0_ap_ready;

assign do_head_U0_ap_continue = ap_continue;

assign do_head_U0_ap_start = ap_start;

assign do_head_U0_start_full_n = 1'b1;

assign do_head_U0_start_write = 1'b0;

assign i_stream_V_TREADY = do_head_U0_i_stream_V_TREADY;

assign o_stream_V_TDATA = do_head_U0_o_stream_V_TDATA;

assign o_stream_V_TVALID = do_head_U0_o_stream_V_TVALID;

endmodule //HEAD
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        ln_sm_dout,
        ln_sm_empty_n,
        ln_sm_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] ln_sm_dout;
input   ln_sm_empty_n;
output   ln_sm_read;
output  [7:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg ln_sm_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    ln_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln79_reg_80;
reg    adpt_sm_blk_n;
reg   [7:0] cot_reg_52;
wire   [7:0] cot_3_fu_63_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln79_fu_69_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_69_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_52 <= cot_3_fu_63_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_52 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_reg_80 <= icmp_ln79_fu_69_p2;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln79_fu_69_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ln_sm_blk_n = ln_sm_empty_n;
    end else begin
        ln_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ln_sm_read = 1'b1;
    end else begin
        ln_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln79_fu_69_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln79_fu_69_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign adpt_sm_din = ln_sm_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln79_reg_80 == 1'd0) & (ln_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln79_reg_80 == 1'd0) & (ln_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln79_reg_80 == 1'd0) & (ln_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln79_reg_80 == 1'd0) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln79_reg_80 == 1'd0) & (ln_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cot_3_fu_63_p2 = (cot_reg_52 + 8'd1);

assign icmp_ln79_fu_69_p2 = ((cot_reg_52 == 8'd192) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //HEAD_do_adapt
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        o_stream_V_TDATA,
        o_stream_V_TVALID,
        o_stream_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] o_stream_V_TDATA;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg o_stream_V_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln46_reg_325;
reg   [0:0] icmp_ln50_reg_329;
reg    o_stream_V_TDATA_blk_n;
reg   [9:0] indvar_flatten_reg_93;
reg   [2:0] t_reg_104;
reg   [75:0] vec_i_data_M_elems_V_1_reg_115;
reg   [18:0] p_fca_0_0_1_0_0_0_extract69_reg_126;
reg   [18:0] p_fca_0_0_0_0_0_0_extract67_reg_137;
wire   [9:0] add_ln46_fu_180_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op25_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_186_p2;
wire   [0:0] icmp_ln50_fu_206_p2;
wire   [2:0] t_1_fu_212_p2;
wire   [75:0] vec_i_data_M_elems_V_3_fu_303_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg   [18:0] ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4;
reg   [75:0] ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4;
wire   [75:0] vec_i_data_M_elems_V_fu_262_p5;
wire   [75:0] ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_2_reg_148;
wire   [18:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract68_reg_158;
reg   [18:0] ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4;
wire   [18:0] trunc_ln50_fu_218_p1;
wire   [18:0] ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_reg_170;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln47_fu_192_p2;
wire   [2:0] select_ln46_fu_198_p3;
wire   [18:0] trunc_ln50_3_fu_244_p4;
wire   [18:0] trunc_ln50_2_fu_234_p4;
wire   [37:0] tmp_s_fu_254_p3;
wire   [18:0] tmp_6_fu_285_p4;
wire   [37:0] tmp_7_fu_295_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_93 <= add_ln46_fu_180_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_93 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_104 <= t_1_fu_212_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_104 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_325 <= icmp_ln46_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_186_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_329 <= icmp_ln50_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_325 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_fca_0_0_0_0_0_0_extract67_reg_137 <= ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4;
        p_fca_0_0_1_0_0_0_extract69_reg_126 <= {{ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4[56:38]}};
        vec_i_data_M_elems_V_1_reg_115 <= vec_i_data_M_elems_V_3_fu_303_p5;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_186_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln46_reg_325 == 1'd0)) begin
        if ((icmp_ln50_reg_329 == 1'd0)) begin
            ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4 = p_fca_0_0_1_0_0_0_extract69_reg_126;
        end else if ((icmp_ln50_reg_329 == 1'd1)) begin
            ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4 = {{mac_sm_dout[50:32]}};
        end else begin
            ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract68_reg_158;
        end
    end else begin
        ap_phi_mux_p_fca_0_0_1_0_0_0_extract68_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract68_reg_158;
    end
end

always @ (*) begin
    if ((icmp_ln46_reg_325 == 1'd0)) begin
        if ((icmp_ln50_reg_329 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4 = vec_i_data_M_elems_V_1_reg_115;
        end else if ((icmp_ln50_reg_329 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4 = vec_i_data_M_elems_V_fu_262_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4 = ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_2_reg_148;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4 = ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_2_reg_148;
    end
end

always @ (*) begin
    if ((icmp_ln46_reg_325 == 1'd0)) begin
        if ((icmp_ln50_reg_329 == 1'd0)) begin
            ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4 = p_fca_0_0_0_0_0_0_extract67_reg_137;
        end else if ((icmp_ln50_reg_329 == 1'd1)) begin
            ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4 = trunc_ln50_fu_218_p1;
        end else begin
            ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4 = ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_reg_170;
        end
    end else begin
        ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4 = ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_reg_170;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_329 == 1'd1) & (icmp_ln46_reg_325 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op25_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_325 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_stream_V_TDATA_blk_n = o_stream_V_TREADY;
    end else begin
        o_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_325 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_stream_V_TVALID = 1'b1;
    end else begin
        o_stream_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_180_p2 = (indvar_flatten_reg_93 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op25_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln46_reg_325 == 1'd0) & (o_stream_V_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((ap_predicate_op25_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln46_reg_325 == 1'd0) & (o_stream_V_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((ap_predicate_op25_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln46_reg_325 == 1'd0) & (o_stream_V_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln46_reg_325 == 1'd0) & (o_stream_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((ap_predicate_op25_read_state3 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln46_reg_325 == 1'd0) & (o_stream_V_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract68_reg_158 = 'bx;

assign ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_2_reg_148 = 'bx;

assign ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_reg_170 = 'bx;

always @ (*) begin
    ap_predicate_op25_read_state3 = ((icmp_ln50_reg_329 == 1'd1) & (icmp_ln46_reg_325 == 1'd0));
end

assign icmp_ln46_fu_186_p2 = ((indvar_flatten_reg_93 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_192_p2 = ((t_reg_104 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_206_p2 = ((select_ln46_fu_198_p3 == 3'd0) ? 1'b1 : 1'b0);

assign o_stream_V_TDATA = ap_phi_mux_vec_o_data_M_elems_V_phi_fu_173_p4;

assign select_ln46_fu_198_p3 = ((icmp_ln47_fu_192_p2[0:0] == 1'b1) ? 3'd0 : t_reg_104);

assign t_1_fu_212_p2 = (select_ln46_fu_198_p3 + 3'd1);

assign tmp_6_fu_285_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4[75:57]}};

assign tmp_7_fu_295_p3 = {{19'd0}, {tmp_6_fu_285_p4}};

assign tmp_s_fu_254_p3 = {{trunc_ln50_3_fu_244_p4}, {trunc_ln50_2_fu_234_p4}};

assign trunc_ln50_2_fu_234_p4 = {{mac_sm_dout[82:64]}};

assign trunc_ln50_3_fu_244_p4 = {{mac_sm_dout[114:96]}};

assign trunc_ln50_fu_218_p1 = mac_sm_dout[18:0];

assign vec_i_data_M_elems_V_3_fu_303_p5 = {{tmp_7_fu_295_p3}, {ap_phi_mux_vec_i_data_M_elems_V_2_phi_fu_151_p4[37:0]}};

assign vec_i_data_M_elems_V_fu_262_p5 = {{tmp_s_fu_254_p3}, {vec_i_data_M_elems_V_1_reg_115[37:0]}};

endmodule //HEAD_do_adapt_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_do_head (
        i_stream_V_TDATA,
        o_stream_V_TDATA,
        ap_clk,
        ap_rst,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        ap_start,
        o_stream_V_TVALID,
        o_stream_V_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_V_TDATA;
output  [31:0] o_stream_V_TDATA;
input   ap_clk;
input   ap_rst;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
input   ap_start;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    select_cls_U0_ap_start;
wire    select_cls_U0_ap_done;
wire    select_cls_U0_ap_continue;
wire    select_cls_U0_ap_idle;
wire    select_cls_U0_ap_ready;
wire    select_cls_U0_start_out;
wire    select_cls_U0_start_write;
wire    select_cls_U0_i_stream_V_TREADY;
wire   [15:0] select_cls_U0_cls_sm_din;
wire    select_cls_U0_cls_sm_write;
wire    do_layernorm_U0_ap_start;
wire    do_layernorm_U0_ap_done;
wire    do_layernorm_U0_ap_continue;
wire    do_layernorm_U0_ap_idle;
wire    do_layernorm_U0_ap_ready;
wire    do_layernorm_U0_start_out;
wire    do_layernorm_U0_start_write;
wire    do_layernorm_U0_cls_sm_read;
wire   [7:0] do_layernorm_U0_ln_sm_din;
wire    do_layernorm_U0_ln_sm_write;
wire    do_matmul_U0_ln_sm_read;
wire   [31:0] do_matmul_U0_o_stream_V_TDATA;
wire    do_matmul_U0_ap_start;
wire    do_matmul_U0_o_stream_V_TVALID;
wire    do_matmul_U0_ap_done;
wire    do_matmul_U0_ap_ready;
wire    do_matmul_U0_ap_idle;
wire    do_matmul_U0_ap_continue;
wire    ap_sync_continue;
wire    cls_sm_full_n;
wire   [15:0] cls_sm_dout;
wire    cls_sm_empty_n;
wire    ln_sm_full_n;
wire   [7:0] ln_sm_dout;
wire    ln_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_do_layernorm_U0_din;
wire    start_for_do_layernorm_U0_full_n;
wire   [0:0] start_for_do_layernorm_U0_dout;
wire    start_for_do_layernorm_U0_empty_n;
wire   [0:0] start_for_do_matmul_U0_din;
wire    start_for_do_matmul_U0_full_n;
wire   [0:0] start_for_do_matmul_U0_dout;
wire    start_for_do_matmul_U0_empty_n;
wire    do_matmul_U0_start_full_n;
wire    do_matmul_U0_start_write;

HEAD_select_cls select_cls_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(select_cls_U0_ap_start),
    .start_full_n(start_for_do_layernorm_U0_full_n),
    .ap_done(select_cls_U0_ap_done),
    .ap_continue(select_cls_U0_ap_continue),
    .ap_idle(select_cls_U0_ap_idle),
    .ap_ready(select_cls_U0_ap_ready),
    .start_out(select_cls_U0_start_out),
    .start_write(select_cls_U0_start_write),
    .i_stream_V_TDATA(i_stream_V_TDATA),
    .i_stream_V_TVALID(i_stream_V_TVALID),
    .i_stream_V_TREADY(select_cls_U0_i_stream_V_TREADY),
    .cls_sm_din(select_cls_U0_cls_sm_din),
    .cls_sm_full_n(cls_sm_full_n),
    .cls_sm_write(select_cls_U0_cls_sm_write)
);

HEAD_do_layernorm do_layernorm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_layernorm_U0_ap_start),
    .start_full_n(start_for_do_matmul_U0_full_n),
    .ap_done(do_layernorm_U0_ap_done),
    .ap_continue(do_layernorm_U0_ap_continue),
    .ap_idle(do_layernorm_U0_ap_idle),
    .ap_ready(do_layernorm_U0_ap_ready),
    .start_out(do_layernorm_U0_start_out),
    .start_write(do_layernorm_U0_start_write),
    .cls_sm_dout(cls_sm_dout),
    .cls_sm_empty_n(cls_sm_empty_n),
    .cls_sm_read(do_layernorm_U0_cls_sm_read),
    .ln_sm_din(do_layernorm_U0_ln_sm_din),
    .ln_sm_full_n(ln_sm_full_n),
    .ln_sm_write(do_layernorm_U0_ln_sm_write)
);

HEAD_do_matmul do_matmul_U0(
    .ln_sm_dout(ln_sm_dout),
    .ln_sm_empty_n(ln_sm_empty_n),
    .ln_sm_read(do_matmul_U0_ln_sm_read),
    .o_stream_V_TDATA(do_matmul_U0_o_stream_V_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_U0_ap_start),
    .o_stream_V_TVALID(do_matmul_U0_o_stream_V_TVALID),
    .o_stream_V_TREADY(o_stream_V_TREADY),
    .ap_done(do_matmul_U0_ap_done),
    .ap_ready(do_matmul_U0_ap_ready),
    .ap_idle(do_matmul_U0_ap_idle),
    .ap_continue(do_matmul_U0_ap_continue)
);

HEAD_fifo_w16_d2_S cls_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(select_cls_U0_cls_sm_din),
    .if_full_n(cls_sm_full_n),
    .if_write(select_cls_U0_cls_sm_write),
    .if_dout(cls_sm_dout),
    .if_empty_n(cls_sm_empty_n),
    .if_read(do_layernorm_U0_cls_sm_read)
);

HEAD_fifo_w8_d2_S_x ln_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_layernorm_U0_ln_sm_din),
    .if_full_n(ln_sm_full_n),
    .if_write(do_layernorm_U0_ln_sm_write),
    .if_dout(ln_sm_dout),
    .if_empty_n(ln_sm_empty_n),
    .if_read(do_matmul_U0_ln_sm_read)
);

HEAD_start_for_do_layernorm_U0 start_for_do_layernorm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_layernorm_U0_din),
    .if_full_n(start_for_do_layernorm_U0_full_n),
    .if_write(select_cls_U0_start_write),
    .if_dout(start_for_do_layernorm_U0_dout),
    .if_empty_n(start_for_do_layernorm_U0_empty_n),
    .if_read(do_layernorm_U0_ap_ready)
);

HEAD_start_for_do_matmul_U0 start_for_do_matmul_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_U0_din),
    .if_full_n(start_for_do_matmul_U0_full_n),
    .if_write(do_layernorm_U0_start_write),
    .if_dout(start_for_do_matmul_U0_dout),
    .if_empty_n(start_for_do_matmul_U0_empty_n),
    .if_read(do_matmul_U0_ap_ready)
);

assign ap_done = do_matmul_U0_ap_done;

assign ap_idle = (select_cls_U0_ap_idle & do_matmul_U0_ap_idle & do_layernorm_U0_ap_idle);

assign ap_ready = select_cls_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_matmul_U0_ap_done;

assign ap_sync_ready = select_cls_U0_ap_ready;

assign do_layernorm_U0_ap_continue = 1'b1;

assign do_layernorm_U0_ap_start = start_for_do_layernorm_U0_empty_n;

assign do_matmul_U0_ap_continue = ap_continue;

assign do_matmul_U0_ap_start = start_for_do_matmul_U0_empty_n;

assign do_matmul_U0_start_full_n = 1'b1;

assign do_matmul_U0_start_write = 1'b0;

assign i_stream_V_TREADY = select_cls_U0_i_stream_V_TREADY;

assign o_stream_V_TDATA = do_matmul_U0_o_stream_V_TDATA;

assign o_stream_V_TVALID = do_matmul_U0_o_stream_V_TVALID;

assign select_cls_U0_ap_continue = 1'b1;

assign select_cls_U0_ap_start = ap_start;

assign start_for_do_layernorm_U0_din = 1'b1;

assign start_for_do_matmul_U0_din = 1'b1;

endmodule //HEAD_do_head
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_do_layernorm (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cls_sm_dout,
        cls_sm_empty_n,
        cls_sm_read,
        ln_sm_din,
        ln_sm_full_n,
        ln_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state20 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] cls_sm_dout;
input   cls_sm_empty_n;
output   cls_sm_read;
output  [7:0] ln_sm_din;
input   ln_sm_full_n;
output   ln_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cls_sm_read;
reg ln_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [6:0] HEAD_INST_lnq_rsqrt_table_V_address0;
reg    HEAD_INST_lnq_rsqrt_table_V_ce0;
wire   [10:0] HEAD_INST_lnq_rsqrt_table_V_q0;
wire   [7:0] HEAD_INST_lnq_lnw_address0;
reg    HEAD_INST_lnq_lnw_ce0;
wire   [15:0] HEAD_INST_lnq_lnw_q0;
wire   [7:0] HEAD_INST_lnq_lnb_address0;
reg    HEAD_INST_lnq_lnb_ce0;
wire   [34:0] HEAD_INST_lnq_lnb_q0;
reg    cls_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln108_1_reg_581;
reg    ln_sm_blk_n;
reg    ap_enable_reg_pp0_iter17;
reg   [1:0] select_ln108_1_reg_581_pp0_iter16_reg;
reg   [9:0] indvar_flatten_reg_198;
reg   [1:0] state_reg_209;
reg   [7:0] ct_reg_220;
wire   [9:0] add_ln108_fu_241_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state19_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln108_fu_247_p2;
reg   [0:0] icmp_ln108_reg_570;
reg   [0:0] icmp_ln108_reg_570_pp0_iter1_reg;
wire   [7:0] select_ln108_fu_265_p3;
reg   [7:0] select_ln108_reg_574;
wire   [1:0] select_ln108_1_fu_273_p3;
reg   [1:0] select_ln108_1_reg_581_pp0_iter1_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter2_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter3_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter4_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter5_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter6_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter7_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter8_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter9_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter10_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter11_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter12_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter13_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter14_reg;
reg   [1:0] select_ln108_1_reg_581_pp0_iter15_reg;
wire   [7:0] add_ln109_fu_281_p2;
wire   [0:0] grp_fu_231_p2;
reg   [0:0] cmp81_reg_606;
reg   [0:0] cmp81_reg_606_pp0_iter2_reg;
reg   [0:0] cmp81_reg_606_pp0_iter3_reg;
reg   [0:0] cmp81_reg_606_pp0_iter4_reg;
reg   [0:0] cmp81_reg_606_pp0_iter5_reg;
reg   [0:0] cmp81_reg_606_pp0_iter6_reg;
reg   [0:0] cmp81_reg_606_pp0_iter7_reg;
reg   [0:0] cmp81_reg_606_pp0_iter8_reg;
reg   [0:0] cmp81_reg_606_pp0_iter9_reg;
wire   [0:0] grp_fu_236_p2;
reg   [0:0] icmp_ln163_reg_610;
reg   [0:0] icmp_ln163_reg_610_pp0_iter2_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter3_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter4_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter5_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter6_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter7_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter8_reg;
reg   [0:0] icmp_ln163_reg_610_pp0_iter9_reg;
wire  signed [12:0] trunc_ln145_fu_293_p1;
reg  signed [12:0] trunc_ln145_reg_614;
reg   [0:0] icmp_ln119_reg_619;
reg   [0:0] icmp_ln137_reg_624;
reg   [0:0] icmp_ln137_reg_624_pp0_iter2_reg;
reg   [0:0] icmp_ln137_reg_624_pp0_iter3_reg;
reg   [0:0] icmp_ln137_reg_624_pp0_iter4_reg;
wire   [12:0] buffer_V_q1;
reg   [12:0] buffer_V_load_reg_628;
reg    ap_enable_reg_pp0_iter2;
reg   [12:0] buffer_V_load_reg_628_pp0_iter3_reg;
reg   [12:0] buffer_V_load_reg_628_pp0_iter4_reg;
reg   [12:0] buffer_V_load_reg_628_pp0_iter5_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter3_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter4_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter5_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter6_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter7_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter8_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter9_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter10_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter11_reg;
reg   [15:0] HEAD_INST_lnq_lnw_load_reg_634_pp0_iter12_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter3_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter4_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter5_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter6_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter7_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter8_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter9_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter10_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter11_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter12_reg;
reg   [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter13_reg;
reg  signed [34:0] HEAD_INST_lnq_lnb_load_reg_639_pp0_iter14_reg;
wire  signed [25:0] sext_ln1345_fu_338_p1;
wire   [12:0] diff_2_fu_363_p2;
reg   [12:0] diff_2_reg_655;
reg   [12:0] diff_2_reg_655_pp0_iter7_reg;
reg   [12:0] diff_2_reg_655_pp0_iter8_reg;
reg  signed [12:0] diff_2_reg_655_pp0_iter9_reg;
wire   [23:0] sum_V_0_fu_368_p1;
reg   [23:0] sum_V_0_reg_660;
wire   [22:0] trunc_ln213_fu_371_p1;
reg   [22:0] trunc_ln213_reg_665;
wire  signed [35:0] grp_fu_529_p3;
reg  signed [35:0] val_reg_700;
reg    ap_enable_reg_pp0_iter16;
wire   [0:0] icmp_ln878_fu_455_p2;
reg   [0:0] icmp_ln878_reg_705;
wire   [0:0] icmp_ln886_fu_470_p2;
reg   [0:0] icmp_ln886_reg_711;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire   [7:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
wire   [12:0] buffer_V_d1;
reg   [1:0] ap_phi_mux_state_phi_fu_213_p4;
wire   [63:0] zext_ln109_fu_287_p1;
wire   [63:0] zext_ln534_fu_417_p1;
reg   [6:0] mean_V_0_1_fu_110;
reg   [10:0] rhs_fu_114;
reg   [14:0] acc_V_0_1_fu_118;
wire   [14:0] acc_V_0_fu_311_p2;
reg   [23:0] lhs_fu_122;
wire   [23:0] sum_V_0_2_fu_386_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln109_fu_259_p2;
wire   [1:0] state_2_fu_253_p2;
wire   [14:0] select_ln119_fu_301_p3;
wire  signed [14:0] sext_ln691_fu_308_p1;
wire   [12:0] zext_ln69_fu_329_p1;
wire   [12:0] diff_fu_333_p2;
wire   [29:0] grp_fu_505_p3;
wire   [12:0] zext_ln69_1_fu_359_p1;
wire  signed [25:0] grp_fu_514_p2;
wire   [22:0] add_ln1346_fu_396_p2;
wire   [22:0] trunc_ln213_1_fu_382_p1;
wire   [22:0] ret_2_fu_401_p2;
wire   [5:0] cursor_V_fu_407_p4;
wire  signed [23:0] grp_fu_522_p2;
wire   [8:0] rel_V_fu_446_p4;
wire   [1:0] tmp_1_fu_461_p4;
wire   [0:0] or_ln69_fu_492_p2;
wire   [7:0] select_ln69_fu_485_p3;
wire   [7:0] trunc_ln1_fu_476_p4;
wire   [14:0] grp_fu_505_p0;
wire   [16:0] grp_fu_505_p1;
wire   [23:0] grp_fu_505_p2;
wire  signed [12:0] grp_fu_514_p0;
wire  signed [12:0] grp_fu_514_p1;
wire   [10:0] grp_fu_522_p1;
wire   [15:0] grp_fu_529_p1;
reg    grp_fu_505_ce;
reg    grp_fu_514_ce;
reg    grp_fu_522_ce;
reg    grp_fu_529_ce;
wire    ap_CS_fsm_state20;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [29:0] grp_fu_505_p00;
wire   [23:0] grp_fu_522_p10;
wire   [35:0] grp_fu_529_p10;
reg    ap_condition_762;
reg    ap_condition_766;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter17 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter16 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_enable_reg_pp0_iter13 = 1'b0;
//#0 ap_enable_reg_pp0_iter14 = 1'b0;
//#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V #(
    .DataWidth( 11 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
HEAD_INST_lnq_rsqrt_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HEAD_INST_lnq_rsqrt_table_V_address0),
    .ce0(HEAD_INST_lnq_rsqrt_table_V_ce0),
    .q0(HEAD_INST_lnq_rsqrt_table_V_q0)
);

HEAD_do_layernorm_HEAD_INST_lnq_lnw #(
    .DataWidth( 16 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
HEAD_INST_lnq_lnw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HEAD_INST_lnq_lnw_address0),
    .ce0(HEAD_INST_lnq_lnw_ce0),
    .q0(HEAD_INST_lnq_lnw_q0)
);

HEAD_do_layernorm_HEAD_INST_lnq_lnb #(
    .DataWidth( 35 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
HEAD_INST_lnq_lnb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HEAD_INST_lnq_lnb_address0),
    .ce0(HEAD_INST_lnq_lnb_ce0),
    .q0(HEAD_INST_lnq_lnb_q0)
);

HEAD_do_layernorm_buffer_V #(
    .DataWidth( 13 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(buffer_V_d1),
    .q1(buffer_V_q1)
);

HEAD_mac_muladd_15ns_17ns_24ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 30 ))
mac_muladd_15ns_17ns_24ns_30_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_505_p0),
    .din1(grp_fu_505_p1),
    .din2(grp_fu_505_p2),
    .ce(grp_fu_505_ce),
    .dout(grp_fu_505_p3)
);

HEAD_mul_mul_13s_13s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_13s_13s_26_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_514_p0),
    .din1(grp_fu_514_p1),
    .ce(grp_fu_514_ce),
    .dout(grp_fu_514_p2)
);

HEAD_mul_mul_13s_11ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 24 ))
mul_mul_13s_11ns_24_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(diff_2_reg_655_pp0_iter9_reg),
    .din1(grp_fu_522_p1),
    .ce(grp_fu_522_ce),
    .dout(grp_fu_522_p2)
);

HEAD_mac_muladd_24s_16ns_35s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
mac_muladd_24s_16ns_35s_36_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_522_p2),
    .din1(grp_fu_529_p1),
    .din2(HEAD_INST_lnq_lnb_load_reg_639_pp0_iter14_reg),
    .ce(grp_fu_529_ce),
    .dout(grp_fu_529_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ct_reg_220 <= add_ln109_fu_281_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ct_reg_220 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_198 <= add_ln108_fu_241_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_198 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_766)) begin
            lhs_fu_122 <= sum_V_0_fu_368_p1;
        end else if ((1'b1 == ap_condition_762)) begin
            lhs_fu_122 <= sum_V_0_2_fu_386_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_reg_570 == 1'd0))) begin
        state_reg_209 <= select_ln108_1_reg_581;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_581_pp0_iter1_reg == 2'd2))) begin
        HEAD_INST_lnq_lnb_load_reg_639 <= HEAD_INST_lnq_lnb_q0;
        HEAD_INST_lnq_lnw_load_reg_634 <= HEAD_INST_lnq_lnw_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter10_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter9_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter11_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter10_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter12_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter11_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter13_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter12_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter14_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter13_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter3_reg <= HEAD_INST_lnq_lnb_load_reg_639;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter4_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter3_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter5_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter4_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter6_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter5_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter7_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter6_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter8_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter7_reg;
        HEAD_INST_lnq_lnb_load_reg_639_pp0_iter9_reg <= HEAD_INST_lnq_lnb_load_reg_639_pp0_iter8_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter10_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter9_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter11_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter10_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter12_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter11_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter3_reg <= HEAD_INST_lnq_lnw_load_reg_634;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter4_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter3_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter5_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter4_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter6_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter5_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter7_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter6_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter8_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter7_reg;
        HEAD_INST_lnq_lnw_load_reg_634_pp0_iter9_reg <= HEAD_INST_lnq_lnw_load_reg_634_pp0_iter8_reg;
        buffer_V_load_reg_628_pp0_iter3_reg <= buffer_V_load_reg_628;
        buffer_V_load_reg_628_pp0_iter4_reg <= buffer_V_load_reg_628_pp0_iter3_reg;
        buffer_V_load_reg_628_pp0_iter5_reg <= buffer_V_load_reg_628_pp0_iter4_reg;
        cmp81_reg_606_pp0_iter2_reg <= cmp81_reg_606;
        cmp81_reg_606_pp0_iter3_reg <= cmp81_reg_606_pp0_iter2_reg;
        cmp81_reg_606_pp0_iter4_reg <= cmp81_reg_606_pp0_iter3_reg;
        cmp81_reg_606_pp0_iter5_reg <= cmp81_reg_606_pp0_iter4_reg;
        cmp81_reg_606_pp0_iter6_reg <= cmp81_reg_606_pp0_iter5_reg;
        cmp81_reg_606_pp0_iter7_reg <= cmp81_reg_606_pp0_iter6_reg;
        cmp81_reg_606_pp0_iter8_reg <= cmp81_reg_606_pp0_iter7_reg;
        cmp81_reg_606_pp0_iter9_reg <= cmp81_reg_606_pp0_iter8_reg;
        diff_2_reg_655_pp0_iter7_reg <= diff_2_reg_655;
        diff_2_reg_655_pp0_iter8_reg <= diff_2_reg_655_pp0_iter7_reg;
        diff_2_reg_655_pp0_iter9_reg <= diff_2_reg_655_pp0_iter8_reg;
        icmp_ln137_reg_624_pp0_iter2_reg <= icmp_ln137_reg_624;
        icmp_ln137_reg_624_pp0_iter3_reg <= icmp_ln137_reg_624_pp0_iter2_reg;
        icmp_ln137_reg_624_pp0_iter4_reg <= icmp_ln137_reg_624_pp0_iter3_reg;
        icmp_ln163_reg_610_pp0_iter2_reg <= icmp_ln163_reg_610;
        icmp_ln163_reg_610_pp0_iter3_reg <= icmp_ln163_reg_610_pp0_iter2_reg;
        icmp_ln163_reg_610_pp0_iter4_reg <= icmp_ln163_reg_610_pp0_iter3_reg;
        icmp_ln163_reg_610_pp0_iter5_reg <= icmp_ln163_reg_610_pp0_iter4_reg;
        icmp_ln163_reg_610_pp0_iter6_reg <= icmp_ln163_reg_610_pp0_iter5_reg;
        icmp_ln163_reg_610_pp0_iter7_reg <= icmp_ln163_reg_610_pp0_iter6_reg;
        icmp_ln163_reg_610_pp0_iter8_reg <= icmp_ln163_reg_610_pp0_iter7_reg;
        icmp_ln163_reg_610_pp0_iter9_reg <= icmp_ln163_reg_610_pp0_iter8_reg;
        select_ln108_1_reg_581_pp0_iter10_reg <= select_ln108_1_reg_581_pp0_iter9_reg;
        select_ln108_1_reg_581_pp0_iter11_reg <= select_ln108_1_reg_581_pp0_iter10_reg;
        select_ln108_1_reg_581_pp0_iter12_reg <= select_ln108_1_reg_581_pp0_iter11_reg;
        select_ln108_1_reg_581_pp0_iter13_reg <= select_ln108_1_reg_581_pp0_iter12_reg;
        select_ln108_1_reg_581_pp0_iter14_reg <= select_ln108_1_reg_581_pp0_iter13_reg;
        select_ln108_1_reg_581_pp0_iter15_reg <= select_ln108_1_reg_581_pp0_iter14_reg;
        select_ln108_1_reg_581_pp0_iter16_reg <= select_ln108_1_reg_581_pp0_iter15_reg;
        select_ln108_1_reg_581_pp0_iter2_reg <= select_ln108_1_reg_581_pp0_iter1_reg;
        select_ln108_1_reg_581_pp0_iter3_reg <= select_ln108_1_reg_581_pp0_iter2_reg;
        select_ln108_1_reg_581_pp0_iter4_reg <= select_ln108_1_reg_581_pp0_iter3_reg;
        select_ln108_1_reg_581_pp0_iter5_reg <= select_ln108_1_reg_581_pp0_iter4_reg;
        select_ln108_1_reg_581_pp0_iter6_reg <= select_ln108_1_reg_581_pp0_iter5_reg;
        select_ln108_1_reg_581_pp0_iter7_reg <= select_ln108_1_reg_581_pp0_iter6_reg;
        select_ln108_1_reg_581_pp0_iter8_reg <= select_ln108_1_reg_581_pp0_iter7_reg;
        select_ln108_1_reg_581_pp0_iter9_reg <= select_ln108_1_reg_581_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln108_1_reg_581_pp0_iter1_reg == 2'd0))) begin
        acc_V_0_1_fu_118 <= acc_V_0_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln108_reg_570_pp0_iter1_reg == 1'd0))) begin
        buffer_V_load_reg_628 <= buffer_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_581 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp81_reg_606 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_581_pp0_iter5_reg == 2'd2))) begin
        diff_2_reg_655 <= diff_2_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln108_reg_570 <= icmp_ln108_fu_247_p2;
        icmp_ln108_reg_570_pp0_iter1_reg <= icmp_ln108_reg_570;
        select_ln108_1_reg_581_pp0_iter1_reg <= select_ln108_1_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln119_reg_619 <= grp_fu_231_p2;
        icmp_ln137_reg_624 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_581 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (grp_fu_231_p2 == 1'd0))) begin
        icmp_ln163_reg_610 <= grp_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_581_pp0_iter15_reg == 2'd2))) begin
        icmp_ln878_reg_705 <= icmp_ln878_fu_455_p2;
        icmp_ln886_reg_711 <= icmp_ln886_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln137_reg_624_pp0_iter4_reg == 1'd1) & (select_ln108_1_reg_581_pp0_iter4_reg == 2'd0))) begin
        mean_V_0_1_fu_110 <= {{grp_fu_505_p3[29:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln163_reg_610_pp0_iter9_reg == 1'd1) & (cmp81_reg_606_pp0_iter9_reg == 1'd0) & (select_ln108_1_reg_581_pp0_iter9_reg == 2'd1))) begin
        rhs_fu_114 <= HEAD_INST_lnq_rsqrt_table_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln108_1_reg_581 <= select_ln108_1_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_fu_247_p2 == 1'd0))) begin
        select_ln108_reg_574 <= select_ln108_fu_265_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_581_pp0_iter7_reg == 2'd1))) begin
        sum_V_0_reg_660 <= sum_V_0_fu_368_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_reg_614 <= trunc_ln145_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp81_reg_606_pp0_iter7_reg == 1'd0) & (select_ln108_1_reg_581_pp0_iter7_reg == 2'd1))) begin
        trunc_ln213_reg_665 <= trunc_ln213_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (select_ln108_1_reg_581_pp0_iter15_reg == 2'd2))) begin
        val_reg_700 <= grp_fu_529_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HEAD_INST_lnq_lnb_ce0 = 1'b1;
    end else begin
        HEAD_INST_lnq_lnb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HEAD_INST_lnq_lnw_ce0 = 1'b1;
    end else begin
        HEAD_INST_lnq_lnw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        HEAD_INST_lnq_rsqrt_table_V_ce0 = 1'b1;
    end else begin
        HEAD_INST_lnq_rsqrt_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln108_fu_247_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_reg_570 == 1'd0))) begin
        ap_phi_mux_state_phi_fu_213_p4 = select_ln108_1_reg_581;
    end else begin
        ap_phi_mux_state_phi_fu_213_p4 = state_reg_209;
    end
end

always @ (*) begin
    if ((((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln108_reg_570 == 1'd0)))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cls_sm_blk_n = cls_sm_empty_n;
    end else begin
        cls_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_581 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cls_sm_read = 1'b1;
    end else begin
        cls_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_505_ce = 1'b1;
    end else begin
        grp_fu_505_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_514_ce = 1'b1;
    end else begin
        grp_fu_514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_522_ce = 1'b1;
    end else begin
        grp_fu_522_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_529_ce = 1'b1;
    end else begin
        grp_fu_529_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ln_sm_blk_n = ln_sm_full_n;
    end else begin
        ln_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ln_sm_write = 1'b1;
    end else begin
        ln_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln108_fu_247_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln108_fu_247_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HEAD_INST_lnq_lnb_address0 = zext_ln109_fu_287_p1;

assign HEAD_INST_lnq_lnw_address0 = zext_ln109_fu_287_p1;

assign HEAD_INST_lnq_rsqrt_table_V_address0 = zext_ln534_fu_417_p1;

assign acc_V_0_fu_311_p2 = ($signed(select_ln119_fu_301_p3) + $signed(sext_ln691_fu_308_p1));

assign add_ln108_fu_241_p2 = (indvar_flatten_reg_198 + 10'd1);

assign add_ln109_fu_281_p2 = (select_ln108_fu_265_p3 + 8'd1);

assign add_ln1346_fu_396_p2 = ($signed(trunc_ln213_reg_665) + $signed(23'd7727614));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ln_sm_full_n == 1'b0)) | ((select_ln108_1_reg_581 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cls_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ln_sm_full_n == 1'b0)) | ((select_ln108_1_reg_581 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cls_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ln_sm_full_n == 1'b0)) | ((select_ln108_1_reg_581 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cls_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter17 = ((select_ln108_1_reg_581_pp0_iter16_reg == 2'd2) & (ln_sm_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((select_ln108_1_reg_581 == 2'd0) & (cls_sm_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_762 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (cmp81_reg_606_pp0_iter8_reg == 1'd0) & (select_ln108_1_reg_581_pp0_iter8_reg == 2'd1));
end

always @ (*) begin
    ap_condition_766 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (cmp81_reg_606_pp0_iter7_reg == 1'd1) & (select_ln108_1_reg_581_pp0_iter7_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign buffer_V_address1 = zext_ln109_fu_287_p1;

assign buffer_V_d1 = cls_sm_dout[12:0];

assign cursor_V_fu_407_p4 = {{ret_2_fu_401_p2[22:17]}};

assign diff_2_fu_363_p2 = (buffer_V_load_reg_628_pp0_iter5_reg - zext_ln69_1_fu_359_p1);

assign diff_fu_333_p2 = (buffer_V_load_reg_628_pp0_iter4_reg - zext_ln69_fu_329_p1);

assign grp_fu_231_p2 = ((select_ln108_reg_574 == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_236_p2 = ((select_ln108_reg_574 == 8'd191) ? 1'b1 : 1'b0);

assign grp_fu_505_p0 = grp_fu_505_p00;

assign grp_fu_505_p00 = acc_V_0_fu_311_p2;

assign grp_fu_505_p1 = 30'd43691;

assign grp_fu_505_p2 = 30'd4194304;

assign grp_fu_514_p0 = sext_ln1345_fu_338_p1;

assign grp_fu_514_p1 = sext_ln1345_fu_338_p1;

assign grp_fu_522_p1 = grp_fu_522_p10;

assign grp_fu_522_p10 = rhs_fu_114;

assign grp_fu_529_p1 = grp_fu_529_p10;

assign grp_fu_529_p10 = HEAD_INST_lnq_lnw_load_reg_634_pp0_iter12_reg;

assign icmp_ln108_fu_247_p2 = ((indvar_flatten_reg_198 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_259_p2 = ((ct_reg_220 == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_455_p2 = (($signed(rel_V_fu_446_p4) < $signed(9'd384)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_470_p2 = ((tmp_1_fu_461_p4 == 2'd1) ? 1'b1 : 1'b0);

assign ln_sm_din = ((or_ln69_fu_492_p2[0:0] == 1'b1) ? select_ln69_fu_485_p3 : trunc_ln1_fu_476_p4);

assign or_ln69_fu_492_p2 = (icmp_ln886_reg_711 | icmp_ln878_reg_705);

assign rel_V_fu_446_p4 = {{grp_fu_529_p3[35:27]}};

assign ret_2_fu_401_p2 = (add_ln1346_fu_396_p2 + trunc_ln213_1_fu_382_p1);

assign select_ln108_1_fu_273_p3 = ((icmp_ln109_fu_259_p2[0:0] == 1'b1) ? state_2_fu_253_p2 : ap_phi_mux_state_phi_fu_213_p4);

assign select_ln108_fu_265_p3 = ((icmp_ln109_fu_259_p2[0:0] == 1'b1) ? 8'd0 : ct_reg_220);

assign select_ln119_fu_301_p3 = ((icmp_ln119_reg_619[0:0] == 1'b1) ? 15'd0 : acc_V_0_1_fu_118);

assign select_ln69_fu_485_p3 = ((icmp_ln878_reg_705[0:0] == 1'b1) ? 8'd128 : 8'd127);

assign sext_ln1345_fu_338_p1 = $signed(diff_fu_333_p2);

assign sext_ln691_fu_308_p1 = trunc_ln145_reg_614;

assign start_out = real_start;

assign state_2_fu_253_p2 = (ap_phi_mux_state_phi_fu_213_p4 + 2'd1);

assign sum_V_0_2_fu_386_p2 = (lhs_fu_122 + sum_V_0_reg_660);

assign sum_V_0_fu_368_p1 = grp_fu_514_p2[23:0];

assign tmp_1_fu_461_p4 = {{grp_fu_529_p3[35:34]}};

assign trunc_ln145_fu_293_p1 = cls_sm_dout[12:0];

assign trunc_ln1_fu_476_p4 = {{val_reg_700[34:27]}};

assign trunc_ln213_1_fu_382_p1 = lhs_fu_122[22:0];

assign trunc_ln213_fu_371_p1 = grp_fu_514_p2[22:0];

assign zext_ln109_fu_287_p1 = select_ln108_reg_574;

assign zext_ln534_fu_417_p1 = cursor_V_fu_407_p4;

assign zext_ln69_1_fu_359_p1 = mean_V_0_1_fu_110;

assign zext_ln69_fu_329_p1 = mean_V_0_1_fu_110;

endmodule //HEAD_do_layernorm
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module HEAD_do_layernorm_buffer_V_ram (addr1, ce1, d1, we1, q1,  clk);

parameter DWIDTH = 13;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[addr1] <= d1; 
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module HEAD_do_layernorm_buffer_V(
    reset,
    clk,
    address1,
    ce1,
    we1,
    d1,
    q1);

parameter DataWidth = 32'd13;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;
output[DataWidth - 1:0] q1;



HEAD_do_layernorm_buffer_V_ram HEAD_do_layernorm_buffer_V_ram_U(
    .clk( clk ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module HEAD_do_layernorm_HEAD_INST_lnq_lnb_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 35;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/HEAD/HEAD_do_layernorm_HEAD_INST_lnq_lnb_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module HEAD_do_layernorm_HEAD_INST_lnq_lnb(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd35;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



HEAD_do_layernorm_HEAD_INST_lnq_lnb_rom HEAD_do_layernorm_HEAD_INST_lnq_lnb_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module HEAD_do_layernorm_HEAD_INST_lnq_lnw_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 16;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/HEAD/HEAD_do_layernorm_HEAD_INST_lnq_lnw_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module HEAD_do_layernorm_HEAD_INST_lnq_lnw(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd16;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



HEAD_do_layernorm_HEAD_INST_lnq_lnw_rom HEAD_do_layernorm_HEAD_INST_lnq_lnw_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 11;
parameter AWIDTH = 7;
parameter MEM_SIZE = 128;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/HEAD/HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd11;
parameter AddressRange = 32'd128;
parameter AddressWidth = 32'd7;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V_rom HEAD_do_layernorm_HEAD_INST_lnq_rsqrt_table_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_do_matmul (
        ln_sm_dout,
        ln_sm_empty_n,
        ln_sm_read,
        o_stream_V_TDATA,
        ap_clk,
        ap_rst,
        ap_start,
        o_stream_V_TVALID,
        o_stream_V_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] ln_sm_dout;
input   ln_sm_empty_n;
output   ln_sm_read;
output  [31:0] o_stream_V_TDATA;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_start_out;
wire    do_adapt_U0_start_write;
wire    do_adapt_U0_ln_sm_read;
wire   [7:0] do_adapt_U0_adpt_sm_din;
wire    do_adapt_U0_adpt_sm_write;
wire    matmul_step1_cache_window_U0_ap_start;
wire    matmul_step1_cache_window_U0_ap_done;
wire    matmul_step1_cache_window_U0_ap_continue;
wire    matmul_step1_cache_window_U0_ap_idle;
wire    matmul_step1_cache_window_U0_ap_ready;
wire    matmul_step1_cache_window_U0_start_out;
wire    matmul_step1_cache_window_U0_start_write;
wire    matmul_step1_cache_window_U0_adpt_sm_read;
wire   [7:0] matmul_step1_cache_window_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_U0_cache_window_sm_write;
wire    matmul_step2_mac_U0_ap_start;
wire    matmul_step2_mac_U0_ap_done;
wire    matmul_step2_mac_U0_ap_continue;
wire    matmul_step2_mac_U0_ap_idle;
wire    matmul_step2_mac_U0_ap_ready;
wire    matmul_step2_mac_U0_start_out;
wire    matmul_step2_mac_U0_start_write;
wire    matmul_step2_mac_U0_cache_window_sm_read;
wire   [127:0] matmul_step2_mac_U0_mac_sm_din;
wire    matmul_step2_mac_U0_mac_sm_write;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_mac_sm_read;
wire   [31:0] do_adapt_1_U0_o_stream_V_TDATA;
wire    do_adapt_1_U0_o_stream_V_TVALID;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [7:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [7:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [127:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_U0_din;
wire    start_for_matmul_step1_cache_window_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_U0_dout;
wire    start_for_matmul_step1_cache_window_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_U0_din;
wire    start_for_matmul_step2_mac_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_U0_dout;
wire    start_for_matmul_step2_mac_U0_empty_n;
wire   [0:0] start_for_do_adapt_1_U0_din;
wire    start_for_do_adapt_1_U0_full_n;
wire   [0:0] start_for_do_adapt_1_U0_dout;
wire    start_for_do_adapt_1_U0_empty_n;
wire    do_adapt_1_U0_start_full_n;
wire    do_adapt_1_U0_start_write;

HEAD_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .start_out(do_adapt_U0_start_out),
    .start_write(do_adapt_U0_start_write),
    .ln_sm_dout(ln_sm_dout),
    .ln_sm_empty_n(ln_sm_empty_n),
    .ln_sm_read(do_adapt_U0_ln_sm_read),
    .adpt_sm_din(do_adapt_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_U0_adpt_sm_write)
);

HEAD_matmul_step1_cache_window matmul_step1_cache_window_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_U0_full_n),
    .ap_done(matmul_step1_cache_window_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_U0_ap_ready),
    .start_out(matmul_step1_cache_window_U0_start_out),
    .start_write(matmul_step1_cache_window_U0_start_write),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_U0_cache_window_sm_write)
);

HEAD_matmul_step2_mac matmul_step2_mac_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_U0_ap_start),
    .start_full_n(start_for_do_adapt_1_U0_full_n),
    .ap_done(matmul_step2_mac_U0_ap_done),
    .ap_continue(matmul_step2_mac_U0_ap_continue),
    .ap_idle(matmul_step2_mac_U0_ap_idle),
    .ap_ready(matmul_step2_mac_U0_ap_ready),
    .start_out(matmul_step2_mac_U0_start_out),
    .start_write(matmul_step2_mac_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_U0_mac_sm_write)
);

HEAD_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_1_U0_mac_sm_read),
    .o_stream_V_TDATA(do_adapt_1_U0_o_stream_V_TDATA),
    .o_stream_V_TVALID(do_adapt_1_U0_o_stream_V_TVALID),
    .o_stream_V_TREADY(o_stream_V_TREADY)
);

HEAD_fifo_w8_d2_S adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_U0_adpt_sm_read)
);

HEAD_fifo_w8_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_U0_cache_window_sm_read)
);

HEAD_fifo_w128_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_1_U0_mac_sm_read)
);

HEAD_start_for_matmul_step1_cache_window_U0 start_for_matmul_step1_cache_window_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .if_write(do_adapt_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_U0_empty_n),
    .if_read(matmul_step1_cache_window_U0_ap_ready)
);

HEAD_start_for_matmul_step2_mac_U0 start_for_matmul_step2_mac_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_U0_din),
    .if_full_n(start_for_matmul_step2_mac_U0_full_n),
    .if_write(matmul_step1_cache_window_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_U0_empty_n),
    .if_read(matmul_step2_mac_U0_ap_ready)
);

HEAD_start_for_do_adapt_1_U0 start_for_do_adapt_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_1_U0_din),
    .if_full_n(start_for_do_adapt_1_U0_full_n),
    .if_write(matmul_step2_mac_U0_start_write),
    .if_dout(start_for_do_adapt_1_U0_dout),
    .if_empty_n(start_for_do_adapt_1_U0_empty_n),
    .if_read(do_adapt_1_U0_ap_ready)
);

assign ap_done = do_adapt_1_U0_ap_done;

assign ap_idle = (matmul_step2_mac_U0_ap_idle & matmul_step1_cache_window_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = do_adapt_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_adapt_1_U0_ap_done;

assign ap_sync_ready = do_adapt_U0_ap_ready;

assign do_adapt_1_U0_ap_continue = ap_continue;

assign do_adapt_1_U0_ap_start = start_for_do_adapt_1_U0_empty_n;

assign do_adapt_1_U0_start_full_n = 1'b1;

assign do_adapt_1_U0_start_write = 1'b0;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = ap_start;

assign ln_sm_read = do_adapt_U0_ln_sm_read;

assign matmul_step1_cache_window_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_U0_ap_start = start_for_matmul_step1_cache_window_U0_empty_n;

assign matmul_step2_mac_U0_ap_continue = 1'b1;

assign matmul_step2_mac_U0_ap_start = start_for_matmul_step2_mac_U0_empty_n;

assign o_stream_V_TDATA = do_adapt_1_U0_o_stream_V_TDATA;

assign o_stream_V_TVALID = do_adapt_1_U0_o_stream_V_TVALID;

assign start_for_do_adapt_1_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_U0_din = 1'b1;

assign start_for_matmul_step2_mac_U0_din = 1'b1;

endmodule //HEAD_do_matmul
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_fifo_w128_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd128;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_fifo_w128_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd128;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_fifo_w128_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_fifo_w128_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_fifo_w16_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd16;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_fifo_w16_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd16;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_fifo_w16_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_fifo_w16_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_fifo_w8_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd8;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_fifo_w8_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd8;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_fifo_w8_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_fifo_w8_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_fifo_w8_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd8;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_fifo_w8_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd8;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_fifo_w8_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_fifo_w8_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module HEAD_mac_muladd_15ns_17ns_24ns_30_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [15 - 1:0] in0,
    input  [17 - 1:0] in1,
    input  [24 - 1:0] in2,
    output [30 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $unsigned(in0);
assign b  = $unsigned(in1);
assign c  = $unsigned(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module HEAD_mac_muladd_15ns_17ns_24ns_30_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



HEAD_mac_muladd_15ns_17ns_24ns_30_4_1_DSP48_0 HEAD_mac_muladd_15ns_17ns_24ns_30_4_1_DSP48_0_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module HEAD_mac_muladd_24s_16ns_35s_36_4_1_DSP48_3(
    input clk,
    input rst,
    input ce,
    input  [24 - 1:0] in0,
    input  [16 - 1:0] in1,
    input  [35 - 1:0] in2,
    output [36 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $unsigned(in1);
assign c  = $signed(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module HEAD_mac_muladd_24s_16ns_35s_36_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



HEAD_mac_muladd_24s_16ns_35s_36_4_1_DSP48_3 HEAD_mac_muladd_24s_16ns_35s_36_4_1_DSP48_3_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_matmul_step1_cache_window (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [7:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln65_reg_202;
reg   [0:0] select_ln65_1_reg_211;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [15:0] indvar_flatten_reg_84;
reg   [7:0] cot_reg_95;
reg   [7:0] cit_reg_106;
wire   [15:0] add_ln65_fu_127_p2;
reg   [15:0] add_ln65_reg_197;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln65_fu_133_p2;
wire   [7:0] select_ln65_fu_151_p3;
reg   [7:0] select_ln65_reg_206;
wire   [0:0] select_ln65_1_fu_171_p3;
wire   [7:0] select_ln65_2_fu_179_p3;
reg   [7:0] select_ln65_2_reg_215;
reg   [7:0] wb_V_addr_reg_220;
wire   [7:0] wb_V_q0;
reg    ap_predicate_op33_read_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [7:0] add_ln66_fu_192_p2;
reg   [7:0] add_ln66_reg_235;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [7:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
reg   [15:0] ap_phi_mux_indvar_flatten_phi_fu_88_p4;
reg   [7:0] ap_phi_mux_cot_phi_fu_99_p4;
reg   [7:0] ap_phi_mux_cit_phi_fu_110_p4;
wire   [7:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_117;
reg   [7:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_117;
wire   [63:0] zext_ln66_fu_187_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln66_fu_145_p2;
wire   [7:0] cot_2_fu_139_p2;
wire   [0:0] cmp10_mid1_fu_159_p2;
wire   [0:0] cmp104_fu_165_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_127;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

HEAD_matmul_step1_cache_window_wb_V #(
    .DataWidth( 8 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(adpt_sm_dout),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if (((select_ln65_1_reg_211 == 1'd0) & (icmp_ln65_reg_202 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_117 <= wb_V_q0;
        end else if (((select_ln65_1_reg_211 == 1'd1) & (icmp_ln65_reg_202 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_117 <= adpt_sm_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_117 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_117;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_106 <= add_ln66_reg_235;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_106 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_95 <= select_ln65_2_reg_215;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_95 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_84 <= add_ln65_reg_197;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_84 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln65_reg_197 <= add_ln65_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln66_reg_235 <= add_ln66_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln65_reg_202 <= icmp_ln65_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_133_p2 == 1'd0))) begin
        select_ln65_1_reg_211 <= select_ln65_1_fu_171_p3;
        select_ln65_reg_206 <= select_ln65_fu_151_p3;
        wb_V_addr_reg_220 <= zext_ln66_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_133_p2 == 1'd0))) begin
        select_ln65_2_reg_215 <= select_ln65_2_fu_179_p3;
    end
end

always @ (*) begin
    if (((select_ln65_1_reg_211 == 1'd1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op33_read_state3 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_133_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_110_p4 = add_ln66_reg_235;
    end else begin
        ap_phi_mux_cit_phi_fu_110_p4 = cit_reg_106;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_99_p4 = select_ln65_2_reg_215;
    end else begin
        ap_phi_mux_cot_phi_fu_99_p4 = cot_reg_95;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_88_p4 = add_ln65_reg_197;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_88_p4 = indvar_flatten_reg_84;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            wb_V_address0 = wb_V_addr_reg_220;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            wb_V_address0 = zext_ln66_fu_187_p1;
        end else begin
            wb_V_address0 = 'bx;
        end
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_1_reg_211 == 1'd1) & (icmp_ln65_reg_202 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_fu_133_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_fu_133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_fu_127_p2 = (ap_phi_mux_indvar_flatten_phi_fu_88_p4 + 16'd1);

assign add_ln66_fu_192_p2 = (select_ln65_reg_206 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_202 == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op33_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op33_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op33_read_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln65_reg_202 == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_127 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_117 = 'bx;

always @ (*) begin
    ap_predicate_op33_read_state3 = ((select_ln65_1_reg_211 == 1'd1) & (icmp_ln65_reg_202 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_117;

assign cmp104_fu_165_p2 = ((ap_phi_mux_cot_phi_fu_99_p4 == 8'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_159_p2 = ((cot_2_fu_139_p2 == 8'd0) ? 1'b1 : 1'b0);

assign cot_2_fu_139_p2 = (ap_phi_mux_cot_phi_fu_99_p4 + 8'd1);

assign icmp_ln65_fu_133_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_88_p4 == 16'd48000) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_145_p2 = ((ap_phi_mux_cit_phi_fu_110_p4 == 8'd192) ? 1'b1 : 1'b0);

assign select_ln65_1_fu_171_p3 = ((icmp_ln66_fu_145_p2[0:0] == 1'b1) ? cmp10_mid1_fu_159_p2 : cmp104_fu_165_p2);

assign select_ln65_2_fu_179_p3 = ((icmp_ln66_fu_145_p2[0:0] == 1'b1) ? cot_2_fu_139_p2 : ap_phi_mux_cot_phi_fu_99_p4);

assign select_ln65_fu_151_p3 = ((icmp_ln66_fu_145_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_cit_phi_fu_110_p4);

assign start_out = real_start;

assign zext_ln66_fu_187_p1 = select_ln65_fu_151_p3;

endmodule //HEAD_matmul_step1_cache_window
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module HEAD_matmul_step1_cache_window_wb_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 8;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module HEAD_matmul_step1_cache_window_wb_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



HEAD_matmul_step1_cache_window_wb_V_ram HEAD_matmul_step1_cache_window_wb_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_matmul_step2_mac (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [127:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [7:0] HEAD_INST_matmul_bias_arr_V_address0;
reg    HEAD_INST_matmul_bias_arr_V_ce0;
wire   [70:0] HEAD_INST_matmul_bias_arr_V_q0;
wire   [15:0] HEAD_INST_matmul_weight_arr_V_address0;
reg    HEAD_INST_matmul_weight_arr_V_ce0;
wire   [31:0] HEAD_INST_matmul_weight_arr_V_q0;
reg    cache_window_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln121_reg_489;
reg   [0:0] icmp_ln121_reg_489_pp0_iter1_reg;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln161_reg_523;
reg   [0:0] icmp_ln161_reg_523_pp0_iter4_reg;
reg   [15:0] indvar_flatten_reg_155;
reg   [7:0] cot_reg_166;
reg   [7:0] cit_reg_177;
wire   [15:0] add_ln121_1_fu_188_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln121_fu_194_p2;
reg   [0:0] icmp_ln121_reg_489_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_489_pp0_iter3_reg;
wire   [7:0] select_ln121_fu_212_p3;
reg   [7:0] select_ln121_reg_493;
wire   [7:0] select_ln121_2_fu_220_p3;
reg   [7:0] select_ln121_2_reg_500;
reg   [7:0] select_ln121_2_reg_500_pp0_iter1_reg;
wire   [7:0] add_ln122_fu_228_p2;
wire   [0:0] icmp_ln126_fu_272_p2;
reg   [0:0] icmp_ln126_reg_518;
reg   [0:0] icmp_ln126_reg_518_pp0_iter2_reg;
reg   [0:0] icmp_ln126_reg_518_pp0_iter3_reg;
wire   [0:0] icmp_ln161_fu_277_p2;
reg   [0:0] icmp_ln161_reg_523_pp0_iter2_reg;
reg   [0:0] icmp_ln161_reg_523_pp0_iter3_reg;
reg   [7:0] tmp_data_M_elems_V_reg_532;
wire   [7:0] trunc_ln215_fu_286_p1;
reg  signed [7:0] trunc_ln215_reg_537;
reg  signed [7:0] tmp_7_reg_542;
reg  signed [7:0] tmp_9_reg_547;
reg  signed [7:0] tmp_1_reg_552;
reg   [70:0] HEAD_INST_matmul_bias_arr_V_load_reg_557;
wire  signed [15:0] mul_ln1345_fu_326_p2;
reg  signed [15:0] mul_ln1345_reg_562;
wire  signed [15:0] mul_ln1345_1_fu_335_p2;
reg  signed [15:0] mul_ln1345_1_reg_567;
wire  signed [15:0] mul_ln1345_2_fu_344_p2;
reg  signed [15:0] mul_ln1345_2_reg_572;
wire  signed [15:0] mul_ln1345_3_fu_353_p2;
reg  signed [15:0] mul_ln1345_3_reg_577;
wire   [18:0] add_ln691_fu_379_p2;
reg   [18:0] add_ln691_reg_582;
wire   [18:0] add_ln691_1_fu_398_p2;
reg   [18:0] add_ln691_1_reg_587;
wire   [18:0] add_ln691_2_fu_417_p2;
reg   [18:0] add_ln691_2_reg_592;
wire   [18:0] add_ln691_3_fu_436_p2;
reg   [18:0] add_ln691_3_reg_597;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [7:0] ap_phi_mux_cot_phi_fu_170_p4;
wire   [63:0] zext_ln215_2_fu_267_p1;
wire   [63:0] zext_ln121_fu_282_p1;
reg   [75:0] vec_o_data_M_elems_V_1_fu_112;
wire   [75:0] tmp_3_fu_442_p5;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln122_fu_206_p2;
wire   [7:0] add_ln121_fu_200_p2;
wire   [13:0] tmp_fu_241_p3;
wire   [15:0] p_shl_cast_fu_234_p3;
wire   [15:0] zext_ln215_fu_248_p1;
wire   [15:0] sub_ln215_fu_252_p2;
wire   [15:0] zext_ln215_1_fu_258_p1;
wire   [15:0] add_ln215_fu_261_p2;
wire  signed [7:0] mul_ln1345_fu_326_p1;
wire  signed [15:0] sext_ln1345_fu_320_p1;
wire  signed [7:0] mul_ln1345_1_fu_335_p1;
wire  signed [7:0] mul_ln1345_2_fu_344_p1;
wire  signed [7:0] mul_ln1345_3_fu_353_p1;
wire  signed [75:0] sext_ln121_fu_362_p1;
wire   [75:0] select_ln126_fu_365_p3;
wire   [18:0] trunc_ln691_fu_375_p1;
wire  signed [18:0] sext_ln691_fu_372_p1;
wire   [18:0] tmp_8_fu_388_p4;
wire  signed [18:0] sext_ln691_1_fu_385_p1;
wire   [18:0] tmp_s_fu_407_p4;
wire  signed [18:0] sext_ln691_2_fu_404_p1;
wire   [18:0] tmp_2_fu_426_p4;
wire  signed [18:0] sext_ln691_3_fu_423_p1;
wire   [114:0] tmp_4_fu_459_p8;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V #(
    .DataWidth( 71 ),
    .AddressRange( 250 ),
    .AddressWidth( 8 ))
HEAD_INST_matmul_bias_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HEAD_INST_matmul_bias_arr_V_address0),
    .ce0(HEAD_INST_matmul_bias_arr_V_ce0),
    .q0(HEAD_INST_matmul_bias_arr_V_q0)
);

HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
HEAD_INST_matmul_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(HEAD_INST_matmul_weight_arr_V_address0),
    .ce0(HEAD_INST_matmul_weight_arr_V_ce0),
    .q0(HEAD_INST_matmul_weight_arr_V_q0)
);

HEAD_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U22(
    .din0(trunc_ln215_reg_537),
    .din1(mul_ln1345_fu_326_p1),
    .dout(mul_ln1345_fu_326_p2)
);

HEAD_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U23(
    .din0(tmp_7_reg_542),
    .din1(mul_ln1345_1_fu_335_p1),
    .dout(mul_ln1345_1_fu_335_p2)
);

HEAD_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U24(
    .din0(tmp_9_reg_547),
    .din1(mul_ln1345_2_fu_344_p1),
    .dout(mul_ln1345_2_fu_344_p2)
);

HEAD_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U25(
    .din0(tmp_1_reg_552),
    .din1(mul_ln1345_3_fu_353_p1),
    .dout(mul_ln1345_3_fu_353_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_194_p2 == 1'd0))) begin
        cit_reg_177 <= add_ln122_fu_228_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_177 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cot_reg_166 <= select_ln121_2_reg_500;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_166 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_194_p2 == 1'd0))) begin
        indvar_flatten_reg_155 <= add_ln121_1_fu_188_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_155 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln126_reg_518_pp0_iter2_reg == 1'd1) & (icmp_ln121_reg_489_pp0_iter2_reg == 1'd0))) begin
        HEAD_INST_matmul_bias_arr_V_load_reg_557 <= HEAD_INST_matmul_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_489_pp0_iter3_reg == 1'd0))) begin
        add_ln691_1_reg_587 <= add_ln691_1_fu_398_p2;
        add_ln691_2_reg_592 <= add_ln691_2_fu_417_p2;
        add_ln691_3_reg_597 <= add_ln691_3_fu_436_p2;
        add_ln691_reg_582 <= add_ln691_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln121_reg_489 <= icmp_ln121_fu_194_p2;
        icmp_ln121_reg_489_pp0_iter1_reg <= icmp_ln121_reg_489;
        select_ln121_2_reg_500_pp0_iter1_reg <= select_ln121_2_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln121_reg_489_pp0_iter2_reg <= icmp_ln121_reg_489_pp0_iter1_reg;
        icmp_ln121_reg_489_pp0_iter3_reg <= icmp_ln121_reg_489_pp0_iter2_reg;
        icmp_ln126_reg_518_pp0_iter2_reg <= icmp_ln126_reg_518;
        icmp_ln126_reg_518_pp0_iter3_reg <= icmp_ln126_reg_518_pp0_iter2_reg;
        icmp_ln161_reg_523_pp0_iter2_reg <= icmp_ln161_reg_523;
        icmp_ln161_reg_523_pp0_iter3_reg <= icmp_ln161_reg_523_pp0_iter2_reg;
        icmp_ln161_reg_523_pp0_iter4_reg <= icmp_ln161_reg_523_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln126_reg_518 <= icmp_ln126_fu_272_p2;
        icmp_ln161_reg_523 <= icmp_ln161_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_489_pp0_iter2_reg == 1'd0))) begin
        mul_ln1345_1_reg_567 <= mul_ln1345_1_fu_335_p2;
        mul_ln1345_2_reg_572 <= mul_ln1345_2_fu_344_p2;
        mul_ln1345_3_reg_577 <= mul_ln1345_3_fu_353_p2;
        mul_ln1345_reg_562 <= mul_ln1345_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_194_p2 == 1'd0))) begin
        select_ln121_2_reg_500 <= select_ln121_2_fu_220_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln121_fu_194_p2 == 1'd0))) begin
        select_ln121_reg_493 <= select_ln121_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_552 <= {{HEAD_INST_matmul_weight_arr_V_q0[31:24]}};
        tmp_7_reg_542 <= {{HEAD_INST_matmul_weight_arr_V_q0[15:8]}};
        tmp_9_reg_547 <= {{HEAD_INST_matmul_weight_arr_V_q0[23:16]}};
        tmp_data_M_elems_V_reg_532 <= cache_window_sm_dout;
        trunc_ln215_reg_537 <= trunc_ln215_fu_286_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln121_reg_489_pp0_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_1_fu_112 <= tmp_3_fu_442_p5;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        HEAD_INST_matmul_bias_arr_V_ce0 = 1'b1;
    end else begin
        HEAD_INST_matmul_bias_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        HEAD_INST_matmul_weight_arr_V_ce0 = 1'b1;
    end else begin
        HEAD_INST_matmul_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_cot_phi_fu_170_p4 = select_ln121_2_reg_500;
    end else begin
        ap_phi_mux_cot_phi_fu_170_p4 = cot_reg_166;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln121_fu_194_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln121_fu_194_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HEAD_INST_matmul_bias_arr_V_address0 = zext_ln121_fu_282_p1;

assign HEAD_INST_matmul_weight_arr_V_address0 = zext_ln215_2_fu_267_p1;

assign add_ln121_1_fu_188_p2 = (indvar_flatten_reg_155 + 16'd1);

assign add_ln121_fu_200_p2 = (ap_phi_mux_cot_phi_fu_170_p4 + 8'd1);

assign add_ln122_fu_228_p2 = (select_ln121_fu_212_p3 + 8'd1);

assign add_ln215_fu_261_p2 = (sub_ln215_fu_252_p2 + zext_ln215_1_fu_258_p1);

assign add_ln691_1_fu_398_p2 = ($signed(tmp_8_fu_388_p4) + $signed(sext_ln691_1_fu_385_p1));

assign add_ln691_2_fu_417_p2 = ($signed(tmp_s_fu_407_p4) + $signed(sext_ln691_2_fu_404_p1));

assign add_ln691_3_fu_436_p2 = ($signed(tmp_2_fu_426_p4) + $signed(sext_ln691_3_fu_423_p1));

assign add_ln691_fu_379_p2 = ($signed(trunc_ln691_fu_375_p1) + $signed(sext_ln691_fu_372_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln121_reg_489_pp0_iter1_reg == 1'd0) & (cache_window_sm_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((icmp_ln161_reg_523_pp0_iter4_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln121_fu_194_p2 = ((indvar_flatten_reg_155 == 16'd48000) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_206_p2 = ((cit_reg_177 == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_272_p2 = ((select_ln121_reg_493 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_277_p2 = ((select_ln121_reg_493 == 8'd191) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_4_fu_459_p8;

assign mul_ln1345_1_fu_335_p1 = sext_ln1345_fu_320_p1;

assign mul_ln1345_2_fu_344_p1 = sext_ln1345_fu_320_p1;

assign mul_ln1345_3_fu_353_p1 = sext_ln1345_fu_320_p1;

assign mul_ln1345_fu_326_p1 = sext_ln1345_fu_320_p1;

assign p_shl_cast_fu_234_p3 = {{select_ln121_2_reg_500}, {8'd0}};

assign select_ln121_2_fu_220_p3 = ((icmp_ln122_fu_206_p2[0:0] == 1'b1) ? add_ln121_fu_200_p2 : ap_phi_mux_cot_phi_fu_170_p4);

assign select_ln121_fu_212_p3 = ((icmp_ln122_fu_206_p2[0:0] == 1'b1) ? 8'd0 : cit_reg_177);

assign select_ln126_fu_365_p3 = ((icmp_ln126_reg_518_pp0_iter3_reg[0:0] == 1'b1) ? sext_ln121_fu_362_p1 : vec_o_data_M_elems_V_1_fu_112);

assign sext_ln121_fu_362_p1 = $signed(HEAD_INST_matmul_bias_arr_V_load_reg_557);

assign sext_ln1345_fu_320_p1 = $signed(tmp_data_M_elems_V_reg_532);

assign sext_ln691_1_fu_385_p1 = mul_ln1345_1_reg_567;

assign sext_ln691_2_fu_404_p1 = mul_ln1345_2_reg_572;

assign sext_ln691_3_fu_423_p1 = mul_ln1345_3_reg_577;

assign sext_ln691_fu_372_p1 = mul_ln1345_reg_562;

assign start_out = real_start;

assign sub_ln215_fu_252_p2 = (p_shl_cast_fu_234_p3 - zext_ln215_fu_248_p1);

assign tmp_2_fu_426_p4 = {{select_ln126_fu_365_p3[75:57]}};

assign tmp_3_fu_442_p5 = {{{{add_ln691_3_fu_436_p2}, {add_ln691_2_fu_417_p2}}, {add_ln691_1_fu_398_p2}}, {add_ln691_fu_379_p2}};

assign tmp_4_fu_459_p8 = {{{{{{{add_ln691_3_reg_597}, {13'd0}}, {add_ln691_2_reg_592}}, {13'd0}}, {add_ln691_1_reg_587}}, {13'd0}}, {add_ln691_reg_582}};

assign tmp_8_fu_388_p4 = {{select_ln126_fu_365_p3[37:19]}};

assign tmp_fu_241_p3 = {{select_ln121_2_reg_500}, {6'd0}};

assign tmp_s_fu_407_p4 = {{select_ln126_fu_365_p3[56:38]}};

assign trunc_ln215_fu_286_p1 = HEAD_INST_matmul_weight_arr_V_q0[7:0];

assign trunc_ln691_fu_375_p1 = select_ln126_fu_365_p3[18:0];

assign zext_ln121_fu_282_p1 = select_ln121_2_reg_500_pp0_iter1_reg;

assign zext_ln215_1_fu_258_p1 = select_ln121_reg_493;

assign zext_ln215_2_fu_267_p1 = add_ln215_fu_261_p2;

assign zext_ln215_fu_248_p1 = tmp_fu_241_p3;

endmodule //HEAD_matmul_step2_mac
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 71;
parameter AWIDTH = 8;
parameter MEM_SIZE = 250;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/HEAD/HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd71;
parameter AddressRange = 32'd250;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V_rom HEAD_matmul_step2_mac_HEAD_INST_matmul_bias_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "block" *) module HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 32;
parameter AWIDTH = 16;
parameter MEM_SIZE = 48000;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/HEAD/HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd48000;
parameter AddressWidth = 32'd16;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V_rom HEAD_matmul_step2_mac_HEAD_INST_matmul_weight_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

(* use_dsp = "no" *) module HEAD_mul_8s_8s_16_1_1_Mul_LUT_0(a, b, p);
input[8 - 1 : 0] a; 
input[8 - 1 : 0] b; 
output[16 - 1 : 0] p;

assign p = $signed(a) * $signed(b);
endmodule
`timescale 1 ns / 1 ps
module HEAD_mul_8s_8s_16_1_1(
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



HEAD_mul_8s_8s_16_1_1_Mul_LUT_0 HEAD_mul_8s_8s_16_1_1_Mul_LUT_0_U(
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule


`timescale 1 ns / 1 ps

  module HEAD_mul_mul_13s_11ns_24_4_1_DSP48_2(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input signed [13 - 1 : 0] a;
input [11 - 1 : 0] b;
output signed [24 - 1 : 0] p;

reg signed [24 - 1 : 0] p_reg; 

reg signed [13 - 1 : 0] a_reg; 
reg [11 - 1 : 0] b_reg; 

reg signed [24 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= $signed (a_reg) * $signed ({1'b0, b_reg});
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module HEAD_mul_mul_13s_11ns_24_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



HEAD_mul_mul_13s_11ns_24_4_1_DSP48_2 HEAD_mul_mul_13s_11ns_24_4_1_DSP48_2_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule


`timescale 1 ns / 1 ps

  module HEAD_mul_mul_13s_13s_26_4_1_DSP48_1(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input signed [13 - 1 : 0] a;
input signed [13 - 1 : 0] b;
output signed [26 - 1 : 0] p;

reg signed [26 - 1 : 0] p_reg; 

reg signed [13 - 1 : 0] a_reg; 
reg signed [13 - 1 : 0] b_reg; 

reg signed [26 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= $signed (a_reg) * $signed (b_reg);
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module HEAD_mul_mul_13s_13s_26_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



HEAD_mul_mul_13s_13s_26_4_1_DSP48_1 HEAD_mul_mul_13s_13s_26_4_1_DSP48_1_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HEAD_select_cls (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        i_stream_V_TDATA,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        cls_sm_din,
        cls_sm_full_n,
        cls_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] i_stream_V_TDATA;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
output  [15:0] cls_sm_din;
input   cls_sm_full_n;
output   cls_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg i_stream_V_TREADY;
reg cls_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    i_stream_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln113_fu_102_p2;
reg    cls_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] select_ln113_reg_206;
reg   [14:0] indvar_flatten_reg_63;
reg   [6:0] tt_reg_74;
reg   [7:0] ciat_reg_85;
wire   [14:0] add_ln113_fu_96_p2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln113_reg_172;
wire   [0:0] cmp3_mid1_fu_114_p2;
reg   [0:0] cmp3_mid1_reg_176;
wire   [0:0] cmp32_fu_120_p2;
reg   [0:0] cmp32_reg_181;
wire   [0:0] icmp_ln114_fu_126_p2;
reg   [0:0] icmp_ln114_reg_186;
wire   [6:0] select_ln113_1_fu_132_p3;
wire   [12:0] trunc_ln145_fu_140_p1;
reg   [12:0] trunc_ln145_reg_196;
reg   [12:0] trunc_ln145_reg_196_pp0_iter1_reg;
wire   [7:0] ciat_1_fu_150_p3;
wire   [0:0] select_ln113_fu_158_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_01001;
wire   [6:0] tt_2_fu_108_p2;
wire   [7:0] add_ln114_fu_144_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ciat_reg_85 <= ciat_1_fu_150_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ciat_reg_85 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_63 <= add_ln113_fu_96_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_63 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt_reg_74 <= select_ln113_1_fu_132_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_74 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp32_reg_181 <= cmp32_fu_120_p2;
        cmp3_mid1_reg_176 <= cmp3_mid1_fu_114_p2;
        icmp_ln114_reg_186 <= icmp_ln114_fu_126_p2;
        trunc_ln145_reg_196 <= trunc_ln145_fu_140_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln113_reg_172 <= icmp_ln113_fu_102_p2;
        trunc_ln145_reg_196_pp0_iter1_reg <= trunc_ln145_reg_196;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_reg_172 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln113_reg_206 <= select_ln113_fu_158_p3;
    end
end

always @ (*) begin
    if ((icmp_ln113_fu_102_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cls_sm_blk_n = cls_sm_full_n;
    end else begin
        cls_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cls_sm_write = 1'b1;
    end else begin
        cls_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_V_TDATA_blk_n = i_stream_V_TVALID;
    end else begin
        i_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln113_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_V_TREADY = 1'b1;
    end else begin
        i_stream_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln113_fu_102_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln113_fu_102_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_fu_96_p2 = (indvar_flatten_reg_63 + 15'd1);

assign add_ln114_fu_144_p2 = (ciat_reg_85 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((select_ln113_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cls_sm_full_n == 1'b0)) | ((icmp_ln113_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((select_ln113_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cls_sm_full_n == 1'b0)) | ((icmp_ln113_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((select_ln113_reg_206 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (cls_sm_full_n == 1'b0)) | ((icmp_ln113_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln113_fu_102_p2 == 1'd0) & (i_stream_V_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((select_ln113_reg_206 == 1'd1) & (cls_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign ciat_1_fu_150_p3 = ((icmp_ln114_fu_126_p2[0:0] == 1'b1) ? 8'd1 : add_ln114_fu_144_p2);

assign cls_sm_din = trunc_ln145_reg_196_pp0_iter1_reg;

assign cmp32_fu_120_p2 = ((tt_reg_74 == 7'd0) ? 1'b1 : 1'b0);

assign cmp3_mid1_fu_114_p2 = ((tt_2_fu_108_p2 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_102_p2 = ((indvar_flatten_reg_63 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_126_p2 = ((ciat_reg_85 == 8'd192) ? 1'b1 : 1'b0);

assign select_ln113_1_fu_132_p3 = ((icmp_ln114_fu_126_p2[0:0] == 1'b1) ? tt_2_fu_108_p2 : tt_reg_74);

assign select_ln113_fu_158_p3 = ((icmp_ln114_reg_186[0:0] == 1'b1) ? cmp3_mid1_reg_176 : cmp32_reg_181);

assign start_out = real_start;

assign trunc_ln145_fu_140_p1 = i_stream_V_TDATA[12:0];

assign tt_2_fu_108_p2 = (tt_reg_74 + 7'd1);

endmodule //HEAD_select_cls
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_start_for_do_adapt_1_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_start_for_do_adapt_1_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_start_for_do_adapt_1_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_start_for_do_adapt_1_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_start_for_do_layernorm_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_start_for_do_layernorm_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_start_for_do_layernorm_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_start_for_do_layernorm_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_start_for_do_matmul_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_start_for_do_matmul_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_start_for_do_matmul_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_start_for_do_matmul_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_start_for_matmul_step1_cache_window_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_start_for_matmul_step1_cache_window_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_start_for_matmul_step1_cache_window_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_start_for_matmul_step1_cache_window_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module HEAD_start_for_matmul_step2_mac_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module HEAD_start_for_matmul_step2_mac_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

HEAD_start_for_matmul_step2_mac_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_HEAD_start_for_matmul_step2_mac_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

