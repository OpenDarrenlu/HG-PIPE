/* verilator lint_off PINMISSING */
/* verilator lint_off CASEX */
/* verilator lint_off CASEOVERLAP */
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ATTN0_ATTN0,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-sfvc784-1-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.893625,HLS_SYN_LAT=100443,HLS_SYN_TPT=100359,HLS_SYN_MEM=256,HLS_SYN_DSP=0,HLS_SYN_FF=38706,HLS_SYN_LUT=71252,HLS_VERSION=2020_2}" *)

module ATTN0 (
        i_stream_V_TDATA,
        o_stream_V_TDATA,
        ap_clk,
        ap_rst_n,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        o_stream_V_TVALID,
        o_stream_V_TREADY,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_V_TDATA;
output  [31:0] o_stream_V_TDATA;
input   ap_clk;
input   ap_rst_n;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire   [31:0] do_attn_U0_o_stream_V_TDATA;
 reg    ap_rst_n_inv;
wire    do_attn_U0_i_stream_V_TREADY;
wire    do_attn_U0_ap_start;
wire    do_attn_U0_o_stream_V_TVALID;
wire    do_attn_U0_ap_done;
wire    do_attn_U0_ap_ready;
wire    do_attn_U0_ap_idle;
wire    do_attn_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    do_attn_U0_start_full_n;
wire    do_attn_U0_start_write;

ATTN0_do_attn do_attn_U0(
    .i_stream_V_TDATA(i_stream_V_TDATA),
    .o_stream_V_TDATA(do_attn_U0_o_stream_V_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .i_stream_V_TVALID(i_stream_V_TVALID),
    .i_stream_V_TREADY(do_attn_U0_i_stream_V_TREADY),
    .ap_start(do_attn_U0_ap_start),
    .o_stream_V_TVALID(do_attn_U0_o_stream_V_TVALID),
    .o_stream_V_TREADY(o_stream_V_TREADY),
    .ap_done(do_attn_U0_ap_done),
    .ap_ready(do_attn_U0_ap_ready),
    .ap_idle(do_attn_U0_ap_idle),
    .ap_continue(do_attn_U0_ap_continue)
);

assign ap_done = do_attn_U0_ap_done;

assign ap_idle = do_attn_U0_ap_idle;

assign ap_ready = do_attn_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_attn_U0_ap_done;

assign ap_sync_ready = do_attn_U0_ap_ready;

assign do_attn_U0_ap_continue = ap_continue;

assign do_attn_U0_ap_start = ap_start;

assign do_attn_U0_start_full_n = 1'b1;

assign do_attn_U0_start_write = 1'b0;

assign i_stream_V_TREADY = do_attn_U0_i_stream_V_TREADY;

assign o_stream_V_TDATA = do_attn_U0_o_stream_V_TDATA;

assign o_stream_V_TVALID = do_attn_U0_o_stream_V_TVALID;

endmodule //ATTN0
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
output  [111:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg rq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    rq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_475;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_reg_560;
reg   [14:0] indvar_flatten59_reg_123;
reg   [7:0] indvar_flatten_reg_134;
reg   [2:0] t_reg_145;
wire   [14:0] add_ln78_fu_156_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_162_p2;
wire   [2:0] t_22_fu_204_p3;
reg   [2:0] t_22_reg_479;
wire   [7:0] select_ln79_fu_218_p3;
reg   [2:0] p_load78_reg_490;
reg   [2:0] p_load77_reg_495;
reg   [2:0] p_load76_reg_500;
reg   [2:0] p_load75_reg_505;
reg   [2:0] p_load74_reg_510;
reg   [2:0] p_load71_reg_515;
reg   [2:0] p_load70_reg_520;
reg   [2:0] p_load69_reg_525;
reg   [2:0] p_load68_reg_530;
reg   [2:0] p_load67_reg_535;
reg   [2:0] p_load72_reg_540;
reg   [2:0] p_load_reg_545;
wire   [2:0] trunc_ln145_fu_318_p1;
reg   [2:0] trunc_ln145_reg_550;
reg   [2:0] trunc_ln145_s_reg_555;
wire   [0:0] icmp_ln83_fu_332_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_149_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_355_fu_66;
reg   [2:0] empty_356_fu_70;
reg   [2:0] empty_357_fu_74;
reg   [2:0] empty_358_fu_78;
reg   [2:0] empty_359_fu_82;
reg   [2:0] empty_360_fu_86;
reg   [2:0] empty_361_fu_90;
reg   [2:0] empty_362_fu_94;
reg   [2:0] empty_363_fu_98;
reg   [2:0] empty_364_fu_102;
reg   [2:0] empty_365_fu_106;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_168_p2;
wire   [0:0] icmp_ln8365_fu_180_p2;
wire   [0:0] xor_ln78_fu_174_p2;
wire   [0:0] and_ln78_fu_186_p2;
wire   [0:0] or_ln83_fu_198_p2;
wire   [2:0] add_ln83_fu_192_p2;
wire   [7:0] add_ln79_fu_212_p2;
wire   [106:0] tmp_210_fu_347_p28;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten59_reg_123 <= add_ln78_fu_156_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_123 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_134 <= select_ln79_fu_218_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_134 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_145 <= t_22_reg_479;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_145 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_355_fu_66 <= empty_356_fu_70;
        empty_356_fu_70 <= empty_357_fu_74;
        empty_357_fu_74 <= empty_358_fu_78;
        empty_358_fu_78 <= empty_359_fu_82;
        empty_360_fu_86 <= empty_361_fu_90;
        empty_361_fu_90 <= empty_362_fu_94;
        empty_362_fu_94 <= empty_363_fu_98;
        empty_363_fu_98 <= empty_364_fu_102;
        empty_364_fu_102 <= empty_365_fu_106;
        empty_fu_62 <= empty_355_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_359_fu_82 <= trunc_ln145_fu_318_p1;
        empty_365_fu_106 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_475 <= icmp_ln78_fu_162_p2;
        p_load67_reg_535 <= empty_364_fu_102;
        p_load68_reg_530 <= empty_363_fu_98;
        p_load69_reg_525 <= empty_362_fu_94;
        p_load70_reg_520 <= empty_361_fu_90;
        p_load71_reg_515 <= empty_360_fu_86;
        p_load74_reg_510 <= empty_358_fu_78;
        p_load75_reg_505 <= empty_357_fu_74;
        p_load76_reg_500 <= empty_356_fu_70;
        p_load77_reg_495 <= empty_355_fu_66;
        p_load78_reg_490 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_560 <= icmp_ln83_fu_332_p2;
        p_load72_reg_540 <= empty_359_fu_82;
        p_load_reg_545 <= empty_365_fu_106;
        trunc_ln145_reg_550 <= trunc_ln145_fu_318_p1;
        trunc_ln145_s_reg_555 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_22_reg_479 <= t_22_fu_204_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_149_p4 = t_22_reg_479;
    end else begin
        ap_phi_mux_t_phi_fu_149_p4 = t_reg_145;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_blk_n = rq_sm_head1_empty_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_read = 1'b1;
    end else begin
        rq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_156_p2 = (indvar_flatten59_reg_123 + 15'd1);

assign add_ln79_fu_212_p2 = (indvar_flatten_reg_134 + 8'd1);

assign add_ln83_fu_192_p2 = (ap_phi_mux_t_phi_fu_149_p4 + 3'd1);

assign adpt_sm_din = tmp_210_fu_347_p28;

assign and_ln78_fu_186_p2 = (xor_ln78_fu_174_p2 & icmp_ln8365_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_475 == 1'd0) & (rq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_reg_560 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_162_p2 = ((indvar_flatten59_reg_123 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_168_p2 = ((indvar_flatten_reg_134 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln8365_fu_180_p2 = ((ap_phi_mux_t_phi_fu_149_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_332_p2 = ((t_22_reg_479 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln83_fu_198_p2 = (icmp_ln79_fu_168_p2 | and_ln78_fu_186_p2);

assign select_ln79_fu_218_p3 = ((icmp_ln79_fu_168_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_212_p2);

assign start_out = real_start;

assign t_22_fu_204_p3 = ((or_ln83_fu_198_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_192_p2);

assign tmp_210_fu_347_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_555}, {5'd0}}, {p_load_reg_545}}, {5'd0}}, {p_load67_reg_535}}, {5'd0}}, {p_load68_reg_530}}, {5'd0}}, {p_load69_reg_525}}, {5'd0}}, {p_load70_reg_520}}, {5'd0}}, {p_load71_reg_515}}, {5'd0}}, {trunc_ln145_reg_550}}, {5'd0}}, {p_load72_reg_540}}, {5'd0}}, {p_load74_reg_510}}, {5'd0}}, {p_load75_reg_505}}, {5'd0}}, {p_load76_reg_500}}, {5'd0}}, {p_load77_reg_495}}, {5'd0}}, {p_load78_reg_490}};

assign trunc_ln145_fu_318_p1 = rq_sm_head1_dout[2:0];

assign xor_ln78_fu_174_p2 = (icmp_ln79_fu_168_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt135 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [95:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg lnq_sm_cp1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    lnq_sm_cp1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_433;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_4_reg_508;
reg   [14:0] indvar_flatten51_reg_115;
reg   [8:0] indvar_flatten_reg_126;
reg   [2:0] t_reg_137;
wire   [14:0] add_ln78_fu_148_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_154_p2;
wire   [2:0] t_12_fu_196_p3;
reg   [2:0] t_12_reg_437;
wire   [8:0] select_ln79_fu_210_p3;
reg   [2:0] p_load68_reg_448;
reg   [2:0] p_load67_reg_453;
reg   [2:0] p_load66_reg_458;
reg   [2:0] p_load65_reg_463;
reg   [2:0] p_load62_reg_468;
reg   [2:0] p_load61_reg_473;
reg   [2:0] p_load60_reg_478;
reg   [2:0] p_load59_reg_483;
reg   [2:0] p_load63_reg_488;
reg   [2:0] p_load_reg_493;
wire   [2:0] trunc_ln145_fu_294_p1;
reg   [2:0] trunc_ln145_reg_498;
reg   [2:0] trunc_ln145_s_reg_503;
wire   [0:0] icmp_ln83_4_fu_308_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_141_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_305_fu_66;
reg   [2:0] empty_306_fu_70;
reg   [2:0] empty_307_fu_74;
reg   [2:0] empty_308_fu_78;
reg   [2:0] empty_309_fu_82;
reg   [2:0] empty_310_fu_86;
reg   [2:0] empty_311_fu_90;
reg   [2:0] empty_312_fu_94;
reg   [2:0] empty_313_fu_98;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_160_p2;
wire   [0:0] icmp_ln83_fu_172_p2;
wire   [0:0] xor_ln78_fu_166_p2;
wire   [0:0] and_ln78_fu_178_p2;
wire   [0:0] or_ln83_fu_190_p2;
wire   [2:0] add_ln83_fu_184_p2;
wire   [8:0] add_ln79_fu_204_p2;
wire   [90:0] tmp_257_fu_323_p24;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten51_reg_115 <= add_ln78_fu_148_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten51_reg_115 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_126 <= select_ln79_fu_210_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_126 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_137 <= t_12_reg_437;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_137 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_305_fu_66 <= empty_306_fu_70;
        empty_306_fu_70 <= empty_307_fu_74;
        empty_307_fu_74 <= empty_308_fu_78;
        empty_309_fu_82 <= empty_310_fu_86;
        empty_310_fu_86 <= empty_311_fu_90;
        empty_311_fu_90 <= empty_312_fu_94;
        empty_312_fu_94 <= empty_313_fu_98;
        empty_fu_62 <= empty_305_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_308_fu_78 <= trunc_ln145_fu_294_p1;
        empty_313_fu_98 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_433 <= icmp_ln78_fu_154_p2;
        p_load59_reg_483 <= empty_312_fu_94;
        p_load60_reg_478 <= empty_311_fu_90;
        p_load61_reg_473 <= empty_310_fu_86;
        p_load62_reg_468 <= empty_309_fu_82;
        p_load65_reg_463 <= empty_307_fu_74;
        p_load66_reg_458 <= empty_306_fu_70;
        p_load67_reg_453 <= empty_305_fu_66;
        p_load68_reg_448 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_4_reg_508 <= icmp_ln83_4_fu_308_p2;
        p_load63_reg_488 <= empty_308_fu_78;
        p_load_reg_493 <= empty_313_fu_98;
        trunc_ln145_reg_498 <= trunc_ln145_fu_294_p1;
        trunc_ln145_s_reg_503 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_12_reg_437 <= t_12_fu_196_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_4_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_4_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_141_p4 = t_12_reg_437;
    end else begin
        ap_phi_mux_t_phi_fu_141_p4 = t_reg_137;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_empty_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_read = 1'b1;
    end else begin
        lnq_sm_cp1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_148_p2 = (indvar_flatten51_reg_115 + 15'd1);

assign add_ln79_fu_204_p2 = (indvar_flatten_reg_126 + 9'd1);

assign add_ln83_fu_184_p2 = (ap_phi_mux_t_phi_fu_141_p4 + 3'd1);

assign adpt_sm_din = tmp_257_fu_323_p24;

assign and_ln78_fu_178_p2 = (xor_ln78_fu_166_p2 & icmp_ln83_fu_172_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_4_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_4_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_4_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_433 == 1'd0) & (lnq_sm_cp1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_4_reg_508 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_154_p2 = ((indvar_flatten51_reg_115 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_160_p2 = ((indvar_flatten_reg_126 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_4_fu_308_p2 = ((t_12_reg_437 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_172_p2 = ((ap_phi_mux_t_phi_fu_141_p4 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln83_fu_190_p2 = (icmp_ln79_fu_160_p2 | and_ln78_fu_178_p2);

assign select_ln79_fu_210_p3 = ((icmp_ln79_fu_160_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_204_p2);

assign start_out = real_start;

assign t_12_fu_196_p3 = ((or_ln83_fu_190_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_184_p2);

assign tmp_257_fu_323_p24 = {{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_503}, {5'd0}}, {p_load_reg_493}}, {5'd0}}, {p_load59_reg_483}}, {5'd0}}, {p_load60_reg_478}}, {5'd0}}, {p_load61_reg_473}}, {5'd0}}, {p_load62_reg_468}}, {5'd0}}, {trunc_ln145_reg_498}}, {5'd0}}, {p_load63_reg_488}}, {5'd0}}, {p_load65_reg_463}}, {5'd0}}, {p_load66_reg_458}}, {5'd0}}, {p_load67_reg_453}}, {5'd0}}, {p_load68_reg_448}};

assign trunc_ln145_fu_294_p1 = lnq_sm_cp1_dout[2:0];

assign xor_ln78_fu_166_p2 = (icmp_ln79_fu_160_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt135
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt138 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [383:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg q_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_748;
reg   [0:0] icmp_ln45_reg_748_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_767;
reg    q_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_748_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_195;
reg   [8:0] indvar_flatten_reg_206;
reg   [3:0] t_reg_217;
reg   [263:0] vec_i_data_M_elems_V_2_reg_228;
reg   [10:0] p_fca_0_0_1_0_0_0_extract282_reg_239;
reg   [10:0] p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [14:0] add_ln45_fu_294_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_300_p2;
wire   [3:0] select_ln46_fu_336_p3;
reg   [3:0] select_ln46_reg_752;
wire   [3:0] t_11_fu_344_p2;
wire   [8:0] select_ln46_6_fu_356_p3;
wire   [0:0] icmp_ln50_fu_364_p2;
wire   [10:0] trunc_ln50_fu_369_p1;
reg   [10:0] tmp_612_reg_781;
wire   [263:0] vec_i_data_M_elems_V_8_fu_717_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [263:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4;
wire   [263:0] vec_i_data_M_elems_V_fu_652_p5;
wire   [263:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln46_fu_306_p2;
wire   [0:0] icmp_ln47_fu_318_p2;
wire   [0:0] xor_ln45_fu_312_p2;
wire   [0:0] and_ln45_fu_324_p2;
wire   [0:0] or_ln46_fu_330_p2;
wire   [8:0] add_ln46_fu_350_p2;
wire   [10:0] trunc_ln50_s_fu_594_p4;
wire   [10:0] trunc_ln50_43_fu_584_p4;
wire   [10:0] trunc_ln50_42_fu_574_p4;
wire   [10:0] trunc_ln50_41_fu_564_p4;
wire   [10:0] trunc_ln50_40_fu_554_p4;
wire   [10:0] trunc_ln50_39_fu_544_p4;
wire   [10:0] trunc_ln50_38_fu_534_p4;
wire   [10:0] trunc_ln50_37_fu_524_p4;
wire   [10:0] trunc_ln50_36_fu_514_p4;
wire   [10:0] trunc_ln50_35_fu_504_p4;
wire   [10:0] trunc_ln50_34_fu_494_p4;
wire   [10:0] trunc_ln50_33_fu_484_p4;
wire   [10:0] trunc_ln50_32_fu_474_p4;
wire   [10:0] trunc_ln50_31_fu_464_p4;
wire   [10:0] trunc_ln50_30_fu_454_p4;
wire   [10:0] trunc_ln50_29_fu_444_p4;
wire   [10:0] trunc_ln50_28_fu_434_p4;
wire   [10:0] trunc_ln50_27_fu_424_p4;
wire   [10:0] trunc_ln50_26_fu_414_p4;
wire   [10:0] trunc_ln50_25_fu_404_p4;
wire   [10:0] trunc_ln50_24_fu_394_p4;
wire   [10:0] trunc_ln50_23_fu_384_p4;
wire   [241:0] tmp_s_fu_604_p23;
wire   [120:0] tmp_613_fu_685_p4;
wire   [98:0] tmp_614_fu_695_p4;
wire   [241:0] tmp_615_fu_705_p5;
wire   [26:0] tmp_616_fu_729_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= p_fca_0_0_1_0_0_0_extract281_reg_272;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= trunc_ln50_fu_369_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten17_reg_195 <= add_ln45_fu_294_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_195 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten_reg_206 <= select_ln46_6_fu_356_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= p_fca_0_0_1_0_0_0_extract282_reg_239;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        t_reg_217 <= t_11_fu_344_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_748 <= icmp_ln45_fu_300_p2;
        icmp_ln45_reg_748_pp0_iter1_reg <= icmp_ln45_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_748_pp0_iter2_reg <= icmp_ln45_reg_748_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_767 <= icmp_ln50_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract282_reg_239 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_228 <= vec_i_data_M_elems_V_8_fu_717_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        select_ln46_reg_752 <= select_ln46_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_612_reg_781 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[142:132]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_767 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_2_reg_228;
        end else if ((icmp_ln50_reg_767 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_fu_652_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        q_sm_blk_n = q_sm_full_n;
    end else begin
        q_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_sm_write = 1'b1;
    end else begin
        q_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_294_p2 = (indvar_flatten17_reg_195 + 15'd1);

assign add_ln46_fu_350_p2 = (indvar_flatten_reg_206 + 9'd1);

assign and_ln45_fu_324_p2 = (xor_ln45_fu_312_p2 & icmp_ln47_fu_318_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (q_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_300_p2 = ((indvar_flatten17_reg_195 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_306_p2 = ((indvar_flatten_reg_206 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_318_p2 = ((t_reg_217 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_364_p2 = ((select_ln46_reg_752 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_330_p2 = (icmp_ln46_fu_306_p2 | and_ln45_fu_324_p2);

assign q_sm_din = tmp_616_fu_729_p4;

assign select_ln46_6_fu_356_p3 = ((icmp_ln46_fu_306_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_350_p2);

assign select_ln46_fu_336_p3 = ((or_ln46_fu_330_p2[0:0] == 1'b1) ? 4'd0 : t_reg_217);

assign t_11_fu_344_p2 = (select_ln46_fu_336_p3 + 4'd1);

assign tmp_613_fu_685_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[263:143]}};

assign tmp_614_fu_695_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[131:33]}};

assign tmp_615_fu_705_p5 = {{{{{{11'd0}, {tmp_613_fu_685_p4}}}, {11'd0}}}, {tmp_614_fu_695_p4}};

assign tmp_616_fu_729_p4 = {{{tmp_612_reg_781}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284}};

assign tmp_s_fu_604_p23 = {{{{{{{{{{{{{{{{{{{{{{trunc_ln50_s_fu_594_p4}, {trunc_ln50_43_fu_584_p4}}, {trunc_ln50_42_fu_574_p4}}, {trunc_ln50_41_fu_564_p4}}, {trunc_ln50_40_fu_554_p4}}, {trunc_ln50_39_fu_544_p4}}, {trunc_ln50_38_fu_534_p4}}, {trunc_ln50_37_fu_524_p4}}, {trunc_ln50_36_fu_514_p4}}, {trunc_ln50_35_fu_504_p4}}, {trunc_ln50_34_fu_494_p4}}, {trunc_ln50_33_fu_484_p4}}, {trunc_ln50_32_fu_474_p4}}, {trunc_ln50_31_fu_464_p4}}, {trunc_ln50_30_fu_454_p4}}, {trunc_ln50_29_fu_444_p4}}, {trunc_ln50_28_fu_434_p4}}, {trunc_ln50_27_fu_424_p4}}, {trunc_ln50_26_fu_414_p4}}, {trunc_ln50_25_fu_404_p4}}, {trunc_ln50_24_fu_394_p4}}, {trunc_ln50_23_fu_384_p4}};

assign trunc_ln50_23_fu_384_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_24_fu_394_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_25_fu_404_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_26_fu_414_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_27_fu_424_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_28_fu_434_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_29_fu_444_p4 = {{mac_sm_dout[138:128]}};

assign trunc_ln50_30_fu_454_p4 = {{mac_sm_dout[154:144]}};

assign trunc_ln50_31_fu_464_p4 = {{mac_sm_dout[170:160]}};

assign trunc_ln50_32_fu_474_p4 = {{mac_sm_dout[186:176]}};

assign trunc_ln50_33_fu_484_p4 = {{mac_sm_dout[202:192]}};

assign trunc_ln50_34_fu_494_p4 = {{mac_sm_dout[218:208]}};

assign trunc_ln50_35_fu_504_p4 = {{mac_sm_dout[234:224]}};

assign trunc_ln50_36_fu_514_p4 = {{mac_sm_dout[250:240]}};

assign trunc_ln50_37_fu_524_p4 = {{mac_sm_dout[266:256]}};

assign trunc_ln50_38_fu_534_p4 = {{mac_sm_dout[282:272]}};

assign trunc_ln50_39_fu_544_p4 = {{mac_sm_dout[298:288]}};

assign trunc_ln50_40_fu_554_p4 = {{mac_sm_dout[314:304]}};

assign trunc_ln50_41_fu_564_p4 = {{mac_sm_dout[330:320]}};

assign trunc_ln50_42_fu_574_p4 = {{mac_sm_dout[346:336]}};

assign trunc_ln50_43_fu_584_p4 = {{mac_sm_dout[362:352]}};

assign trunc_ln50_fu_369_p1 = mac_sm_dout[10:0];

assign trunc_ln50_s_fu_594_p4 = {{mac_sm_dout[378:368]}};

assign vec_i_data_M_elems_V_8_fu_717_p5 = {{tmp_615_fu_705_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_652_p5 = {{tmp_s_fu_604_p23}, {vec_i_data_M_elems_V_2_reg_228[21:0]}};

assign xor_ln45_fu_312_p2 = (icmp_ln46_fu_306_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt138
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt139 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [95:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg lnq_sm_cp1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    lnq_sm_cp1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_433;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_3_reg_508;
reg   [14:0] indvar_flatten51_reg_115;
reg   [8:0] indvar_flatten_reg_126;
reg   [2:0] t_reg_137;
wire   [14:0] add_ln78_fu_148_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_154_p2;
wire   [2:0] t_10_fu_196_p3;
reg   [2:0] t_10_reg_437;
wire   [8:0] select_ln79_fu_210_p3;
reg   [2:0] p_load68_reg_448;
reg   [2:0] p_load67_reg_453;
reg   [2:0] p_load66_reg_458;
reg   [2:0] p_load65_reg_463;
reg   [2:0] p_load62_reg_468;
reg   [2:0] p_load61_reg_473;
reg   [2:0] p_load60_reg_478;
reg   [2:0] p_load59_reg_483;
reg   [2:0] p_load63_reg_488;
reg   [2:0] p_load_reg_493;
wire   [2:0] trunc_ln145_fu_294_p1;
reg   [2:0] trunc_ln145_reg_498;
reg   [2:0] trunc_ln145_s_reg_503;
wire   [0:0] icmp_ln83_3_fu_308_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_141_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_295_fu_66;
reg   [2:0] empty_296_fu_70;
reg   [2:0] empty_297_fu_74;
reg   [2:0] empty_298_fu_78;
reg   [2:0] empty_299_fu_82;
reg   [2:0] empty_300_fu_86;
reg   [2:0] empty_301_fu_90;
reg   [2:0] empty_302_fu_94;
reg   [2:0] empty_303_fu_98;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_160_p2;
wire   [0:0] icmp_ln83_fu_172_p2;
wire   [0:0] xor_ln78_fu_166_p2;
wire   [0:0] and_ln78_fu_178_p2;
wire   [0:0] or_ln83_fu_190_p2;
wire   [2:0] add_ln83_fu_184_p2;
wire   [8:0] add_ln79_fu_204_p2;
wire   [90:0] tmp_244_fu_323_p24;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten51_reg_115 <= add_ln78_fu_148_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten51_reg_115 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_126 <= select_ln79_fu_210_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_126 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_137 <= t_10_reg_437;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_137 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_295_fu_66 <= empty_296_fu_70;
        empty_296_fu_70 <= empty_297_fu_74;
        empty_297_fu_74 <= empty_298_fu_78;
        empty_299_fu_82 <= empty_300_fu_86;
        empty_300_fu_86 <= empty_301_fu_90;
        empty_301_fu_90 <= empty_302_fu_94;
        empty_302_fu_94 <= empty_303_fu_98;
        empty_fu_62 <= empty_295_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_298_fu_78 <= trunc_ln145_fu_294_p1;
        empty_303_fu_98 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_433 <= icmp_ln78_fu_154_p2;
        p_load59_reg_483 <= empty_302_fu_94;
        p_load60_reg_478 <= empty_301_fu_90;
        p_load61_reg_473 <= empty_300_fu_86;
        p_load62_reg_468 <= empty_299_fu_82;
        p_load65_reg_463 <= empty_297_fu_74;
        p_load66_reg_458 <= empty_296_fu_70;
        p_load67_reg_453 <= empty_295_fu_66;
        p_load68_reg_448 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_3_reg_508 <= icmp_ln83_3_fu_308_p2;
        p_load63_reg_488 <= empty_298_fu_78;
        p_load_reg_493 <= empty_303_fu_98;
        trunc_ln145_reg_498 <= trunc_ln145_fu_294_p1;
        trunc_ln145_s_reg_503 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_10_reg_437 <= t_10_fu_196_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_3_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_3_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_141_p4 = t_10_reg_437;
    end else begin
        ap_phi_mux_t_phi_fu_141_p4 = t_reg_137;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_empty_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_read = 1'b1;
    end else begin
        lnq_sm_cp1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_148_p2 = (indvar_flatten51_reg_115 + 15'd1);

assign add_ln79_fu_204_p2 = (indvar_flatten_reg_126 + 9'd1);

assign add_ln83_fu_184_p2 = (ap_phi_mux_t_phi_fu_141_p4 + 3'd1);

assign adpt_sm_din = tmp_244_fu_323_p24;

assign and_ln78_fu_178_p2 = (xor_ln78_fu_166_p2 & icmp_ln83_fu_172_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_3_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_3_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_3_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_433 == 1'd0) & (lnq_sm_cp1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_3_reg_508 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_154_p2 = ((indvar_flatten51_reg_115 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_160_p2 = ((indvar_flatten_reg_126 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_3_fu_308_p2 = ((t_10_reg_437 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_172_p2 = ((ap_phi_mux_t_phi_fu_141_p4 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln83_fu_190_p2 = (icmp_ln79_fu_160_p2 | and_ln78_fu_178_p2);

assign select_ln79_fu_210_p3 = ((icmp_ln79_fu_160_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_204_p2);

assign start_out = real_start;

assign t_10_fu_196_p3 = ((or_ln83_fu_190_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_184_p2);

assign tmp_244_fu_323_p24 = {{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_503}, {5'd0}}, {p_load_reg_493}}, {5'd0}}, {p_load59_reg_483}}, {5'd0}}, {p_load60_reg_478}}, {5'd0}}, {p_load61_reg_473}}, {5'd0}}, {p_load62_reg_468}}, {5'd0}}, {trunc_ln145_reg_498}}, {5'd0}}, {p_load63_reg_488}}, {5'd0}}, {p_load65_reg_463}}, {5'd0}}, {p_load66_reg_458}}, {5'd0}}, {p_load67_reg_453}}, {5'd0}}, {p_load68_reg_448}};

assign trunc_ln145_fu_294_p1 = lnq_sm_cp1_dout[2:0];

assign xor_ln78_fu_166_p2 = (icmp_ln79_fu_160_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt139
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt142 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [383:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg q_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_748;
reg   [0:0] icmp_ln45_reg_748_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_767;
reg    q_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_748_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_195;
reg   [8:0] indvar_flatten_reg_206;
reg   [3:0] t_reg_217;
reg   [263:0] vec_i_data_M_elems_V_2_reg_228;
reg   [10:0] p_fca_0_0_1_0_0_0_extract282_reg_239;
reg   [10:0] p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [14:0] add_ln45_fu_294_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_300_p2;
wire   [3:0] select_ln46_fu_336_p3;
reg   [3:0] select_ln46_reg_752;
wire   [3:0] t_9_fu_344_p2;
wire   [8:0] select_ln46_5_fu_356_p3;
wire   [0:0] icmp_ln50_fu_364_p2;
wire   [10:0] trunc_ln50_fu_369_p1;
reg   [10:0] tmp_606_reg_781;
wire   [263:0] vec_i_data_M_elems_V_7_fu_717_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [263:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4;
wire   [263:0] vec_i_data_M_elems_V_fu_652_p5;
wire   [263:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln46_fu_306_p2;
wire   [0:0] icmp_ln47_fu_318_p2;
wire   [0:0] xor_ln45_fu_312_p2;
wire   [0:0] and_ln45_fu_324_p2;
wire   [0:0] or_ln46_fu_330_p2;
wire   [8:0] add_ln46_fu_350_p2;
wire   [10:0] trunc_ln50_43_fu_594_p4;
wire   [10:0] trunc_ln50_42_fu_584_p4;
wire   [10:0] trunc_ln50_41_fu_574_p4;
wire   [10:0] trunc_ln50_40_fu_564_p4;
wire   [10:0] trunc_ln50_39_fu_554_p4;
wire   [10:0] trunc_ln50_38_fu_544_p4;
wire   [10:0] trunc_ln50_37_fu_534_p4;
wire   [10:0] trunc_ln50_s_fu_524_p4;
wire   [10:0] trunc_ln50_36_fu_514_p4;
wire   [10:0] trunc_ln50_35_fu_504_p4;
wire   [10:0] trunc_ln50_34_fu_494_p4;
wire   [10:0] trunc_ln50_33_fu_484_p4;
wire   [10:0] trunc_ln50_32_fu_474_p4;
wire   [10:0] trunc_ln50_31_fu_464_p4;
wire   [10:0] trunc_ln50_30_fu_454_p4;
wire   [10:0] trunc_ln50_29_fu_444_p4;
wire   [10:0] trunc_ln50_28_fu_434_p4;
wire   [10:0] trunc_ln50_27_fu_424_p4;
wire   [10:0] trunc_ln50_26_fu_414_p4;
wire   [10:0] trunc_ln50_25_fu_404_p4;
wire   [10:0] trunc_ln50_24_fu_394_p4;
wire   [10:0] trunc_ln50_23_fu_384_p4;
wire   [241:0] tmp_s_fu_604_p23;
wire   [120:0] tmp_607_fu_685_p4;
wire   [98:0] tmp_608_fu_695_p4;
wire   [241:0] tmp_609_fu_705_p5;
wire   [26:0] tmp_610_fu_729_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= p_fca_0_0_1_0_0_0_extract281_reg_272;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= trunc_ln50_fu_369_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten17_reg_195 <= add_ln45_fu_294_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_195 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten_reg_206 <= select_ln46_5_fu_356_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= p_fca_0_0_1_0_0_0_extract282_reg_239;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        t_reg_217 <= t_9_fu_344_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_748 <= icmp_ln45_fu_300_p2;
        icmp_ln45_reg_748_pp0_iter1_reg <= icmp_ln45_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_748_pp0_iter2_reg <= icmp_ln45_reg_748_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_767 <= icmp_ln50_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract282_reg_239 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_228 <= vec_i_data_M_elems_V_7_fu_717_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        select_ln46_reg_752 <= select_ln46_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_606_reg_781 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[142:132]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_767 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_2_reg_228;
        end else if ((icmp_ln50_reg_767 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_fu_652_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        q_sm_blk_n = q_sm_full_n;
    end else begin
        q_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_sm_write = 1'b1;
    end else begin
        q_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_294_p2 = (indvar_flatten17_reg_195 + 15'd1);

assign add_ln46_fu_350_p2 = (indvar_flatten_reg_206 + 9'd1);

assign and_ln45_fu_324_p2 = (xor_ln45_fu_312_p2 & icmp_ln47_fu_318_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (q_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_300_p2 = ((indvar_flatten17_reg_195 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_306_p2 = ((indvar_flatten_reg_206 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_318_p2 = ((t_reg_217 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_364_p2 = ((select_ln46_reg_752 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_330_p2 = (icmp_ln46_fu_306_p2 | and_ln45_fu_324_p2);

assign q_sm_din = tmp_610_fu_729_p4;

assign select_ln46_5_fu_356_p3 = ((icmp_ln46_fu_306_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_350_p2);

assign select_ln46_fu_336_p3 = ((or_ln46_fu_330_p2[0:0] == 1'b1) ? 4'd0 : t_reg_217);

assign t_9_fu_344_p2 = (select_ln46_fu_336_p3 + 4'd1);

assign tmp_607_fu_685_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[263:143]}};

assign tmp_608_fu_695_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[131:33]}};

assign tmp_609_fu_705_p5 = {{{{{{11'd0}, {tmp_607_fu_685_p4}}}, {11'd0}}}, {tmp_608_fu_695_p4}};

assign tmp_610_fu_729_p4 = {{{tmp_606_reg_781}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284}};

assign tmp_s_fu_604_p23 = {{{{{{{{{{{{{{{{{{{{{{trunc_ln50_43_fu_594_p4}, {trunc_ln50_42_fu_584_p4}}, {trunc_ln50_41_fu_574_p4}}, {trunc_ln50_40_fu_564_p4}}, {trunc_ln50_39_fu_554_p4}}, {trunc_ln50_38_fu_544_p4}}, {trunc_ln50_37_fu_534_p4}}, {trunc_ln50_s_fu_524_p4}}, {trunc_ln50_36_fu_514_p4}}, {trunc_ln50_35_fu_504_p4}}, {trunc_ln50_34_fu_494_p4}}, {trunc_ln50_33_fu_484_p4}}, {trunc_ln50_32_fu_474_p4}}, {trunc_ln50_31_fu_464_p4}}, {trunc_ln50_30_fu_454_p4}}, {trunc_ln50_29_fu_444_p4}}, {trunc_ln50_28_fu_434_p4}}, {trunc_ln50_27_fu_424_p4}}, {trunc_ln50_26_fu_414_p4}}, {trunc_ln50_25_fu_404_p4}}, {trunc_ln50_24_fu_394_p4}}, {trunc_ln50_23_fu_384_p4}};

assign trunc_ln50_23_fu_384_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_24_fu_394_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_25_fu_404_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_26_fu_414_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_27_fu_424_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_28_fu_434_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_29_fu_444_p4 = {{mac_sm_dout[138:128]}};

assign trunc_ln50_30_fu_454_p4 = {{mac_sm_dout[154:144]}};

assign trunc_ln50_31_fu_464_p4 = {{mac_sm_dout[170:160]}};

assign trunc_ln50_32_fu_474_p4 = {{mac_sm_dout[186:176]}};

assign trunc_ln50_33_fu_484_p4 = {{mac_sm_dout[202:192]}};

assign trunc_ln50_34_fu_494_p4 = {{mac_sm_dout[218:208]}};

assign trunc_ln50_35_fu_504_p4 = {{mac_sm_dout[234:224]}};

assign trunc_ln50_36_fu_514_p4 = {{mac_sm_dout[250:240]}};

assign trunc_ln50_37_fu_534_p4 = {{mac_sm_dout[282:272]}};

assign trunc_ln50_38_fu_544_p4 = {{mac_sm_dout[298:288]}};

assign trunc_ln50_39_fu_554_p4 = {{mac_sm_dout[314:304]}};

assign trunc_ln50_40_fu_564_p4 = {{mac_sm_dout[330:320]}};

assign trunc_ln50_41_fu_574_p4 = {{mac_sm_dout[346:336]}};

assign trunc_ln50_42_fu_584_p4 = {{mac_sm_dout[362:352]}};

assign trunc_ln50_43_fu_594_p4 = {{mac_sm_dout[378:368]}};

assign trunc_ln50_fu_369_p1 = mac_sm_dout[10:0];

assign trunc_ln50_s_fu_524_p4 = {{mac_sm_dout[266:256]}};

assign vec_i_data_M_elems_V_7_fu_717_p5 = {{tmp_609_fu_705_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_652_p5 = {{tmp_s_fu_604_p23}, {vec_i_data_M_elems_V_2_reg_228[21:0]}};

assign xor_ln45_fu_312_p2 = (icmp_ln46_fu_306_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt142
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt149 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
output  [63:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_349;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_reg_404;
reg   [12:0] indvar_flatten35_reg_99;
reg   [7:0] indvar_flatten_reg_110;
reg   [2:0] t_reg_121;
wire   [12:0] add_ln78_fu_132_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_138_p2;
wire   [2:0] t_8_fu_180_p3;
reg   [2:0] t_8_reg_353;
wire   [7:0] select_ln79_fu_194_p3;
reg   [2:0] p_load48_reg_364;
reg   [2:0] p_load47_reg_369;
reg   [2:0] p_load44_reg_374;
reg   [2:0] p_load43_reg_379;
reg   [2:0] p_load45_reg_384;
reg   [2:0] p_load_reg_389;
wire   [2:0] trunc_ln145_fu_246_p1;
reg   [2:0] trunc_ln145_reg_394;
reg   [2:0] trunc_ln145_s_reg_399;
wire   [0:0] icmp_ln83_fu_260_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_125_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_289_fu_66;
reg   [2:0] empty_290_fu_70;
reg   [2:0] empty_291_fu_74;
reg   [2:0] empty_292_fu_78;
reg   [2:0] empty_293_fu_82;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_144_p2;
wire   [0:0] icmp_ln8341_fu_156_p2;
wire   [0:0] xor_ln78_fu_150_p2;
wire   [0:0] and_ln78_fu_162_p2;
wire   [0:0] or_ln83_fu_174_p2;
wire   [2:0] add_ln83_fu_168_p2;
wire   [7:0] add_ln79_fu_188_p2;
wire   [58:0] tmp_224_fu_275_p16;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten35_reg_99 <= add_ln78_fu_132_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten35_reg_99 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_110 <= select_ln79_fu_194_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_110 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_121 <= t_8_reg_353;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_289_fu_66 <= empty_290_fu_70;
        empty_291_fu_74 <= empty_292_fu_78;
        empty_292_fu_78 <= empty_293_fu_82;
        empty_fu_62 <= empty_289_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_290_fu_70 <= trunc_ln145_fu_246_p1;
        empty_293_fu_82 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_349 <= icmp_ln78_fu_138_p2;
        p_load43_reg_379 <= empty_292_fu_78;
        p_load44_reg_374 <= empty_291_fu_74;
        p_load47_reg_369 <= empty_289_fu_66;
        p_load48_reg_364 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_404 <= icmp_ln83_fu_260_p2;
        p_load45_reg_384 <= empty_290_fu_70;
        p_load_reg_389 <= empty_293_fu_82;
        trunc_ln145_reg_394 <= trunc_ln145_fu_246_p1;
        trunc_ln145_s_reg_399 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_8_reg_353 <= t_8_fu_180_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_125_p4 = t_8_reg_353;
    end else begin
        ap_phi_mux_t_phi_fu_125_p4 = t_reg_121;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_blk_n = qq_sm_head1_empty_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_read = 1'b1;
    end else begin
        qq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_132_p2 = (indvar_flatten35_reg_99 + 13'd1);

assign add_ln79_fu_188_p2 = (indvar_flatten_reg_110 + 8'd1);

assign add_ln83_fu_168_p2 = (ap_phi_mux_t_phi_fu_125_p4 + 3'd1);

assign adpt_sm_din = tmp_224_fu_275_p16;

assign and_ln78_fu_162_p2 = (xor_ln78_fu_150_p2 & icmp_ln8341_fu_156_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_349 == 1'd0) & (qq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_reg_404 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_138_p2 = ((indvar_flatten35_reg_99 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_144_p2 = ((indvar_flatten_reg_110 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln8341_fu_156_p2 = ((ap_phi_mux_t_phi_fu_125_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_260_p2 = ((t_8_reg_353 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln83_fu_174_p2 = (icmp_ln79_fu_144_p2 | and_ln78_fu_162_p2);

assign select_ln79_fu_194_p3 = ((icmp_ln79_fu_144_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_188_p2);

assign start_out = real_start;

assign t_8_fu_180_p3 = ((or_ln83_fu_174_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_168_p2);

assign tmp_224_fu_275_p16 = {{{{{{{{{{{{{{{trunc_ln145_s_reg_399}, {5'd0}}, {p_load_reg_389}}, {5'd0}}, {p_load43_reg_379}}, {5'd0}}, {p_load44_reg_374}}, {5'd0}}, {trunc_ln145_reg_394}}, {5'd0}}, {p_load45_reg_384}}, {5'd0}}, {p_load47_reg_369}}, {5'd0}}, {p_load48_reg_364}};

assign trunc_ln145_fu_246_p1 = qq_sm_head1_dout[2:0];

assign xor_ln78_fu_150_p2 = (icmp_ln79_fu_144_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt149
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt153 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [223:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg r_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_587;
reg   [0:0] icmp_ln45_reg_587_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_602;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_587_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_155;
reg   [7:0] indvar_flatten_reg_166;
reg   [2:0] t_reg_177;
reg   [139:0] vec_i_data_M_elems_V_2_reg_188;
reg   [9:0] p_fca_0_0_1_0_0_0_extract182_reg_199;
reg   [9:0] p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [14:0] add_ln45_fu_254_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_260_p2;
wire   [0:0] icmp_ln46_fu_266_p2;
reg   [0:0] icmp_ln46_reg_591;
wire   [7:0] select_ln46_4_fu_278_p3;
wire   [0:0] icmp_ln50_fu_316_p2;
wire   [2:0] t_7_fu_322_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [9:0] trunc_ln50_fu_328_p1;
reg   [9:0] tmp_600_reg_621;
wire   [139:0] vec_i_data_M_elems_V_6_fu_556_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [139:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4;
wire   [139:0] vec_i_data_M_elems_V_fu_491_p5;
wire   [139:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
wire   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [9:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_272_p2;
wire   [0:0] icmp_ln47_fu_291_p2;
wire   [0:0] xor_ln45_fu_286_p2;
wire   [0:0] and_ln45_fu_297_p2;
wire   [0:0] or_ln46_fu_303_p2;
wire   [2:0] select_ln46_fu_308_p3;
wire   [9:0] trunc_ln50_27_fu_453_p4;
wire   [9:0] trunc_ln50_26_fu_443_p4;
wire   [9:0] trunc_ln50_25_fu_433_p4;
wire   [9:0] trunc_ln50_24_fu_423_p4;
wire   [9:0] trunc_ln50_23_fu_413_p4;
wire   [9:0] trunc_ln50_22_fu_403_p4;
wire   [9:0] trunc_ln50_21_fu_393_p4;
wire   [9:0] trunc_ln50_20_fu_383_p4;
wire   [9:0] trunc_ln50_19_fu_373_p4;
wire   [9:0] trunc_ln50_18_fu_363_p4;
wire   [9:0] trunc_ln50_17_fu_353_p4;
wire   [9:0] trunc_ln50_16_fu_343_p4;
wire   [119:0] tmp_s_fu_463_p13;
wire   [59:0] tmp_601_fu_524_p4;
wire   [39:0] tmp_602_fu_534_p4;
wire   [119:0] tmp_603_fu_544_p5;
wire   [25:0] tmp_604_fu_568_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= p_fca_0_0_1_0_0_0_extract181_reg_232;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= trunc_ln50_fu_328_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten17_reg_155 <= add_ln45_fu_254_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_155 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten_reg_166 <= select_ln46_4_fu_278_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_166 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= p_fca_0_0_1_0_0_0_extract182_reg_199;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= {{mac_sm_dout[25:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_177 <= t_7_fu_322_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_587 <= icmp_ln45_fu_260_p2;
        icmp_ln45_reg_587_pp0_iter1_reg <= icmp_ln45_reg_587;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_587_pp0_iter2_reg <= icmp_ln45_reg_587_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        icmp_ln46_reg_591 <= icmp_ln46_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_602 <= icmp_ln50_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract182_reg_199 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[29:20]}};
        vec_i_data_M_elems_V_2_reg_188 <= vec_i_data_M_elems_V_6_fu_556_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_600_reg_621 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[79:70]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_602 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_2_reg_188;
        end else if ((icmp_ln50_reg_602 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_fu_491_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        r_sm_head1_blk_n = r_sm_head1_full_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_sm_head1_write = 1'b1;
    end else begin
        r_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_254_p2 = (indvar_flatten17_reg_155 + 15'd1);

assign add_ln46_fu_272_p2 = (indvar_flatten_reg_166 + 8'd1);

assign and_ln45_fu_297_p2 = (xor_ln45_fu_286_p2 & icmp_ln47_fu_291_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (r_sm_head1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_260_p2 = ((indvar_flatten17_reg_155 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_266_p2 = ((indvar_flatten_reg_166 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_291_p2 = ((t_reg_177 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_316_p2 = ((select_ln46_fu_308_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_303_p2 = (icmp_ln46_reg_591 | and_ln45_fu_297_p2);

assign r_sm_head1_din = tmp_604_fu_568_p4;

assign select_ln46_4_fu_278_p3 = ((icmp_ln46_fu_266_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_272_p2);

assign select_ln46_fu_308_p3 = ((or_ln46_fu_303_p2[0:0] == 1'b1) ? 3'd0 : t_reg_177);

assign t_7_fu_322_p2 = (select_ln46_fu_308_p3 + 3'd1);

assign tmp_601_fu_524_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[139:80]}};

assign tmp_602_fu_534_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[69:30]}};

assign tmp_603_fu_544_p5 = {{{{{{10'd0}, {tmp_601_fu_524_p4}}}, {10'd0}}}, {tmp_602_fu_534_p4}};

assign tmp_604_fu_568_p4 = {{{tmp_600_reg_621}, {6'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244}};

assign tmp_s_fu_463_p13 = {{{{{{{{{{{{trunc_ln50_27_fu_453_p4}, {trunc_ln50_26_fu_443_p4}}, {trunc_ln50_25_fu_433_p4}}, {trunc_ln50_24_fu_423_p4}}, {trunc_ln50_23_fu_413_p4}}, {trunc_ln50_22_fu_403_p4}}, {trunc_ln50_21_fu_393_p4}}, {trunc_ln50_20_fu_383_p4}}, {trunc_ln50_19_fu_373_p4}}, {trunc_ln50_18_fu_363_p4}}, {trunc_ln50_17_fu_353_p4}}, {trunc_ln50_16_fu_343_p4}};

assign trunc_ln50_16_fu_343_p4 = {{mac_sm_dout[41:32]}};

assign trunc_ln50_17_fu_353_p4 = {{mac_sm_dout[57:48]}};

assign trunc_ln50_18_fu_363_p4 = {{mac_sm_dout[73:64]}};

assign trunc_ln50_19_fu_373_p4 = {{mac_sm_dout[89:80]}};

assign trunc_ln50_20_fu_383_p4 = {{mac_sm_dout[105:96]}};

assign trunc_ln50_21_fu_393_p4 = {{mac_sm_dout[121:112]}};

assign trunc_ln50_22_fu_403_p4 = {{mac_sm_dout[137:128]}};

assign trunc_ln50_23_fu_413_p4 = {{mac_sm_dout[153:144]}};

assign trunc_ln50_24_fu_423_p4 = {{mac_sm_dout[169:160]}};

assign trunc_ln50_25_fu_433_p4 = {{mac_sm_dout[185:176]}};

assign trunc_ln50_26_fu_443_p4 = {{mac_sm_dout[201:192]}};

assign trunc_ln50_27_fu_453_p4 = {{mac_sm_dout[217:208]}};

assign trunc_ln50_fu_328_p1 = mac_sm_dout[9:0];

assign vec_i_data_M_elems_V_6_fu_556_p5 = {{tmp_603_fu_544_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[19:0]}};

assign vec_i_data_M_elems_V_fu_491_p5 = {{tmp_s_fu_463_p13}, {vec_i_data_M_elems_V_2_reg_188[19:0]}};

assign xor_ln45_fu_286_p2 = (icmp_ln46_reg_591 ^ 1'd1);

endmodule //ATTN0_do_adapt153
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt154 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
output  [63:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_349;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_reg_404;
reg   [12:0] indvar_flatten35_reg_99;
reg   [7:0] indvar_flatten_reg_110;
reg   [2:0] t_reg_121;
wire   [12:0] add_ln78_fu_132_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_138_p2;
wire   [2:0] t_6_fu_180_p3;
reg   [2:0] t_6_reg_353;
wire   [7:0] select_ln79_fu_194_p3;
reg   [2:0] p_load48_reg_364;
reg   [2:0] p_load47_reg_369;
reg   [2:0] p_load44_reg_374;
reg   [2:0] p_load43_reg_379;
reg   [2:0] p_load45_reg_384;
reg   [2:0] p_load_reg_389;
wire   [2:0] trunc_ln145_fu_246_p1;
reg   [2:0] trunc_ln145_reg_394;
reg   [2:0] trunc_ln145_s_reg_399;
wire   [0:0] icmp_ln83_fu_260_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_125_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_283_fu_66;
reg   [2:0] empty_284_fu_70;
reg   [2:0] empty_285_fu_74;
reg   [2:0] empty_286_fu_78;
reg   [2:0] empty_287_fu_82;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_144_p2;
wire   [0:0] icmp_ln8341_fu_156_p2;
wire   [0:0] xor_ln78_fu_150_p2;
wire   [0:0] and_ln78_fu_162_p2;
wire   [0:0] or_ln83_fu_174_p2;
wire   [2:0] add_ln83_fu_168_p2;
wire   [7:0] add_ln79_fu_188_p2;
wire   [58:0] tmp_217_fu_275_p16;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten35_reg_99 <= add_ln78_fu_132_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten35_reg_99 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_110 <= select_ln79_fu_194_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_110 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_121 <= t_6_reg_353;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_283_fu_66 <= empty_284_fu_70;
        empty_285_fu_74 <= empty_286_fu_78;
        empty_286_fu_78 <= empty_287_fu_82;
        empty_fu_62 <= empty_283_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_284_fu_70 <= trunc_ln145_fu_246_p1;
        empty_287_fu_82 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_349 <= icmp_ln78_fu_138_p2;
        p_load43_reg_379 <= empty_286_fu_78;
        p_load44_reg_374 <= empty_285_fu_74;
        p_load47_reg_369 <= empty_283_fu_66;
        p_load48_reg_364 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_404 <= icmp_ln83_fu_260_p2;
        p_load45_reg_384 <= empty_284_fu_70;
        p_load_reg_389 <= empty_287_fu_82;
        trunc_ln145_reg_394 <= trunc_ln145_fu_246_p1;
        trunc_ln145_s_reg_399 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_6_reg_353 <= t_6_fu_180_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_125_p4 = t_6_reg_353;
    end else begin
        ap_phi_mux_t_phi_fu_125_p4 = t_reg_121;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_blk_n = qq_sm_head1_empty_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_read = 1'b1;
    end else begin
        qq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_132_p2 = (indvar_flatten35_reg_99 + 13'd1);

assign add_ln79_fu_188_p2 = (indvar_flatten_reg_110 + 8'd1);

assign add_ln83_fu_168_p2 = (ap_phi_mux_t_phi_fu_125_p4 + 3'd1);

assign adpt_sm_din = tmp_217_fu_275_p16;

assign and_ln78_fu_162_p2 = (xor_ln78_fu_150_p2 & icmp_ln8341_fu_156_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_349 == 1'd0) & (qq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_reg_404 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_138_p2 = ((indvar_flatten35_reg_99 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_144_p2 = ((indvar_flatten_reg_110 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln8341_fu_156_p2 = ((ap_phi_mux_t_phi_fu_125_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_260_p2 = ((t_6_reg_353 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln83_fu_174_p2 = (icmp_ln79_fu_144_p2 | and_ln78_fu_162_p2);

assign select_ln79_fu_194_p3 = ((icmp_ln79_fu_144_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_188_p2);

assign start_out = real_start;

assign t_6_fu_180_p3 = ((or_ln83_fu_174_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_168_p2);

assign tmp_217_fu_275_p16 = {{{{{{{{{{{{{{{trunc_ln145_s_reg_399}, {5'd0}}, {p_load_reg_389}}, {5'd0}}, {p_load43_reg_379}}, {5'd0}}, {p_load44_reg_374}}, {5'd0}}, {trunc_ln145_reg_394}}, {5'd0}}, {p_load45_reg_384}}, {5'd0}}, {p_load47_reg_369}}, {5'd0}}, {p_load48_reg_364}};

assign trunc_ln145_fu_246_p1 = qq_sm_head1_dout[2:0];

assign xor_ln78_fu_150_p2 = (icmp_ln79_fu_144_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt154
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt158 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [223:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg r_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_587;
reg   [0:0] icmp_ln45_reg_587_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_602;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_587_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_155;
reg   [7:0] indvar_flatten_reg_166;
reg   [2:0] t_reg_177;
reg   [139:0] vec_i_data_M_elems_V_2_reg_188;
reg   [9:0] p_fca_0_0_1_0_0_0_extract182_reg_199;
reg   [9:0] p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [14:0] add_ln45_fu_254_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_260_p2;
wire   [0:0] icmp_ln46_fu_266_p2;
reg   [0:0] icmp_ln46_reg_591;
wire   [7:0] select_ln46_3_fu_278_p3;
wire   [0:0] icmp_ln50_fu_316_p2;
wire   [2:0] t_5_fu_322_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [9:0] trunc_ln50_fu_328_p1;
reg   [9:0] tmp_594_reg_621;
wire   [139:0] vec_i_data_M_elems_V_5_fu_556_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [139:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4;
wire   [139:0] vec_i_data_M_elems_V_fu_491_p5;
wire   [139:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
wire   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [9:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_272_p2;
wire   [0:0] icmp_ln47_fu_291_p2;
wire   [0:0] xor_ln45_fu_286_p2;
wire   [0:0] and_ln45_fu_297_p2;
wire   [0:0] or_ln46_fu_303_p2;
wire   [2:0] select_ln46_fu_308_p3;
wire   [9:0] trunc_ln50_15_fu_453_p4;
wire   [9:0] trunc_ln50_14_fu_443_p4;
wire   [9:0] trunc_ln50_13_fu_433_p4;
wire   [9:0] trunc_ln50_12_fu_423_p4;
wire   [9:0] trunc_ln50_11_fu_413_p4;
wire   [9:0] trunc_ln50_10_fu_403_p4;
wire   [9:0] trunc_ln50_9_fu_393_p4;
wire   [9:0] trunc_ln50_8_fu_383_p4;
wire   [9:0] trunc_ln50_7_fu_373_p4;
wire   [9:0] trunc_ln50_6_fu_363_p4;
wire   [9:0] trunc_ln50_5_fu_353_p4;
wire   [9:0] trunc_ln50_4_fu_343_p4;
wire   [119:0] tmp_s_fu_463_p13;
wire   [59:0] tmp_595_fu_524_p4;
wire   [39:0] tmp_596_fu_534_p4;
wire   [119:0] tmp_597_fu_544_p5;
wire   [25:0] tmp_598_fu_568_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= p_fca_0_0_1_0_0_0_extract181_reg_232;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= trunc_ln50_fu_328_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten17_reg_155 <= add_ln45_fu_254_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_155 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten_reg_166 <= select_ln46_3_fu_278_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_166 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= p_fca_0_0_1_0_0_0_extract182_reg_199;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= {{mac_sm_dout[25:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_177 <= t_5_fu_322_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_587 <= icmp_ln45_fu_260_p2;
        icmp_ln45_reg_587_pp0_iter1_reg <= icmp_ln45_reg_587;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_587_pp0_iter2_reg <= icmp_ln45_reg_587_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        icmp_ln46_reg_591 <= icmp_ln46_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_602 <= icmp_ln50_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract182_reg_199 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[29:20]}};
        vec_i_data_M_elems_V_2_reg_188 <= vec_i_data_M_elems_V_5_fu_556_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_594_reg_621 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[79:70]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_602 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_2_reg_188;
        end else if ((icmp_ln50_reg_602 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_fu_491_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        r_sm_head1_blk_n = r_sm_head1_full_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_sm_head1_write = 1'b1;
    end else begin
        r_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_254_p2 = (indvar_flatten17_reg_155 + 15'd1);

assign add_ln46_fu_272_p2 = (indvar_flatten_reg_166 + 8'd1);

assign and_ln45_fu_297_p2 = (xor_ln45_fu_286_p2 & icmp_ln47_fu_291_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (r_sm_head1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_260_p2 = ((indvar_flatten17_reg_155 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_266_p2 = ((indvar_flatten_reg_166 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_291_p2 = ((t_reg_177 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_316_p2 = ((select_ln46_fu_308_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_303_p2 = (icmp_ln46_reg_591 | and_ln45_fu_297_p2);

assign r_sm_head1_din = tmp_598_fu_568_p4;

assign select_ln46_3_fu_278_p3 = ((icmp_ln46_fu_266_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_272_p2);

assign select_ln46_fu_308_p3 = ((or_ln46_fu_303_p2[0:0] == 1'b1) ? 3'd0 : t_reg_177);

assign t_5_fu_322_p2 = (select_ln46_fu_308_p3 + 3'd1);

assign tmp_595_fu_524_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[139:80]}};

assign tmp_596_fu_534_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[69:30]}};

assign tmp_597_fu_544_p5 = {{{{{{10'd0}, {tmp_595_fu_524_p4}}}, {10'd0}}}, {tmp_596_fu_534_p4}};

assign tmp_598_fu_568_p4 = {{{tmp_594_reg_621}, {6'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244}};

assign tmp_s_fu_463_p13 = {{{{{{{{{{{{trunc_ln50_15_fu_453_p4}, {trunc_ln50_14_fu_443_p4}}, {trunc_ln50_13_fu_433_p4}}, {trunc_ln50_12_fu_423_p4}}, {trunc_ln50_11_fu_413_p4}}, {trunc_ln50_10_fu_403_p4}}, {trunc_ln50_9_fu_393_p4}}, {trunc_ln50_8_fu_383_p4}}, {trunc_ln50_7_fu_373_p4}}, {trunc_ln50_6_fu_363_p4}}, {trunc_ln50_5_fu_353_p4}}, {trunc_ln50_4_fu_343_p4}};

assign trunc_ln50_10_fu_403_p4 = {{mac_sm_dout[137:128]}};

assign trunc_ln50_11_fu_413_p4 = {{mac_sm_dout[153:144]}};

assign trunc_ln50_12_fu_423_p4 = {{mac_sm_dout[169:160]}};

assign trunc_ln50_13_fu_433_p4 = {{mac_sm_dout[185:176]}};

assign trunc_ln50_14_fu_443_p4 = {{mac_sm_dout[201:192]}};

assign trunc_ln50_15_fu_453_p4 = {{mac_sm_dout[217:208]}};

assign trunc_ln50_4_fu_343_p4 = {{mac_sm_dout[41:32]}};

assign trunc_ln50_5_fu_353_p4 = {{mac_sm_dout[57:48]}};

assign trunc_ln50_6_fu_363_p4 = {{mac_sm_dout[73:64]}};

assign trunc_ln50_7_fu_373_p4 = {{mac_sm_dout[89:80]}};

assign trunc_ln50_8_fu_383_p4 = {{mac_sm_dout[105:96]}};

assign trunc_ln50_9_fu_393_p4 = {{mac_sm_dout[121:112]}};

assign trunc_ln50_fu_328_p1 = mac_sm_dout[9:0];

assign vec_i_data_M_elems_V_5_fu_556_p5 = {{tmp_597_fu_544_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[19:0]}};

assign vec_i_data_M_elems_V_fu_491_p5 = {{tmp_s_fu_463_p13}, {vec_i_data_M_elems_V_2_reg_188[19:0]}};

assign xor_ln45_fu_286_p2 = (icmp_ln46_reg_591 ^ 1'd1);

endmodule //ATTN0_do_adapt158
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt165 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
output  [111:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg rq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    rq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_475;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_2_reg_560;
reg   [14:0] indvar_flatten59_reg_123;
reg   [7:0] indvar_flatten_reg_134;
reg   [2:0] t_reg_145;
wire   [14:0] add_ln78_fu_156_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_162_p2;
wire   [2:0] t_4_fu_204_p3;
reg   [2:0] t_4_reg_479;
wire   [7:0] select_ln79_fu_218_p3;
reg   [2:0] p_load78_reg_490;
reg   [2:0] p_load77_reg_495;
reg   [2:0] p_load76_reg_500;
reg   [2:0] p_load75_reg_505;
reg   [2:0] p_load74_reg_510;
reg   [2:0] p_load71_reg_515;
reg   [2:0] p_load70_reg_520;
reg   [2:0] p_load69_reg_525;
reg   [2:0] p_load68_reg_530;
reg   [2:0] p_load67_reg_535;
reg   [2:0] p_load72_reg_540;
reg   [2:0] p_load_reg_545;
wire   [2:0] trunc_ln145_fu_318_p1;
reg   [2:0] trunc_ln145_reg_550;
reg   [2:0] trunc_ln145_s_reg_555;
wire   [0:0] icmp_ln83_2_fu_332_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_149_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_271_fu_66;
reg   [2:0] empty_272_fu_70;
reg   [2:0] empty_273_fu_74;
reg   [2:0] empty_274_fu_78;
reg   [2:0] empty_275_fu_82;
reg   [2:0] empty_276_fu_86;
reg   [2:0] empty_277_fu_90;
reg   [2:0] empty_278_fu_94;
reg   [2:0] empty_279_fu_98;
reg   [2:0] empty_280_fu_102;
reg   [2:0] empty_281_fu_106;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_168_p2;
wire   [0:0] icmp_ln83_fu_180_p2;
wire   [0:0] xor_ln78_fu_174_p2;
wire   [0:0] and_ln78_fu_186_p2;
wire   [0:0] or_ln83_fu_198_p2;
wire   [2:0] add_ln83_fu_192_p2;
wire   [7:0] add_ln79_fu_212_p2;
wire   [106:0] tmp_194_fu_347_p28;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten59_reg_123 <= add_ln78_fu_156_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_123 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_134 <= select_ln79_fu_218_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_134 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_145 <= t_4_reg_479;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_145 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_271_fu_66 <= empty_272_fu_70;
        empty_272_fu_70 <= empty_273_fu_74;
        empty_273_fu_74 <= empty_274_fu_78;
        empty_274_fu_78 <= empty_275_fu_82;
        empty_276_fu_86 <= empty_277_fu_90;
        empty_277_fu_90 <= empty_278_fu_94;
        empty_278_fu_94 <= empty_279_fu_98;
        empty_279_fu_98 <= empty_280_fu_102;
        empty_280_fu_102 <= empty_281_fu_106;
        empty_fu_62 <= empty_271_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_275_fu_82 <= trunc_ln145_fu_318_p1;
        empty_281_fu_106 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_475 <= icmp_ln78_fu_162_p2;
        p_load67_reg_535 <= empty_280_fu_102;
        p_load68_reg_530 <= empty_279_fu_98;
        p_load69_reg_525 <= empty_278_fu_94;
        p_load70_reg_520 <= empty_277_fu_90;
        p_load71_reg_515 <= empty_276_fu_86;
        p_load74_reg_510 <= empty_274_fu_78;
        p_load75_reg_505 <= empty_273_fu_74;
        p_load76_reg_500 <= empty_272_fu_70;
        p_load77_reg_495 <= empty_271_fu_66;
        p_load78_reg_490 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_2_reg_560 <= icmp_ln83_2_fu_332_p2;
        p_load72_reg_540 <= empty_275_fu_82;
        p_load_reg_545 <= empty_281_fu_106;
        trunc_ln145_reg_550 <= trunc_ln145_fu_318_p1;
        trunc_ln145_s_reg_555 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_4_reg_479 <= t_4_fu_204_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_2_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_2_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_149_p4 = t_4_reg_479;
    end else begin
        ap_phi_mux_t_phi_fu_149_p4 = t_reg_145;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_blk_n = rq_sm_head1_empty_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_read = 1'b1;
    end else begin
        rq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_156_p2 = (indvar_flatten59_reg_123 + 15'd1);

assign add_ln79_fu_212_p2 = (indvar_flatten_reg_134 + 8'd1);

assign add_ln83_fu_192_p2 = (ap_phi_mux_t_phi_fu_149_p4 + 3'd1);

assign adpt_sm_din = tmp_194_fu_347_p28;

assign and_ln78_fu_186_p2 = (xor_ln78_fu_174_p2 & icmp_ln83_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_2_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_2_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_2_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_475 == 1'd0) & (rq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_2_reg_560 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_162_p2 = ((indvar_flatten59_reg_123 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_168_p2 = ((indvar_flatten_reg_134 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_332_p2 = ((t_4_reg_479 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_180_p2 = ((ap_phi_mux_t_phi_fu_149_p4 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln83_fu_198_p2 = (icmp_ln79_fu_168_p2 | and_ln78_fu_186_p2);

assign select_ln79_fu_218_p3 = ((icmp_ln79_fu_168_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_212_p2);

assign start_out = real_start;

assign t_4_fu_204_p3 = ((or_ln83_fu_198_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_192_p2);

assign tmp_194_fu_347_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_555}, {5'd0}}, {p_load_reg_545}}, {5'd0}}, {p_load67_reg_535}}, {5'd0}}, {p_load68_reg_530}}, {5'd0}}, {p_load69_reg_525}}, {5'd0}}, {p_load70_reg_520}}, {5'd0}}, {p_load71_reg_515}}, {5'd0}}, {trunc_ln145_reg_550}}, {5'd0}}, {p_load72_reg_540}}, {5'd0}}, {p_load74_reg_510}}, {5'd0}}, {p_load75_reg_505}}, {5'd0}}, {p_load76_reg_500}}, {5'd0}}, {p_load77_reg_495}}, {5'd0}}, {p_load78_reg_490}};

assign trunc_ln145_fu_318_p1 = rq_sm_head1_dout[2:0];

assign xor_ln78_fu_174_p2 = (icmp_ln79_fu_168_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt165
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt169 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg a_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_489;
reg   [0:0] icmp_ln45_reg_489_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_504;
reg    a_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_489_pp0_iter2_reg;
reg   [12:0] indvar_flatten17_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] t_reg_151;
reg   [87:0] vec_i_data_M_elems_V_2_reg_162;
reg   [10:0] p_fca_0_0_1_0_0_0_extract122_reg_173;
reg   [10:0] p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [12:0] add_ln45_fu_228_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_234_p2;
wire   [0:0] icmp_ln46_fu_240_p2;
reg   [0:0] icmp_ln46_reg_493;
wire   [7:0] select_ln46_2_fu_252_p3;
wire   [0:0] icmp_ln50_fu_290_p2;
wire   [2:0] t_3_fu_296_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [10:0] trunc_ln50_fu_302_p1;
reg   [10:0] tmp_589_reg_523;
wire   [87:0] vec_i_data_M_elems_V_4_fu_458_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [87:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4;
wire   [87:0] vec_i_data_M_elems_V_fu_393_p5;
wire   [87:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_246_p2;
wire   [0:0] icmp_ln47_fu_265_p2;
wire   [0:0] xor_ln45_fu_260_p2;
wire   [0:0] and_ln45_fu_271_p2;
wire   [0:0] or_ln46_fu_277_p2;
wire   [2:0] select_ln46_fu_282_p3;
wire   [10:0] trunc_ln50_3_fu_367_p4;
wire   [10:0] trunc_ln50_2_fu_357_p4;
wire   [10:0] trunc_ln50_1_fu_347_p4;
wire   [10:0] trunc_ln50_9_fu_337_p4;
wire   [10:0] trunc_ln50_8_fu_327_p4;
wire   [10:0] trunc_ln50_7_fu_317_p4;
wire   [65:0] tmp_s_fu_377_p7;
wire   [32:0] tmp_590_fu_436_p4;
wire   [10:0] tmp_588_fu_416_p4;
wire   [65:0] tmp_591_fu_446_p5;
wire   [26:0] tmp_592_fu_470_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= p_fca_0_0_1_0_0_0_extract121_reg_206;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= trunc_ln50_fu_302_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten17_reg_129 <= add_ln45_fu_228_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_129 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten_reg_140 <= select_ln46_2_fu_252_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= p_fca_0_0_1_0_0_0_extract122_reg_173;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_151 <= t_3_fu_296_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_489 <= icmp_ln45_fu_234_p2;
        icmp_ln45_reg_489_pp0_iter1_reg <= icmp_ln45_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_489_pp0_iter2_reg <= icmp_ln45_reg_489_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        icmp_ln46_reg_493 <= icmp_ln46_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_504 <= icmp_ln50_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract122_reg_173 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_162 <= vec_i_data_M_elems_V_4_fu_458_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_589_reg_523 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[54:44]}};
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head1_blk_n = a_sm_head1_full_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head1_write = 1'b1;
    end else begin
        a_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_504 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_2_reg_162;
        end else if ((icmp_ln50_reg_504 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_fu_393_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head1_din = tmp_592_fu_470_p4;

assign add_ln45_fu_228_p2 = (indvar_flatten17_reg_129 + 13'd1);

assign add_ln46_fu_246_p2 = (indvar_flatten_reg_140 + 8'd1);

assign and_ln45_fu_271_p2 = (xor_ln45_fu_260_p2 & icmp_ln47_fu_265_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (1'b0 == a_sm_head1_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_234_p2 = ((indvar_flatten17_reg_129 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_240_p2 = ((indvar_flatten_reg_140 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_265_p2 = ((t_reg_151 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_290_p2 = ((select_ln46_fu_282_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_277_p2 = (icmp_ln46_reg_493 | and_ln45_fu_271_p2);

assign select_ln46_2_fu_252_p3 = ((icmp_ln46_fu_240_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_246_p2);

assign select_ln46_fu_282_p3 = ((or_ln46_fu_277_p2[0:0] == 1'b1) ? 3'd0 : t_reg_151);

assign t_3_fu_296_p2 = (select_ln46_fu_282_p3 + 3'd1);

assign tmp_588_fu_416_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[43:33]}};

assign tmp_590_fu_436_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[87:55]}};

assign tmp_591_fu_446_p5 = {{{{{{11'd0}, {tmp_590_fu_436_p4}}}, {11'd0}}}, {tmp_588_fu_416_p4}};

assign tmp_592_fu_470_p4 = {{{tmp_589_reg_523}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218}};

assign tmp_s_fu_377_p7 = {{{{{{trunc_ln50_3_fu_367_p4}, {trunc_ln50_2_fu_357_p4}}, {trunc_ln50_1_fu_347_p4}}, {trunc_ln50_9_fu_337_p4}}, {trunc_ln50_8_fu_327_p4}}, {trunc_ln50_7_fu_317_p4}};

assign trunc_ln50_1_fu_347_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_2_fu_357_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_3_fu_367_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_7_fu_317_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_8_fu_327_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_9_fu_337_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_fu_302_p1 = mac_sm_dout[10:0];

assign vec_i_data_M_elems_V_4_fu_458_p5 = {{tmp_591_fu_446_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_393_p5 = {{tmp_s_fu_377_p7}, {vec_i_data_M_elems_V_2_reg_162[21:0]}};

assign xor_ln45_fu_260_p2 = (icmp_ln46_reg_493 ^ 1'd1);

endmodule //ATTN0_do_adapt169
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt170 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
output  [111:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg rq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    rq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_475;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_1_reg_560;
reg   [14:0] indvar_flatten59_reg_123;
reg   [7:0] indvar_flatten_reg_134;
reg   [2:0] t_reg_145;
wire   [14:0] add_ln78_fu_156_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_162_p2;
wire   [2:0] t_2_fu_204_p3;
reg   [2:0] t_2_reg_479;
wire   [7:0] select_ln79_fu_218_p3;
reg   [2:0] p_load78_reg_490;
reg   [2:0] p_load77_reg_495;
reg   [2:0] p_load76_reg_500;
reg   [2:0] p_load75_reg_505;
reg   [2:0] p_load74_reg_510;
reg   [2:0] p_load71_reg_515;
reg   [2:0] p_load70_reg_520;
reg   [2:0] p_load69_reg_525;
reg   [2:0] p_load68_reg_530;
reg   [2:0] p_load67_reg_535;
reg   [2:0] p_load72_reg_540;
reg   [2:0] p_load_reg_545;
wire   [2:0] trunc_ln145_fu_318_p1;
reg   [2:0] trunc_ln145_reg_550;
reg   [2:0] trunc_ln145_s_reg_555;
wire   [0:0] icmp_ln83_1_fu_332_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_149_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_259_fu_66;
reg   [2:0] empty_260_fu_70;
reg   [2:0] empty_261_fu_74;
reg   [2:0] empty_262_fu_78;
reg   [2:0] empty_263_fu_82;
reg   [2:0] empty_264_fu_86;
reg   [2:0] empty_265_fu_90;
reg   [2:0] empty_266_fu_94;
reg   [2:0] empty_267_fu_98;
reg   [2:0] empty_268_fu_102;
reg   [2:0] empty_269_fu_106;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_168_p2;
wire   [0:0] icmp_ln83_fu_180_p2;
wire   [0:0] xor_ln78_fu_174_p2;
wire   [0:0] and_ln78_fu_186_p2;
wire   [0:0] or_ln83_fu_198_p2;
wire   [2:0] add_ln83_fu_192_p2;
wire   [7:0] add_ln79_fu_212_p2;
wire   [106:0] tmp_178_fu_347_p28;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten59_reg_123 <= add_ln78_fu_156_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_123 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_134 <= select_ln79_fu_218_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_134 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_145 <= t_2_reg_479;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_145 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_259_fu_66 <= empty_260_fu_70;
        empty_260_fu_70 <= empty_261_fu_74;
        empty_261_fu_74 <= empty_262_fu_78;
        empty_262_fu_78 <= empty_263_fu_82;
        empty_264_fu_86 <= empty_265_fu_90;
        empty_265_fu_90 <= empty_266_fu_94;
        empty_266_fu_94 <= empty_267_fu_98;
        empty_267_fu_98 <= empty_268_fu_102;
        empty_268_fu_102 <= empty_269_fu_106;
        empty_fu_62 <= empty_259_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_263_fu_82 <= trunc_ln145_fu_318_p1;
        empty_269_fu_106 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_475 <= icmp_ln78_fu_162_p2;
        p_load67_reg_535 <= empty_268_fu_102;
        p_load68_reg_530 <= empty_267_fu_98;
        p_load69_reg_525 <= empty_266_fu_94;
        p_load70_reg_520 <= empty_265_fu_90;
        p_load71_reg_515 <= empty_264_fu_86;
        p_load74_reg_510 <= empty_262_fu_78;
        p_load75_reg_505 <= empty_261_fu_74;
        p_load76_reg_500 <= empty_260_fu_70;
        p_load77_reg_495 <= empty_259_fu_66;
        p_load78_reg_490 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_1_reg_560 <= icmp_ln83_1_fu_332_p2;
        p_load72_reg_540 <= empty_263_fu_82;
        p_load_reg_545 <= empty_269_fu_106;
        trunc_ln145_reg_550 <= trunc_ln145_fu_318_p1;
        trunc_ln145_s_reg_555 <= {{rq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_2_reg_479 <= t_2_fu_204_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_1_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_1_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_149_p4 = t_2_reg_479;
    end else begin
        ap_phi_mux_t_phi_fu_149_p4 = t_reg_145;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_blk_n = rq_sm_head1_empty_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_475 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rq_sm_head1_read = 1'b1;
    end else begin
        rq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_156_p2 = (indvar_flatten59_reg_123 + 15'd1);

assign add_ln79_fu_212_p2 = (indvar_flatten_reg_134 + 8'd1);

assign add_ln83_fu_192_p2 = (ap_phi_mux_t_phi_fu_149_p4 + 3'd1);

assign adpt_sm_din = tmp_178_fu_347_p28;

assign and_ln78_fu_186_p2 = (xor_ln78_fu_174_p2 & icmp_ln83_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_1_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_1_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_1_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_475 == 1'd0) & (rq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_1_reg_560 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_162_p2 = ((indvar_flatten59_reg_123 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_168_p2 = ((indvar_flatten_reg_134 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_332_p2 = ((t_2_reg_479 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_180_p2 = ((ap_phi_mux_t_phi_fu_149_p4 == 3'd7) ? 1'b1 : 1'b0);

assign or_ln83_fu_198_p2 = (icmp_ln79_fu_168_p2 | and_ln78_fu_186_p2);

assign select_ln79_fu_218_p3 = ((icmp_ln79_fu_168_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_212_p2);

assign start_out = real_start;

assign t_2_fu_204_p3 = ((or_ln83_fu_198_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_192_p2);

assign tmp_178_fu_347_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_555}, {5'd0}}, {p_load_reg_545}}, {5'd0}}, {p_load67_reg_535}}, {5'd0}}, {p_load68_reg_530}}, {5'd0}}, {p_load69_reg_525}}, {5'd0}}, {p_load70_reg_520}}, {5'd0}}, {p_load71_reg_515}}, {5'd0}}, {trunc_ln145_reg_550}}, {5'd0}}, {p_load72_reg_540}}, {5'd0}}, {p_load74_reg_510}}, {5'd0}}, {p_load75_reg_505}}, {5'd0}}, {p_load76_reg_500}}, {5'd0}}, {p_load77_reg_495}}, {5'd0}}, {p_load78_reg_490}};

assign trunc_ln145_fu_318_p1 = rq_sm_head1_dout[2:0];

assign xor_ln78_fu_174_p2 = (icmp_ln79_fu_168_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt170
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt174 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg a_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_489;
reg   [0:0] icmp_ln45_reg_489_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_504;
reg    a_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_489_pp0_iter2_reg;
reg   [12:0] indvar_flatten17_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] t_reg_151;
reg   [87:0] vec_i_data_M_elems_V_2_reg_162;
reg   [10:0] p_fca_0_0_1_0_0_0_extract122_reg_173;
reg   [10:0] p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [12:0] add_ln45_fu_228_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_234_p2;
wire   [0:0] icmp_ln46_fu_240_p2;
reg   [0:0] icmp_ln46_reg_493;
wire   [7:0] select_ln46_1_fu_252_p3;
wire   [0:0] icmp_ln50_fu_290_p2;
wire   [2:0] t_1_fu_296_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [10:0] trunc_ln50_fu_302_p1;
reg   [10:0] tmp_583_reg_523;
wire   [87:0] vec_i_data_M_elems_V_1_fu_458_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [87:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4;
wire   [87:0] vec_i_data_M_elems_V_fu_393_p5;
wire   [87:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_246_p2;
wire   [0:0] icmp_ln47_fu_265_p2;
wire   [0:0] xor_ln45_fu_260_p2;
wire   [0:0] and_ln45_fu_271_p2;
wire   [0:0] or_ln46_fu_277_p2;
wire   [2:0] select_ln46_fu_282_p3;
wire   [10:0] trunc_ln50_6_fu_367_p4;
wire   [10:0] trunc_ln50_5_fu_357_p4;
wire   [10:0] trunc_ln50_4_fu_347_p4;
wire   [10:0] trunc_ln50_3_fu_337_p4;
wire   [10:0] trunc_ln50_2_fu_327_p4;
wire   [10:0] trunc_ln50_1_fu_317_p4;
wire   [65:0] tmp_s_fu_377_p7;
wire   [32:0] tmp_584_fu_436_p4;
wire   [10:0] tmp_582_fu_416_p4;
wire   [65:0] tmp_585_fu_446_p5;
wire   [26:0] tmp_586_fu_470_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= p_fca_0_0_1_0_0_0_extract121_reg_206;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= trunc_ln50_fu_302_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten17_reg_129 <= add_ln45_fu_228_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_129 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten_reg_140 <= select_ln46_1_fu_252_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= p_fca_0_0_1_0_0_0_extract122_reg_173;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_151 <= t_1_fu_296_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_489 <= icmp_ln45_fu_234_p2;
        icmp_ln45_reg_489_pp0_iter1_reg <= icmp_ln45_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_489_pp0_iter2_reg <= icmp_ln45_reg_489_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        icmp_ln46_reg_493 <= icmp_ln46_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_504 <= icmp_ln50_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract122_reg_173 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_162 <= vec_i_data_M_elems_V_1_fu_458_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_583_reg_523 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[54:44]}};
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head1_blk_n = a_sm_head1_full_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head1_write = 1'b1;
    end else begin
        a_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_504 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_2_reg_162;
        end else if ((icmp_ln50_reg_504 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_fu_393_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head1_din = tmp_586_fu_470_p4;

assign add_ln45_fu_228_p2 = (indvar_flatten17_reg_129 + 13'd1);

assign add_ln46_fu_246_p2 = (indvar_flatten_reg_140 + 8'd1);

assign and_ln45_fu_271_p2 = (xor_ln45_fu_260_p2 & icmp_ln47_fu_265_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (1'b0 == a_sm_head1_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_234_p2 = ((indvar_flatten17_reg_129 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_240_p2 = ((indvar_flatten_reg_140 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_265_p2 = ((t_reg_151 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_290_p2 = ((select_ln46_fu_282_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_277_p2 = (icmp_ln46_reg_493 | and_ln45_fu_271_p2);

assign select_ln46_1_fu_252_p3 = ((icmp_ln46_fu_240_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_246_p2);

assign select_ln46_fu_282_p3 = ((or_ln46_fu_277_p2[0:0] == 1'b1) ? 3'd0 : t_reg_151);

assign t_1_fu_296_p2 = (select_ln46_fu_282_p3 + 3'd1);

assign tmp_582_fu_416_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[43:33]}};

assign tmp_584_fu_436_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[87:55]}};

assign tmp_585_fu_446_p5 = {{{{{{11'd0}, {tmp_584_fu_436_p4}}}, {11'd0}}}, {tmp_582_fu_416_p4}};

assign tmp_586_fu_470_p4 = {{{tmp_583_reg_523}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218}};

assign tmp_s_fu_377_p7 = {{{{{{trunc_ln50_6_fu_367_p4}, {trunc_ln50_5_fu_357_p4}}, {trunc_ln50_4_fu_347_p4}}, {trunc_ln50_3_fu_337_p4}}, {trunc_ln50_2_fu_327_p4}}, {trunc_ln50_1_fu_317_p4}};

assign trunc_ln50_1_fu_317_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_2_fu_327_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_3_fu_337_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_4_fu_347_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_5_fu_357_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_6_fu_367_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_fu_302_p1 = mac_sm_dout[10:0];

assign vec_i_data_M_elems_V_1_fu_458_p5 = {{tmp_585_fu_446_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_393_p5 = {{tmp_s_fu_377_p7}, {vec_i_data_M_elems_V_2_reg_162[21:0]}};

assign xor_ln45_fu_260_p2 = (icmp_ln46_reg_493 ^ 1'd1);

endmodule //ATTN0_do_adapt174
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
output  [63:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_head1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_349;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_reg_404;
reg   [12:0] indvar_flatten35_reg_99;
reg   [7:0] indvar_flatten_reg_110;
reg   [2:0] t_reg_121;
wire   [12:0] add_ln78_fu_132_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_138_p2;
wire   [2:0] t_21_fu_180_p3;
reg   [2:0] t_21_reg_353;
wire   [7:0] select_ln79_fu_194_p3;
reg   [2:0] p_load48_reg_364;
reg   [2:0] p_load47_reg_369;
reg   [2:0] p_load44_reg_374;
reg   [2:0] p_load43_reg_379;
reg   [2:0] p_load45_reg_384;
reg   [2:0] p_load_reg_389;
wire   [2:0] trunc_ln145_fu_246_p1;
reg   [2:0] trunc_ln145_reg_394;
reg   [2:0] trunc_ln145_s_reg_399;
wire   [0:0] icmp_ln83_fu_260_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_125_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_349_fu_66;
reg   [2:0] empty_350_fu_70;
reg   [2:0] empty_351_fu_74;
reg   [2:0] empty_352_fu_78;
reg   [2:0] empty_353_fu_82;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_144_p2;
wire   [0:0] icmp_ln8341_fu_156_p2;
wire   [0:0] xor_ln78_fu_150_p2;
wire   [0:0] and_ln78_fu_162_p2;
wire   [0:0] or_ln83_fu_174_p2;
wire   [2:0] add_ln83_fu_168_p2;
wire   [7:0] add_ln79_fu_188_p2;
wire   [58:0] tmp_231_fu_275_p16;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten35_reg_99 <= add_ln78_fu_132_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten35_reg_99 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_110 <= select_ln79_fu_194_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_110 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_121 <= t_21_reg_353;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_349_fu_66 <= empty_350_fu_70;
        empty_351_fu_74 <= empty_352_fu_78;
        empty_352_fu_78 <= empty_353_fu_82;
        empty_fu_62 <= empty_349_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_350_fu_70 <= trunc_ln145_fu_246_p1;
        empty_353_fu_82 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_349 <= icmp_ln78_fu_138_p2;
        p_load43_reg_379 <= empty_352_fu_78;
        p_load44_reg_374 <= empty_351_fu_74;
        p_load47_reg_369 <= empty_349_fu_66;
        p_load48_reg_364 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_404 <= icmp_ln83_fu_260_p2;
        p_load45_reg_384 <= empty_350_fu_70;
        p_load_reg_389 <= empty_353_fu_82;
        trunc_ln145_reg_394 <= trunc_ln145_fu_246_p1;
        trunc_ln145_s_reg_399 <= {{qq_sm_head1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_21_reg_353 <= t_21_fu_180_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_125_p4 = t_21_reg_353;
    end else begin
        ap_phi_mux_t_phi_fu_125_p4 = t_reg_121;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_blk_n = qq_sm_head1_empty_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_349 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qq_sm_head1_read = 1'b1;
    end else begin
        qq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_132_p2 = (indvar_flatten35_reg_99 + 13'd1);

assign add_ln79_fu_188_p2 = (indvar_flatten_reg_110 + 8'd1);

assign add_ln83_fu_168_p2 = (ap_phi_mux_t_phi_fu_125_p4 + 3'd1);

assign adpt_sm_din = tmp_231_fu_275_p16;

assign and_ln78_fu_162_p2 = (xor_ln78_fu_150_p2 & icmp_ln8341_fu_156_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_reg_404 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_349 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (qq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_349 == 1'd0) & (qq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_reg_404 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_138_p2 = ((indvar_flatten35_reg_99 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_144_p2 = ((indvar_flatten_reg_110 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln8341_fu_156_p2 = ((ap_phi_mux_t_phi_fu_125_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_260_p2 = ((t_21_reg_353 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln83_fu_174_p2 = (icmp_ln79_fu_144_p2 | and_ln78_fu_162_p2);

assign select_ln79_fu_194_p3 = ((icmp_ln79_fu_144_p2[0:0] == 1'b1) ? 8'd1 : add_ln79_fu_188_p2);

assign start_out = real_start;

assign t_21_fu_180_p3 = ((or_ln83_fu_174_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_168_p2);

assign tmp_231_fu_275_p16 = {{{{{{{{{{{{{{{trunc_ln145_s_reg_399}, {5'd0}}, {p_load_reg_389}}, {5'd0}}, {p_load43_reg_379}}, {5'd0}}, {p_load44_reg_374}}, {5'd0}}, {trunc_ln145_reg_394}}, {5'd0}}, {p_load45_reg_384}}, {5'd0}}, {p_load47_reg_369}}, {5'd0}}, {p_load48_reg_364}};

assign trunc_ln145_fu_246_p1 = qq_sm_head1_dout[2:0];

assign xor_ln78_fu_150_p2 = (icmp_ln79_fu_144_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [95:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg lnq_sm_cp1_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    lnq_sm_cp1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_433;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_6_reg_508;
reg   [14:0] indvar_flatten51_reg_115;
reg   [8:0] indvar_flatten_reg_126;
reg   [2:0] t_reg_137;
wire   [14:0] add_ln78_fu_148_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_154_p2;
wire   [2:0] t_20_fu_196_p3;
reg   [2:0] t_20_reg_437;
wire   [8:0] select_ln79_fu_210_p3;
reg   [2:0] p_load68_reg_448;
reg   [2:0] p_load67_reg_453;
reg   [2:0] p_load66_reg_458;
reg   [2:0] p_load65_reg_463;
reg   [2:0] p_load62_reg_468;
reg   [2:0] p_load61_reg_473;
reg   [2:0] p_load60_reg_478;
reg   [2:0] p_load59_reg_483;
reg   [2:0] p_load63_reg_488;
reg   [2:0] p_load_reg_493;
wire   [2:0] trunc_ln145_fu_294_p1;
reg   [2:0] trunc_ln145_reg_498;
reg   [2:0] trunc_ln145_s_reg_503;
wire   [0:0] icmp_ln83_6_fu_308_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [2:0] ap_phi_mux_t_phi_fu_141_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_339_fu_66;
reg   [2:0] empty_340_fu_70;
reg   [2:0] empty_341_fu_74;
reg   [2:0] empty_342_fu_78;
reg   [2:0] empty_343_fu_82;
reg   [2:0] empty_344_fu_86;
reg   [2:0] empty_345_fu_90;
reg   [2:0] empty_346_fu_94;
reg   [2:0] empty_347_fu_98;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_160_p2;
wire   [0:0] icmp_ln83_fu_172_p2;
wire   [0:0] xor_ln78_fu_166_p2;
wire   [0:0] and_ln78_fu_178_p2;
wire   [0:0] or_ln83_fu_190_p2;
wire   [2:0] add_ln83_fu_184_p2;
wire   [8:0] add_ln79_fu_204_p2;
wire   [90:0] tmp_270_fu_323_p24;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten51_reg_115 <= add_ln78_fu_148_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten51_reg_115 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_126 <= select_ln79_fu_210_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_126 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_137 <= t_20_reg_437;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_137 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_339_fu_66 <= empty_340_fu_70;
        empty_340_fu_70 <= empty_341_fu_74;
        empty_341_fu_74 <= empty_342_fu_78;
        empty_343_fu_82 <= empty_344_fu_86;
        empty_344_fu_86 <= empty_345_fu_90;
        empty_345_fu_90 <= empty_346_fu_94;
        empty_346_fu_94 <= empty_347_fu_98;
        empty_fu_62 <= empty_339_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_342_fu_78 <= trunc_ln145_fu_294_p1;
        empty_347_fu_98 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_433 <= icmp_ln78_fu_154_p2;
        p_load59_reg_483 <= empty_346_fu_94;
        p_load60_reg_478 <= empty_345_fu_90;
        p_load61_reg_473 <= empty_344_fu_86;
        p_load62_reg_468 <= empty_343_fu_82;
        p_load65_reg_463 <= empty_341_fu_74;
        p_load66_reg_458 <= empty_340_fu_70;
        p_load67_reg_453 <= empty_339_fu_66;
        p_load68_reg_448 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_6_reg_508 <= icmp_ln83_6_fu_308_p2;
        p_load63_reg_488 <= empty_342_fu_78;
        p_load_reg_493 <= empty_347_fu_98;
        trunc_ln145_reg_498 <= trunc_ln145_fu_294_p1;
        trunc_ln145_s_reg_503 <= {{lnq_sm_cp1_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_20_reg_437 <= t_20_fu_196_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_6_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_6_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_141_p4 = t_20_reg_437;
    end else begin
        ap_phi_mux_t_phi_fu_141_p4 = t_reg_137;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_empty_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_433 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_read = 1'b1;
    end else begin
        lnq_sm_cp1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_148_p2 = (indvar_flatten51_reg_115 + 15'd1);

assign add_ln79_fu_204_p2 = (indvar_flatten_reg_126 + 9'd1);

assign add_ln83_fu_184_p2 = (ap_phi_mux_t_phi_fu_141_p4 + 3'd1);

assign adpt_sm_din = tmp_270_fu_323_p24;

assign and_ln78_fu_178_p2 = (xor_ln78_fu_166_p2 & icmp_ln83_fu_172_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_6_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_6_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_6_reg_508 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_433 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (lnq_sm_cp1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_433 == 1'd0) & (lnq_sm_cp1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_6_reg_508 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_154_p2 = ((indvar_flatten51_reg_115 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_160_p2 = ((indvar_flatten_reg_126 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_6_fu_308_p2 = ((t_20_reg_437 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_172_p2 = ((ap_phi_mux_t_phi_fu_141_p4 == 3'd6) ? 1'b1 : 1'b0);

assign or_ln83_fu_190_p2 = (icmp_ln79_fu_160_p2 | and_ln78_fu_178_p2);

assign select_ln79_fu_210_p3 = ((icmp_ln79_fu_160_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_204_p2);

assign start_out = real_start;

assign t_20_fu_196_p3 = ((or_ln83_fu_190_p2[0:0] == 1'b1) ? 3'd1 : add_ln83_fu_184_p2);

assign tmp_270_fu_323_p24 = {{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_503}, {5'd0}}, {p_load_reg_493}}, {5'd0}}, {p_load59_reg_483}}, {5'd0}}, {p_load60_reg_478}}, {5'd0}}, {p_load61_reg_473}}, {5'd0}}, {p_load62_reg_468}}, {5'd0}}, {trunc_ln145_reg_498}}, {5'd0}}, {p_load63_reg_488}}, {5'd0}}, {p_load65_reg_463}}, {5'd0}}, {p_load66_reg_458}}, {5'd0}}, {p_load67_reg_453}}, {5'd0}}, {p_load68_reg_448}};

assign trunc_ln145_fu_294_p1 = lnq_sm_cp1_dout[2:0];

assign xor_ln78_fu_166_p2 = (icmp_ln79_fu_160_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        aq_sm_dout,
        aq_sm_empty_n,
        aq_sm_read,
        adpt_sm_din,
        adpt_sm_full_n,
        adpt_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] aq_sm_dout;
input   aq_sm_empty_n;
output   aq_sm_read;
output  [191:0] adpt_sm_din;
input   adpt_sm_full_n;
output   adpt_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg aq_sm_read;
reg adpt_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    aq_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_685;
reg    adpt_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln83_reg_820;
reg   [14:0] indvar_flatten99_reg_163;
reg   [8:0] indvar_flatten_reg_174;
reg   [3:0] t_reg_185;
wire   [14:0] add_ln78_fu_196_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_202_p2;
wire   [3:0] t_19_fu_244_p3;
reg   [3:0] t_19_reg_689;
wire   [8:0] select_ln79_fu_258_p3;
reg   [2:0] p_load128_reg_700;
reg   [2:0] p_load127_reg_705;
reg   [2:0] p_load126_reg_710;
reg   [2:0] p_load125_reg_715;
reg   [2:0] p_load124_reg_720;
reg   [2:0] p_load123_reg_725;
reg   [2:0] p_load122_reg_730;
reg   [2:0] p_load121_reg_735;
reg   [2:0] p_load120_reg_740;
reg   [2:0] p_load119_reg_745;
reg   [2:0] p_load116_reg_750;
reg   [2:0] p_load115_reg_755;
reg   [2:0] p_load114_reg_760;
reg   [2:0] p_load113_reg_765;
reg   [2:0] p_load112_reg_770;
reg   [2:0] p_load111_reg_775;
reg   [2:0] p_load110_reg_780;
reg   [2:0] p_load109_reg_785;
reg   [2:0] p_load108_reg_790;
reg   [2:0] p_load107_reg_795;
reg   [2:0] p_load117_reg_800;
reg   [2:0] p_load_reg_805;
wire   [2:0] trunc_ln145_fu_438_p1;
reg   [2:0] trunc_ln145_reg_810;
reg   [2:0] trunc_ln145_s_reg_815;
wire   [0:0] icmp_ln83_fu_452_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [3:0] ap_phi_mux_t_phi_fu_189_p4;
reg   [2:0] empty_fu_62;
reg   [2:0] empty_317_fu_66;
reg   [2:0] empty_318_fu_70;
reg   [2:0] empty_319_fu_74;
reg   [2:0] empty_320_fu_78;
reg   [2:0] empty_321_fu_82;
reg   [2:0] empty_322_fu_86;
reg   [2:0] empty_323_fu_90;
reg   [2:0] empty_324_fu_94;
reg   [2:0] empty_325_fu_98;
reg   [2:0] empty_326_fu_102;
reg   [2:0] empty_327_fu_106;
reg   [2:0] empty_328_fu_110;
reg   [2:0] empty_329_fu_114;
reg   [2:0] empty_330_fu_118;
reg   [2:0] empty_331_fu_122;
reg   [2:0] empty_332_fu_126;
reg   [2:0] empty_333_fu_130;
reg   [2:0] empty_334_fu_134;
reg   [2:0] empty_335_fu_138;
reg   [2:0] empty_336_fu_142;
reg   [2:0] empty_337_fu_146;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_208_p2;
wire   [0:0] icmp_ln83105_fu_220_p2;
wire   [0:0] xor_ln78_fu_214_p2;
wire   [0:0] and_ln78_fu_226_p2;
wire   [0:0] or_ln83_fu_238_p2;
wire   [3:0] add_ln83_fu_232_p2;
wire   [8:0] add_ln79_fu_252_p2;
wire   [186:0] tmp_301_fu_467_p48;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten99_reg_163 <= add_ln78_fu_196_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten99_reg_163 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_174 <= select_ln79_fu_258_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_174 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_185 <= t_19_reg_689;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_317_fu_66 <= empty_318_fu_70;
        empty_318_fu_70 <= empty_319_fu_74;
        empty_319_fu_74 <= empty_320_fu_78;
        empty_320_fu_78 <= empty_321_fu_82;
        empty_321_fu_82 <= empty_322_fu_86;
        empty_322_fu_86 <= empty_323_fu_90;
        empty_323_fu_90 <= empty_324_fu_94;
        empty_324_fu_94 <= empty_325_fu_98;
        empty_325_fu_98 <= empty_326_fu_102;
        empty_327_fu_106 <= empty_328_fu_110;
        empty_328_fu_110 <= empty_329_fu_114;
        empty_329_fu_114 <= empty_330_fu_118;
        empty_330_fu_118 <= empty_331_fu_122;
        empty_331_fu_122 <= empty_332_fu_126;
        empty_332_fu_126 <= empty_333_fu_130;
        empty_333_fu_130 <= empty_334_fu_134;
        empty_334_fu_134 <= empty_335_fu_138;
        empty_335_fu_138 <= empty_336_fu_142;
        empty_336_fu_142 <= empty_337_fu_146;
        empty_fu_62 <= empty_317_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_326_fu_102 <= trunc_ln145_fu_438_p1;
        empty_337_fu_146 <= {{aq_sm_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_685 <= icmp_ln78_fu_202_p2;
        p_load107_reg_795 <= empty_336_fu_142;
        p_load108_reg_790 <= empty_335_fu_138;
        p_load109_reg_785 <= empty_334_fu_134;
        p_load110_reg_780 <= empty_333_fu_130;
        p_load111_reg_775 <= empty_332_fu_126;
        p_load112_reg_770 <= empty_331_fu_122;
        p_load113_reg_765 <= empty_330_fu_118;
        p_load114_reg_760 <= empty_329_fu_114;
        p_load115_reg_755 <= empty_328_fu_110;
        p_load116_reg_750 <= empty_327_fu_106;
        p_load119_reg_745 <= empty_325_fu_98;
        p_load120_reg_740 <= empty_324_fu_94;
        p_load121_reg_735 <= empty_323_fu_90;
        p_load122_reg_730 <= empty_322_fu_86;
        p_load123_reg_725 <= empty_321_fu_82;
        p_load124_reg_720 <= empty_320_fu_78;
        p_load125_reg_715 <= empty_319_fu_74;
        p_load126_reg_710 <= empty_318_fu_70;
        p_load127_reg_705 <= empty_317_fu_66;
        p_load128_reg_700 <= empty_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_reg_820 <= icmp_ln83_fu_452_p2;
        p_load117_reg_800 <= empty_326_fu_102;
        p_load_reg_805 <= empty_337_fu_146;
        trunc_ln145_reg_810 <= trunc_ln145_fu_438_p1;
        trunc_ln145_s_reg_815 <= {{aq_sm_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_202_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_19_reg_689 <= t_19_fu_244_p3;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_820 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_full_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_reg_820 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        adpt_sm_write = 1'b1;
    end else begin
        adpt_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_fu_202_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_189_p4 = t_19_reg_689;
    end else begin
        ap_phi_mux_t_phi_fu_189_p4 = t_reg_185;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aq_sm_blk_n = aq_sm_empty_n;
    end else begin
        aq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_685 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aq_sm_read = 1'b1;
    end else begin
        aq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_196_p2 = (indvar_flatten99_reg_163 + 15'd1);

assign add_ln79_fu_252_p2 = (indvar_flatten_reg_174 + 9'd1);

assign add_ln83_fu_232_p2 = (ap_phi_mux_t_phi_fu_189_p4 + 4'd1);

assign adpt_sm_din = tmp_301_fu_467_p48;

assign and_ln78_fu_226_p2 = (xor_ln78_fu_214_p2 & icmp_ln83105_fu_220_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln83_reg_820 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_685 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (aq_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln83_reg_820 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_685 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (aq_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln83_reg_820 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == adpt_sm_full_n)) | ((icmp_ln78_reg_685 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (aq_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln78_reg_685 == 1'd0) & (aq_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln83_reg_820 == 1'd1) & (1'b0 == adpt_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_202_p2 = ((indvar_flatten99_reg_163 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_208_p2 = ((indvar_flatten_reg_174 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83105_fu_220_p2 = ((ap_phi_mux_t_phi_fu_189_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_452_p2 = ((t_19_reg_689 == 4'd12) ? 1'b1 : 1'b0);

assign or_ln83_fu_238_p2 = (icmp_ln79_fu_208_p2 | and_ln78_fu_226_p2);

assign select_ln79_fu_258_p3 = ((icmp_ln79_fu_208_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_252_p2);

assign start_out = real_start;

assign t_19_fu_244_p3 = ((or_ln83_fu_238_p2[0:0] == 1'b1) ? 4'd1 : add_ln83_fu_232_p2);

assign tmp_301_fu_467_p48 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_s_reg_815}, {5'd0}}, {p_load_reg_805}}, {5'd0}}, {p_load107_reg_795}}, {5'd0}}, {p_load108_reg_790}}, {5'd0}}, {p_load109_reg_785}}, {5'd0}}, {p_load110_reg_780}}, {5'd0}}, {p_load111_reg_775}}, {5'd0}}, {p_load112_reg_770}}, {5'd0}}, {p_load113_reg_765}}, {5'd0}}, {p_load114_reg_760}}, {5'd0}}, {p_load115_reg_755}}, {5'd0}}, {p_load116_reg_750}}, {5'd0}}, {trunc_ln145_reg_810}}, {5'd0}}, {p_load117_reg_800}}, {5'd0}}, {p_load119_reg_745}}, {5'd0}}, {p_load120_reg_740}}, {5'd0}}, {p_load121_reg_735}}, {5'd0}}, {p_load122_reg_730}}, {5'd0}}, {p_load123_reg_725}}, {5'd0}}, {p_load124_reg_720}}, {5'd0}}, {p_load125_reg_715}}, {5'd0}}, {p_load126_reg_710}}, {5'd0}}, {p_load127_reg_705}}, {5'd0}}, {p_load128_reg_700}};

assign trunc_ln145_fu_438_p1 = aq_sm_dout[2:0];

assign xor_ln78_fu_214_p2 = (icmp_ln79_fu_208_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_3
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        o_sm_din,
        o_sm_full_n,
        o_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [191:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] o_sm_din;
input   o_sm_full_n;
output   o_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg o_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_555;
reg   [0:0] icmp_ln45_reg_555_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_570;
reg    o_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_555_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_147;
reg   [8:0] indvar_flatten_reg_158;
reg   [2:0] t_reg_169;
reg   [155:0] vec_i_data_M_elems_V_2_reg_180;
reg   [12:0] p_fca_0_0_1_0_0_0_extract162_reg_191;
reg   [12:0] p_fca_0_0_1_0_0_0_extract161_reg_224;
wire   [14:0] add_ln45_fu_246_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_252_p2;
wire   [0:0] icmp_ln46_fu_258_p2;
reg   [0:0] icmp_ln46_reg_559;
wire   [8:0] select_ln46_11_fu_270_p3;
wire   [0:0] icmp_ln50_fu_308_p2;
wire   [2:0] t_18_fu_314_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [12:0] trunc_ln50_fu_320_p1;
reg   [12:0] tmp_640_reg_589;
wire   [155:0] vec_i_data_M_elems_V_4_fu_524_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [155:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4;
wire   [155:0] vec_i_data_M_elems_V_fu_459_p5;
wire   [155:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_214;
wire   [12:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract161_reg_224;
wire   [12:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract159_reg_236;
reg   [12:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract159_reg_236;
reg   [12:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract159_reg_236;
reg   [12:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract159_reg_236;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln46_fu_264_p2;
wire   [0:0] icmp_ln47_fu_283_p2;
wire   [0:0] xor_ln45_fu_278_p2;
wire   [0:0] and_ln45_fu_289_p2;
wire   [0:0] or_ln46_fu_295_p2;
wire   [2:0] select_ln46_fu_300_p3;
wire   [12:0] trunc_ln50_11_fu_425_p4;
wire   [12:0] trunc_ln50_10_fu_415_p4;
wire   [12:0] trunc_ln50_9_fu_405_p4;
wire   [12:0] trunc_ln50_8_fu_395_p4;
wire   [12:0] trunc_ln50_7_fu_385_p4;
wire   [12:0] trunc_ln50_6_fu_375_p4;
wire   [12:0] trunc_ln50_5_fu_365_p4;
wire   [12:0] trunc_ln50_4_fu_355_p4;
wire   [12:0] trunc_ln50_3_fu_345_p4;
wire   [12:0] trunc_ln50_2_fu_335_p4;
wire   [129:0] tmp_s_fu_435_p11;
wire   [64:0] tmp_641_fu_492_p4;
wire   [38:0] tmp_642_fu_502_p4;
wire   [129:0] tmp_643_fu_512_p5;
wire   [28:0] tmp_644_fu_536_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_570 == 1'd0) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract159_reg_236 <= p_fca_0_0_1_0_0_0_extract161_reg_224;
        end else if (((icmp_ln50_reg_570 == 1'd1) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract159_reg_236 <= trunc_ln50_fu_320_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract159_reg_236 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract159_reg_236;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_252_p2 == 1'd0))) begin
        indvar_flatten17_reg_147 <= add_ln45_fu_246_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_147 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_252_p2 == 1'd0))) begin
        indvar_flatten_reg_158 <= select_ln46_11_fu_270_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_158 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_570 == 1'd0) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract161_reg_224 <= p_fca_0_0_1_0_0_0_extract162_reg_191;
        end else if (((icmp_ln50_reg_570 == 1'd1) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract161_reg_224 <= {{mac_sm_dout[28:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract161_reg_224 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract161_reg_224;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_169 <= t_18_fu_314_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_169 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract159_reg_236 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract159_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract159_reg_236 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract159_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_555 <= icmp_ln45_fu_252_p2;
        icmp_ln45_reg_555_pp0_iter1_reg <= icmp_ln45_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_555_pp0_iter2_reg <= icmp_ln45_reg_555_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_252_p2 == 1'd0))) begin
        icmp_ln46_reg_559 <= icmp_ln46_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_555 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_570 <= icmp_ln50_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_555_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract162_reg_191 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4[38:26]}};
        vec_i_data_M_elems_V_2_reg_180 <= vec_i_data_M_elems_V_4_fu_524_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_555_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_640_reg_589 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4[90:78]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_252_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_555_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_570 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4 = vec_i_data_M_elems_V_2_reg_180;
        end else if ((icmp_ln50_reg_570 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4 = vec_i_data_M_elems_V_fu_459_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_214;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_214;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_570 == 1'd1) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        o_sm_blk_n = o_sm_full_n;
    end else begin
        o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_sm_write = 1'b1;
    end else begin
        o_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_246_p2 = (indvar_flatten17_reg_147 + 15'd1);

assign add_ln46_fu_264_p2 = (indvar_flatten_reg_158 + 9'd1);

assign and_ln45_fu_289_p2 = (xor_ln45_fu_278_p2 & icmp_ln47_fu_283_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (o_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (o_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (o_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_555_pp0_iter2_reg == 1'd0) & (o_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract159_reg_236 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract161_reg_224 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_214 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_570 == 1'd1) & (icmp_ln45_reg_555_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_252_p2 = ((indvar_flatten17_reg_147 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_258_p2 = ((indvar_flatten_reg_158 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_283_p2 = ((t_reg_169 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_308_p2 = ((select_ln46_fu_300_p3 == 3'd0) ? 1'b1 : 1'b0);

assign o_sm_din = tmp_644_fu_536_p4;

assign or_ln46_fu_295_p2 = (icmp_ln46_reg_559 | and_ln45_fu_289_p2);

assign select_ln46_11_fu_270_p3 = ((icmp_ln46_fu_258_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_264_p2);

assign select_ln46_fu_300_p3 = ((or_ln46_fu_295_p2[0:0] == 1'b1) ? 3'd0 : t_reg_169);

assign t_18_fu_314_p2 = (select_ln46_fu_300_p3 + 3'd1);

assign tmp_641_fu_492_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4[155:91]}};

assign tmp_642_fu_502_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4[77:39]}};

assign tmp_643_fu_512_p5 = {{{{{{13'd0}, {tmp_641_fu_492_p4}}}, {13'd0}}}, {tmp_642_fu_502_p4}};

assign tmp_644_fu_536_p4 = {{{tmp_640_reg_589}, {3'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract159_reg_236}};

assign tmp_s_fu_435_p11 = {{{{{{{{{{trunc_ln50_11_fu_425_p4}, {trunc_ln50_10_fu_415_p4}}, {trunc_ln50_9_fu_405_p4}}, {trunc_ln50_8_fu_395_p4}}, {trunc_ln50_7_fu_385_p4}}, {trunc_ln50_6_fu_375_p4}}, {trunc_ln50_5_fu_365_p4}}, {trunc_ln50_4_fu_355_p4}}, {trunc_ln50_3_fu_345_p4}}, {trunc_ln50_2_fu_335_p4}};

assign trunc_ln50_10_fu_415_p4 = {{mac_sm_dout[172:160]}};

assign trunc_ln50_11_fu_425_p4 = {{mac_sm_dout[188:176]}};

assign trunc_ln50_2_fu_335_p4 = {{mac_sm_dout[44:32]}};

assign trunc_ln50_3_fu_345_p4 = {{mac_sm_dout[60:48]}};

assign trunc_ln50_4_fu_355_p4 = {{mac_sm_dout[76:64]}};

assign trunc_ln50_5_fu_365_p4 = {{mac_sm_dout[92:80]}};

assign trunc_ln50_6_fu_375_p4 = {{mac_sm_dout[108:96]}};

assign trunc_ln50_7_fu_385_p4 = {{mac_sm_dout[124:112]}};

assign trunc_ln50_8_fu_395_p4 = {{mac_sm_dout[140:128]}};

assign trunc_ln50_9_fu_405_p4 = {{mac_sm_dout[156:144]}};

assign trunc_ln50_fu_320_p1 = mac_sm_dout[12:0];

assign vec_i_data_M_elems_V_4_fu_524_p5 = {{tmp_643_fu_512_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_217_p4[25:0]}};

assign vec_i_data_M_elems_V_fu_459_p5 = {{tmp_s_fu_435_p11}, {vec_i_data_M_elems_V_2_reg_180[25:0]}};

assign xor_ln45_fu_278_p2 = (icmp_ln46_reg_559 ^ 1'd1);

endmodule //ATTN0_do_adapt_4
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        resi_sm_dout,
        resi_sm_empty_n,
        resi_sm_read,
        resi_o_sm_din,
        resi_o_sm_full_n,
        resi_o_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] resi_sm_dout;
input   resi_sm_empty_n;
output   resi_sm_read;
output  [31:0] resi_o_sm_din;
input   resi_o_sm_full_n;
output   resi_o_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg resi_sm_read;
reg resi_o_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    resi_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_382;
reg   [0:0] icmp_ln50_reg_386;
reg    resi_o_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln45_reg_382_pp0_iter1_reg;
reg   [14:0] indvar_flatten15_reg_103;
reg   [8:0] indvar_flatten_reg_114;
reg   [1:0] t_reg_125;
reg   [51:0] vec_i_data_M_elems_V_2_reg_136;
reg   [12:0] p_fca_0_0_1_0_0_0_extract81_reg_169;
wire   [14:0] add_ln45_fu_191_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op33_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_197_p2;
wire   [0:0] icmp_ln50_fu_241_p2;
wire   [1:0] t_17_fu_247_p2;
wire   [8:0] select_ln46_10_fu_259_p3;
wire   [12:0] trunc_ln50_fu_267_p1;
reg   [12:0] tmp_635_reg_405;
wire   [51:0] vec_i_data_M_elems_V_5_fu_351_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [51:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4;
wire   [51:0] vec_i_data_M_elems_V_fu_310_p5;
wire   [51:0] ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_3_reg_159;
wire   [12:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract81_reg_169;
wire   [12:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract79_reg_181;
reg   [12:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract79_reg_181;
reg   [12:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract79_reg_181;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln46_fu_203_p2;
wire   [0:0] icmp_ln47_fu_215_p2;
wire   [0:0] xor_ln45_fu_209_p2;
wire   [0:0] and_ln45_fu_221_p2;
wire   [0:0] or_ln46_fu_227_p2;
wire   [1:0] select_ln46_fu_233_p3;
wire   [8:0] add_ln46_fu_253_p2;
wire   [12:0] trunc_ln50_14_fu_292_p4;
wire   [12:0] trunc_ln50_13_fu_282_p4;
wire   [25:0] tmp_s_fu_302_p3;
wire   [12:0] tmp_636_fu_333_p4;
wire   [25:0] tmp_637_fu_343_p3;
wire   [28:0] tmp_638_fu_363_p4;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if (((icmp_ln50_reg_386 == 1'd0) & (icmp_ln45_reg_382 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract79_reg_181 <= p_fca_0_0_1_0_0_0_extract81_reg_169;
        end else if (((icmp_ln50_reg_386 == 1'd1) & (icmp_ln45_reg_382 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract79_reg_181 <= trunc_ln50_fu_267_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract79_reg_181 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract79_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
        indvar_flatten15_reg_103 <= add_ln45_fu_191_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten15_reg_103 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
        indvar_flatten_reg_114 <= select_ln46_10_fu_259_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_114 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_134)) begin
        if (((icmp_ln50_reg_386 == 1'd0) & (icmp_ln45_reg_382 == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract81_reg_169 <= 13'd0;
        end else if (((icmp_ln50_reg_386 == 1'd1) & (icmp_ln45_reg_382 == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract81_reg_169 <= {{resi_sm_dout[28:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract81_reg_169 <= ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract81_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
        t_reg_125 <= t_17_fu_247_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_125 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract79_reg_181 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract79_reg_181;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_382 <= icmp_ln45_fu_197_p2;
        icmp_ln45_reg_382_pp0_iter1_reg <= icmp_ln45_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
        icmp_ln50_reg_386 <= icmp_ln50_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_635_reg_405 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4[38:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_reg_136 <= vec_i_data_M_elems_V_5_fu_351_p5;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_197_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_382 == 1'd0)) begin
        if ((icmp_ln50_reg_386 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4 = vec_i_data_M_elems_V_2_reg_136;
        end else if ((icmp_ln50_reg_386 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4 = vec_i_data_M_elems_V_fu_310_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_3_reg_159;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_3_reg_159;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        resi_o_sm_blk_n = resi_o_sm_full_n;
    end else begin
        resi_o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        resi_o_sm_write = 1'b1;
    end else begin
        resi_o_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_386 == 1'd1) & (icmp_ln45_reg_382 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_sm_blk_n = resi_sm_empty_n;
    end else begin
        resi_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_sm_read = 1'b1;
    end else begin
        resi_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_191_p2 = (indvar_flatten15_reg_103 + 15'd1);

assign add_ln46_fu_253_p2 = (indvar_flatten_reg_114 + 9'd1);

assign and_ln45_fu_221_p2 = (xor_ln45_fu_209_p2 & icmp_ln47_fu_215_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (resi_o_sm_full_n == 1'b0)) | ((ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (resi_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (resi_o_sm_full_n == 1'b0)) | ((ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (resi_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (resi_o_sm_full_n == 1'b0)) | ((ap_predicate_op33_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (resi_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((ap_predicate_op33_read_state3 == 1'b1) & (resi_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln45_reg_382_pp0_iter1_reg == 1'd0) & (resi_o_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_134 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract79_reg_181 = 'bx;

assign ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_extract81_reg_169 = 'bx;

assign ap_phi_reg_pp0_iter1_vec_i_data_M_elems_V_3_reg_159 = 'bx;

always @ (*) begin
    ap_predicate_op33_read_state3 = ((icmp_ln50_reg_386 == 1'd1) & (icmp_ln45_reg_382 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign icmp_ln45_fu_197_p2 = ((indvar_flatten15_reg_103 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_203_p2 = ((indvar_flatten_reg_114 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_215_p2 = ((t_reg_125 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_241_p2 = ((select_ln46_fu_233_p3 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_227_p2 = (icmp_ln46_fu_203_p2 | and_ln45_fu_221_p2);

assign resi_o_sm_din = tmp_638_fu_363_p4;

assign select_ln46_10_fu_259_p3 = ((icmp_ln46_fu_203_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_253_p2);

assign select_ln46_fu_233_p3 = ((or_ln46_fu_227_p2[0:0] == 1'b1) ? 2'd0 : t_reg_125);

assign start_out = real_start;

assign t_17_fu_247_p2 = (select_ln46_fu_233_p3 + 2'd1);

assign tmp_636_fu_333_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4[51:39]}};

assign tmp_637_fu_343_p3 = {{13'd0}, {tmp_636_fu_333_p4}};

assign tmp_638_fu_363_p4 = {{{tmp_635_reg_405}, {3'd0}}, {ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract79_reg_181}};

assign tmp_s_fu_302_p3 = {{trunc_ln50_14_fu_292_p4}, {trunc_ln50_13_fu_282_p4}};

assign trunc_ln50_13_fu_282_p4 = {{resi_sm_dout[44:32]}};

assign trunc_ln50_14_fu_292_p4 = {{resi_sm_dout[60:48]}};

assign trunc_ln50_fu_267_p1 = resi_sm_dout[12:0];

assign vec_i_data_M_elems_V_5_fu_351_p5 = {{tmp_637_fu_343_p3}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_162_p4[25:0]}};

assign vec_i_data_M_elems_V_fu_310_p5 = {{tmp_s_fu_302_p3}, {vec_i_data_M_elems_V_2_reg_136[25:0]}};

assign xor_ln45_fu_209_p2 = (icmp_ln46_fu_203_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_5
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_6 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        resi_i_sm_dout,
        resi_i_sm_empty_n,
        resi_i_sm_read,
        resi_sm_din,
        resi_sm_full_n,
        resi_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] resi_i_sm_dout;
input   resi_i_sm_empty_n;
output   resi_i_sm_read;
output  [63:0] resi_sm_din;
input   resi_sm_full_n;
output   resi_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg resi_i_sm_read;
reg resi_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    resi_i_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln78_reg_262;
reg    resi_sm_blk_n;
reg   [0:0] icmp_ln83_5_reg_271;
reg   [14:0] indvar_flatten19_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] t_reg_105;
wire   [14:0] add_ln78_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_122_p2;
wire   [1:0] t_16_fu_164_p3;
reg   [1:0] t_16_reg_266;
wire   [0:0] icmp_ln83_5_fu_172_p2;
wire   [8:0] select_ln79_fu_184_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_t_phi_fu_109_p4;
reg   [12:0] empty_fu_62;
wire   [12:0] trunc_ln145_fu_198_p1;
reg   [12:0] empty_315_fu_66;
wire   [12:0] trunc_ln145_s_fu_202_p4;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln79_fu_128_p2;
wire   [0:0] icmp_ln83_fu_140_p2;
wire   [0:0] xor_ln78_fu_134_p2;
wire   [0:0] and_ln78_fu_146_p2;
wire   [0:0] or_ln83_fu_158_p2;
wire   [1:0] add_ln83_fu_152_p2;
wire   [8:0] add_ln79_fu_178_p2;
wire   [60:0] tmp_302_fu_222_p8;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten19_reg_83 <= add_ln78_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten19_reg_83 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln79_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_reg_105 <= t_16_reg_266;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_315_fu_66 <= {{resi_i_sm_dout[28:16]}};
        empty_fu_62 <= trunc_ln145_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln78_reg_262 <= icmp_ln78_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln83_5_reg_271 <= icmp_ln83_5_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_16_reg_266 <= t_16_fu_164_p3;
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_phi_fu_109_p4 = t_16_reg_266;
    end else begin
        ap_phi_mux_t_phi_fu_109_p4 = t_reg_105;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_blk_n = resi_i_sm_empty_n;
    end else begin
        resi_i_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_262 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_read = 1'b1;
    end else begin
        resi_i_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_5_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_sm_blk_n = resi_sm_full_n;
    end else begin
        resi_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln83_5_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_sm_write = 1'b1;
    end else begin
        resi_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln78_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln78_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_116_p2 = (indvar_flatten19_reg_83 + 15'd1);

assign add_ln79_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln83_fu_152_p2 = (ap_phi_mux_t_phi_fu_109_p4 + 2'd1);

assign and_ln78_fu_146_p2 = (xor_ln78_fu_134_p2 & icmp_ln83_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln83_5_reg_271 == 1'd1) & (resi_sm_full_n == 1'b0)) | ((icmp_ln78_reg_262 == 1'd0) & (resi_i_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln83_5_reg_271 == 1'd1) & (resi_sm_full_n == 1'b0)) | ((icmp_ln78_reg_262 == 1'd0) & (resi_i_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln83_5_reg_271 == 1'd1) & (resi_sm_full_n == 1'b0)) | ((icmp_ln78_reg_262 == 1'd0) & (resi_i_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln83_5_reg_271 == 1'd1) & (resi_sm_full_n == 1'b0)) | ((icmp_ln78_reg_262 == 1'd0) & (resi_i_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln78_fu_122_p2 = ((indvar_flatten19_reg_83 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln83_5_fu_172_p2 = ((t_16_fu_164_p3 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_140_p2 = ((ap_phi_mux_t_phi_fu_109_p4 == 2'd2) ? 1'b1 : 1'b0);

assign or_ln83_fu_158_p2 = (icmp_ln79_fu_128_p2 | and_ln78_fu_146_p2);

assign resi_sm_din = tmp_302_fu_222_p8;

assign select_ln79_fu_184_p3 = ((icmp_ln79_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln79_fu_178_p2);

assign start_out = real_start;

assign t_16_fu_164_p3 = ((or_ln83_fu_158_p2[0:0] == 1'b1) ? 2'd1 : add_ln83_fu_152_p2);

assign tmp_302_fu_222_p8 = {{{{{{{trunc_ln145_s_fu_202_p4}, {3'd0}}, {empty_315_fu_66}}, {3'd0}}, {trunc_ln145_fu_198_p1}}, {3'd0}}, {empty_fu_62}};

assign trunc_ln145_fu_198_p1 = resi_i_sm_dout[12:0];

assign trunc_ln145_s_fu_202_p4 = {{resi_i_sm_dout[28:16]}};

assign xor_ln78_fu_134_p2 = (icmp_ln79_fu_128_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_6
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg a_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_489;
reg   [0:0] icmp_ln45_reg_489_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_504;
reg    a_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_489_pp0_iter2_reg;
reg   [12:0] indvar_flatten17_reg_129;
reg   [7:0] indvar_flatten_reg_140;
reg   [2:0] t_reg_151;
reg   [87:0] vec_i_data_M_elems_V_2_reg_162;
reg   [10:0] p_fca_0_0_1_0_0_0_extract122_reg_173;
reg   [10:0] p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [12:0] add_ln45_fu_228_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_234_p2;
wire   [0:0] icmp_ln46_fu_240_p2;
reg   [0:0] icmp_ln46_reg_493;
wire   [7:0] select_ln46_9_fu_252_p3;
wire   [0:0] icmp_ln50_fu_290_p2;
wire   [2:0] t_15_fu_296_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [10:0] trunc_ln50_fu_302_p1;
reg   [10:0] tmp_631_reg_523;
wire   [87:0] vec_i_data_M_elems_V_8_fu_458_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [87:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4;
wire   [87:0] vec_i_data_M_elems_V_fu_393_p5;
wire   [87:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_246_p2;
wire   [0:0] icmp_ln47_fu_265_p2;
wire   [0:0] xor_ln45_fu_260_p2;
wire   [0:0] and_ln45_fu_271_p2;
wire   [0:0] or_ln46_fu_277_p2;
wire   [2:0] select_ln46_fu_282_p3;
wire   [10:0] trunc_ln50_21_fu_367_p4;
wire   [10:0] trunc_ln50_20_fu_357_p4;
wire   [10:0] trunc_ln50_19_fu_347_p4;
wire   [10:0] trunc_ln50_18_fu_337_p4;
wire   [10:0] trunc_ln50_17_fu_327_p4;
wire   [10:0] trunc_ln50_16_fu_317_p4;
wire   [65:0] tmp_s_fu_377_p7;
wire   [32:0] tmp_632_fu_436_p4;
wire   [10:0] tmp_630_fu_416_p4;
wire   [65:0] tmp_633_fu_446_p5;
wire   [26:0] tmp_634_fu_470_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= p_fca_0_0_1_0_0_0_extract121_reg_206;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= trunc_ln50_fu_302_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten17_reg_129 <= add_ln45_fu_228_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_129 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        indvar_flatten_reg_140 <= select_ln46_9_fu_252_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_504 == 1'd0) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= p_fca_0_0_1_0_0_0_extract122_reg_173;
        end else if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract121_reg_206 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_151 <= t_15_fu_296_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract119_reg_218 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract119_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_489 <= icmp_ln45_fu_234_p2;
        icmp_ln45_reg_489_pp0_iter1_reg <= icmp_ln45_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_489_pp0_iter2_reg <= icmp_ln45_reg_489_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd0))) begin
        icmp_ln46_reg_493 <= icmp_ln46_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_504 <= icmp_ln50_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract122_reg_173 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_162 <= vec_i_data_M_elems_V_8_fu_458_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_631_reg_523 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[54:44]}};
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_head1_blk_n = a_sm_head1_full_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_head1_write = 1'b1;
    end else begin
        a_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_234_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_489_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_504 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_2_reg_162;
        end else if ((icmp_ln50_reg_504 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = vec_i_data_M_elems_V_fu_393_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_head1_din = tmp_634_fu_470_p4;

assign add_ln45_fu_228_p2 = (indvar_flatten17_reg_129 + 13'd1);

assign add_ln46_fu_246_p2 = (indvar_flatten_reg_140 + 8'd1);

assign and_ln45_fu_271_p2 = (xor_ln45_fu_260_p2 & icmp_ln47_fu_265_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_head1_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_489_pp0_iter2_reg == 1'd0) & (1'b0 == a_sm_head1_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract119_reg_218 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract121_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_196 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_504 == 1'd1) & (icmp_ln45_reg_489_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_234_p2 = ((indvar_flatten17_reg_129 == 13'd6272) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_240_p2 = ((indvar_flatten_reg_140 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_265_p2 = ((t_reg_151 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_290_p2 = ((select_ln46_fu_282_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_277_p2 = (icmp_ln46_reg_493 | and_ln45_fu_271_p2);

assign select_ln46_9_fu_252_p3 = ((icmp_ln46_fu_240_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_246_p2);

assign select_ln46_fu_282_p3 = ((or_ln46_fu_277_p2[0:0] == 1'b1) ? 3'd0 : t_reg_151);

assign t_15_fu_296_p2 = (select_ln46_fu_282_p3 + 3'd1);

assign tmp_630_fu_416_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[43:33]}};

assign tmp_632_fu_436_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[87:55]}};

assign tmp_633_fu_446_p5 = {{{{{{11'd0}, {tmp_632_fu_436_p4}}}, {11'd0}}}, {tmp_630_fu_416_p4}};

assign tmp_634_fu_470_p4 = {{{tmp_631_reg_523}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract119_reg_218}};

assign tmp_s_fu_377_p7 = {{{{{{trunc_ln50_21_fu_367_p4}, {trunc_ln50_20_fu_357_p4}}, {trunc_ln50_19_fu_347_p4}}, {trunc_ln50_18_fu_337_p4}}, {trunc_ln50_17_fu_327_p4}}, {trunc_ln50_16_fu_317_p4}};

assign trunc_ln50_16_fu_317_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_17_fu_327_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_18_fu_337_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_19_fu_347_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_20_fu_357_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_21_fu_367_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_fu_302_p1 = mac_sm_dout[10:0];

assign vec_i_data_M_elems_V_8_fu_458_p5 = {{tmp_633_fu_446_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_199_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_393_p5 = {{tmp_s_fu_377_p7}, {vec_i_data_M_elems_V_2_reg_162[21:0]}};

assign xor_ln45_fu_260_p2 = (icmp_ln46_reg_493 ^ 1'd1);

endmodule //ATTN0_do_adapt_7
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [383:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg q_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_748;
reg   [0:0] icmp_ln45_reg_748_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_767;
reg    q_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_748_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_195;
reg   [8:0] indvar_flatten_reg_206;
reg   [3:0] t_reg_217;
reg   [263:0] vec_i_data_M_elems_V_2_reg_228;
reg   [10:0] p_fca_0_0_1_0_0_0_extract282_reg_239;
reg   [10:0] p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [14:0] add_ln45_fu_294_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_300_p2;
wire   [3:0] select_ln46_fu_336_p3;
reg   [3:0] select_ln46_reg_752;
wire   [3:0] t_14_fu_344_p2;
wire   [8:0] select_ln46_8_fu_356_p3;
wire   [0:0] icmp_ln50_fu_364_p2;
wire   [10:0] trunc_ln50_fu_369_p1;
reg   [10:0] tmp_624_reg_781;
wire   [263:0] vec_i_data_M_elems_V_10_fu_717_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [263:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4;
wire   [263:0] vec_i_data_M_elems_V_fu_652_p5;
wire   [263:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
wire   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
wire   [10:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg   [10:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln46_fu_306_p2;
wire   [0:0] icmp_ln47_fu_318_p2;
wire   [0:0] xor_ln45_fu_312_p2;
wire   [0:0] and_ln45_fu_324_p2;
wire   [0:0] or_ln46_fu_330_p2;
wire   [8:0] add_ln46_fu_350_p2;
wire   [10:0] trunc_ln50_44_fu_594_p4;
wire   [10:0] trunc_ln50_43_fu_584_p4;
wire   [10:0] trunc_ln50_42_fu_574_p4;
wire   [10:0] trunc_ln50_41_fu_564_p4;
wire   [10:0] trunc_ln50_40_fu_554_p4;
wire   [10:0] trunc_ln50_39_fu_544_p4;
wire   [10:0] trunc_ln50_38_fu_534_p4;
wire   [10:0] trunc_ln50_37_fu_524_p4;
wire   [10:0] trunc_ln50_36_fu_514_p4;
wire   [10:0] trunc_ln50_35_fu_504_p4;
wire   [10:0] trunc_ln50_34_fu_494_p4;
wire   [10:0] trunc_ln50_33_fu_484_p4;
wire   [10:0] trunc_ln50_32_fu_474_p4;
wire   [10:0] trunc_ln50_31_fu_464_p4;
wire   [10:0] trunc_ln50_30_fu_454_p4;
wire   [10:0] trunc_ln50_29_fu_444_p4;
wire   [10:0] trunc_ln50_28_fu_434_p4;
wire   [10:0] trunc_ln50_27_fu_424_p4;
wire   [10:0] trunc_ln50_26_fu_414_p4;
wire   [10:0] trunc_ln50_25_fu_404_p4;
wire   [10:0] trunc_ln50_24_fu_394_p4;
wire   [10:0] trunc_ln50_23_fu_384_p4;
wire   [241:0] tmp_s_fu_604_p23;
wire   [120:0] tmp_625_fu_685_p4;
wire   [98:0] tmp_626_fu_695_p4;
wire   [241:0] tmp_627_fu_705_p5;
wire   [26:0] tmp_628_fu_729_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= p_fca_0_0_1_0_0_0_extract281_reg_272;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= trunc_ln50_fu_369_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten17_reg_195 <= add_ln45_fu_294_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_195 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        indvar_flatten_reg_206 <= select_ln46_8_fu_356_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_767 == 1'd0) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= p_fca_0_0_1_0_0_0_extract282_reg_239;
        end else if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= {{mac_sm_dout[26:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract281_reg_272 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        t_reg_217 <= t_14_fu_344_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract279_reg_284 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract279_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_748 <= icmp_ln45_fu_300_p2;
        icmp_ln45_reg_748_pp0_iter1_reg <= icmp_ln45_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_748_pp0_iter2_reg <= icmp_ln45_reg_748_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_767 <= icmp_ln50_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract282_reg_239 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[32:22]}};
        vec_i_data_M_elems_V_2_reg_228 <= vec_i_data_M_elems_V_10_fu_717_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd0))) begin
        select_ln46_reg_752 <= select_ln46_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_624_reg_781 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[142:132]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_300_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_748_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_767 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_2_reg_228;
        end else if ((icmp_ln50_reg_767 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = vec_i_data_M_elems_V_fu_652_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        q_sm_blk_n = q_sm_full_n;
    end else begin
        q_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_sm_write = 1'b1;
    end else begin
        q_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_294_p2 = (indvar_flatten17_reg_195 + 15'd1);

assign add_ln46_fu_350_p2 = (indvar_flatten_reg_206 + 9'd1);

assign and_ln45_fu_324_p2 = (xor_ln45_fu_312_p2 & icmp_ln47_fu_318_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (q_sm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_748_pp0_iter2_reg == 1'd0) & (q_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract279_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract281_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_262 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_767 == 1'd1) & (icmp_ln45_reg_748_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_300_p2 = ((indvar_flatten17_reg_195 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_306_p2 = ((indvar_flatten_reg_206 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_318_p2 = ((t_reg_217 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_364_p2 = ((select_ln46_reg_752 == 4'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_330_p2 = (icmp_ln46_fu_306_p2 | and_ln45_fu_324_p2);

assign q_sm_din = tmp_628_fu_729_p4;

assign select_ln46_8_fu_356_p3 = ((icmp_ln46_fu_306_p2[0:0] == 1'b1) ? 9'd1 : add_ln46_fu_350_p2);

assign select_ln46_fu_336_p3 = ((or_ln46_fu_330_p2[0:0] == 1'b1) ? 4'd0 : t_reg_217);

assign t_14_fu_344_p2 = (select_ln46_fu_336_p3 + 4'd1);

assign tmp_625_fu_685_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[263:143]}};

assign tmp_626_fu_695_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[131:33]}};

assign tmp_627_fu_705_p5 = {{{{{{11'd0}, {tmp_625_fu_685_p4}}}, {11'd0}}}, {tmp_626_fu_695_p4}};

assign tmp_628_fu_729_p4 = {{{tmp_624_reg_781}, {5'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract279_reg_284}};

assign tmp_s_fu_604_p23 = {{{{{{{{{{{{{{{{{{{{{{trunc_ln50_44_fu_594_p4}, {trunc_ln50_43_fu_584_p4}}, {trunc_ln50_42_fu_574_p4}}, {trunc_ln50_41_fu_564_p4}}, {trunc_ln50_40_fu_554_p4}}, {trunc_ln50_39_fu_544_p4}}, {trunc_ln50_38_fu_534_p4}}, {trunc_ln50_37_fu_524_p4}}, {trunc_ln50_36_fu_514_p4}}, {trunc_ln50_35_fu_504_p4}}, {trunc_ln50_34_fu_494_p4}}, {trunc_ln50_33_fu_484_p4}}, {trunc_ln50_32_fu_474_p4}}, {trunc_ln50_31_fu_464_p4}}, {trunc_ln50_30_fu_454_p4}}, {trunc_ln50_29_fu_444_p4}}, {trunc_ln50_28_fu_434_p4}}, {trunc_ln50_27_fu_424_p4}}, {trunc_ln50_26_fu_414_p4}}, {trunc_ln50_25_fu_404_p4}}, {trunc_ln50_24_fu_394_p4}}, {trunc_ln50_23_fu_384_p4}};

assign trunc_ln50_23_fu_384_p4 = {{mac_sm_dout[42:32]}};

assign trunc_ln50_24_fu_394_p4 = {{mac_sm_dout[58:48]}};

assign trunc_ln50_25_fu_404_p4 = {{mac_sm_dout[74:64]}};

assign trunc_ln50_26_fu_414_p4 = {{mac_sm_dout[90:80]}};

assign trunc_ln50_27_fu_424_p4 = {{mac_sm_dout[106:96]}};

assign trunc_ln50_28_fu_434_p4 = {{mac_sm_dout[122:112]}};

assign trunc_ln50_29_fu_444_p4 = {{mac_sm_dout[138:128]}};

assign trunc_ln50_30_fu_454_p4 = {{mac_sm_dout[154:144]}};

assign trunc_ln50_31_fu_464_p4 = {{mac_sm_dout[170:160]}};

assign trunc_ln50_32_fu_474_p4 = {{mac_sm_dout[186:176]}};

assign trunc_ln50_33_fu_484_p4 = {{mac_sm_dout[202:192]}};

assign trunc_ln50_34_fu_494_p4 = {{mac_sm_dout[218:208]}};

assign trunc_ln50_35_fu_504_p4 = {{mac_sm_dout[234:224]}};

assign trunc_ln50_36_fu_514_p4 = {{mac_sm_dout[250:240]}};

assign trunc_ln50_37_fu_524_p4 = {{mac_sm_dout[266:256]}};

assign trunc_ln50_38_fu_534_p4 = {{mac_sm_dout[282:272]}};

assign trunc_ln50_39_fu_544_p4 = {{mac_sm_dout[298:288]}};

assign trunc_ln50_40_fu_554_p4 = {{mac_sm_dout[314:304]}};

assign trunc_ln50_41_fu_564_p4 = {{mac_sm_dout[330:320]}};

assign trunc_ln50_42_fu_574_p4 = {{mac_sm_dout[346:336]}};

assign trunc_ln50_43_fu_584_p4 = {{mac_sm_dout[362:352]}};

assign trunc_ln50_44_fu_594_p4 = {{mac_sm_dout[378:368]}};

assign trunc_ln50_fu_369_p1 = mac_sm_dout[10:0];

assign vec_i_data_M_elems_V_10_fu_717_p5 = {{tmp_627_fu_705_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_265_p4[21:0]}};

assign vec_i_data_M_elems_V_fu_652_p5 = {{tmp_s_fu_604_p23}, {vec_i_data_M_elems_V_2_reg_228[21:0]}};

assign xor_ln45_fu_312_p2 = (icmp_ln46_fu_306_p2 ^ 1'd1);

endmodule //ATTN0_do_adapt_8
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_adapt_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mac_sm_dout,
        mac_sm_empty_n,
        mac_sm_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [223:0] mac_sm_dout;
input   mac_sm_empty_n;
output   mac_sm_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mac_sm_read;
reg r_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_587;
reg   [0:0] icmp_ln45_reg_587_pp0_iter1_reg;
reg   [0:0] icmp_ln50_reg_602;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln45_reg_587_pp0_iter2_reg;
reg   [14:0] indvar_flatten17_reg_155;
reg   [7:0] indvar_flatten_reg_166;
reg   [2:0] t_reg_177;
reg   [139:0] vec_i_data_M_elems_V_2_reg_188;
reg   [9:0] p_fca_0_0_1_0_0_0_extract182_reg_199;
reg   [9:0] p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [14:0] add_ln45_fu_254_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op35_read_state4;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_260_p2;
wire   [0:0] icmp_ln46_fu_266_p2;
reg   [0:0] icmp_ln46_reg_591;
wire   [7:0] select_ln46_7_fu_278_p3;
wire   [0:0] icmp_ln50_fu_316_p2;
wire   [2:0] t_13_fu_322_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [9:0] trunc_ln50_fu_328_p1;
reg   [9:0] tmp_618_reg_621;
wire   [139:0] vec_i_data_M_elems_V_9_fu_556_p5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state4;
reg   [139:0] ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4;
wire   [139:0] vec_i_data_M_elems_V_fu_491_p5;
wire   [139:0] ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
wire   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
wire   [9:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg   [9:0] ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln46_fu_272_p2;
wire   [0:0] icmp_ln47_fu_291_p2;
wire   [0:0] xor_ln45_fu_286_p2;
wire   [0:0] and_ln45_fu_297_p2;
wire   [0:0] or_ln46_fu_303_p2;
wire   [2:0] select_ln46_fu_308_p3;
wire   [9:0] trunc_ln50_55_fu_453_p4;
wire   [9:0] trunc_ln50_54_fu_443_p4;
wire   [9:0] trunc_ln50_53_fu_433_p4;
wire   [9:0] trunc_ln50_52_fu_423_p4;
wire   [9:0] trunc_ln50_51_fu_413_p4;
wire   [9:0] trunc_ln50_50_fu_403_p4;
wire   [9:0] trunc_ln50_49_fu_393_p4;
wire   [9:0] trunc_ln50_48_fu_383_p4;
wire   [9:0] trunc_ln50_47_fu_373_p4;
wire   [9:0] trunc_ln50_46_fu_363_p4;
wire   [9:0] trunc_ln50_45_fu_353_p4;
wire   [9:0] trunc_ln50_44_fu_343_p4;
wire   [119:0] tmp_s_fu_463_p13;
wire   [59:0] tmp_619_fu_524_p4;
wire   [39:0] tmp_620_fu_534_p4;
wire   [119:0] tmp_621_fu_544_p5;
wire   [25:0] tmp_622_fu_568_p4;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= p_fca_0_0_1_0_0_0_extract181_reg_232;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= trunc_ln50_fu_328_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten17_reg_155 <= add_ln45_fu_254_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_155 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        indvar_flatten_reg_166 <= select_ln46_7_fu_278_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_166 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln50_reg_602 == 1'd0) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= p_fca_0_0_1_0_0_0_extract182_reg_199;
        end else if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0))) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= {{mac_sm_dout[25:16]}};
        end else if ((1'b1 == 1'b1)) begin
            p_fca_0_0_1_0_0_0_extract181_reg_232 <= ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        t_reg_177 <= t_13_fu_322_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_p_fca_0_0_0_0_0_0_extract179_reg_244 <= ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_extract179_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_587 <= icmp_ln45_fu_260_p2;
        icmp_ln45_reg_587_pp0_iter1_reg <= icmp_ln45_reg_587;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_587_pp0_iter2_reg <= icmp_ln45_reg_587_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd0))) begin
        icmp_ln46_reg_591 <= icmp_ln46_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_reg_602 <= icmp_ln50_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_fca_0_0_1_0_0_0_extract182_reg_199 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[29:20]}};
        vec_i_data_M_elems_V_2_reg_188 <= vec_i_data_M_elems_V_9_fu_556_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_618_reg_621 <= {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[79:70]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_260_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_587_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln50_reg_602 == 1'd0)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_2_reg_188;
        end else if ((icmp_ln50_reg_602 == 1'd1)) begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = vec_i_data_M_elems_V_fu_491_p5;
        end else begin
            ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
        end
    end else begin
        ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4 = ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_blk_n = mac_sm_empty_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op35_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mac_sm_read = 1'b1;
    end else begin
        mac_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        r_sm_head1_blk_n = r_sm_head1_full_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_sm_head1_write = 1'b1;
    end else begin
        r_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_254_p2 = (indvar_flatten17_reg_155 + 15'd1);

assign add_ln46_fu_272_p2 = (indvar_flatten_reg_166 + 8'd1);

assign and_ln45_fu_297_p2 = (xor_ln45_fu_286_p2 & icmp_ln47_fu_291_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op35_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_empty_n == 1'b0)) | ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (r_sm_head1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((ap_predicate_op35_read_state4 == 1'b1) & (mac_sm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln45_reg_587_pp0_iter2_reg == 1'd0) & (r_sm_head1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_extract179_reg_244 = 'bx;

assign ap_phi_reg_pp0_iter2_p_fca_0_0_1_0_0_0_extract181_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter2_vec_i_data_M_elems_V_3_reg_222 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state4 = ((icmp_ln50_reg_602 == 1'd1) & (icmp_ln45_reg_587_pp0_iter1_reg == 1'd0));
end

assign icmp_ln45_fu_260_p2 = ((indvar_flatten17_reg_155 == 15'd19208) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_266_p2 = ((indvar_flatten_reg_166 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_291_p2 = ((t_reg_177 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_316_p2 = ((select_ln46_fu_308_p3 == 3'd0) ? 1'b1 : 1'b0);

assign or_ln46_fu_303_p2 = (icmp_ln46_reg_591 | and_ln45_fu_297_p2);

assign r_sm_head1_din = tmp_622_fu_568_p4;

assign select_ln46_7_fu_278_p3 = ((icmp_ln46_fu_266_p2[0:0] == 1'b1) ? 8'd1 : add_ln46_fu_272_p2);

assign select_ln46_fu_308_p3 = ((or_ln46_fu_303_p2[0:0] == 1'b1) ? 3'd0 : t_reg_177);

assign t_13_fu_322_p2 = (select_ln46_fu_308_p3 + 3'd1);

assign tmp_619_fu_524_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[139:80]}};

assign tmp_620_fu_534_p4 = {{ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[69:30]}};

assign tmp_621_fu_544_p5 = {{{{{{10'd0}, {tmp_619_fu_524_p4}}}, {10'd0}}}, {tmp_620_fu_534_p4}};

assign tmp_622_fu_568_p4 = {{{tmp_618_reg_621}, {6'd0}}, {ap_phi_reg_pp0_iter3_p_fca_0_0_0_0_0_0_extract179_reg_244}};

assign tmp_s_fu_463_p13 = {{{{{{{{{{{{trunc_ln50_55_fu_453_p4}, {trunc_ln50_54_fu_443_p4}}, {trunc_ln50_53_fu_433_p4}}, {trunc_ln50_52_fu_423_p4}}, {trunc_ln50_51_fu_413_p4}}, {trunc_ln50_50_fu_403_p4}}, {trunc_ln50_49_fu_393_p4}}, {trunc_ln50_48_fu_383_p4}}, {trunc_ln50_47_fu_373_p4}}, {trunc_ln50_46_fu_363_p4}}, {trunc_ln50_45_fu_353_p4}}, {trunc_ln50_44_fu_343_p4}};

assign trunc_ln50_44_fu_343_p4 = {{mac_sm_dout[41:32]}};

assign trunc_ln50_45_fu_353_p4 = {{mac_sm_dout[57:48]}};

assign trunc_ln50_46_fu_363_p4 = {{mac_sm_dout[73:64]}};

assign trunc_ln50_47_fu_373_p4 = {{mac_sm_dout[89:80]}};

assign trunc_ln50_48_fu_383_p4 = {{mac_sm_dout[105:96]}};

assign trunc_ln50_49_fu_393_p4 = {{mac_sm_dout[121:112]}};

assign trunc_ln50_50_fu_403_p4 = {{mac_sm_dout[137:128]}};

assign trunc_ln50_51_fu_413_p4 = {{mac_sm_dout[153:144]}};

assign trunc_ln50_52_fu_423_p4 = {{mac_sm_dout[169:160]}};

assign trunc_ln50_53_fu_433_p4 = {{mac_sm_dout[185:176]}};

assign trunc_ln50_54_fu_443_p4 = {{mac_sm_dout[201:192]}};

assign trunc_ln50_55_fu_453_p4 = {{mac_sm_dout[217:208]}};

assign trunc_ln50_fu_328_p1 = mac_sm_dout[9:0];

assign vec_i_data_M_elems_V_9_fu_556_p5 = {{tmp_621_fu_544_p5}, {ap_phi_mux_vec_i_data_M_elems_V_3_phi_fu_225_p4[19:0]}};

assign vec_i_data_M_elems_V_fu_491_p5 = {{tmp_s_fu_463_p13}, {vec_i_data_M_elems_V_2_reg_188[19:0]}};

assign xor_ln45_fu_286_p2 = (icmp_ln46_reg_591 ^ 1'd1);

endmodule //ATTN0_do_adapt_9
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_attn (
        i_stream_V_TDATA,
        o_stream_V_TDATA,
        ap_clk,
        ap_rst,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        ap_start,
        o_stream_V_TVALID,
        o_stream_V_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] i_stream_V_TDATA;
output  [31:0] o_stream_V_TDATA;
input   ap_clk;
input   ap_rst;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
input   ap_start;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    stream_copy2_U0_ap_start;
wire    stream_copy2_U0_start_full_n;
wire    stream_copy2_U0_ap_done;
wire    stream_copy2_U0_ap_continue;
wire    stream_copy2_U0_ap_idle;
wire    stream_copy2_U0_ap_ready;
wire    stream_copy2_U0_start_out;
wire    stream_copy2_U0_start_write;
wire    stream_copy2_U0_i_stream_V_TREADY;
wire   [31:0] stream_copy2_U0_main_sm_din;
wire    stream_copy2_U0_main_sm_write;
wire   [31:0] stream_copy2_U0_resi_i_sm_din;
wire    stream_copy2_U0_resi_i_sm_write;
wire    do_adapt_6_U0_ap_start;
wire    do_adapt_6_U0_ap_done;
wire    do_adapt_6_U0_ap_continue;
wire    do_adapt_6_U0_ap_idle;
wire    do_adapt_6_U0_ap_ready;
wire    do_adapt_6_U0_start_out;
wire    do_adapt_6_U0_start_write;
wire    do_adapt_6_U0_resi_i_sm_read;
wire   [63:0] do_adapt_6_U0_resi_sm_din;
wire    do_adapt_6_U0_resi_sm_write;
wire    do_adapt_5_U0_ap_start;
wire    do_adapt_5_U0_ap_done;
wire    do_adapt_5_U0_ap_continue;
wire    do_adapt_5_U0_ap_idle;
wire    do_adapt_5_U0_ap_ready;
wire    do_adapt_5_U0_start_out;
wire    do_adapt_5_U0_start_write;
wire    do_adapt_5_U0_resi_sm_read;
wire   [31:0] do_adapt_5_U0_resi_o_sm_din;
wire    do_adapt_5_U0_resi_o_sm_write;
wire    do_layernorm_U0_ap_start;
wire    do_layernorm_U0_ap_done;
wire    do_layernorm_U0_ap_continue;
wire    do_layernorm_U0_ap_idle;
wire    do_layernorm_U0_ap_ready;
wire    do_layernorm_U0_start_out;
wire    do_layernorm_U0_start_write;
wire    do_layernorm_U0_main_sm_read;
wire   [15:0] do_layernorm_U0_lnq_sm_din;
wire    do_layernorm_U0_lnq_sm_write;
wire    stream_copy3_U0_ap_start;
wire    stream_copy3_U0_start_full_n;
wire    stream_copy3_U0_ap_done;
wire    stream_copy3_U0_ap_continue;
wire    stream_copy3_U0_ap_idle;
wire    stream_copy3_U0_ap_ready;
wire    stream_copy3_U0_start_out;
wire    stream_copy3_U0_start_write;
wire    stream_copy3_U0_lnq_sm_read;
wire   [15:0] stream_copy3_U0_lnq_sm_cp1_din;
wire    stream_copy3_U0_lnq_sm_cp1_write;
wire   [15:0] stream_copy3_U0_lnq_sm_cp2_din;
wire    stream_copy3_U0_lnq_sm_cp2_write;
wire   [15:0] stream_copy3_U0_lnq_sm_cp3_din;
wire    stream_copy3_U0_lnq_sm_cp3_write;
wire    do_matmul117_U0_ap_start;
wire    do_matmul117_U0_start_out;
wire    do_matmul117_U0_start_write;
wire    do_matmul117_U0_lnq_sm_cp1_read;
wire   [31:0] do_matmul117_U0_q_sm_din;
wire    do_matmul117_U0_q_sm_write;
wire    do_matmul117_U0_ap_done;
wire    do_matmul117_U0_ap_ready;
wire    do_matmul117_U0_ap_idle;
wire    do_matmul117_U0_ap_continue;
wire    do_matmul118_U0_ap_start;
wire    do_matmul118_U0_start_out;
wire    do_matmul118_U0_start_write;
wire    do_matmul118_U0_lnq_sm_cp1_read;
wire   [31:0] do_matmul118_U0_q_sm_din;
wire    do_matmul118_U0_q_sm_write;
wire    do_matmul118_U0_ap_done;
wire    do_matmul118_U0_ap_ready;
wire    do_matmul118_U0_ap_idle;
wire    do_matmul118_U0_ap_continue;
wire    do_matmul_3_U0_ap_start;
wire    do_matmul_3_U0_start_out;
wire    do_matmul_3_U0_start_write;
wire    do_matmul_3_U0_lnq_sm_cp1_read;
wire   [31:0] do_matmul_3_U0_q_sm_din;
wire    do_matmul_3_U0_q_sm_write;
wire    do_matmul_3_U0_ap_done;
wire    do_matmul_3_U0_ap_ready;
wire    do_matmul_3_U0_ap_idle;
wire    do_matmul_3_U0_ap_continue;
wire    do_quant119_U0_ap_start;
wire    do_quant119_U0_ap_done;
wire    do_quant119_U0_ap_continue;
wire    do_quant119_U0_ap_idle;
wire    do_quant119_U0_ap_ready;
wire    do_quant119_U0_start_out;
wire    do_quant119_U0_start_write;
wire    do_quant119_U0_i_stream_read;
wire   [15:0] do_quant119_U0_o_stream_din;
wire    do_quant119_U0_o_stream_write;
wire    do_quant120_U0_ap_start;
wire    do_quant120_U0_ap_done;
wire    do_quant120_U0_ap_continue;
wire    do_quant120_U0_ap_idle;
wire    do_quant120_U0_ap_ready;
wire    do_quant120_U0_start_out;
wire    do_quant120_U0_start_write;
wire    do_quant120_U0_i_stream_read;
wire   [15:0] do_quant120_U0_o_stream_din;
wire    do_quant120_U0_o_stream_write;
wire    do_quant_1_U0_ap_start;
wire    do_quant_1_U0_ap_done;
wire    do_quant_1_U0_ap_continue;
wire    do_quant_1_U0_ap_idle;
wire    do_quant_1_U0_ap_ready;
wire    do_quant_1_U0_start_out;
wire    do_quant_1_U0_start_write;
wire    do_quant_1_U0_i_stream_read;
wire   [15:0] do_quant_1_U0_o_stream_din;
wire    do_quant_1_U0_o_stream_write;
wire    do_split121_U0_ap_start;
wire    do_split121_U0_start_full_n;
wire    do_split121_U0_ap_done;
wire    do_split121_U0_ap_continue;
wire    do_split121_U0_ap_idle;
wire    do_split121_U0_ap_ready;
wire    do_split121_U0_start_out;
wire    do_split121_U0_start_write;
wire    do_split121_U0_qq_sm_read;
wire   [15:0] do_split121_U0_qq_sm_head1_din;
wire    do_split121_U0_qq_sm_head1_write;
wire   [15:0] do_split121_U0_qq_sm_head2_din;
wire    do_split121_U0_qq_sm_head2_write;
wire   [15:0] do_split121_U0_qq_sm_head3_din;
wire    do_split121_U0_qq_sm_head3_write;
wire    do_split122_U0_ap_start;
wire    do_split122_U0_start_full_n;
wire    do_split122_U0_ap_done;
wire    do_split122_U0_ap_continue;
wire    do_split122_U0_ap_idle;
wire    do_split122_U0_ap_ready;
wire    do_split122_U0_start_out;
wire    do_split122_U0_start_write;
wire    do_split122_U0_qq_sm_read;
wire   [15:0] do_split122_U0_qq_sm_head1_din;
wire    do_split122_U0_qq_sm_head1_write;
wire   [15:0] do_split122_U0_qq_sm_head2_din;
wire    do_split122_U0_qq_sm_head2_write;
wire   [15:0] do_split122_U0_qq_sm_head3_din;
wire    do_split122_U0_qq_sm_head3_write;
wire    do_split_U0_ap_start;
wire    do_split_U0_start_full_n;
wire    do_split_U0_ap_done;
wire    do_split_U0_ap_continue;
wire    do_split_U0_ap_idle;
wire    do_split_U0_ap_ready;
wire    do_split_U0_start_out;
wire    do_split_U0_start_write;
wire    do_split_U0_qq_sm_read;
wire   [15:0] do_split_U0_qq_sm_head1_din;
wire    do_split_U0_qq_sm_head1_write;
wire   [15:0] do_split_U0_qq_sm_head2_din;
wire    do_split_U0_qq_sm_head2_write;
wire   [15:0] do_split_U0_qq_sm_head3_din;
wire    do_split_U0_qq_sm_head3_write;
wire    do_reshape123_U0_kq_sm_head1_read;
wire   [223:0] do_reshape123_U0_kq_sm_reshape_head1_din;
wire    do_reshape123_U0_kq_sm_reshape_head1_write;
wire    do_reshape123_U0_ap_start;
wire    do_reshape123_U0_ap_done;
wire    do_reshape123_U0_ap_ready;
wire    do_reshape123_U0_ap_idle;
wire    do_reshape123_U0_ap_continue;
wire    do_reshape124_U0_kq_sm_head1_read;
wire   [223:0] do_reshape124_U0_kq_sm_reshape_head1_din;
wire    do_reshape124_U0_kq_sm_reshape_head1_write;
wire    do_reshape124_U0_ap_start;
wire    do_reshape124_U0_ap_done;
wire    do_reshape124_U0_ap_ready;
wire    do_reshape124_U0_ap_idle;
wire    do_reshape124_U0_ap_continue;
wire    do_reshape125_U0_kq_sm_head1_read;
wire   [223:0] do_reshape125_U0_kq_sm_reshape_head1_din;
wire    do_reshape125_U0_kq_sm_reshape_head1_write;
wire    do_reshape125_U0_ap_start;
wire    do_reshape125_U0_ap_done;
wire    do_reshape125_U0_ap_ready;
wire    do_reshape125_U0_ap_idle;
wire    do_reshape125_U0_ap_continue;
wire    do_matmul126_U0_ap_start;
wire    do_matmul126_U0_start_out;
wire    do_matmul126_U0_start_write;
wire    do_matmul126_U0_qq_sm_head1_read;
wire    do_matmul126_U0_kq_sm_reshape_head1_read;
wire   [31:0] do_matmul126_U0_r_sm_head1_din;
wire    do_matmul126_U0_r_sm_head1_write;
wire    do_matmul126_U0_ap_done;
wire    do_matmul126_U0_ap_ready;
wire    do_matmul126_U0_ap_idle;
wire    do_matmul126_U0_ap_continue;
wire    do_matmul127_U0_ap_start;
wire    do_matmul127_U0_start_out;
wire    do_matmul127_U0_start_write;
wire    do_matmul127_U0_qq_sm_head1_read;
wire    do_matmul127_U0_kq_sm_reshape_head1_read;
wire   [31:0] do_matmul127_U0_r_sm_head1_din;
wire    do_matmul127_U0_r_sm_head1_write;
wire    do_matmul127_U0_ap_done;
wire    do_matmul127_U0_ap_ready;
wire    do_matmul127_U0_ap_idle;
wire    do_matmul127_U0_ap_continue;
wire    do_matmul_1_U0_ap_start;
wire    do_matmul_1_U0_start_out;
wire    do_matmul_1_U0_start_write;
wire    do_matmul_1_U0_qq_sm_head1_read;
wire    do_matmul_1_U0_kq_sm_reshape_head1_read;
wire   [31:0] do_matmul_1_U0_r_sm_head1_din;
wire    do_matmul_1_U0_r_sm_head1_write;
wire    do_matmul_1_U0_ap_done;
wire    do_matmul_1_U0_ap_ready;
wire    do_matmul_1_U0_ap_idle;
wire    do_matmul_1_U0_ap_continue;
wire    do_softmax128_U0_ap_start;
wire    do_softmax128_U0_ap_done;
wire    do_softmax128_U0_ap_continue;
wire    do_softmax128_U0_ap_idle;
wire    do_softmax128_U0_ap_ready;
wire    do_softmax128_U0_r_sm_head1_read;
wire   [15:0] do_softmax128_U0_rq_sm_head1_din;
wire    do_softmax128_U0_rq_sm_head1_write;
wire    do_softmax129_U0_ap_start;
wire    do_softmax129_U0_ap_done;
wire    do_softmax129_U0_ap_continue;
wire    do_softmax129_U0_ap_idle;
wire    do_softmax129_U0_ap_ready;
wire    do_softmax129_U0_r_sm_head1_read;
wire   [15:0] do_softmax129_U0_rq_sm_head1_din;
wire    do_softmax129_U0_rq_sm_head1_write;
wire    do_softmax_U0_ap_start;
wire    do_softmax_U0_ap_done;
wire    do_softmax_U0_ap_continue;
wire    do_softmax_U0_ap_idle;
wire    do_softmax_U0_ap_ready;
wire    do_softmax_U0_r_sm_head1_read;
wire   [15:0] do_softmax_U0_rq_sm_head1_din;
wire    do_softmax_U0_rq_sm_head1_write;
wire    do_reshape130_U0_ap_start;
wire    do_reshape130_U0_start_out;
wire    do_reshape130_U0_start_write;
wire    do_reshape130_U0_kq_sm_head1_read;
wire   [223:0] do_reshape130_U0_kq_sm_reshape_head1_din;
wire    do_reshape130_U0_kq_sm_reshape_head1_write;
wire    do_reshape130_U0_ap_done;
wire    do_reshape130_U0_ap_ready;
wire    do_reshape130_U0_ap_idle;
wire    do_reshape130_U0_ap_continue;
wire    do_reshape131_U0_ap_start;
wire    do_reshape131_U0_start_out;
wire    do_reshape131_U0_start_write;
wire    do_reshape131_U0_kq_sm_head1_read;
wire   [223:0] do_reshape131_U0_kq_sm_reshape_head1_din;
wire    do_reshape131_U0_kq_sm_reshape_head1_write;
wire    do_reshape131_U0_ap_done;
wire    do_reshape131_U0_ap_ready;
wire    do_reshape131_U0_ap_idle;
wire    do_reshape131_U0_ap_continue;
wire    do_reshape132_U0_ap_start;
wire    do_reshape132_U0_start_out;
wire    do_reshape132_U0_start_write;
wire    do_reshape132_U0_kq_sm_head1_read;
wire   [223:0] do_reshape132_U0_kq_sm_reshape_head1_din;
wire    do_reshape132_U0_kq_sm_reshape_head1_write;
wire    do_reshape132_U0_ap_done;
wire    do_reshape132_U0_ap_ready;
wire    do_reshape132_U0_ap_idle;
wire    do_reshape132_U0_ap_continue;
wire    do_matmul133_U0_ap_start;
wire    do_matmul133_U0_start_out;
wire    do_matmul133_U0_start_write;
wire    do_matmul133_U0_rq_sm_head1_read;
wire    do_matmul133_U0_vq_sm_transpose_head1_read;
wire   [31:0] do_matmul133_U0_a_sm_head1_din;
wire    do_matmul133_U0_a_sm_head1_write;
wire    do_matmul133_U0_ap_done;
wire    do_matmul133_U0_ap_ready;
wire    do_matmul133_U0_ap_idle;
wire    do_matmul133_U0_ap_continue;
wire    do_matmul134_U0_rq_sm_head1_read;
wire    do_matmul134_U0_vq_sm_transpose_head1_read;
wire   [31:0] do_matmul134_U0_a_sm_head1_din;
wire    do_matmul134_U0_a_sm_head1_write;
wire    do_matmul134_U0_ap_start;
wire    do_matmul134_U0_ap_done;
wire    do_matmul134_U0_ap_ready;
wire    do_matmul134_U0_ap_idle;
wire    do_matmul134_U0_ap_continue;
wire    do_matmul_U0_rq_sm_head1_read;
wire    do_matmul_U0_vq_sm_transpose_head1_read;
wire   [31:0] do_matmul_U0_a_sm_head1_din;
wire    do_matmul_U0_a_sm_head1_write;
wire    do_matmul_U0_ap_start;
wire    do_matmul_U0_ap_done;
wire    do_matmul_U0_ap_ready;
wire    do_matmul_U0_ap_idle;
wire    do_matmul_U0_ap_continue;
wire    do_merge_U0_ap_start;
wire    do_merge_U0_ap_done;
wire    do_merge_U0_ap_continue;
wire    do_merge_U0_ap_idle;
wire    do_merge_U0_ap_ready;
wire    do_merge_U0_start_out;
wire    do_merge_U0_start_write;
wire    do_merge_U0_a_sm_head1_read;
wire    do_merge_U0_a_sm_head2_read;
wire    do_merge_U0_a_sm_head3_read;
wire   [31:0] do_merge_U0_a_sm_din;
wire    do_merge_U0_a_sm_write;
wire    do_quant_U0_ap_start;
wire    do_quant_U0_ap_done;
wire    do_quant_U0_ap_continue;
wire    do_quant_U0_ap_idle;
wire    do_quant_U0_ap_ready;
wire    do_quant_U0_start_out;
wire    do_quant_U0_start_write;
wire    do_quant_U0_a_sm_read;
wire   [15:0] do_quant_U0_aq_sm_din;
wire    do_quant_U0_aq_sm_write;
wire    do_matmul_2_U0_aq_sm_read;
wire   [31:0] do_matmul_2_U0_o_sm_din;
wire    do_matmul_2_U0_o_sm_write;
wire    do_matmul_2_U0_ap_start;
wire    do_matmul_2_U0_ap_done;
wire    do_matmul_2_U0_ap_ready;
wire    do_matmul_2_U0_ap_idle;
wire    do_matmul_2_U0_ap_continue;
wire    stream_merge_U0_ap_start;
wire    stream_merge_U0_ap_done;
wire    stream_merge_U0_ap_continue;
wire    stream_merge_U0_ap_idle;
wire    stream_merge_U0_ap_ready;
wire    stream_merge_U0_resi_o_sm_read;
wire    stream_merge_U0_o_sm_read;
wire   [31:0] stream_merge_U0_o_stream_V_TDATA;
wire    stream_merge_U0_o_stream_V_TVALID;
wire    ap_sync_continue;
wire    main_sm_full_n;
wire   [31:0] main_sm_dout;
wire    main_sm_empty_n;
wire    resi_i_sm_full_n;
wire   [31:0] resi_i_sm_dout;
wire    resi_i_sm_empty_n;
wire    resi_sm_full_n;
wire   [63:0] resi_sm_dout;
wire    resi_sm_empty_n;
wire    resi_o_sm_full_n;
wire   [31:0] resi_o_sm_dout;
wire    resi_o_sm_empty_n;
wire    lnq_sm_full_n;
wire   [15:0] lnq_sm_dout;
wire    lnq_sm_empty_n;
wire    lnq_sm_cp1_full_n;
wire   [15:0] lnq_sm_cp1_dout;
wire    lnq_sm_cp1_empty_n;
wire    lnq_sm_cp2_full_n;
wire   [15:0] lnq_sm_cp2_dout;
wire    lnq_sm_cp2_empty_n;
wire    lnq_sm_cp3_full_n;
wire   [15:0] lnq_sm_cp3_dout;
wire    lnq_sm_cp3_empty_n;
wire    q_sm_full_n;
wire   [31:0] q_sm_dout;
wire    q_sm_empty_n;
wire    k_sm_full_n;
wire   [31:0] k_sm_dout;
wire    k_sm_empty_n;
wire    v_sm_full_n;
wire   [31:0] v_sm_dout;
wire    v_sm_empty_n;
wire    qq_sm_full_n;
wire   [15:0] qq_sm_dout;
wire    qq_sm_empty_n;
wire    kq_sm_full_n;
wire   [15:0] kq_sm_dout;
wire    kq_sm_empty_n;
wire    vq_sm_full_n;
wire   [15:0] vq_sm_dout;
wire    vq_sm_empty_n;
wire    qq_sm_head1_full_n;
wire   [15:0] qq_sm_head1_dout;
wire    qq_sm_head1_empty_n;
wire    qq_sm_head2_full_n;
wire   [15:0] qq_sm_head2_dout;
wire    qq_sm_head2_empty_n;
wire    qq_sm_head3_full_n;
wire   [15:0] qq_sm_head3_dout;
wire    qq_sm_head3_empty_n;
wire    kq_sm_head1_full_n;
wire   [15:0] kq_sm_head1_dout;
wire    kq_sm_head1_empty_n;
wire    kq_sm_head2_full_n;
wire   [15:0] kq_sm_head2_dout;
wire    kq_sm_head2_empty_n;
wire    kq_sm_head3_full_n;
wire   [15:0] kq_sm_head3_dout;
wire    kq_sm_head3_empty_n;
wire    vq_sm_head1_full_n;
wire   [15:0] vq_sm_head1_dout;
wire    vq_sm_head1_empty_n;
wire    vq_sm_head2_full_n;
wire   [15:0] vq_sm_head2_dout;
wire    vq_sm_head2_empty_n;
wire    vq_sm_head3_full_n;
wire   [15:0] vq_sm_head3_dout;
wire    vq_sm_head3_empty_n;
wire    kq_sm_reshape_head1_full_n;
wire   [223:0] kq_sm_reshape_head1_dout;
wire    kq_sm_reshape_head1_empty_n;
wire    kq_sm_reshape_head2_full_n;
wire   [223:0] kq_sm_reshape_head2_dout;
wire    kq_sm_reshape_head2_empty_n;
wire    kq_sm_reshape_head3_full_n;
wire   [223:0] kq_sm_reshape_head3_dout;
wire    kq_sm_reshape_head3_empty_n;
wire    r_sm_head1_full_n;
wire   [31:0] r_sm_head1_dout;
wire    r_sm_head1_empty_n;
wire    r_sm_head2_full_n;
wire   [31:0] r_sm_head2_dout;
wire    r_sm_head2_empty_n;
wire    r_sm_head3_full_n;
wire   [31:0] r_sm_head3_dout;
wire    r_sm_head3_empty_n;
wire    rq_sm_head1_full_n;
wire   [15:0] rq_sm_head1_dout;
wire    rq_sm_head1_empty_n;
wire    rq_sm_head2_full_n;
wire   [15:0] rq_sm_head2_dout;
wire    rq_sm_head2_empty_n;
wire    rq_sm_head3_full_n;
wire   [15:0] rq_sm_head3_dout;
wire    rq_sm_head3_empty_n;
wire    vq_sm_transpose_head1_full_n;
wire   [223:0] vq_sm_transpose_head1_dout;
wire    vq_sm_transpose_head1_empty_n;
wire    vq_sm_transpose_head2_full_n;
wire   [223:0] vq_sm_transpose_head2_dout;
wire    vq_sm_transpose_head2_empty_n;
wire    vq_sm_transpose_head3_full_n;
wire   [223:0] vq_sm_transpose_head3_dout;
wire    vq_sm_transpose_head3_empty_n;
wire    a_sm_head1_full_n;
wire   [31:0] a_sm_head1_dout;
wire    a_sm_head1_empty_n;
wire    a_sm_head2_full_n;
wire   [31:0] a_sm_head2_dout;
wire    a_sm_head2_empty_n;
wire    a_sm_head3_full_n;
wire   [31:0] a_sm_head3_dout;
wire    a_sm_head3_empty_n;
wire    a_sm_full_n;
wire   [31:0] a_sm_dout;
wire    a_sm_empty_n;
wire    aq_sm_full_n;
wire   [15:0] aq_sm_dout;
wire    aq_sm_empty_n;
wire    o_sm_full_n;
wire   [31:0] o_sm_dout;
wire    o_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_do_adapt_6_U0_din;
wire    start_for_do_adapt_6_U0_full_n;
wire   [0:0] start_for_do_adapt_6_U0_dout;
wire    start_for_do_adapt_6_U0_empty_n;
wire   [0:0] start_for_do_layernorm_U0_din;
wire    start_for_do_layernorm_U0_full_n;
wire   [0:0] start_for_do_layernorm_U0_dout;
wire    start_for_do_layernorm_U0_empty_n;
wire   [0:0] start_for_do_adapt_5_U0_din;
wire    start_for_do_adapt_5_U0_full_n;
wire   [0:0] start_for_do_adapt_5_U0_dout;
wire    start_for_do_adapt_5_U0_empty_n;
wire   [0:0] start_for_stream_merge_U0_din;
wire    start_for_stream_merge_U0_full_n;
wire   [0:0] start_for_stream_merge_U0_dout;
wire    start_for_stream_merge_U0_empty_n;
wire   [0:0] start_for_stream_copy3_U0_din;
wire    start_for_stream_copy3_U0_full_n;
wire   [0:0] start_for_stream_copy3_U0_dout;
wire    start_for_stream_copy3_U0_empty_n;
wire   [0:0] start_for_do_matmul117_U0_din;
wire    start_for_do_matmul117_U0_full_n;
wire   [0:0] start_for_do_matmul117_U0_dout;
wire    start_for_do_matmul117_U0_empty_n;
wire   [0:0] start_for_do_matmul118_U0_din;
wire    start_for_do_matmul118_U0_full_n;
wire   [0:0] start_for_do_matmul118_U0_dout;
wire    start_for_do_matmul118_U0_empty_n;
wire   [0:0] start_for_do_matmul_3_U0_din;
wire    start_for_do_matmul_3_U0_full_n;
wire   [0:0] start_for_do_matmul_3_U0_dout;
wire    start_for_do_matmul_3_U0_empty_n;
wire   [0:0] start_for_do_quant119_U0_din;
wire    start_for_do_quant119_U0_full_n;
wire   [0:0] start_for_do_quant119_U0_dout;
wire    start_for_do_quant119_U0_empty_n;
wire   [0:0] start_for_do_quant120_U0_din;
wire    start_for_do_quant120_U0_full_n;
wire   [0:0] start_for_do_quant120_U0_dout;
wire    start_for_do_quant120_U0_empty_n;
wire   [0:0] start_for_do_quant_1_U0_din;
wire    start_for_do_quant_1_U0_full_n;
wire   [0:0] start_for_do_quant_1_U0_dout;
wire    start_for_do_quant_1_U0_empty_n;
wire   [0:0] start_for_do_split121_U0_din;
wire    start_for_do_split121_U0_full_n;
wire   [0:0] start_for_do_split121_U0_dout;
wire    start_for_do_split121_U0_empty_n;
wire   [0:0] start_for_do_split122_U0_din;
wire    start_for_do_split122_U0_full_n;
wire   [0:0] start_for_do_split122_U0_dout;
wire    start_for_do_split122_U0_empty_n;
wire   [0:0] start_for_do_split_U0_din;
wire    start_for_do_split_U0_full_n;
wire   [0:0] start_for_do_split_U0_dout;
wire    start_for_do_split_U0_empty_n;
wire   [0:0] start_for_do_matmul126_U0_din;
wire    start_for_do_matmul126_U0_full_n;
wire   [0:0] start_for_do_matmul126_U0_dout;
wire    start_for_do_matmul126_U0_empty_n;
wire   [0:0] start_for_do_matmul127_U0_din;
wire    start_for_do_matmul127_U0_full_n;
wire   [0:0] start_for_do_matmul127_U0_dout;
wire    start_for_do_matmul127_U0_empty_n;
wire   [0:0] start_for_do_matmul_1_U0_din;
wire    start_for_do_matmul_1_U0_full_n;
wire   [0:0] start_for_do_matmul_1_U0_dout;
wire    start_for_do_matmul_1_U0_empty_n;
wire   [0:0] start_for_do_reshape123_U0_din;
wire    start_for_do_reshape123_U0_full_n;
wire   [0:0] start_for_do_reshape123_U0_dout;
wire    start_for_do_reshape123_U0_empty_n;
wire   [0:0] start_for_do_reshape124_U0_din;
wire    start_for_do_reshape124_U0_full_n;
wire   [0:0] start_for_do_reshape124_U0_dout;
wire    start_for_do_reshape124_U0_empty_n;
wire   [0:0] start_for_do_reshape125_U0_din;
wire    start_for_do_reshape125_U0_full_n;
wire   [0:0] start_for_do_reshape125_U0_dout;
wire    start_for_do_reshape125_U0_empty_n;
wire   [0:0] start_for_do_reshape130_U0_din;
wire    start_for_do_reshape130_U0_full_n;
wire   [0:0] start_for_do_reshape130_U0_dout;
wire    start_for_do_reshape130_U0_empty_n;
wire   [0:0] start_for_do_reshape131_U0_din;
wire    start_for_do_reshape131_U0_full_n;
wire   [0:0] start_for_do_reshape131_U0_dout;
wire    start_for_do_reshape131_U0_empty_n;
wire   [0:0] start_for_do_reshape132_U0_din;
wire    start_for_do_reshape132_U0_full_n;
wire   [0:0] start_for_do_reshape132_U0_dout;
wire    start_for_do_reshape132_U0_empty_n;
wire    do_reshape123_U0_start_full_n;
wire    do_reshape123_U0_start_write;
wire    do_reshape124_U0_start_full_n;
wire    do_reshape124_U0_start_write;
wire    do_reshape125_U0_start_full_n;
wire    do_reshape125_U0_start_write;
wire   [0:0] start_for_do_softmax128_U0_din;
wire    start_for_do_softmax128_U0_full_n;
wire   [0:0] start_for_do_softmax128_U0_dout;
wire    start_for_do_softmax128_U0_empty_n;
wire   [0:0] start_for_do_softmax129_U0_din;
wire    start_for_do_softmax129_U0_full_n;
wire   [0:0] start_for_do_softmax129_U0_dout;
wire    start_for_do_softmax129_U0_empty_n;
wire   [0:0] start_for_do_softmax_U0_din;
wire    start_for_do_softmax_U0_full_n;
wire   [0:0] start_for_do_softmax_U0_dout;
wire    start_for_do_softmax_U0_empty_n;
wire    do_softmax128_U0_start_full_n;
wire    do_softmax128_U0_start_write;
wire    do_softmax129_U0_start_full_n;
wire    do_softmax129_U0_start_write;
wire    do_softmax_U0_start_full_n;
wire    do_softmax_U0_start_write;
wire   [0:0] start_for_do_matmul133_U0_din;
wire    start_for_do_matmul133_U0_full_n;
wire   [0:0] start_for_do_matmul133_U0_dout;
wire    start_for_do_matmul133_U0_empty_n;
wire   [0:0] start_for_do_matmul134_U0_din;
wire    start_for_do_matmul134_U0_full_n;
wire   [0:0] start_for_do_matmul134_U0_dout;
wire    start_for_do_matmul134_U0_empty_n;
wire   [0:0] start_for_do_matmul_U0_din;
wire    start_for_do_matmul_U0_full_n;
wire   [0:0] start_for_do_matmul_U0_dout;
wire    start_for_do_matmul_U0_empty_n;
wire   [0:0] start_for_do_merge_U0_din;
wire    start_for_do_merge_U0_full_n;
wire   [0:0] start_for_do_merge_U0_dout;
wire    start_for_do_merge_U0_empty_n;
wire    do_matmul134_U0_start_full_n;
wire    do_matmul134_U0_start_write;
wire    do_matmul_U0_start_full_n;
wire    do_matmul_U0_start_write;
wire   [0:0] start_for_do_quant_U0_din;
wire    start_for_do_quant_U0_full_n;
wire   [0:0] start_for_do_quant_U0_dout;
wire    start_for_do_quant_U0_empty_n;
wire   [0:0] start_for_do_matmul_2_U0_din;
wire    start_for_do_matmul_2_U0_full_n;
wire   [0:0] start_for_do_matmul_2_U0_dout;
wire    start_for_do_matmul_2_U0_empty_n;
wire    do_matmul_2_U0_start_full_n;
wire    do_matmul_2_U0_start_write;
wire    stream_merge_U0_start_full_n;
wire    stream_merge_U0_start_write;

ATTN0_stream_copy2 stream_copy2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_copy2_U0_ap_start),
    .start_full_n(stream_copy2_U0_start_full_n),
    .ap_done(stream_copy2_U0_ap_done),
    .ap_continue(stream_copy2_U0_ap_continue),
    .ap_idle(stream_copy2_U0_ap_idle),
    .ap_ready(stream_copy2_U0_ap_ready),
    .start_out(stream_copy2_U0_start_out),
    .start_write(stream_copy2_U0_start_write),
    .i_stream_V_TDATA(i_stream_V_TDATA),
    .i_stream_V_TVALID(i_stream_V_TVALID),
    .i_stream_V_TREADY(stream_copy2_U0_i_stream_V_TREADY),
    .main_sm_din(stream_copy2_U0_main_sm_din),
    .main_sm_full_n(main_sm_full_n),
    .main_sm_write(stream_copy2_U0_main_sm_write),
    .resi_i_sm_din(stream_copy2_U0_resi_i_sm_din),
    .resi_i_sm_full_n(resi_i_sm_full_n),
    .resi_i_sm_write(stream_copy2_U0_resi_i_sm_write)
);

ATTN0_do_adapt_6 do_adapt_6_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_6_U0_ap_start),
    .start_full_n(start_for_do_adapt_5_U0_full_n),
    .ap_done(do_adapt_6_U0_ap_done),
    .ap_continue(do_adapt_6_U0_ap_continue),
    .ap_idle(do_adapt_6_U0_ap_idle),
    .ap_ready(do_adapt_6_U0_ap_ready),
    .start_out(do_adapt_6_U0_start_out),
    .start_write(do_adapt_6_U0_start_write),
    .resi_i_sm_dout(resi_i_sm_dout),
    .resi_i_sm_empty_n(resi_i_sm_empty_n),
    .resi_i_sm_read(do_adapt_6_U0_resi_i_sm_read),
    .resi_sm_din(do_adapt_6_U0_resi_sm_din),
    .resi_sm_full_n(resi_sm_full_n),
    .resi_sm_write(do_adapt_6_U0_resi_sm_write)
);

ATTN0_do_adapt_5 do_adapt_5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_5_U0_ap_start),
    .start_full_n(start_for_stream_merge_U0_full_n),
    .ap_done(do_adapt_5_U0_ap_done),
    .ap_continue(do_adapt_5_U0_ap_continue),
    .ap_idle(do_adapt_5_U0_ap_idle),
    .ap_ready(do_adapt_5_U0_ap_ready),
    .start_out(do_adapt_5_U0_start_out),
    .start_write(do_adapt_5_U0_start_write),
    .resi_sm_dout(resi_sm_dout),
    .resi_sm_empty_n(resi_sm_empty_n),
    .resi_sm_read(do_adapt_5_U0_resi_sm_read),
    .resi_o_sm_din(do_adapt_5_U0_resi_o_sm_din),
    .resi_o_sm_full_n(resi_o_sm_full_n),
    .resi_o_sm_write(do_adapt_5_U0_resi_o_sm_write)
);

ATTN0_do_layernorm do_layernorm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_layernorm_U0_ap_start),
    .start_full_n(start_for_stream_copy3_U0_full_n),
    .ap_done(do_layernorm_U0_ap_done),
    .ap_continue(do_layernorm_U0_ap_continue),
    .ap_idle(do_layernorm_U0_ap_idle),
    .ap_ready(do_layernorm_U0_ap_ready),
    .start_out(do_layernorm_U0_start_out),
    .start_write(do_layernorm_U0_start_write),
    .main_sm_dout(main_sm_dout),
    .main_sm_empty_n(main_sm_empty_n),
    .main_sm_read(do_layernorm_U0_main_sm_read),
    .lnq_sm_din(do_layernorm_U0_lnq_sm_din),
    .lnq_sm_full_n(lnq_sm_full_n),
    .lnq_sm_write(do_layernorm_U0_lnq_sm_write)
);

ATTN0_stream_copy3 stream_copy3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_copy3_U0_ap_start),
    .start_full_n(stream_copy3_U0_start_full_n),
    .ap_done(stream_copy3_U0_ap_done),
    .ap_continue(stream_copy3_U0_ap_continue),
    .ap_idle(stream_copy3_U0_ap_idle),
    .ap_ready(stream_copy3_U0_ap_ready),
    .start_out(stream_copy3_U0_start_out),
    .start_write(stream_copy3_U0_start_write),
    .lnq_sm_dout(lnq_sm_dout),
    .lnq_sm_empty_n(lnq_sm_empty_n),
    .lnq_sm_read(stream_copy3_U0_lnq_sm_read),
    .lnq_sm_cp1_din(stream_copy3_U0_lnq_sm_cp1_din),
    .lnq_sm_cp1_full_n(lnq_sm_cp1_full_n),
    .lnq_sm_cp1_write(stream_copy3_U0_lnq_sm_cp1_write),
    .lnq_sm_cp2_din(stream_copy3_U0_lnq_sm_cp2_din),
    .lnq_sm_cp2_full_n(lnq_sm_cp2_full_n),
    .lnq_sm_cp2_write(stream_copy3_U0_lnq_sm_cp2_write),
    .lnq_sm_cp3_din(stream_copy3_U0_lnq_sm_cp3_din),
    .lnq_sm_cp3_full_n(lnq_sm_cp3_full_n),
    .lnq_sm_cp3_write(stream_copy3_U0_lnq_sm_cp3_write)
);

ATTN0_do_matmul117 do_matmul117_U0(
    .ap_start(do_matmul117_U0_ap_start),
    .start_full_n(start_for_do_quant119_U0_full_n),
    .start_out(do_matmul117_U0_start_out),
    .start_write(do_matmul117_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_matmul117_U0_lnq_sm_cp1_read),
    .q_sm_din(do_matmul117_U0_q_sm_din),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_matmul117_U0_q_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul117_U0_ap_done),
    .ap_ready(do_matmul117_U0_ap_ready),
    .ap_idle(do_matmul117_U0_ap_idle),
    .ap_continue(do_matmul117_U0_ap_continue)
);

ATTN0_do_matmul118 do_matmul118_U0(
    .ap_start(do_matmul118_U0_ap_start),
    .start_full_n(start_for_do_quant120_U0_full_n),
    .start_out(do_matmul118_U0_start_out),
    .start_write(do_matmul118_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp2_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp2_empty_n),
    .lnq_sm_cp1_read(do_matmul118_U0_lnq_sm_cp1_read),
    .q_sm_din(do_matmul118_U0_q_sm_din),
    .q_sm_full_n(k_sm_full_n),
    .q_sm_write(do_matmul118_U0_q_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul118_U0_ap_done),
    .ap_ready(do_matmul118_U0_ap_ready),
    .ap_idle(do_matmul118_U0_ap_idle),
    .ap_continue(do_matmul118_U0_ap_continue)
);

ATTN0_do_matmul_3 do_matmul_3_U0(
    .ap_start(do_matmul_3_U0_ap_start),
    .start_full_n(start_for_do_quant_1_U0_full_n),
    .start_out(do_matmul_3_U0_start_out),
    .start_write(do_matmul_3_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp3_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp3_empty_n),
    .lnq_sm_cp1_read(do_matmul_3_U0_lnq_sm_cp1_read),
    .q_sm_din(do_matmul_3_U0_q_sm_din),
    .q_sm_full_n(v_sm_full_n),
    .q_sm_write(do_matmul_3_U0_q_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_3_U0_ap_done),
    .ap_ready(do_matmul_3_U0_ap_ready),
    .ap_idle(do_matmul_3_U0_ap_idle),
    .ap_continue(do_matmul_3_U0_ap_continue)
);

ATTN0_do_quant119 do_quant119_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant119_U0_ap_start),
    .start_full_n(start_for_do_split121_U0_full_n),
    .ap_done(do_quant119_U0_ap_done),
    .ap_continue(do_quant119_U0_ap_continue),
    .ap_idle(do_quant119_U0_ap_idle),
    .ap_ready(do_quant119_U0_ap_ready),
    .start_out(do_quant119_U0_start_out),
    .start_write(do_quant119_U0_start_write),
    .i_stream_dout(q_sm_dout),
    .i_stream_empty_n(q_sm_empty_n),
    .i_stream_read(do_quant119_U0_i_stream_read),
    .o_stream_din(do_quant119_U0_o_stream_din),
    .o_stream_full_n(qq_sm_full_n),
    .o_stream_write(do_quant119_U0_o_stream_write)
);

ATTN0_do_quant120 do_quant120_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant120_U0_ap_start),
    .start_full_n(start_for_do_split122_U0_full_n),
    .ap_done(do_quant120_U0_ap_done),
    .ap_continue(do_quant120_U0_ap_continue),
    .ap_idle(do_quant120_U0_ap_idle),
    .ap_ready(do_quant120_U0_ap_ready),
    .start_out(do_quant120_U0_start_out),
    .start_write(do_quant120_U0_start_write),
    .i_stream_dout(k_sm_dout),
    .i_stream_empty_n(k_sm_empty_n),
    .i_stream_read(do_quant120_U0_i_stream_read),
    .o_stream_din(do_quant120_U0_o_stream_din),
    .o_stream_full_n(kq_sm_full_n),
    .o_stream_write(do_quant120_U0_o_stream_write)
);

ATTN0_do_quant_1 do_quant_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_1_U0_ap_start),
    .start_full_n(start_for_do_split_U0_full_n),
    .ap_done(do_quant_1_U0_ap_done),
    .ap_continue(do_quant_1_U0_ap_continue),
    .ap_idle(do_quant_1_U0_ap_idle),
    .ap_ready(do_quant_1_U0_ap_ready),
    .start_out(do_quant_1_U0_start_out),
    .start_write(do_quant_1_U0_start_write),
    .i_stream_dout(v_sm_dout),
    .i_stream_empty_n(v_sm_empty_n),
    .i_stream_read(do_quant_1_U0_i_stream_read),
    .o_stream_din(do_quant_1_U0_o_stream_din),
    .o_stream_full_n(vq_sm_full_n),
    .o_stream_write(do_quant_1_U0_o_stream_write)
);

ATTN0_do_split121 do_split121_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split121_U0_ap_start),
    .start_full_n(do_split121_U0_start_full_n),
    .ap_done(do_split121_U0_ap_done),
    .ap_continue(do_split121_U0_ap_continue),
    .ap_idle(do_split121_U0_ap_idle),
    .ap_ready(do_split121_U0_ap_ready),
    .start_out(do_split121_U0_start_out),
    .start_write(do_split121_U0_start_write),
    .qq_sm_dout(qq_sm_dout),
    .qq_sm_empty_n(qq_sm_empty_n),
    .qq_sm_read(do_split121_U0_qq_sm_read),
    .qq_sm_head1_din(do_split121_U0_qq_sm_head1_din),
    .qq_sm_head1_full_n(qq_sm_head1_full_n),
    .qq_sm_head1_write(do_split121_U0_qq_sm_head1_write),
    .qq_sm_head2_din(do_split121_U0_qq_sm_head2_din),
    .qq_sm_head2_full_n(qq_sm_head2_full_n),
    .qq_sm_head2_write(do_split121_U0_qq_sm_head2_write),
    .qq_sm_head3_din(do_split121_U0_qq_sm_head3_din),
    .qq_sm_head3_full_n(qq_sm_head3_full_n),
    .qq_sm_head3_write(do_split121_U0_qq_sm_head3_write)
);

ATTN0_do_split122 do_split122_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split122_U0_ap_start),
    .start_full_n(do_split122_U0_start_full_n),
    .ap_done(do_split122_U0_ap_done),
    .ap_continue(do_split122_U0_ap_continue),
    .ap_idle(do_split122_U0_ap_idle),
    .ap_ready(do_split122_U0_ap_ready),
    .start_out(do_split122_U0_start_out),
    .start_write(do_split122_U0_start_write),
    .qq_sm_dout(kq_sm_dout),
    .qq_sm_empty_n(kq_sm_empty_n),
    .qq_sm_read(do_split122_U0_qq_sm_read),
    .qq_sm_head1_din(do_split122_U0_qq_sm_head1_din),
    .qq_sm_head1_full_n(kq_sm_head1_full_n),
    .qq_sm_head1_write(do_split122_U0_qq_sm_head1_write),
    .qq_sm_head2_din(do_split122_U0_qq_sm_head2_din),
    .qq_sm_head2_full_n(kq_sm_head2_full_n),
    .qq_sm_head2_write(do_split122_U0_qq_sm_head2_write),
    .qq_sm_head3_din(do_split122_U0_qq_sm_head3_din),
    .qq_sm_head3_full_n(kq_sm_head3_full_n),
    .qq_sm_head3_write(do_split122_U0_qq_sm_head3_write)
);

ATTN0_do_split do_split_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_split_U0_ap_start),
    .start_full_n(do_split_U0_start_full_n),
    .ap_done(do_split_U0_ap_done),
    .ap_continue(do_split_U0_ap_continue),
    .ap_idle(do_split_U0_ap_idle),
    .ap_ready(do_split_U0_ap_ready),
    .start_out(do_split_U0_start_out),
    .start_write(do_split_U0_start_write),
    .qq_sm_dout(vq_sm_dout),
    .qq_sm_empty_n(vq_sm_empty_n),
    .qq_sm_read(do_split_U0_qq_sm_read),
    .qq_sm_head1_din(do_split_U0_qq_sm_head1_din),
    .qq_sm_head1_full_n(vq_sm_head1_full_n),
    .qq_sm_head1_write(do_split_U0_qq_sm_head1_write),
    .qq_sm_head2_din(do_split_U0_qq_sm_head2_din),
    .qq_sm_head2_full_n(vq_sm_head2_full_n),
    .qq_sm_head2_write(do_split_U0_qq_sm_head2_write),
    .qq_sm_head3_din(do_split_U0_qq_sm_head3_din),
    .qq_sm_head3_full_n(vq_sm_head3_full_n),
    .qq_sm_head3_write(do_split_U0_qq_sm_head3_write)
);

ATTN0_do_reshape123 do_reshape123_U0(
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(do_reshape123_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape123_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(do_reshape123_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape123_U0_ap_start),
    .ap_done(do_reshape123_U0_ap_done),
    .ap_ready(do_reshape123_U0_ap_ready),
    .ap_idle(do_reshape123_U0_ap_idle),
    .ap_continue(do_reshape123_U0_ap_continue)
);

ATTN0_do_reshape124 do_reshape124_U0(
    .kq_sm_head1_dout(kq_sm_head2_dout),
    .kq_sm_head1_empty_n(kq_sm_head2_empty_n),
    .kq_sm_head1_read(do_reshape124_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape124_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head2_full_n),
    .kq_sm_reshape_head1_write(do_reshape124_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape124_U0_ap_start),
    .ap_done(do_reshape124_U0_ap_done),
    .ap_ready(do_reshape124_U0_ap_ready),
    .ap_idle(do_reshape124_U0_ap_idle),
    .ap_continue(do_reshape124_U0_ap_continue)
);

ATTN0_do_reshape125 do_reshape125_U0(
    .kq_sm_head1_dout(kq_sm_head3_dout),
    .kq_sm_head1_empty_n(kq_sm_head3_empty_n),
    .kq_sm_head1_read(do_reshape125_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape125_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head3_full_n),
    .kq_sm_reshape_head1_write(do_reshape125_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_reshape125_U0_ap_start),
    .ap_done(do_reshape125_U0_ap_done),
    .ap_ready(do_reshape125_U0_ap_ready),
    .ap_idle(do_reshape125_U0_ap_idle),
    .ap_continue(do_reshape125_U0_ap_continue)
);

ATTN0_do_matmul126 do_matmul126_U0(
    .ap_start(do_matmul126_U0_ap_start),
    .start_full_n(start_for_do_softmax128_U0_full_n),
    .start_out(do_matmul126_U0_start_out),
    .start_write(do_matmul126_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_matmul126_U0_qq_sm_head1_read),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(do_matmul126_U0_kq_sm_reshape_head1_read),
    .r_sm_head1_din(do_matmul126_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_matmul126_U0_r_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul126_U0_ap_done),
    .ap_ready(do_matmul126_U0_ap_ready),
    .ap_idle(do_matmul126_U0_ap_idle),
    .ap_continue(do_matmul126_U0_ap_continue)
);

ATTN0_do_matmul127 do_matmul127_U0(
    .ap_start(do_matmul127_U0_ap_start),
    .start_full_n(start_for_do_softmax129_U0_full_n),
    .start_out(do_matmul127_U0_start_out),
    .start_write(do_matmul127_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head2_dout),
    .qq_sm_head1_empty_n(qq_sm_head2_empty_n),
    .qq_sm_head1_read(do_matmul127_U0_qq_sm_head1_read),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head2_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head2_empty_n),
    .kq_sm_reshape_head1_read(do_matmul127_U0_kq_sm_reshape_head1_read),
    .r_sm_head1_din(do_matmul127_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head2_full_n),
    .r_sm_head1_write(do_matmul127_U0_r_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul127_U0_ap_done),
    .ap_ready(do_matmul127_U0_ap_ready),
    .ap_idle(do_matmul127_U0_ap_idle),
    .ap_continue(do_matmul127_U0_ap_continue)
);

ATTN0_do_matmul_1 do_matmul_1_U0(
    .ap_start(do_matmul_1_U0_ap_start),
    .start_full_n(start_for_do_softmax_U0_full_n),
    .start_out(do_matmul_1_U0_start_out),
    .start_write(do_matmul_1_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head3_dout),
    .qq_sm_head1_empty_n(qq_sm_head3_empty_n),
    .qq_sm_head1_read(do_matmul_1_U0_qq_sm_head1_read),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head3_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head3_empty_n),
    .kq_sm_reshape_head1_read(do_matmul_1_U0_kq_sm_reshape_head1_read),
    .r_sm_head1_din(do_matmul_1_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head3_full_n),
    .r_sm_head1_write(do_matmul_1_U0_r_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul_1_U0_ap_done),
    .ap_ready(do_matmul_1_U0_ap_ready),
    .ap_idle(do_matmul_1_U0_ap_idle),
    .ap_continue(do_matmul_1_U0_ap_continue)
);

ATTN0_do_softmax128 do_softmax128_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax128_U0_ap_start),
    .ap_done(do_softmax128_U0_ap_done),
    .ap_continue(do_softmax128_U0_ap_continue),
    .ap_idle(do_softmax128_U0_ap_idle),
    .ap_ready(do_softmax128_U0_ap_ready),
    .r_sm_head1_dout(r_sm_head1_dout),
    .r_sm_head1_empty_n(r_sm_head1_empty_n),
    .r_sm_head1_read(do_softmax128_U0_r_sm_head1_read),
    .rq_sm_head1_din(do_softmax128_U0_rq_sm_head1_din),
    .rq_sm_head1_full_n(rq_sm_head1_full_n),
    .rq_sm_head1_write(do_softmax128_U0_rq_sm_head1_write)
);

ATTN0_do_softmax129 do_softmax129_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax129_U0_ap_start),
    .ap_done(do_softmax129_U0_ap_done),
    .ap_continue(do_softmax129_U0_ap_continue),
    .ap_idle(do_softmax129_U0_ap_idle),
    .ap_ready(do_softmax129_U0_ap_ready),
    .r_sm_head1_dout(r_sm_head2_dout),
    .r_sm_head1_empty_n(r_sm_head2_empty_n),
    .r_sm_head1_read(do_softmax129_U0_r_sm_head1_read),
    .rq_sm_head1_din(do_softmax129_U0_rq_sm_head1_din),
    .rq_sm_head1_full_n(rq_sm_head2_full_n),
    .rq_sm_head1_write(do_softmax129_U0_rq_sm_head1_write)
);

ATTN0_do_softmax do_softmax_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_softmax_U0_ap_start),
    .ap_done(do_softmax_U0_ap_done),
    .ap_continue(do_softmax_U0_ap_continue),
    .ap_idle(do_softmax_U0_ap_idle),
    .ap_ready(do_softmax_U0_ap_ready),
    .r_sm_head1_dout(r_sm_head3_dout),
    .r_sm_head1_empty_n(r_sm_head3_empty_n),
    .r_sm_head1_read(do_softmax_U0_r_sm_head1_read),
    .rq_sm_head1_din(do_softmax_U0_rq_sm_head1_din),
    .rq_sm_head1_full_n(rq_sm_head3_full_n),
    .rq_sm_head1_write(do_softmax_U0_rq_sm_head1_write)
);

ATTN0_do_reshape130 do_reshape130_U0(
    .ap_start(do_reshape130_U0_ap_start),
    .start_full_n(start_for_do_matmul133_U0_full_n),
    .start_out(do_reshape130_U0_start_out),
    .start_write(do_reshape130_U0_start_write),
    .kq_sm_head1_dout(vq_sm_head1_dout),
    .kq_sm_head1_empty_n(vq_sm_head1_empty_n),
    .kq_sm_head1_read(do_reshape130_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape130_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(vq_sm_transpose_head1_full_n),
    .kq_sm_reshape_head1_write(do_reshape130_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape130_U0_ap_done),
    .ap_ready(do_reshape130_U0_ap_ready),
    .ap_idle(do_reshape130_U0_ap_idle),
    .ap_continue(do_reshape130_U0_ap_continue)
);

ATTN0_do_reshape131 do_reshape131_U0(
    .ap_start(do_reshape131_U0_ap_start),
    .start_full_n(start_for_do_matmul134_U0_full_n),
    .start_out(do_reshape131_U0_start_out),
    .start_write(do_reshape131_U0_start_write),
    .kq_sm_head1_dout(vq_sm_head2_dout),
    .kq_sm_head1_empty_n(vq_sm_head2_empty_n),
    .kq_sm_head1_read(do_reshape131_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape131_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(vq_sm_transpose_head2_full_n),
    .kq_sm_reshape_head1_write(do_reshape131_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape131_U0_ap_done),
    .ap_ready(do_reshape131_U0_ap_ready),
    .ap_idle(do_reshape131_U0_ap_idle),
    .ap_continue(do_reshape131_U0_ap_continue)
);

ATTN0_do_reshape132 do_reshape132_U0(
    .ap_start(do_reshape132_U0_ap_start),
    .start_full_n(start_for_do_matmul_U0_full_n),
    .start_out(do_reshape132_U0_start_out),
    .start_write(do_reshape132_U0_start_write),
    .kq_sm_head1_dout(vq_sm_head3_dout),
    .kq_sm_head1_empty_n(vq_sm_head3_empty_n),
    .kq_sm_head1_read(do_reshape132_U0_kq_sm_head1_read),
    .kq_sm_reshape_head1_din(do_reshape132_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(vq_sm_transpose_head3_full_n),
    .kq_sm_reshape_head1_write(do_reshape132_U0_kq_sm_reshape_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_reshape132_U0_ap_done),
    .ap_ready(do_reshape132_U0_ap_ready),
    .ap_idle(do_reshape132_U0_ap_idle),
    .ap_continue(do_reshape132_U0_ap_continue)
);

ATTN0_do_matmul133 do_matmul133_U0(
    .ap_start(do_matmul133_U0_ap_start),
    .start_full_n(start_for_do_merge_U0_full_n),
    .start_out(do_matmul133_U0_start_out),
    .start_write(do_matmul133_U0_start_write),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_matmul133_U0_rq_sm_head1_read),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(do_matmul133_U0_vq_sm_transpose_head1_read),
    .a_sm_head1_din(do_matmul133_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_matmul133_U0_a_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(do_matmul133_U0_ap_done),
    .ap_ready(do_matmul133_U0_ap_ready),
    .ap_idle(do_matmul133_U0_ap_idle),
    .ap_continue(do_matmul133_U0_ap_continue)
);

ATTN0_do_matmul134 do_matmul134_U0(
    .rq_sm_head1_dout(rq_sm_head2_dout),
    .rq_sm_head1_empty_n(rq_sm_head2_empty_n),
    .rq_sm_head1_read(do_matmul134_U0_rq_sm_head1_read),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head2_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head2_empty_n),
    .vq_sm_transpose_head1_read(do_matmul134_U0_vq_sm_transpose_head1_read),
    .a_sm_head1_din(do_matmul134_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head2_full_n),
    .a_sm_head1_write(do_matmul134_U0_a_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul134_U0_ap_start),
    .ap_done(do_matmul134_U0_ap_done),
    .ap_ready(do_matmul134_U0_ap_ready),
    .ap_idle(do_matmul134_U0_ap_idle),
    .ap_continue(do_matmul134_U0_ap_continue)
);

ATTN0_do_matmul do_matmul_U0(
    .rq_sm_head1_dout(rq_sm_head3_dout),
    .rq_sm_head1_empty_n(rq_sm_head3_empty_n),
    .rq_sm_head1_read(do_matmul_U0_rq_sm_head1_read),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head3_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head3_empty_n),
    .vq_sm_transpose_head1_read(do_matmul_U0_vq_sm_transpose_head1_read),
    .a_sm_head1_din(do_matmul_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head3_full_n),
    .a_sm_head1_write(do_matmul_U0_a_sm_head1_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_U0_ap_start),
    .ap_done(do_matmul_U0_ap_done),
    .ap_ready(do_matmul_U0_ap_ready),
    .ap_idle(do_matmul_U0_ap_idle),
    .ap_continue(do_matmul_U0_ap_continue)
);

ATTN0_do_merge do_merge_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_merge_U0_ap_start),
    .start_full_n(start_for_do_quant_U0_full_n),
    .ap_done(do_merge_U0_ap_done),
    .ap_continue(do_merge_U0_ap_continue),
    .ap_idle(do_merge_U0_ap_idle),
    .ap_ready(do_merge_U0_ap_ready),
    .start_out(do_merge_U0_start_out),
    .start_write(do_merge_U0_start_write),
    .a_sm_head1_dout(a_sm_head1_dout),
    .a_sm_head1_empty_n(a_sm_head1_empty_n),
    .a_sm_head1_read(do_merge_U0_a_sm_head1_read),
    .a_sm_head2_dout(a_sm_head2_dout),
    .a_sm_head2_empty_n(a_sm_head2_empty_n),
    .a_sm_head2_read(do_merge_U0_a_sm_head2_read),
    .a_sm_head3_dout(a_sm_head3_dout),
    .a_sm_head3_empty_n(a_sm_head3_empty_n),
    .a_sm_head3_read(do_merge_U0_a_sm_head3_read),
    .a_sm_din(do_merge_U0_a_sm_din),
    .a_sm_full_n(a_sm_full_n),
    .a_sm_write(do_merge_U0_a_sm_write)
);

ATTN0_do_quant do_quant_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_quant_U0_ap_start),
    .start_full_n(start_for_do_matmul_2_U0_full_n),
    .ap_done(do_quant_U0_ap_done),
    .ap_continue(do_quant_U0_ap_continue),
    .ap_idle(do_quant_U0_ap_idle),
    .ap_ready(do_quant_U0_ap_ready),
    .start_out(do_quant_U0_start_out),
    .start_write(do_quant_U0_start_write),
    .a_sm_dout(a_sm_dout),
    .a_sm_empty_n(a_sm_empty_n),
    .a_sm_read(do_quant_U0_a_sm_read),
    .aq_sm_din(do_quant_U0_aq_sm_din),
    .aq_sm_full_n(aq_sm_full_n),
    .aq_sm_write(do_quant_U0_aq_sm_write)
);

ATTN0_do_matmul_2 do_matmul_2_U0(
    .aq_sm_dout(aq_sm_dout),
    .aq_sm_empty_n(aq_sm_empty_n),
    .aq_sm_read(do_matmul_2_U0_aq_sm_read),
    .o_sm_din(do_matmul_2_U0_o_sm_din),
    .o_sm_full_n(o_sm_full_n),
    .o_sm_write(do_matmul_2_U0_o_sm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_matmul_2_U0_ap_start),
    .ap_done(do_matmul_2_U0_ap_done),
    .ap_ready(do_matmul_2_U0_ap_ready),
    .ap_idle(do_matmul_2_U0_ap_idle),
    .ap_continue(do_matmul_2_U0_ap_continue)
);

ATTN0_stream_merge stream_merge_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(stream_merge_U0_ap_start),
    .ap_done(stream_merge_U0_ap_done),
    .ap_continue(stream_merge_U0_ap_continue),
    .ap_idle(stream_merge_U0_ap_idle),
    .ap_ready(stream_merge_U0_ap_ready),
    .resi_o_sm_dout(resi_o_sm_dout),
    .resi_o_sm_empty_n(resi_o_sm_empty_n),
    .resi_o_sm_read(stream_merge_U0_resi_o_sm_read),
    .o_sm_dout(o_sm_dout),
    .o_sm_empty_n(o_sm_empty_n),
    .o_sm_read(stream_merge_U0_o_sm_read),
    .o_stream_V_TDATA(stream_merge_U0_o_stream_V_TDATA),
    .o_stream_V_TVALID(stream_merge_U0_o_stream_V_TVALID),
    .o_stream_V_TREADY(o_stream_V_TREADY)
);

ATTN0_fifo_w32_d2_S main_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy2_U0_main_sm_din),
    .if_full_n(main_sm_full_n),
    .if_write(stream_copy2_U0_main_sm_write),
    .if_dout(main_sm_dout),
    .if_empty_n(main_sm_empty_n),
    .if_read(do_layernorm_U0_main_sm_read)
);

ATTN0_fifo_w32_d512_A resi_i_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy2_U0_resi_i_sm_din),
    .if_full_n(resi_i_sm_full_n),
    .if_write(stream_copy2_U0_resi_i_sm_write),
    .if_dout(resi_i_sm_dout),
    .if_empty_n(resi_i_sm_empty_n),
    .if_read(do_adapt_6_U0_resi_i_sm_read)
);

ATTN0_fifo_w64_d12288_A resi_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_6_U0_resi_sm_din),
    .if_full_n(resi_sm_full_n),
    .if_write(do_adapt_6_U0_resi_sm_write),
    .if_dout(resi_sm_dout),
    .if_empty_n(resi_sm_empty_n),
    .if_read(do_adapt_5_U0_resi_sm_read)
);

ATTN0_fifo_w32_d512_A resi_o_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_5_U0_resi_o_sm_din),
    .if_full_n(resi_o_sm_full_n),
    .if_write(do_adapt_5_U0_resi_o_sm_write),
    .if_dout(resi_o_sm_dout),
    .if_empty_n(resi_o_sm_empty_n),
    .if_read(stream_merge_U0_resi_o_sm_read)
);

ATTN0_fifo_w16_d2_S lnq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_layernorm_U0_lnq_sm_din),
    .if_full_n(lnq_sm_full_n),
    .if_write(do_layernorm_U0_lnq_sm_write),
    .if_dout(lnq_sm_dout),
    .if_empty_n(lnq_sm_empty_n),
    .if_read(stream_copy3_U0_lnq_sm_read)
);

ATTN0_fifo_w16_d2_S lnq_sm_cp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp1_din),
    .if_full_n(lnq_sm_cp1_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp1_write),
    .if_dout(lnq_sm_cp1_dout),
    .if_empty_n(lnq_sm_cp1_empty_n),
    .if_read(do_matmul117_U0_lnq_sm_cp1_read)
);

ATTN0_fifo_w16_d2_S lnq_sm_cp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp2_din),
    .if_full_n(lnq_sm_cp2_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp2_write),
    .if_dout(lnq_sm_cp2_dout),
    .if_empty_n(lnq_sm_cp2_empty_n),
    .if_read(do_matmul118_U0_lnq_sm_cp1_read)
);

ATTN0_fifo_w16_d2_S lnq_sm_cp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(stream_copy3_U0_lnq_sm_cp3_din),
    .if_full_n(lnq_sm_cp3_full_n),
    .if_write(stream_copy3_U0_lnq_sm_cp3_write),
    .if_dout(lnq_sm_cp3_dout),
    .if_empty_n(lnq_sm_cp3_empty_n),
    .if_read(do_matmul_3_U0_lnq_sm_cp1_read)
);

ATTN0_fifo_w32_d2_S q_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul117_U0_q_sm_din),
    .if_full_n(q_sm_full_n),
    .if_write(do_matmul117_U0_q_sm_write),
    .if_dout(q_sm_dout),
    .if_empty_n(q_sm_empty_n),
    .if_read(do_quant119_U0_i_stream_read)
);

ATTN0_fifo_w32_d2_S k_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul118_U0_q_sm_din),
    .if_full_n(k_sm_full_n),
    .if_write(do_matmul118_U0_q_sm_write),
    .if_dout(k_sm_dout),
    .if_empty_n(k_sm_empty_n),
    .if_read(do_quant120_U0_i_stream_read)
);

ATTN0_fifo_w32_d2_S v_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_3_U0_q_sm_din),
    .if_full_n(v_sm_full_n),
    .if_write(do_matmul_3_U0_q_sm_write),
    .if_dout(v_sm_dout),
    .if_empty_n(v_sm_empty_n),
    .if_read(do_quant_1_U0_i_stream_read)
);

ATTN0_fifo_w16_d2_S qq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant119_U0_o_stream_din),
    .if_full_n(qq_sm_full_n),
    .if_write(do_quant119_U0_o_stream_write),
    .if_dout(qq_sm_dout),
    .if_empty_n(qq_sm_empty_n),
    .if_read(do_split121_U0_qq_sm_read)
);

ATTN0_fifo_w16_d2_S kq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant120_U0_o_stream_din),
    .if_full_n(kq_sm_full_n),
    .if_write(do_quant120_U0_o_stream_write),
    .if_dout(kq_sm_dout),
    .if_empty_n(kq_sm_empty_n),
    .if_read(do_split122_U0_qq_sm_read)
);

ATTN0_fifo_w16_d2_S vq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_1_U0_o_stream_din),
    .if_full_n(vq_sm_full_n),
    .if_write(do_quant_1_U0_o_stream_write),
    .if_dout(vq_sm_dout),
    .if_empty_n(vq_sm_empty_n),
    .if_read(do_split_U0_qq_sm_read)
);

ATTN0_fifo_w16_d8000_A qq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split121_U0_qq_sm_head1_din),
    .if_full_n(qq_sm_head1_full_n),
    .if_write(do_split121_U0_qq_sm_head1_write),
    .if_dout(qq_sm_head1_dout),
    .if_empty_n(qq_sm_head1_empty_n),
    .if_read(do_matmul126_U0_qq_sm_head1_read)
);

ATTN0_fifo_w16_d8000_A qq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split121_U0_qq_sm_head2_din),
    .if_full_n(qq_sm_head2_full_n),
    .if_write(do_split121_U0_qq_sm_head2_write),
    .if_dout(qq_sm_head2_dout),
    .if_empty_n(qq_sm_head2_empty_n),
    .if_read(do_matmul127_U0_qq_sm_head1_read)
);

ATTN0_fifo_w16_d8000_A qq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split121_U0_qq_sm_head3_din),
    .if_full_n(qq_sm_head3_full_n),
    .if_write(do_split121_U0_qq_sm_head3_write),
    .if_dout(qq_sm_head3_dout),
    .if_empty_n(qq_sm_head3_empty_n),
    .if_read(do_matmul_1_U0_qq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S kq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split122_U0_qq_sm_head1_din),
    .if_full_n(kq_sm_head1_full_n),
    .if_write(do_split122_U0_qq_sm_head1_write),
    .if_dout(kq_sm_head1_dout),
    .if_empty_n(kq_sm_head1_empty_n),
    .if_read(do_reshape123_U0_kq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S kq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split122_U0_qq_sm_head2_din),
    .if_full_n(kq_sm_head2_full_n),
    .if_write(do_split122_U0_qq_sm_head2_write),
    .if_dout(kq_sm_head2_dout),
    .if_empty_n(kq_sm_head2_empty_n),
    .if_read(do_reshape124_U0_kq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S kq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split122_U0_qq_sm_head3_din),
    .if_full_n(kq_sm_head3_full_n),
    .if_write(do_split122_U0_qq_sm_head3_write),
    .if_dout(kq_sm_head3_dout),
    .if_empty_n(kq_sm_head3_empty_n),
    .if_read(do_reshape125_U0_kq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S vq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_qq_sm_head1_din),
    .if_full_n(vq_sm_head1_full_n),
    .if_write(do_split_U0_qq_sm_head1_write),
    .if_dout(vq_sm_head1_dout),
    .if_empty_n(vq_sm_head1_empty_n),
    .if_read(do_reshape130_U0_kq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S vq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_qq_sm_head2_din),
    .if_full_n(vq_sm_head2_full_n),
    .if_write(do_split_U0_qq_sm_head2_write),
    .if_dout(vq_sm_head2_dout),
    .if_empty_n(vq_sm_head2_empty_n),
    .if_read(do_reshape131_U0_kq_sm_head1_read)
);

ATTN0_fifo_w16_d64_S vq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_split_U0_qq_sm_head3_din),
    .if_full_n(vq_sm_head3_full_n),
    .if_write(do_split_U0_qq_sm_head3_write),
    .if_dout(vq_sm_head3_dout),
    .if_empty_n(vq_sm_head3_empty_n),
    .if_read(do_reshape132_U0_kq_sm_head1_read)
);

ATTN0_fifo_w224_d512_A kq_sm_reshape_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape123_U0_kq_sm_reshape_head1_din),
    .if_full_n(kq_sm_reshape_head1_full_n),
    .if_write(do_reshape123_U0_kq_sm_reshape_head1_write),
    .if_dout(kq_sm_reshape_head1_dout),
    .if_empty_n(kq_sm_reshape_head1_empty_n),
    .if_read(do_matmul126_U0_kq_sm_reshape_head1_read)
);

ATTN0_fifo_w224_d512_A kq_sm_reshape_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape124_U0_kq_sm_reshape_head1_din),
    .if_full_n(kq_sm_reshape_head2_full_n),
    .if_write(do_reshape124_U0_kq_sm_reshape_head1_write),
    .if_dout(kq_sm_reshape_head2_dout),
    .if_empty_n(kq_sm_reshape_head2_empty_n),
    .if_read(do_matmul127_U0_kq_sm_reshape_head1_read)
);

ATTN0_fifo_w224_d512_A kq_sm_reshape_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape125_U0_kq_sm_reshape_head1_din),
    .if_full_n(kq_sm_reshape_head3_full_n),
    .if_write(do_reshape125_U0_kq_sm_reshape_head1_write),
    .if_dout(kq_sm_reshape_head3_dout),
    .if_empty_n(kq_sm_reshape_head3_empty_n),
    .if_read(do_matmul_1_U0_kq_sm_reshape_head1_read)
);

ATTN0_fifo_w32_d512_A r_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul126_U0_r_sm_head1_din),
    .if_full_n(r_sm_head1_full_n),
    .if_write(do_matmul126_U0_r_sm_head1_write),
    .if_dout(r_sm_head1_dout),
    .if_empty_n(r_sm_head1_empty_n),
    .if_read(do_softmax128_U0_r_sm_head1_read)
);

ATTN0_fifo_w32_d512_A r_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul127_U0_r_sm_head1_din),
    .if_full_n(r_sm_head2_full_n),
    .if_write(do_matmul127_U0_r_sm_head1_write),
    .if_dout(r_sm_head2_dout),
    .if_empty_n(r_sm_head2_empty_n),
    .if_read(do_softmax129_U0_r_sm_head1_read)
);

ATTN0_fifo_w32_d512_A r_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_1_U0_r_sm_head1_din),
    .if_full_n(r_sm_head3_full_n),
    .if_write(do_matmul_1_U0_r_sm_head1_write),
    .if_dout(r_sm_head3_dout),
    .if_empty_n(r_sm_head3_empty_n),
    .if_read(do_softmax_U0_r_sm_head1_read)
);

ATTN0_fifo_w16_d512_A rq_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax128_U0_rq_sm_head1_din),
    .if_full_n(rq_sm_head1_full_n),
    .if_write(do_softmax128_U0_rq_sm_head1_write),
    .if_dout(rq_sm_head1_dout),
    .if_empty_n(rq_sm_head1_empty_n),
    .if_read(do_matmul133_U0_rq_sm_head1_read)
);

ATTN0_fifo_w16_d512_A rq_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax129_U0_rq_sm_head1_din),
    .if_full_n(rq_sm_head2_full_n),
    .if_write(do_softmax129_U0_rq_sm_head1_write),
    .if_dout(rq_sm_head2_dout),
    .if_empty_n(rq_sm_head2_empty_n),
    .if_read(do_matmul134_U0_rq_sm_head1_read)
);

ATTN0_fifo_w16_d512_A rq_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_softmax_U0_rq_sm_head1_din),
    .if_full_n(rq_sm_head3_full_n),
    .if_write(do_softmax_U0_rq_sm_head1_write),
    .if_dout(rq_sm_head3_dout),
    .if_empty_n(rq_sm_head3_empty_n),
    .if_read(do_matmul_U0_rq_sm_head1_read)
);

ATTN0_fifo_w224_d512_A vq_sm_transpose_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape130_U0_kq_sm_reshape_head1_din),
    .if_full_n(vq_sm_transpose_head1_full_n),
    .if_write(do_reshape130_U0_kq_sm_reshape_head1_write),
    .if_dout(vq_sm_transpose_head1_dout),
    .if_empty_n(vq_sm_transpose_head1_empty_n),
    .if_read(do_matmul133_U0_vq_sm_transpose_head1_read)
);

ATTN0_fifo_w224_d512_A vq_sm_transpose_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape131_U0_kq_sm_reshape_head1_din),
    .if_full_n(vq_sm_transpose_head2_full_n),
    .if_write(do_reshape131_U0_kq_sm_reshape_head1_write),
    .if_dout(vq_sm_transpose_head2_dout),
    .if_empty_n(vq_sm_transpose_head2_empty_n),
    .if_read(do_matmul134_U0_vq_sm_transpose_head1_read)
);

ATTN0_fifo_w224_d512_A vq_sm_transpose_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_reshape132_U0_kq_sm_reshape_head1_din),
    .if_full_n(vq_sm_transpose_head3_full_n),
    .if_write(do_reshape132_U0_kq_sm_reshape_head1_write),
    .if_dout(vq_sm_transpose_head3_dout),
    .if_empty_n(vq_sm_transpose_head3_empty_n),
    .if_read(do_matmul_U0_vq_sm_transpose_head1_read)
);

ATTN0_fifo_w32_d64_A a_sm_head1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul133_U0_a_sm_head1_din),
    .if_full_n(a_sm_head1_full_n),
    .if_write(do_matmul133_U0_a_sm_head1_write),
    .if_dout(a_sm_head1_dout),
    .if_empty_n(a_sm_head1_empty_n),
    .if_read(do_merge_U0_a_sm_head1_read)
);

ATTN0_fifo_w32_d64_A a_sm_head2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul134_U0_a_sm_head1_din),
    .if_full_n(a_sm_head2_full_n),
    .if_write(do_matmul134_U0_a_sm_head1_write),
    .if_dout(a_sm_head2_dout),
    .if_empty_n(a_sm_head2_empty_n),
    .if_read(do_merge_U0_a_sm_head2_read)
);

ATTN0_fifo_w32_d64_A a_sm_head3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_U0_a_sm_head1_din),
    .if_full_n(a_sm_head3_full_n),
    .if_write(do_matmul_U0_a_sm_head1_write),
    .if_dout(a_sm_head3_dout),
    .if_empty_n(a_sm_head3_empty_n),
    .if_read(do_merge_U0_a_sm_head3_read)
);

ATTN0_fifo_w32_d2_S a_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_merge_U0_a_sm_din),
    .if_full_n(a_sm_full_n),
    .if_write(do_merge_U0_a_sm_write),
    .if_dout(a_sm_dout),
    .if_empty_n(a_sm_empty_n),
    .if_read(do_quant_U0_a_sm_read)
);

ATTN0_fifo_w16_d2_S aq_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_quant_U0_aq_sm_din),
    .if_full_n(aq_sm_full_n),
    .if_write(do_quant_U0_aq_sm_write),
    .if_dout(aq_sm_dout),
    .if_empty_n(aq_sm_empty_n),
    .if_read(do_matmul_2_U0_aq_sm_read)
);

ATTN0_fifo_w32_d2_S o_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_matmul_2_U0_o_sm_din),
    .if_full_n(o_sm_full_n),
    .if_write(do_matmul_2_U0_o_sm_write),
    .if_dout(o_sm_dout),
    .if_empty_n(o_sm_empty_n),
    .if_read(stream_merge_U0_o_sm_read)
);

ATTN0_start_for_do_adapt_6_U0 start_for_do_adapt_6_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_6_U0_din),
    .if_full_n(start_for_do_adapt_6_U0_full_n),
    .if_write(stream_copy2_U0_start_write),
    .if_dout(start_for_do_adapt_6_U0_dout),
    .if_empty_n(start_for_do_adapt_6_U0_empty_n),
    .if_read(do_adapt_6_U0_ap_ready)
);

ATTN0_start_for_do_layernorm_U0 start_for_do_layernorm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_layernorm_U0_din),
    .if_full_n(start_for_do_layernorm_U0_full_n),
    .if_write(stream_copy2_U0_start_write),
    .if_dout(start_for_do_layernorm_U0_dout),
    .if_empty_n(start_for_do_layernorm_U0_empty_n),
    .if_read(do_layernorm_U0_ap_ready)
);

ATTN0_start_for_do_adapt_5_U0 start_for_do_adapt_5_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_5_U0_din),
    .if_full_n(start_for_do_adapt_5_U0_full_n),
    .if_write(do_adapt_6_U0_start_write),
    .if_dout(start_for_do_adapt_5_U0_dout),
    .if_empty_n(start_for_do_adapt_5_U0_empty_n),
    .if_read(do_adapt_5_U0_ap_ready)
);

ATTN0_start_for_stream_merge_U0 start_for_stream_merge_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stream_merge_U0_din),
    .if_full_n(start_for_stream_merge_U0_full_n),
    .if_write(do_adapt_5_U0_start_write),
    .if_dout(start_for_stream_merge_U0_dout),
    .if_empty_n(start_for_stream_merge_U0_empty_n),
    .if_read(stream_merge_U0_ap_ready)
);

ATTN0_start_for_stream_copy3_U0 start_for_stream_copy3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_stream_copy3_U0_din),
    .if_full_n(start_for_stream_copy3_U0_full_n),
    .if_write(do_layernorm_U0_start_write),
    .if_dout(start_for_stream_copy3_U0_dout),
    .if_empty_n(start_for_stream_copy3_U0_empty_n),
    .if_read(stream_copy3_U0_ap_ready)
);

ATTN0_start_for_do_matmul117_U0 start_for_do_matmul117_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul117_U0_din),
    .if_full_n(start_for_do_matmul117_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul117_U0_dout),
    .if_empty_n(start_for_do_matmul117_U0_empty_n),
    .if_read(do_matmul117_U0_ap_ready)
);

ATTN0_start_for_do_matmul118_U0 start_for_do_matmul118_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul118_U0_din),
    .if_full_n(start_for_do_matmul118_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul118_U0_dout),
    .if_empty_n(start_for_do_matmul118_U0_empty_n),
    .if_read(do_matmul118_U0_ap_ready)
);

ATTN0_start_for_do_matmul_3_U0 start_for_do_matmul_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_3_U0_din),
    .if_full_n(start_for_do_matmul_3_U0_full_n),
    .if_write(stream_copy3_U0_start_write),
    .if_dout(start_for_do_matmul_3_U0_dout),
    .if_empty_n(start_for_do_matmul_3_U0_empty_n),
    .if_read(do_matmul_3_U0_ap_ready)
);

ATTN0_start_for_do_quant119_U0 start_for_do_quant119_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant119_U0_din),
    .if_full_n(start_for_do_quant119_U0_full_n),
    .if_write(do_matmul117_U0_start_write),
    .if_dout(start_for_do_quant119_U0_dout),
    .if_empty_n(start_for_do_quant119_U0_empty_n),
    .if_read(do_quant119_U0_ap_ready)
);

ATTN0_start_for_do_quant120_U0 start_for_do_quant120_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant120_U0_din),
    .if_full_n(start_for_do_quant120_U0_full_n),
    .if_write(do_matmul118_U0_start_write),
    .if_dout(start_for_do_quant120_U0_dout),
    .if_empty_n(start_for_do_quant120_U0_empty_n),
    .if_read(do_quant120_U0_ap_ready)
);

ATTN0_start_for_do_quant_1_U0 start_for_do_quant_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_1_U0_din),
    .if_full_n(start_for_do_quant_1_U0_full_n),
    .if_write(do_matmul_3_U0_start_write),
    .if_dout(start_for_do_quant_1_U0_dout),
    .if_empty_n(start_for_do_quant_1_U0_empty_n),
    .if_read(do_quant_1_U0_ap_ready)
);

ATTN0_start_for_do_split121_U0 start_for_do_split121_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split121_U0_din),
    .if_full_n(start_for_do_split121_U0_full_n),
    .if_write(do_quant119_U0_start_write),
    .if_dout(start_for_do_split121_U0_dout),
    .if_empty_n(start_for_do_split121_U0_empty_n),
    .if_read(do_split121_U0_ap_ready)
);

ATTN0_start_for_do_split122_U0 start_for_do_split122_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split122_U0_din),
    .if_full_n(start_for_do_split122_U0_full_n),
    .if_write(do_quant120_U0_start_write),
    .if_dout(start_for_do_split122_U0_dout),
    .if_empty_n(start_for_do_split122_U0_empty_n),
    .if_read(do_split122_U0_ap_ready)
);

ATTN0_start_for_do_split_U0 start_for_do_split_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_split_U0_din),
    .if_full_n(start_for_do_split_U0_full_n),
    .if_write(do_quant_1_U0_start_write),
    .if_dout(start_for_do_split_U0_dout),
    .if_empty_n(start_for_do_split_U0_empty_n),
    .if_read(do_split_U0_ap_ready)
);

ATTN0_start_for_do_matmul126_U0 start_for_do_matmul126_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul126_U0_din),
    .if_full_n(start_for_do_matmul126_U0_full_n),
    .if_write(do_split121_U0_start_write),
    .if_dout(start_for_do_matmul126_U0_dout),
    .if_empty_n(start_for_do_matmul126_U0_empty_n),
    .if_read(do_matmul126_U0_ap_ready)
);

ATTN0_start_for_do_matmul127_U0 start_for_do_matmul127_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul127_U0_din),
    .if_full_n(start_for_do_matmul127_U0_full_n),
    .if_write(do_split121_U0_start_write),
    .if_dout(start_for_do_matmul127_U0_dout),
    .if_empty_n(start_for_do_matmul127_U0_empty_n),
    .if_read(do_matmul127_U0_ap_ready)
);

ATTN0_start_for_do_matmul_1_U0 start_for_do_matmul_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_1_U0_din),
    .if_full_n(start_for_do_matmul_1_U0_full_n),
    .if_write(do_split121_U0_start_write),
    .if_dout(start_for_do_matmul_1_U0_dout),
    .if_empty_n(start_for_do_matmul_1_U0_empty_n),
    .if_read(do_matmul_1_U0_ap_ready)
);

ATTN0_start_for_do_reshape123_U0 start_for_do_reshape123_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape123_U0_din),
    .if_full_n(start_for_do_reshape123_U0_full_n),
    .if_write(do_split122_U0_start_write),
    .if_dout(start_for_do_reshape123_U0_dout),
    .if_empty_n(start_for_do_reshape123_U0_empty_n),
    .if_read(do_reshape123_U0_ap_ready)
);

ATTN0_start_for_do_reshape124_U0 start_for_do_reshape124_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape124_U0_din),
    .if_full_n(start_for_do_reshape124_U0_full_n),
    .if_write(do_split122_U0_start_write),
    .if_dout(start_for_do_reshape124_U0_dout),
    .if_empty_n(start_for_do_reshape124_U0_empty_n),
    .if_read(do_reshape124_U0_ap_ready)
);

ATTN0_start_for_do_reshape125_U0 start_for_do_reshape125_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape125_U0_din),
    .if_full_n(start_for_do_reshape125_U0_full_n),
    .if_write(do_split122_U0_start_write),
    .if_dout(start_for_do_reshape125_U0_dout),
    .if_empty_n(start_for_do_reshape125_U0_empty_n),
    .if_read(do_reshape125_U0_ap_ready)
);

ATTN0_start_for_do_reshape130_U0 start_for_do_reshape130_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape130_U0_din),
    .if_full_n(start_for_do_reshape130_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape130_U0_dout),
    .if_empty_n(start_for_do_reshape130_U0_empty_n),
    .if_read(do_reshape130_U0_ap_ready)
);

ATTN0_start_for_do_reshape131_U0 start_for_do_reshape131_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape131_U0_din),
    .if_full_n(start_for_do_reshape131_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape131_U0_dout),
    .if_empty_n(start_for_do_reshape131_U0_empty_n),
    .if_read(do_reshape131_U0_ap_ready)
);

ATTN0_start_for_do_reshape132_U0 start_for_do_reshape132_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_reshape132_U0_din),
    .if_full_n(start_for_do_reshape132_U0_full_n),
    .if_write(do_split_U0_start_write),
    .if_dout(start_for_do_reshape132_U0_dout),
    .if_empty_n(start_for_do_reshape132_U0_empty_n),
    .if_read(do_reshape132_U0_ap_ready)
);

ATTN0_start_for_do_softmax128_U0 start_for_do_softmax128_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax128_U0_din),
    .if_full_n(start_for_do_softmax128_U0_full_n),
    .if_write(do_matmul126_U0_start_write),
    .if_dout(start_for_do_softmax128_U0_dout),
    .if_empty_n(start_for_do_softmax128_U0_empty_n),
    .if_read(do_softmax128_U0_ap_ready)
);

ATTN0_start_for_do_softmax129_U0 start_for_do_softmax129_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax129_U0_din),
    .if_full_n(start_for_do_softmax129_U0_full_n),
    .if_write(do_matmul127_U0_start_write),
    .if_dout(start_for_do_softmax129_U0_dout),
    .if_empty_n(start_for_do_softmax129_U0_empty_n),
    .if_read(do_softmax129_U0_ap_ready)
);

ATTN0_start_for_do_softmax_U0 start_for_do_softmax_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_softmax_U0_din),
    .if_full_n(start_for_do_softmax_U0_full_n),
    .if_write(do_matmul_1_U0_start_write),
    .if_dout(start_for_do_softmax_U0_dout),
    .if_empty_n(start_for_do_softmax_U0_empty_n),
    .if_read(do_softmax_U0_ap_ready)
);

ATTN0_start_for_do_matmul133_U0 start_for_do_matmul133_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul133_U0_din),
    .if_full_n(start_for_do_matmul133_U0_full_n),
    .if_write(do_reshape130_U0_start_write),
    .if_dout(start_for_do_matmul133_U0_dout),
    .if_empty_n(start_for_do_matmul133_U0_empty_n),
    .if_read(do_matmul133_U0_ap_ready)
);

ATTN0_start_for_do_matmul134_U0 start_for_do_matmul134_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul134_U0_din),
    .if_full_n(start_for_do_matmul134_U0_full_n),
    .if_write(do_reshape131_U0_start_write),
    .if_dout(start_for_do_matmul134_U0_dout),
    .if_empty_n(start_for_do_matmul134_U0_empty_n),
    .if_read(do_matmul134_U0_ap_ready)
);

ATTN0_start_for_do_matmul_U0 start_for_do_matmul_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_U0_din),
    .if_full_n(start_for_do_matmul_U0_full_n),
    .if_write(do_reshape132_U0_start_write),
    .if_dout(start_for_do_matmul_U0_dout),
    .if_empty_n(start_for_do_matmul_U0_empty_n),
    .if_read(do_matmul_U0_ap_ready)
);

ATTN0_start_for_do_merge_U0 start_for_do_merge_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_merge_U0_din),
    .if_full_n(start_for_do_merge_U0_full_n),
    .if_write(do_matmul133_U0_start_write),
    .if_dout(start_for_do_merge_U0_dout),
    .if_empty_n(start_for_do_merge_U0_empty_n),
    .if_read(do_merge_U0_ap_ready)
);

ATTN0_start_for_do_quant_U0 start_for_do_quant_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_quant_U0_din),
    .if_full_n(start_for_do_quant_U0_full_n),
    .if_write(do_merge_U0_start_write),
    .if_dout(start_for_do_quant_U0_dout),
    .if_empty_n(start_for_do_quant_U0_empty_n),
    .if_read(do_quant_U0_ap_ready)
);

ATTN0_start_for_do_matmul_2_U0 start_for_do_matmul_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_matmul_2_U0_din),
    .if_full_n(start_for_do_matmul_2_U0_full_n),
    .if_write(do_quant_U0_start_write),
    .if_dout(start_for_do_matmul_2_U0_dout),
    .if_empty_n(start_for_do_matmul_2_U0_empty_n),
    .if_read(do_matmul_2_U0_ap_ready)
);

assign ap_done = stream_merge_U0_ap_done;

assign ap_idle = (stream_merge_U0_ap_idle & stream_copy3_U0_ap_idle & stream_copy2_U0_ap_idle & do_split_U0_ap_idle & do_split122_U0_ap_idle & do_split121_U0_ap_idle & do_softmax_U0_ap_idle & do_softmax129_U0_ap_idle & do_softmax128_U0_ap_idle & do_reshape132_U0_ap_idle & do_reshape131_U0_ap_idle & do_reshape130_U0_ap_idle & do_reshape125_U0_ap_idle & do_reshape124_U0_ap_idle & do_reshape123_U0_ap_idle & do_quant_U0_ap_idle & do_quant_1_U0_ap_idle & do_quant120_U0_ap_idle & do_quant119_U0_ap_idle & do_merge_U0_ap_idle & do_matmul_U0_ap_idle & do_matmul_3_U0_ap_idle & do_matmul_2_U0_ap_idle & do_matmul_1_U0_ap_idle & do_matmul134_U0_ap_idle & do_matmul133_U0_ap_idle & do_matmul127_U0_ap_idle & do_matmul126_U0_ap_idle & do_matmul118_U0_ap_idle & do_matmul117_U0_ap_idle & do_layernorm_U0_ap_idle & do_adapt_6_U0_ap_idle & do_adapt_5_U0_ap_idle);

assign ap_ready = stream_copy2_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = stream_merge_U0_ap_done;

assign ap_sync_ready = stream_copy2_U0_ap_ready;

assign do_adapt_5_U0_ap_continue = 1'b1;

assign do_adapt_5_U0_ap_start = start_for_do_adapt_5_U0_empty_n;

assign do_adapt_6_U0_ap_continue = 1'b1;

assign do_adapt_6_U0_ap_start = start_for_do_adapt_6_U0_empty_n;

assign do_layernorm_U0_ap_continue = 1'b1;

assign do_layernorm_U0_ap_start = start_for_do_layernorm_U0_empty_n;

assign do_matmul117_U0_ap_continue = 1'b1;

assign do_matmul117_U0_ap_start = start_for_do_matmul117_U0_empty_n;

assign do_matmul118_U0_ap_continue = 1'b1;

assign do_matmul118_U0_ap_start = start_for_do_matmul118_U0_empty_n;

assign do_matmul126_U0_ap_continue = 1'b1;

assign do_matmul126_U0_ap_start = start_for_do_matmul126_U0_empty_n;

assign do_matmul127_U0_ap_continue = 1'b1;

assign do_matmul127_U0_ap_start = start_for_do_matmul127_U0_empty_n;

assign do_matmul133_U0_ap_continue = 1'b1;

assign do_matmul133_U0_ap_start = start_for_do_matmul133_U0_empty_n;

assign do_matmul134_U0_ap_continue = 1'b1;

assign do_matmul134_U0_ap_start = start_for_do_matmul134_U0_empty_n;

assign do_matmul134_U0_start_full_n = 1'b1;

assign do_matmul134_U0_start_write = 1'b0;

assign do_matmul_1_U0_ap_continue = 1'b1;

assign do_matmul_1_U0_ap_start = start_for_do_matmul_1_U0_empty_n;

assign do_matmul_2_U0_ap_continue = 1'b1;

assign do_matmul_2_U0_ap_start = start_for_do_matmul_2_U0_empty_n;

assign do_matmul_2_U0_start_full_n = 1'b1;

assign do_matmul_2_U0_start_write = 1'b0;

assign do_matmul_3_U0_ap_continue = 1'b1;

assign do_matmul_3_U0_ap_start = start_for_do_matmul_3_U0_empty_n;

assign do_matmul_U0_ap_continue = 1'b1;

assign do_matmul_U0_ap_start = start_for_do_matmul_U0_empty_n;

assign do_matmul_U0_start_full_n = 1'b1;

assign do_matmul_U0_start_write = 1'b0;

assign do_merge_U0_ap_continue = 1'b1;

assign do_merge_U0_ap_start = start_for_do_merge_U0_empty_n;

assign do_quant119_U0_ap_continue = 1'b1;

assign do_quant119_U0_ap_start = start_for_do_quant119_U0_empty_n;

assign do_quant120_U0_ap_continue = 1'b1;

assign do_quant120_U0_ap_start = start_for_do_quant120_U0_empty_n;

assign do_quant_1_U0_ap_continue = 1'b1;

assign do_quant_1_U0_ap_start = start_for_do_quant_1_U0_empty_n;

assign do_quant_U0_ap_continue = 1'b1;

assign do_quant_U0_ap_start = start_for_do_quant_U0_empty_n;

assign do_reshape123_U0_ap_continue = 1'b1;

assign do_reshape123_U0_ap_start = start_for_do_reshape123_U0_empty_n;

assign do_reshape123_U0_start_full_n = 1'b1;

assign do_reshape123_U0_start_write = 1'b0;

assign do_reshape124_U0_ap_continue = 1'b1;

assign do_reshape124_U0_ap_start = start_for_do_reshape124_U0_empty_n;

assign do_reshape124_U0_start_full_n = 1'b1;

assign do_reshape124_U0_start_write = 1'b0;

assign do_reshape125_U0_ap_continue = 1'b1;

assign do_reshape125_U0_ap_start = start_for_do_reshape125_U0_empty_n;

assign do_reshape125_U0_start_full_n = 1'b1;

assign do_reshape125_U0_start_write = 1'b0;

assign do_reshape130_U0_ap_continue = 1'b1;

assign do_reshape130_U0_ap_start = start_for_do_reshape130_U0_empty_n;

assign do_reshape131_U0_ap_continue = 1'b1;

assign do_reshape131_U0_ap_start = start_for_do_reshape131_U0_empty_n;

assign do_reshape132_U0_ap_continue = 1'b1;

assign do_reshape132_U0_ap_start = start_for_do_reshape132_U0_empty_n;

assign do_softmax128_U0_ap_continue = 1'b1;

assign do_softmax128_U0_ap_start = start_for_do_softmax128_U0_empty_n;

assign do_softmax128_U0_start_full_n = 1'b1;

assign do_softmax128_U0_start_write = 1'b0;

assign do_softmax129_U0_ap_continue = 1'b1;

assign do_softmax129_U0_ap_start = start_for_do_softmax129_U0_empty_n;

assign do_softmax129_U0_start_full_n = 1'b1;

assign do_softmax129_U0_start_write = 1'b0;

assign do_softmax_U0_ap_continue = 1'b1;

assign do_softmax_U0_ap_start = start_for_do_softmax_U0_empty_n;

assign do_softmax_U0_start_full_n = 1'b1;

assign do_softmax_U0_start_write = 1'b0;

assign do_split121_U0_ap_continue = 1'b1;

assign do_split121_U0_ap_start = start_for_do_split121_U0_empty_n;

assign do_split121_U0_start_full_n = (start_for_do_matmul_1_U0_full_n & start_for_do_matmul127_U0_full_n & start_for_do_matmul126_U0_full_n);

assign do_split122_U0_ap_continue = 1'b1;

assign do_split122_U0_ap_start = start_for_do_split122_U0_empty_n;

assign do_split122_U0_start_full_n = (start_for_do_reshape125_U0_full_n & start_for_do_reshape124_U0_full_n & start_for_do_reshape123_U0_full_n);

assign do_split_U0_ap_continue = 1'b1;

assign do_split_U0_ap_start = start_for_do_split_U0_empty_n;

assign do_split_U0_start_full_n = (start_for_do_reshape132_U0_full_n & start_for_do_reshape131_U0_full_n & start_for_do_reshape130_U0_full_n);

assign i_stream_V_TREADY = stream_copy2_U0_i_stream_V_TREADY;

assign o_stream_V_TDATA = stream_merge_U0_o_stream_V_TDATA;

assign o_stream_V_TVALID = stream_merge_U0_o_stream_V_TVALID;

assign start_for_do_adapt_5_U0_din = 1'b1;

assign start_for_do_adapt_6_U0_din = 1'b1;

assign start_for_do_layernorm_U0_din = 1'b1;

assign start_for_do_matmul117_U0_din = 1'b1;

assign start_for_do_matmul118_U0_din = 1'b1;

assign start_for_do_matmul126_U0_din = 1'b1;

assign start_for_do_matmul127_U0_din = 1'b1;

assign start_for_do_matmul133_U0_din = 1'b1;

assign start_for_do_matmul134_U0_din = 1'b1;

assign start_for_do_matmul_1_U0_din = 1'b1;

assign start_for_do_matmul_2_U0_din = 1'b1;

assign start_for_do_matmul_3_U0_din = 1'b1;

assign start_for_do_matmul_U0_din = 1'b1;

assign start_for_do_merge_U0_din = 1'b1;

assign start_for_do_quant119_U0_din = 1'b1;

assign start_for_do_quant120_U0_din = 1'b1;

assign start_for_do_quant_1_U0_din = 1'b1;

assign start_for_do_quant_U0_din = 1'b1;

assign start_for_do_reshape123_U0_din = 1'b1;

assign start_for_do_reshape124_U0_din = 1'b1;

assign start_for_do_reshape125_U0_din = 1'b1;

assign start_for_do_reshape130_U0_din = 1'b1;

assign start_for_do_reshape131_U0_din = 1'b1;

assign start_for_do_reshape132_U0_din = 1'b1;

assign start_for_do_softmax128_U0_din = 1'b1;

assign start_for_do_softmax129_U0_din = 1'b1;

assign start_for_do_softmax_U0_din = 1'b1;

assign start_for_do_split121_U0_din = 1'b1;

assign start_for_do_split122_U0_din = 1'b1;

assign start_for_do_split_U0_din = 1'b1;

assign start_for_stream_copy3_U0_din = 1'b1;

assign start_for_stream_merge_U0_din = 1'b1;

assign stream_copy2_U0_ap_continue = 1'b1;

assign stream_copy2_U0_ap_start = ap_start;

assign stream_copy2_U0_start_full_n = (start_for_do_layernorm_U0_full_n & start_for_do_adapt_6_U0_full_n);

assign stream_copy3_U0_ap_continue = 1'b1;

assign stream_copy3_U0_ap_start = start_for_stream_copy3_U0_empty_n;

assign stream_copy3_U0_start_full_n = (start_for_do_matmul_3_U0_full_n & start_for_do_matmul118_U0_full_n & start_for_do_matmul117_U0_full_n);

assign stream_merge_U0_ap_continue = ap_continue;

assign stream_merge_U0_ap_start = start_for_stream_merge_U0_empty_n;

assign stream_merge_U0_start_full_n = 1'b1;

assign stream_merge_U0_start_write = 1'b0;

endmodule //ATTN0_do_attn
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_layernorm (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        main_sm_dout,
        main_sm_empty_n,
        main_sm_read,
        lnq_sm_din,
        lnq_sm_full_n,
        lnq_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state25 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] main_sm_dout;
input   main_sm_empty_n;
output   main_sm_read;
output  [15:0] lnq_sm_din;
input   lnq_sm_full_n;
output   lnq_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg main_sm_read;
reg lnq_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [6:0] attn_inst_lnq_rsqrt_table_V_address0;
reg    attn_inst_lnq_rsqrt_table_V_ce0;
wire   [11:0] attn_inst_lnq_rsqrt_table_V_q0;
wire   [6:0] attn_inst_lnq_rsqrt_table_V_address1;
reg    attn_inst_lnq_rsqrt_table_V_ce1;
wire   [11:0] attn_inst_lnq_rsqrt_table_V_q1;
wire   [7:0] attn_inst_lnq_lnw_address0;
reg    attn_inst_lnq_lnw_ce0;
wire   [31:0] attn_inst_lnq_lnw_q0;
wire   [7:0] attn_inst_lnq_lnb_address0;
reg    attn_inst_lnq_lnb_ce0;
wire   [63:0] attn_inst_lnq_lnb_q0;
reg    main_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln108_1_reg_981;
reg    lnq_sm_blk_n;
reg    ap_enable_reg_pp0_iter22;
reg   [1:0] select_ln108_1_reg_981_pp0_iter21_reg;
reg   [15:0] indvar_flatten27_reg_252;
reg   [9:0] indvar_flatten_reg_263;
reg   [1:0] state_reg_274;
reg   [7:0] ct_reg_285;
wire   [15:0] add_ln107_fu_310_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state22_pp0_stage0_iter3;
wire    ap_block_state23_pp0_stage0_iter4;
wire    ap_block_state24_pp0_stage0_iter5;
wire    ap_block_state5_pp0_stage0_iter6;
wire    ap_block_state6_pp0_stage0_iter7;
wire    ap_block_state7_pp0_stage0_iter8;
wire    ap_block_state8_pp0_stage0_iter9;
wire    ap_block_state9_pp0_stage0_iter10;
wire    ap_block_state10_pp0_stage0_iter11;
wire    ap_block_state11_pp0_stage0_iter12;
wire    ap_block_state12_pp0_stage0_iter13;
wire    ap_block_state13_pp0_stage0_iter14;
wire    ap_block_state14_pp0_stage0_iter15;
wire    ap_block_state15_pp0_stage0_iter16;
wire    ap_block_state16_pp0_stage0_iter17;
wire    ap_block_state17_pp0_stage0_iter18;
wire    ap_block_state18_pp0_stage0_iter19;
wire    ap_block_state19_pp0_stage0_iter20;
wire    ap_block_state20_pp0_stage0_iter21;
reg    ap_block_state21_pp0_stage0_iter22;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln107_fu_316_p2;
reg   [0:0] icmp_ln107_reg_969;
reg   [0:0] icmp_ln107_reg_969_pp0_iter1_reg;
wire   [7:0] select_ln108_fu_366_p3;
reg   [7:0] select_ln108_reg_973;
wire   [1:0] select_ln108_1_fu_374_p3;
reg   [1:0] select_ln108_1_reg_981_pp0_iter1_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter2_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter3_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter4_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter5_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter6_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter7_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter8_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter9_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter10_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter11_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter12_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter13_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter14_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter15_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter16_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter17_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter18_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter19_reg;
reg   [1:0] select_ln108_1_reg_981_pp0_iter20_reg;
wire   [9:0] select_ln108_2_fu_388_p3;
wire   [63:0] zext_ln109_fu_396_p1;
reg   [63:0] zext_ln109_reg_991;
reg   [63:0] zext_ln109_reg_991_pp0_iter2_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter3_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter4_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter5_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter6_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter7_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter8_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter9_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter10_reg;
reg   [63:0] zext_ln109_reg_991_pp0_iter11_reg;
wire   [0:0] grp_fu_296_p2;
reg   [0:0] cmp81_reg_1002;
reg   [0:0] cmp81_reg_1002_pp0_iter2_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter3_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter4_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter5_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter6_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter7_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter8_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter9_reg;
reg   [0:0] cmp81_reg_1002_pp0_iter10_reg;
wire   [0:0] grp_fu_301_p2;
reg   [0:0] icmp_ln163_reg_1007;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter2_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter3_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter4_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter5_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter6_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter7_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter8_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter9_reg;
reg   [0:0] icmp_ln163_reg_1007_pp0_iter10_reg;
wire  signed [12:0] trunc_ln145_fu_400_p1;
reg  signed [12:0] trunc_ln145_reg_1011;
wire  signed [12:0] trunc_ln145_s_fu_404_p4;
reg  signed [12:0] trunc_ln145_s_reg_1016;
reg   [0:0] icmp_ln119_reg_1021;
reg   [0:0] icmp_ln137_reg_1027;
reg   [0:0] icmp_ln137_reg_1027_pp0_iter2_reg;
reg   [0:0] icmp_ln137_reg_1027_pp0_iter3_reg;
reg   [0:0] icmp_ln137_reg_1027_pp0_iter4_reg;
wire   [7:0] add_ln109_fu_423_p2;
wire   [25:0] buffer_V_q1;
reg   [25:0] buffer_V_load_reg_1036;
reg    ap_enable_reg_pp0_iter2;
reg   [25:0] buffer_V_load_reg_1036_pp0_iter3_reg;
reg   [25:0] buffer_V_load_reg_1036_pp0_iter4_reg;
reg   [25:0] buffer_V_load_reg_1036_pp0_iter5_reg;
wire   [12:0] diff_4_fu_497_p2;
reg   [12:0] diff_4_reg_1054;
reg   [12:0] diff_4_reg_1054_pp0_iter7_reg;
reg   [12:0] diff_4_reg_1054_pp0_iter8_reg;
reg   [12:0] diff_4_reg_1054_pp0_iter9_reg;
reg  signed [12:0] diff_4_reg_1054_pp0_iter10_reg;
wire   [12:0] diff_5_fu_516_p2;
reg   [12:0] diff_5_reg_1059;
reg   [12:0] diff_5_reg_1059_pp0_iter7_reg;
reg   [12:0] diff_5_reg_1059_pp0_iter8_reg;
reg   [12:0] diff_5_reg_1059_pp0_iter9_reg;
reg  signed [12:0] diff_5_reg_1059_pp0_iter10_reg;
wire  signed [25:0] grp_fu_900_p2;
reg  signed [25:0] ret_32_reg_1064;
wire  signed [25:0] grp_fu_906_p2;
reg  signed [25:0] sum_V_1_reg_1070;
wire   [25:0] diff_pow2_fu_534_p3;
reg   [25:0] diff_pow2_reg_1075;
(* use_dsp48 = "no" *) wire   [25:0] lhs_8_fu_544_p2;
reg   [25:0] lhs_8_reg_1080;
reg   [31:0] attn_inst_lnq_lnw_load_reg_1125;
wire   [37:0] trunc_ln1346_fu_624_p1;
reg   [37:0] trunc_ln1346_reg_1130;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter14_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter15_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter16_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter17_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter18_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter19_reg;
reg   [37:0] trunc_ln1346_reg_1130_pp0_iter20_reg;
wire   [37:0] zext_ln1345_fu_631_p1;
wire   [37:0] grp_fu_634_p2;
reg   [37:0] mul_ln1346_reg_1152;
wire   [37:0] grp_fu_643_p2;
reg   [37:0] mul_ln1346_1_reg_1157;
wire   [37:0] val_fu_649_p2;
reg   [37:0] val_reg_1162;
reg   [6:0] rel_V_reg_1167;
reg   [4:0] tmp_138_reg_1172;
wire   [37:0] val_4_fu_673_p2;
reg   [37:0] val_4_reg_1177;
reg   [6:0] rel_V_1_reg_1182;
reg   [4:0] tmp_139_reg_1187;
wire  signed [25:0] sext_ln1345_fu_813_p1;
wire  signed [25:0] sext_ln1345_9_fu_836_p1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
wire   [7:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
wire   [25:0] buffer_V_d1;
reg   [1:0] ap_phi_mux_state_phi_fu_278_p4;
reg   [7:0] ap_phi_mux_ct_phi_fu_289_p4;
wire   [63:0] zext_ln534_fu_569_p1;
wire   [63:0] zext_ln534_3_fu_589_p1;
reg   [7:0] mean_V_0_1_fu_136;
reg   [7:0] mean_V_1_1_fu_140;
reg   [11:0] rhs_fu_144;
reg   [11:0] rhs_1_fu_148;
reg   [14:0] acc_V_0_1_fu_152;
wire  signed [14:0] acc_V_0_fu_451_p2;
reg   [14:0] acc_V_1_1_fu_156;
wire  signed [14:0] acc_V_1_fu_460_p2;
reg   [25:0] lhs_fu_160;
reg   [25:0] sum_V_1_1_fu_164;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln108_fu_322_p2;
wire   [0:0] icmp_ln109_fu_342_p2;
wire   [0:0] xor_ln107_fu_336_p2;
wire   [1:0] select_ln107_fu_328_p3;
wire   [0:0] and_ln107_fu_348_p2;
wire   [0:0] or_ln108_fu_360_p2;
wire   [1:0] state_6_fu_354_p2;
wire   [9:0] add_ln108_1_fu_382_p2;
wire   [14:0] select_ln119_1_fu_441_p3;
wire  signed [14:0] sext_ln691_fu_448_p1;
wire   [14:0] select_ln119_fu_434_p3;
wire  signed [14:0] sext_ln691_1_fu_457_p1;
wire   [12:0] trunc_ln215_12_fu_490_p1;
wire  signed [12:0] sext_ln1347_1_fu_493_p1;
wire   [12:0] tmp_579_fu_503_p4;
wire  signed [12:0] sext_ln1347_2_fu_512_p1;
(* use_dsp48 = "no" *) wire   [25:0] add_ln213_fu_529_p2;
wire   [25:0] ret_30_fu_554_p2;
wire   [6:0] cursor_V_fu_559_p4;
wire   [25:0] ret_31_fu_574_p2;
wire   [6:0] cursor_V_s_fu_579_p4;
wire  signed [24:0] grp_fu_886_p2;
wire   [31:0] grp_fu_634_p0;
wire  signed [24:0] grp_fu_893_p2;
wire   [31:0] grp_fu_643_p0;
wire   [0:0] icmp_ln878_fu_706_p2;
wire   [0:0] icmp_ln886_fu_711_p2;
wire   [0:0] or_ln7_fu_724_p2;
wire   [2:0] select_ln7_4_fu_716_p3;
wire   [2:0] trunc_ln8_fu_697_p4;
wire   [0:0] icmp_ln878_2_fu_747_p2;
wire   [0:0] icmp_ln886_14_fu_752_p2;
wire   [0:0] or_ln7_4_fu_765_p2;
wire   [2:0] select_ln7_5_fu_757_p3;
wire   [2:0] trunc_ln8_4_fu_738_p4;
wire   [2:0] select_ln7_6_fu_771_p3;
wire   [2:0] select_ln7_fu_730_p3;
wire   [10:0] tmp_580_fu_779_p4;
wire   [12:0] trunc_ln215_fu_800_p1;
wire  signed [12:0] sext_ln1347_fu_803_p1;
wire   [12:0] diff_fu_807_p2;
wire   [12:0] tmp_578_fu_817_p4;
wire  signed [12:0] sext_ln1347_3_fu_826_p1;
wire   [12:0] diff_1_fu_830_p2;
wire  signed [30:0] grp_fu_868_p3;
wire  signed [30:0] grp_fu_877_p3;
wire   [16:0] grp_fu_868_p1;
wire   [23:0] grp_fu_868_p2;
wire   [16:0] grp_fu_877_p1;
wire   [23:0] grp_fu_877_p2;
wire   [11:0] grp_fu_886_p1;
wire   [11:0] grp_fu_893_p1;
wire  signed [12:0] grp_fu_900_p0;
wire  signed [12:0] grp_fu_900_p1;
wire  signed [12:0] grp_fu_906_p0;
wire  signed [12:0] grp_fu_906_p1;
reg    grp_fu_634_ce;
reg    grp_fu_643_ce;
reg    grp_fu_868_ce;
reg    grp_fu_877_ce;
reg    grp_fu_886_ce;
reg    grp_fu_893_ce;
reg    grp_fu_900_ce;
reg    grp_fu_906_ce;
wire    ap_CS_fsm_state25;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [24:0] grp_fu_886_p10;
wire   [24:0] grp_fu_893_p10;
reg    ap_condition_1082;
reg    ap_condition_1086;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter22 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_enable_reg_pp0_iter13 = 1'b0;
//#0 ap_enable_reg_pp0_iter14 = 1'b0;
//#0 ap_enable_reg_pp0_iter15 = 1'b0;
//#0 ap_enable_reg_pp0_iter16 = 1'b0;
//#0 ap_enable_reg_pp0_iter17 = 1'b0;
//#0 ap_enable_reg_pp0_iter18 = 1'b0;
//#0 ap_enable_reg_pp0_iter19 = 1'b0;
//#0 ap_enable_reg_pp0_iter20 = 1'b0;
//#0 ap_enable_reg_pp0_iter21 = 1'b0;
end

ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V #(
    .DataWidth( 12 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
attn_inst_lnq_rsqrt_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_rsqrt_table_V_address0),
    .ce0(attn_inst_lnq_rsqrt_table_V_ce0),
    .q0(attn_inst_lnq_rsqrt_table_V_q0),
    .address1(attn_inst_lnq_rsqrt_table_V_address1),
    .ce1(attn_inst_lnq_rsqrt_table_V_ce1),
    .q1(attn_inst_lnq_rsqrt_table_V_q1)
);

ATTN0_do_layernorm_attn_inst_lnq_lnw #(
    .DataWidth( 32 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
attn_inst_lnq_lnw_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_lnw_address0),
    .ce0(attn_inst_lnq_lnw_ce0),
    .q0(attn_inst_lnq_lnw_q0)
);

ATTN0_do_layernorm_attn_inst_lnq_lnb #(
    .DataWidth( 64 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
attn_inst_lnq_lnb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_lnq_lnb_address0),
    .ce0(attn_inst_lnq_lnb_ce0),
    .q0(attn_inst_lnq_lnb_q0)
);

ATTN0_do_layernorm_buffer_V #(
    .DataWidth( 26 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(buffer_V_d1),
    .q1(buffer_V_q1)
);

ATTN0_mul_32ns_25s_38_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 38 ))
mul_32ns_25s_38_7_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_634_p0),
    .din1(grp_fu_886_p2),
    .ce(grp_fu_634_ce),
    .dout(grp_fu_634_p2)
);

ATTN0_mul_32ns_25s_38_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 38 ))
mul_32ns_25s_38_7_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_643_p0),
    .din1(grp_fu_893_p2),
    .ce(grp_fu_643_ce),
    .dout(grp_fu_643_p2)
);

ATTN0_mac_muladd_15s_17ns_24ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 31 ))
mac_muladd_15s_17ns_24ns_31_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_V_0_fu_451_p2),
    .din1(grp_fu_868_p1),
    .din2(grp_fu_868_p2),
    .ce(grp_fu_868_ce),
    .dout(grp_fu_868_p3)
);

ATTN0_mac_muladd_15s_17ns_24ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 31 ))
mac_muladd_15s_17ns_24ns_31_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(acc_V_1_fu_460_p2),
    .din1(grp_fu_877_p1),
    .din2(grp_fu_877_p2),
    .ce(grp_fu_877_ce),
    .dout(grp_fu_877_p3)
);

ATTN0_mul_mul_13s_12ns_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 25 ))
mul_mul_13s_12ns_25_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(diff_4_reg_1054_pp0_iter10_reg),
    .din1(grp_fu_886_p1),
    .ce(grp_fu_886_ce),
    .dout(grp_fu_886_p2)
);

ATTN0_mul_mul_13s_12ns_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 25 ))
mul_mul_13s_12ns_25_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(diff_5_reg_1059_pp0_iter10_reg),
    .din1(grp_fu_893_p1),
    .ce(grp_fu_893_ce),
    .dout(grp_fu_893_p2)
);

ATTN0_mul_mul_13s_13s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_13s_13s_26_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_900_p0),
    .din1(grp_fu_900_p1),
    .ce(grp_fu_900_ce),
    .dout(grp_fu_900_p2)
);

ATTN0_mul_mul_13s_13s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 26 ))
mul_mul_13s_13s_26_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_906_p0),
    .din1(grp_fu_906_p1),
    .ce(grp_fu_906_ce),
    .dout(grp_fu_906_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter22 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0))) begin
        ct_reg_285 <= add_ln109_fu_423_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ct_reg_285 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_316_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten27_reg_252 <= add_ln107_fu_310_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten27_reg_252 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_316_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_263 <= select_ln108_2_fu_388_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_263 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0))) begin
        state_reg_274 <= select_ln108_1_reg_981;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_reg_274 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if ((1'b1 == ap_condition_1086)) begin
            sum_V_1_1_fu_164 <= grp_fu_906_p2;
        end else if ((1'b1 == ap_condition_1082)) begin
            sum_V_1_1_fu_164 <= lhs_8_fu_544_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (select_ln108_1_reg_981_pp0_iter1_reg == 2'd0))) begin
        acc_V_0_1_fu_152 <= acc_V_0_fu_451_p2;
        acc_V_1_1_fu_156 <= acc_V_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter12_reg == 2'd2))) begin
        attn_inst_lnq_lnw_load_reg_1125 <= attn_inst_lnq_lnw_q0;
        trunc_ln1346_reg_1130 <= trunc_ln1346_fu_624_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln107_reg_969_pp0_iter1_reg == 1'd0))) begin
        buffer_V_load_reg_1036 <= buffer_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        buffer_V_load_reg_1036_pp0_iter3_reg <= buffer_V_load_reg_1036;
        buffer_V_load_reg_1036_pp0_iter4_reg <= buffer_V_load_reg_1036_pp0_iter3_reg;
        buffer_V_load_reg_1036_pp0_iter5_reg <= buffer_V_load_reg_1036_pp0_iter4_reg;
        cmp81_reg_1002_pp0_iter10_reg <= cmp81_reg_1002_pp0_iter9_reg;
        cmp81_reg_1002_pp0_iter2_reg <= cmp81_reg_1002;
        cmp81_reg_1002_pp0_iter3_reg <= cmp81_reg_1002_pp0_iter2_reg;
        cmp81_reg_1002_pp0_iter4_reg <= cmp81_reg_1002_pp0_iter3_reg;
        cmp81_reg_1002_pp0_iter5_reg <= cmp81_reg_1002_pp0_iter4_reg;
        cmp81_reg_1002_pp0_iter6_reg <= cmp81_reg_1002_pp0_iter5_reg;
        cmp81_reg_1002_pp0_iter7_reg <= cmp81_reg_1002_pp0_iter6_reg;
        cmp81_reg_1002_pp0_iter8_reg <= cmp81_reg_1002_pp0_iter7_reg;
        cmp81_reg_1002_pp0_iter9_reg <= cmp81_reg_1002_pp0_iter8_reg;
        diff_4_reg_1054_pp0_iter10_reg <= diff_4_reg_1054_pp0_iter9_reg;
        diff_4_reg_1054_pp0_iter7_reg <= diff_4_reg_1054;
        diff_4_reg_1054_pp0_iter8_reg <= diff_4_reg_1054_pp0_iter7_reg;
        diff_4_reg_1054_pp0_iter9_reg <= diff_4_reg_1054_pp0_iter8_reg;
        diff_5_reg_1059_pp0_iter10_reg <= diff_5_reg_1059_pp0_iter9_reg;
        diff_5_reg_1059_pp0_iter7_reg <= diff_5_reg_1059;
        diff_5_reg_1059_pp0_iter8_reg <= diff_5_reg_1059_pp0_iter7_reg;
        diff_5_reg_1059_pp0_iter9_reg <= diff_5_reg_1059_pp0_iter8_reg;
        icmp_ln137_reg_1027_pp0_iter2_reg <= icmp_ln137_reg_1027;
        icmp_ln137_reg_1027_pp0_iter3_reg <= icmp_ln137_reg_1027_pp0_iter2_reg;
        icmp_ln137_reg_1027_pp0_iter4_reg <= icmp_ln137_reg_1027_pp0_iter3_reg;
        icmp_ln163_reg_1007_pp0_iter10_reg <= icmp_ln163_reg_1007_pp0_iter9_reg;
        icmp_ln163_reg_1007_pp0_iter2_reg <= icmp_ln163_reg_1007;
        icmp_ln163_reg_1007_pp0_iter3_reg <= icmp_ln163_reg_1007_pp0_iter2_reg;
        icmp_ln163_reg_1007_pp0_iter4_reg <= icmp_ln163_reg_1007_pp0_iter3_reg;
        icmp_ln163_reg_1007_pp0_iter5_reg <= icmp_ln163_reg_1007_pp0_iter4_reg;
        icmp_ln163_reg_1007_pp0_iter6_reg <= icmp_ln163_reg_1007_pp0_iter5_reg;
        icmp_ln163_reg_1007_pp0_iter7_reg <= icmp_ln163_reg_1007_pp0_iter6_reg;
        icmp_ln163_reg_1007_pp0_iter8_reg <= icmp_ln163_reg_1007_pp0_iter7_reg;
        icmp_ln163_reg_1007_pp0_iter9_reg <= icmp_ln163_reg_1007_pp0_iter8_reg;
        select_ln108_1_reg_981_pp0_iter10_reg <= select_ln108_1_reg_981_pp0_iter9_reg;
        select_ln108_1_reg_981_pp0_iter11_reg <= select_ln108_1_reg_981_pp0_iter10_reg;
        select_ln108_1_reg_981_pp0_iter12_reg <= select_ln108_1_reg_981_pp0_iter11_reg;
        select_ln108_1_reg_981_pp0_iter13_reg <= select_ln108_1_reg_981_pp0_iter12_reg;
        select_ln108_1_reg_981_pp0_iter14_reg <= select_ln108_1_reg_981_pp0_iter13_reg;
        select_ln108_1_reg_981_pp0_iter15_reg <= select_ln108_1_reg_981_pp0_iter14_reg;
        select_ln108_1_reg_981_pp0_iter16_reg <= select_ln108_1_reg_981_pp0_iter15_reg;
        select_ln108_1_reg_981_pp0_iter17_reg <= select_ln108_1_reg_981_pp0_iter16_reg;
        select_ln108_1_reg_981_pp0_iter18_reg <= select_ln108_1_reg_981_pp0_iter17_reg;
        select_ln108_1_reg_981_pp0_iter19_reg <= select_ln108_1_reg_981_pp0_iter18_reg;
        select_ln108_1_reg_981_pp0_iter20_reg <= select_ln108_1_reg_981_pp0_iter19_reg;
        select_ln108_1_reg_981_pp0_iter21_reg <= select_ln108_1_reg_981_pp0_iter20_reg;
        select_ln108_1_reg_981_pp0_iter2_reg <= select_ln108_1_reg_981_pp0_iter1_reg;
        select_ln108_1_reg_981_pp0_iter3_reg <= select_ln108_1_reg_981_pp0_iter2_reg;
        select_ln108_1_reg_981_pp0_iter4_reg <= select_ln108_1_reg_981_pp0_iter3_reg;
        select_ln108_1_reg_981_pp0_iter5_reg <= select_ln108_1_reg_981_pp0_iter4_reg;
        select_ln108_1_reg_981_pp0_iter6_reg <= select_ln108_1_reg_981_pp0_iter5_reg;
        select_ln108_1_reg_981_pp0_iter7_reg <= select_ln108_1_reg_981_pp0_iter6_reg;
        select_ln108_1_reg_981_pp0_iter8_reg <= select_ln108_1_reg_981_pp0_iter7_reg;
        select_ln108_1_reg_981_pp0_iter9_reg <= select_ln108_1_reg_981_pp0_iter8_reg;
        trunc_ln1346_reg_1130_pp0_iter14_reg <= trunc_ln1346_reg_1130;
        trunc_ln1346_reg_1130_pp0_iter15_reg <= trunc_ln1346_reg_1130_pp0_iter14_reg;
        trunc_ln1346_reg_1130_pp0_iter16_reg <= trunc_ln1346_reg_1130_pp0_iter15_reg;
        trunc_ln1346_reg_1130_pp0_iter17_reg <= trunc_ln1346_reg_1130_pp0_iter16_reg;
        trunc_ln1346_reg_1130_pp0_iter18_reg <= trunc_ln1346_reg_1130_pp0_iter17_reg;
        trunc_ln1346_reg_1130_pp0_iter19_reg <= trunc_ln1346_reg_1130_pp0_iter18_reg;
        trunc_ln1346_reg_1130_pp0_iter20_reg <= trunc_ln1346_reg_1130_pp0_iter19_reg;
        zext_ln109_reg_991_pp0_iter10_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter9_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter11_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter10_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter2_reg[7 : 0] <= zext_ln109_reg_991[7 : 0];
        zext_ln109_reg_991_pp0_iter3_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter2_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter4_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter3_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter5_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter4_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter6_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter5_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter7_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter6_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter8_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter7_reg[7 : 0];
        zext_ln109_reg_991_pp0_iter9_reg[7 : 0] <= zext_ln109_reg_991_pp0_iter8_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_981 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp81_reg_1002 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter5_reg == 2'd2))) begin
        diff_4_reg_1054 <= diff_4_fu_497_p2;
        diff_5_reg_1059 <= diff_5_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1))) begin
        diff_pow2_reg_1075 <= diff_pow2_fu_534_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln107_reg_969 <= icmp_ln107_fu_316_p2;
        icmp_ln107_reg_969_pp0_iter1_reg <= icmp_ln107_reg_969;
        select_ln108_1_reg_981_pp0_iter1_reg <= select_ln108_1_reg_981;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln119_reg_1021 <= grp_fu_296_p2;
        icmp_ln137_reg_1027 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_981 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln163_reg_1007 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp81_reg_1002_pp0_iter8_reg == 1'd0) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1))) begin
        lhs_8_reg_1080 <= lhs_8_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (cmp81_reg_1002_pp0_iter8_reg == 1'd1) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln163_reg_1007_pp0_iter8_reg == 1'd1) & (cmp81_reg_1002_pp0_iter8_reg == 1'd0) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln163_reg_1007_pp0_iter8_reg == 1'd0) & (cmp81_reg_1002_pp0_iter8_reg == 1'd0) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1)))) begin
        lhs_fu_160 <= diff_pow2_fu_534_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln137_reg_1027_pp0_iter4_reg == 1'd1) & (select_ln108_1_reg_981_pp0_iter4_reg == 2'd0))) begin
        mean_V_0_1_fu_136 <= {{grp_fu_868_p3[30:23]}};
        mean_V_1_1_fu_140 <= {{grp_fu_877_p3[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter19_reg == 2'd2))) begin
        mul_ln1346_1_reg_1157 <= grp_fu_643_p2;
        mul_ln1346_reg_1152 <= grp_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter20_reg == 2'd2))) begin
        rel_V_1_reg_1182 <= {{val_4_fu_673_p2[37:31]}};
        rel_V_reg_1167 <= {{val_fu_649_p2[37:31]}};
        tmp_138_reg_1172 <= {{val_fu_649_p2[37:33]}};
        tmp_139_reg_1187 <= {{val_4_fu_673_p2[37:33]}};
        val_4_reg_1177 <= val_4_fu_673_p2;
        val_reg_1162 <= val_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln108_1_reg_981_pp0_iter7_reg == 2'd1))) begin
        ret_32_reg_1064 <= grp_fu_900_p2;
        sum_V_1_reg_1070 <= grp_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln163_reg_1007_pp0_iter10_reg == 1'd1) & (cmp81_reg_1002_pp0_iter10_reg == 1'd0) & (select_ln108_1_reg_981_pp0_iter10_reg == 2'd1))) begin
        rhs_1_fu_148 <= attn_inst_lnq_rsqrt_table_V_q0;
        rhs_fu_144 <= attn_inst_lnq_rsqrt_table_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_316_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln108_1_reg_981 <= select_ln108_1_fu_374_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_fu_316_p2 == 1'd0))) begin
        select_ln108_reg_973 <= select_ln108_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_reg_1011 <= trunc_ln145_fu_400_p1;
        trunc_ln145_s_reg_1016 <= {{main_sm_dout[28:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0))) begin
        zext_ln109_reg_991[7 : 0] <= zext_ln109_fu_396_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln107_fu_316_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0))) begin
        ap_phi_mux_ct_phi_fu_289_p4 = add_ln109_fu_423_p2;
    end else begin
        ap_phi_mux_ct_phi_fu_289_p4 = ct_reg_285;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0))) begin
        ap_phi_mux_state_phi_fu_278_p4 = select_ln108_1_reg_981;
    end else begin
        ap_phi_mux_state_phi_fu_278_p4 = state_reg_274;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        attn_inst_lnq_lnb_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_lnb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        attn_inst_lnq_lnw_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_lnw_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        attn_inst_lnq_rsqrt_table_V_ce0 = 1'b1;
    end else begin
        attn_inst_lnq_rsqrt_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        attn_inst_lnq_rsqrt_table_V_ce1 = 1'b1;
    end else begin
        attn_inst_lnq_rsqrt_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln107_reg_969 == 1'd0)))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_634_ce = 1'b1;
    end else begin
        grp_fu_634_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_643_ce = 1'b1;
    end else begin
        grp_fu_643_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_868_ce = 1'b1;
    end else begin
        grp_fu_868_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_877_ce = 1'b1;
    end else begin
        grp_fu_877_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_886_ce = 1'b1;
    end else begin
        grp_fu_886_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_893_ce = 1'b1;
    end else begin
        grp_fu_893_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_900_ce = 1'b1;
    end else begin
        grp_fu_900_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_906_ce = 1'b1;
    end else begin
        grp_fu_906_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        lnq_sm_blk_n = lnq_sm_full_n;
    end else begin
        lnq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lnq_sm_write = 1'b1;
    end else begin
        lnq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_blk_n = main_sm_empty_n;
    end else begin
        main_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln108_1_reg_981 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_read = 1'b1;
    end else begin
        main_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln107_fu_316_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter21 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter21 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln107_fu_316_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_0_fu_451_p2 = ($signed(select_ln119_1_fu_441_p3) + $signed(sext_ln691_fu_448_p1));

assign acc_V_1_fu_460_p2 = ($signed(select_ln119_fu_434_p3) + $signed(sext_ln691_1_fu_457_p1));

assign add_ln107_fu_310_p2 = (indvar_flatten27_reg_252 + 16'd1);

assign add_ln108_1_fu_382_p2 = (indvar_flatten_reg_263 + 10'd1);

assign add_ln109_fu_423_p2 = (select_ln108_reg_973 + 8'd1);

assign add_ln213_fu_529_p2 = ($signed(lhs_fu_160) + $signed(ret_32_reg_1064));

assign and_ln107_fu_348_p2 = (xor_ln107_fu_336_p2 & icmp_ln109_fu_342_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (ap_enable_reg_pp0_iter22 == 1'b1) & (lnq_sm_full_n == 1'b0)) | ((select_ln108_1_reg_981 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (main_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (ap_enable_reg_pp0_iter22 == 1'b1) & (lnq_sm_full_n == 1'b0)) | ((select_ln108_1_reg_981 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (main_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (ap_enable_reg_pp0_iter22 == 1'b1) & (lnq_sm_full_n == 1'b0)) | ((select_ln108_1_reg_981 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (main_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage0_iter22 = ((select_ln108_1_reg_981_pp0_iter21_reg == 2'd2) & (lnq_sm_full_n == 1'b0));
end

assign ap_block_state22_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((select_ln108_1_reg_981 == 2'd0) & (main_sm_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1082 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (cmp81_reg_1002_pp0_iter8_reg == 1'd0) & (select_ln108_1_reg_981_pp0_iter8_reg == 2'd1));
end

always @ (*) begin
    ap_condition_1086 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (cmp81_reg_1002_pp0_iter7_reg == 1'd1) & (select_ln108_1_reg_981_pp0_iter7_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_lnq_lnb_address0 = zext_ln109_reg_991_pp0_iter11_reg;

assign attn_inst_lnq_lnw_address0 = zext_ln109_reg_991_pp0_iter11_reg;

assign attn_inst_lnq_rsqrt_table_V_address0 = zext_ln534_3_fu_589_p1;

assign attn_inst_lnq_rsqrt_table_V_address1 = zext_ln534_fu_569_p1;

assign buffer_V_address1 = zext_ln109_fu_396_p1;

assign buffer_V_d1 = {{trunc_ln145_s_fu_404_p4}, {trunc_ln145_fu_400_p1}};

assign cursor_V_fu_559_p4 = {{ret_30_fu_554_p2[25:19]}};

assign cursor_V_s_fu_579_p4 = {{ret_31_fu_574_p2[25:19]}};

assign diff_1_fu_830_p2 = ($signed(tmp_578_fu_817_p4) - $signed(sext_ln1347_3_fu_826_p1));

assign diff_4_fu_497_p2 = ($signed(trunc_ln215_12_fu_490_p1) - $signed(sext_ln1347_1_fu_493_p1));

assign diff_5_fu_516_p2 = ($signed(tmp_579_fu_503_p4) - $signed(sext_ln1347_2_fu_512_p1));

assign diff_fu_807_p2 = ($signed(trunc_ln215_fu_800_p1) - $signed(sext_ln1347_fu_803_p1));

assign diff_pow2_fu_534_p3 = ((cmp81_reg_1002_pp0_iter8_reg[0:0] == 1'b1) ? ret_32_reg_1064 : add_ln213_fu_529_p2);

assign grp_fu_296_p2 = ((select_ln108_reg_973 == 8'd0) ? 1'b1 : 1'b0);

assign grp_fu_301_p2 = ((select_ln108_reg_973 == 8'd191) ? 1'b1 : 1'b0);

assign grp_fu_634_p0 = zext_ln1345_fu_631_p1;

assign grp_fu_643_p0 = zext_ln1345_fu_631_p1;

assign grp_fu_868_p1 = 31'd43691;

assign grp_fu_868_p2 = 31'd4194304;

assign grp_fu_877_p1 = 31'd43691;

assign grp_fu_877_p2 = 31'd4194304;

assign grp_fu_886_p1 = grp_fu_886_p10;

assign grp_fu_886_p10 = rhs_fu_144;

assign grp_fu_893_p1 = grp_fu_893_p10;

assign grp_fu_893_p10 = rhs_1_fu_148;

assign grp_fu_900_p0 = sext_ln1345_fu_813_p1;

assign grp_fu_900_p1 = sext_ln1345_fu_813_p1;

assign grp_fu_906_p0 = sext_ln1345_9_fu_836_p1;

assign grp_fu_906_p1 = sext_ln1345_9_fu_836_p1;

assign icmp_ln107_fu_316_p2 = ((indvar_flatten27_reg_252 == 16'd56448) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_322_p2 = ((indvar_flatten_reg_263 == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_342_p2 = ((ap_phi_mux_ct_phi_fu_289_p4 == 8'd192) ? 1'b1 : 1'b0);

assign icmp_ln878_2_fu_747_p2 = (($signed(rel_V_1_reg_1182) < $signed(7'd124)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_706_p2 = (($signed(rel_V_reg_1167) < $signed(7'd124)) ? 1'b1 : 1'b0);

assign icmp_ln886_14_fu_752_p2 = (($signed(tmp_139_reg_1187) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_711_p2 = (($signed(tmp_138_reg_1172) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign lhs_8_fu_544_p2 = ($signed(sum_V_1_1_fu_164) + $signed(sum_V_1_reg_1070));

assign lnq_sm_din = tmp_580_fu_779_p4;

assign or_ln108_fu_360_p2 = (icmp_ln108_fu_322_p2 | and_ln107_fu_348_p2);

assign or_ln7_4_fu_765_p2 = (icmp_ln886_14_fu_752_p2 | icmp_ln878_2_fu_747_p2);

assign or_ln7_fu_724_p2 = (icmp_ln886_fu_711_p2 | icmp_ln878_fu_706_p2);

assign ret_30_fu_554_p2 = ($signed(diff_pow2_reg_1075) + $signed(26'd65266031));

assign ret_31_fu_574_p2 = ($signed(lhs_8_reg_1080) + $signed(26'd65266031));

assign select_ln107_fu_328_p3 = ((icmp_ln108_fu_322_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_state_phi_fu_278_p4);

assign select_ln108_1_fu_374_p3 = ((and_ln107_fu_348_p2[0:0] == 1'b1) ? state_6_fu_354_p2 : select_ln107_fu_328_p3);

assign select_ln108_2_fu_388_p3 = ((icmp_ln108_fu_322_p2[0:0] == 1'b1) ? 10'd1 : add_ln108_1_fu_382_p2);

assign select_ln108_fu_366_p3 = ((or_ln108_fu_360_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_ct_phi_fu_289_p4);

assign select_ln119_1_fu_441_p3 = ((icmp_ln119_reg_1021[0:0] == 1'b1) ? 15'd0 : acc_V_0_1_fu_152);

assign select_ln119_fu_434_p3 = ((icmp_ln119_reg_1021[0:0] == 1'b1) ? 15'd0 : acc_V_1_1_fu_156);

assign select_ln7_4_fu_716_p3 = ((icmp_ln878_fu_706_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln7_5_fu_757_p3 = ((icmp_ln878_2_fu_747_p2[0:0] == 1'b1) ? 3'd4 : 3'd3);

assign select_ln7_6_fu_771_p3 = ((or_ln7_4_fu_765_p2[0:0] == 1'b1) ? select_ln7_5_fu_757_p3 : trunc_ln8_4_fu_738_p4);

assign select_ln7_fu_730_p3 = ((or_ln7_fu_724_p2[0:0] == 1'b1) ? select_ln7_4_fu_716_p3 : trunc_ln8_fu_697_p4);

assign sext_ln1345_9_fu_836_p1 = $signed(diff_1_fu_830_p2);

assign sext_ln1345_fu_813_p1 = $signed(diff_fu_807_p2);

assign sext_ln1347_1_fu_493_p1 = $signed(mean_V_0_1_fu_136);

assign sext_ln1347_2_fu_512_p1 = $signed(mean_V_1_1_fu_140);

assign sext_ln1347_3_fu_826_p1 = $signed(mean_V_1_1_fu_140);

assign sext_ln1347_fu_803_p1 = $signed(mean_V_0_1_fu_136);

assign sext_ln691_1_fu_457_p1 = trunc_ln145_s_reg_1016;

assign sext_ln691_fu_448_p1 = trunc_ln145_reg_1011;

assign start_out = real_start;

assign state_6_fu_354_p2 = (select_ln107_fu_328_p3 + 2'd1);

assign tmp_578_fu_817_p4 = {{buffer_V_load_reg_1036_pp0_iter4_reg[25:13]}};

assign tmp_579_fu_503_p4 = {{buffer_V_load_reg_1036_pp0_iter5_reg[25:13]}};

assign tmp_580_fu_779_p4 = {{{select_ln7_6_fu_771_p3}, {5'd0}}, {select_ln7_fu_730_p3}};

assign trunc_ln1346_fu_624_p1 = attn_inst_lnq_lnb_q0[37:0];

assign trunc_ln145_fu_400_p1 = main_sm_dout[12:0];

assign trunc_ln145_s_fu_404_p4 = {{main_sm_dout[28:16]}};

assign trunc_ln215_12_fu_490_p1 = buffer_V_load_reg_1036_pp0_iter5_reg[12:0];

assign trunc_ln215_fu_800_p1 = buffer_V_load_reg_1036_pp0_iter4_reg[12:0];

assign trunc_ln8_4_fu_738_p4 = {{val_4_reg_1177[33:31]}};

assign trunc_ln8_fu_697_p4 = {{val_reg_1162[33:31]}};

assign val_4_fu_673_p2 = (mul_ln1346_1_reg_1157 + trunc_ln1346_reg_1130_pp0_iter20_reg);

assign val_fu_649_p2 = (trunc_ln1346_reg_1130_pp0_iter20_reg + mul_ln1346_reg_1152);

assign xor_ln107_fu_336_p2 = (icmp_ln108_fu_322_p2 ^ 1'd1);

assign zext_ln109_fu_396_p1 = select_ln108_reg_973;

assign zext_ln1345_fu_631_p1 = attn_inst_lnq_lnw_load_reg_1125;

assign zext_ln534_3_fu_589_p1 = cursor_V_s_fu_579_p4;

assign zext_ln534_fu_569_p1 = cursor_V_fu_559_p4;

always @ (posedge ap_clk) begin
    zext_ln109_reg_991[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter8_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter9_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter10_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln109_reg_991_pp0_iter11_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //ATTN0_do_layernorm
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_layernorm_attn_inst_lnq_lnb_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 64;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_layernorm_attn_inst_lnq_lnb_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_layernorm_attn_inst_lnq_lnb(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd64;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_do_layernorm_attn_inst_lnq_lnb_rom ATTN0_do_layernorm_attn_inst_lnq_lnb_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_layernorm_attn_inst_lnq_lnw_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 32;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_layernorm_attn_inst_lnq_lnw_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_layernorm_attn_inst_lnq_lnw(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_do_layernorm_attn_inst_lnq_lnw_rom ATTN0_do_layernorm_attn_inst_lnq_lnw_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 12;
parameter AWIDTH = 7;
parameter MEM_SIZE = 128;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd12;
parameter AddressRange = 32'd128;
parameter AddressWidth = 32'd7;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V_rom ATTN0_do_layernorm_attn_inst_lnq_rsqrt_table_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_layernorm_buffer_V_ram (addr1, ce1, d1, we1, q1,  clk);

parameter DWIDTH = 26;
parameter AWIDTH = 8;
parameter MEM_SIZE = 192;

input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[addr1] <= d1; 
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_layernorm_buffer_V(
    reset,
    clk,
    address1,
    ce1,
    we1,
    d1,
    q1);

parameter DataWidth = 32'd26;
parameter AddressRange = 32'd192;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;
output[DataWidth - 1:0] q1;



ATTN0_do_layernorm_buffer_V_ram ATTN0_do_layernorm_buffer_V_ram_U(
    .clk( clk ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul (
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_U0_ap_start;
wire    do_adapt_U0_ap_done;
wire    do_adapt_U0_ap_continue;
wire    do_adapt_U0_ap_idle;
wire    do_adapt_U0_ap_ready;
wire    do_adapt_U0_start_out;
wire    do_adapt_U0_start_write;
wire    do_adapt_U0_rq_sm_head1_read;
wire   [111:0] do_adapt_U0_adpt_sm_din;
wire    do_adapt_U0_adpt_sm_write;
wire    matmul_step1_cache_window_U0_ap_start;
wire    matmul_step1_cache_window_U0_ap_done;
wire    matmul_step1_cache_window_U0_ap_continue;
wire    matmul_step1_cache_window_U0_ap_idle;
wire    matmul_step1_cache_window_U0_ap_ready;
wire    matmul_step1_cache_window_U0_adpt_sm_read;
wire   [111:0] matmul_step1_cache_window_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed_U0_ap_start;
wire    matmul_step1_cache_weight_transposed_U0_ap_done;
wire    matmul_step1_cache_weight_transposed_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed_U0_start_out;
wire    matmul_step1_cache_weight_transposed_U0_start_write;
wire    matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head1_read;
wire   [223:0] matmul_step1_cache_weight_transposed_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed_U0_weight_sm_write;
wire    matmul_step2_mac_U0_ap_start;
wire    matmul_step2_mac_U0_ap_done;
wire    matmul_step2_mac_U0_ap_continue;
wire    matmul_step2_mac_U0_ap_idle;
wire    matmul_step2_mac_U0_ap_ready;
wire    matmul_step2_mac_U0_start_out;
wire    matmul_step2_mac_U0_start_write;
wire    matmul_step2_mac_U0_cache_window_sm_read;
wire    matmul_step2_mac_U0_weight_sm_read;
wire   [127:0] matmul_step2_mac_U0_mac_sm_din;
wire    matmul_step2_mac_U0_mac_sm_write;
wire    do_adapt_7_U0_ap_start;
wire    do_adapt_7_U0_ap_done;
wire    do_adapt_7_U0_ap_continue;
wire    do_adapt_7_U0_ap_idle;
wire    do_adapt_7_U0_ap_ready;
wire    do_adapt_7_U0_mac_sm_read;
wire   [31:0] do_adapt_7_U0_a_sm_head1_din;
wire    do_adapt_7_U0_a_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [111:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [111:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [127:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_U0_ap_ready;
wire    ap_sync_do_adapt_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_U0_din;
wire    start_for_matmul_step1_cache_window_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_U0_dout;
wire    start_for_matmul_step1_cache_window_U0_empty_n;
wire    matmul_step1_cache_window_U0_start_full_n;
wire    matmul_step1_cache_window_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac_U0_din;
wire    start_for_matmul_step2_mac_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_U0_dout;
wire    start_for_matmul_step2_mac_U0_empty_n;
wire   [0:0] start_for_do_adapt_7_U0_din;
wire    start_for_do_adapt_7_U0_full_n;
wire   [0:0] start_for_do_adapt_7_U0_dout;
wire    start_for_do_adapt_7_U0_empty_n;
wire    do_adapt_7_U0_start_full_n;
wire    do_adapt_7_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_do_adapt_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt do_adapt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .ap_done(do_adapt_U0_ap_done),
    .ap_continue(do_adapt_U0_ap_continue),
    .ap_idle(do_adapt_U0_ap_idle),
    .ap_ready(do_adapt_U0_ap_ready),
    .start_out(do_adapt_U0_start_out),
    .start_write(do_adapt_U0_start_write),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_adapt_U0_rq_sm_head1_read),
    .adpt_sm_din(do_adapt_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window matmul_step1_cache_window_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_U0_ap_start),
    .ap_done(matmul_step1_cache_window_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight_transposed matmul_step1_cache_weight_transposed_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed_U0_start_write),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac matmul_step2_mac_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_U0_ap_start),
    .start_full_n(start_for_do_adapt_7_U0_full_n),
    .ap_done(matmul_step2_mac_U0_ap_done),
    .ap_continue(matmul_step2_mac_U0_ap_continue),
    .ap_idle(matmul_step2_mac_U0_ap_idle),
    .ap_ready(matmul_step2_mac_U0_ap_ready),
    .start_out(matmul_step2_mac_U0_start_out),
    .start_write(matmul_step2_mac_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_U0_mac_sm_write)
);

ATTN0_do_adapt_7 do_adapt_7_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_7_U0_ap_start),
    .ap_done(do_adapt_7_U0_ap_done),
    .ap_continue(do_adapt_7_U0_ap_continue),
    .ap_idle(do_adapt_7_U0_ap_idle),
    .ap_ready(do_adapt_7_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_7_U0_mac_sm_read),
    .a_sm_head1_din(do_adapt_7_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_adapt_7_U0_a_sm_head1_write)
);

ATTN0_fifo_w112_d32_A_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_U0_adpt_sm_read)
);

ATTN0_fifo_w112_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S_x3 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_U0_weight_sm_read)
);

ATTN0_fifo_w128_d2_S_x0 mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_7_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window_U0 start_for_matmul_step1_cache_window_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_U0_full_n),
    .if_write(do_adapt_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_U0_empty_n),
    .if_read(matmul_step1_cache_window_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac_U0 start_for_matmul_step2_mac_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_U0_din),
    .if_full_n(start_for_matmul_step2_mac_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_U0_empty_n),
    .if_read(matmul_step2_mac_U0_ap_ready)
);

ATTN0_start_for_do_adapt_7_U0 start_for_do_adapt_7_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_7_U0_din),
    .if_full_n(start_for_do_adapt_7_U0_full_n),
    .if_write(matmul_step2_mac_U0_start_write),
    .if_dout(start_for_do_adapt_7_U0_dout),
    .if_empty_n(start_for_do_adapt_7_U0_empty_n),
    .if_read(do_adapt_7_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_do_adapt_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_U0_ap_ready <= ap_sync_do_adapt_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready;
        end
    end
end

assign a_sm_head1_din = do_adapt_7_U0_a_sm_head1_din;

assign a_sm_head1_write = do_adapt_7_U0_a_sm_head1_write;

assign ap_done = do_adapt_7_U0_ap_done;

assign ap_idle = (matmul_step2_mac_U0_ap_idle & matmul_step1_cache_window_U0_ap_idle & matmul_step1_cache_weight_transposed_U0_ap_idle & do_adapt_U0_ap_idle & do_adapt_7_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt_U0_ap_ready = (do_adapt_U0_ap_ready | ap_sync_reg_do_adapt_U0_ap_ready);

assign ap_sync_done = do_adapt_7_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready = (matmul_step1_cache_weight_transposed_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed_U0_ap_ready & ap_sync_do_adapt_U0_ap_ready);

assign do_adapt_7_U0_ap_continue = ap_continue;

assign do_adapt_7_U0_ap_start = start_for_do_adapt_7_U0_empty_n;

assign do_adapt_7_U0_start_full_n = 1'b1;

assign do_adapt_7_U0_start_write = 1'b0;

assign do_adapt_U0_ap_continue = 1'b1;

assign do_adapt_U0_ap_start = ((ap_sync_reg_do_adapt_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_weight_transposed_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed_U0_ap_start = ((ap_sync_reg_matmul_step1_cache_weight_transposed_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_window_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_U0_ap_start = start_for_matmul_step1_cache_window_U0_empty_n;

assign matmul_step1_cache_window_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window_U0_start_write = 1'b0;

assign matmul_step2_mac_U0_ap_continue = 1'b1;

assign matmul_step2_mac_U0_ap_start = start_for_matmul_step2_mac_U0_empty_n;

assign rq_sm_head1_read = do_adapt_U0_rq_sm_head1_read;

assign start_for_do_adapt_7_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_U0_din = 1'b1;

assign start_for_matmul_step2_mac_U0_din = 1'b1;

assign vq_sm_transpose_head1_read = matmul_step1_cache_weight_transposed_U0_vq_sm_transpose_head1_read;

endmodule //ATTN0_do_matmul
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul117 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt135_U0_ap_start;
wire    do_adapt135_U0_ap_done;
wire    do_adapt135_U0_ap_continue;
wire    do_adapt135_U0_ap_idle;
wire    do_adapt135_U0_ap_ready;
wire    do_adapt135_U0_start_out;
wire    do_adapt135_U0_start_write;
wire    do_adapt135_U0_lnq_sm_cp1_read;
wire   [95:0] do_adapt135_U0_adpt_sm_din;
wire    do_adapt135_U0_adpt_sm_write;
wire    matmul_step1_cache_window136_U0_ap_start;
wire    matmul_step1_cache_window136_U0_ap_done;
wire    matmul_step1_cache_window136_U0_ap_continue;
wire    matmul_step1_cache_window136_U0_ap_idle;
wire    matmul_step1_cache_window136_U0_ap_ready;
wire    matmul_step1_cache_window136_U0_start_out;
wire    matmul_step1_cache_window136_U0_start_write;
wire    matmul_step1_cache_window136_U0_adpt_sm_read;
wire   [95:0] matmul_step1_cache_window136_U0_cache_window_sm_din;
wire    matmul_step1_cache_window136_U0_cache_window_sm_write;
wire    matmul_step2_mac137_U0_ap_start;
wire    matmul_step2_mac137_U0_ap_done;
wire    matmul_step2_mac137_U0_ap_continue;
wire    matmul_step2_mac137_U0_ap_idle;
wire    matmul_step2_mac137_U0_ap_ready;
wire    matmul_step2_mac137_U0_start_out;
wire    matmul_step2_mac137_U0_start_write;
wire    matmul_step2_mac137_U0_cache_window_sm_read;
wire   [383:0] matmul_step2_mac137_U0_mac_sm_din;
wire    matmul_step2_mac137_U0_mac_sm_write;
wire    do_adapt138_U0_ap_start;
wire    do_adapt138_U0_ap_done;
wire    do_adapt138_U0_ap_continue;
wire    do_adapt138_U0_ap_idle;
wire    do_adapt138_U0_ap_ready;
wire    do_adapt138_U0_mac_sm_read;
wire   [31:0] do_adapt138_U0_q_sm_din;
wire    do_adapt138_U0_q_sm_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [95:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [95:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [383:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window136_U0_din;
wire    start_for_matmul_step1_cache_window136_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window136_U0_dout;
wire    start_for_matmul_step1_cache_window136_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac137_U0_din;
wire    start_for_matmul_step2_mac137_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac137_U0_dout;
wire    start_for_matmul_step2_mac137_U0_empty_n;
wire   [0:0] start_for_do_adapt138_U0_din;
wire    start_for_do_adapt138_U0_full_n;
wire   [0:0] start_for_do_adapt138_U0_dout;
wire    start_for_do_adapt138_U0_empty_n;
wire    do_adapt138_U0_start_full_n;
wire    do_adapt138_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_do_adapt135 do_adapt135_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt135_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window136_U0_full_n),
    .ap_done(do_adapt135_U0_ap_done),
    .ap_continue(do_adapt135_U0_ap_continue),
    .ap_idle(do_adapt135_U0_ap_idle),
    .ap_ready(do_adapt135_U0_ap_ready),
    .start_out(do_adapt135_U0_start_out),
    .start_write(do_adapt135_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_adapt135_U0_lnq_sm_cp1_read),
    .adpt_sm_din(do_adapt135_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt135_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window136 matmul_step1_cache_window136_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window136_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac137_U0_full_n),
    .ap_done(matmul_step1_cache_window136_U0_ap_done),
    .ap_continue(matmul_step1_cache_window136_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window136_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window136_U0_ap_ready),
    .start_out(matmul_step1_cache_window136_U0_start_out),
    .start_write(matmul_step1_cache_window136_U0_start_write),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window136_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window136_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window136_U0_cache_window_sm_write)
);

ATTN0_matmul_step2_mac137 matmul_step2_mac137_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac137_U0_ap_start),
    .start_full_n(start_for_do_adapt138_U0_full_n),
    .ap_done(matmul_step2_mac137_U0_ap_done),
    .ap_continue(matmul_step2_mac137_U0_ap_continue),
    .ap_idle(matmul_step2_mac137_U0_ap_idle),
    .ap_ready(matmul_step2_mac137_U0_ap_ready),
    .start_out(matmul_step2_mac137_U0_start_out),
    .start_write(matmul_step2_mac137_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac137_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac137_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac137_U0_mac_sm_write)
);

ATTN0_do_adapt138 do_adapt138_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt138_U0_ap_start),
    .ap_done(do_adapt138_U0_ap_done),
    .ap_continue(do_adapt138_U0_ap_continue),
    .ap_idle(do_adapt138_U0_ap_idle),
    .ap_ready(do_adapt138_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt138_U0_mac_sm_read),
    .q_sm_din(do_adapt138_U0_q_sm_din),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_adapt138_U0_q_sm_write)
);

ATTN0_fifo_w96_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt135_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt135_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window136_U0_adpt_sm_read)
);

ATTN0_fifo_w96_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window136_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window136_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac137_U0_cache_window_sm_read)
);

ATTN0_fifo_w384_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac137_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac137_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt138_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window136_U0 start_for_matmul_step1_cache_window136_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window136_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window136_U0_full_n),
    .if_write(do_adapt135_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window136_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window136_U0_empty_n),
    .if_read(matmul_step1_cache_window136_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac137_U0 start_for_matmul_step2_mac137_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac137_U0_din),
    .if_full_n(start_for_matmul_step2_mac137_U0_full_n),
    .if_write(matmul_step1_cache_window136_U0_start_write),
    .if_dout(start_for_matmul_step2_mac137_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac137_U0_empty_n),
    .if_read(matmul_step2_mac137_U0_ap_ready)
);

ATTN0_start_for_do_adapt138_U0 start_for_do_adapt138_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt138_U0_din),
    .if_full_n(start_for_do_adapt138_U0_full_n),
    .if_write(matmul_step2_mac137_U0_start_write),
    .if_dout(start_for_do_adapt138_U0_dout),
    .if_empty_n(start_for_do_adapt138_U0_empty_n),
    .if_read(do_adapt138_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt138_U0_ap_done;

assign ap_idle = (matmul_step2_mac137_U0_ap_idle & matmul_step1_cache_window136_U0_ap_idle & do_adapt138_U0_ap_idle & do_adapt135_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_adapt138_U0_ap_done;

assign ap_sync_ready = do_adapt135_U0_ap_ready;

assign do_adapt135_U0_ap_continue = 1'b1;

assign do_adapt135_U0_ap_start = real_start;

assign do_adapt138_U0_ap_continue = ap_continue;

assign do_adapt138_U0_ap_start = start_for_do_adapt138_U0_empty_n;

assign do_adapt138_U0_start_full_n = 1'b1;

assign do_adapt138_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign lnq_sm_cp1_read = do_adapt135_U0_lnq_sm_cp1_read;

assign matmul_step1_cache_window136_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window136_U0_ap_start = start_for_matmul_step1_cache_window136_U0_empty_n;

assign matmul_step2_mac137_U0_ap_continue = 1'b1;

assign matmul_step2_mac137_U0_ap_start = start_for_matmul_step2_mac137_U0_empty_n;

assign q_sm_din = do_adapt138_U0_q_sm_din;

assign q_sm_write = do_adapt138_U0_q_sm_write;

assign start_for_do_adapt138_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window136_U0_din = 1'b1;

assign start_for_matmul_step2_mac137_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul117
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul118 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt139_U0_ap_start;
wire    do_adapt139_U0_ap_done;
wire    do_adapt139_U0_ap_continue;
wire    do_adapt139_U0_ap_idle;
wire    do_adapt139_U0_ap_ready;
wire    do_adapt139_U0_start_out;
wire    do_adapt139_U0_start_write;
wire    do_adapt139_U0_lnq_sm_cp1_read;
wire   [95:0] do_adapt139_U0_adpt_sm_din;
wire    do_adapt139_U0_adpt_sm_write;
wire    matmul_step1_cache_window140_U0_ap_start;
wire    matmul_step1_cache_window140_U0_ap_done;
wire    matmul_step1_cache_window140_U0_ap_continue;
wire    matmul_step1_cache_window140_U0_ap_idle;
wire    matmul_step1_cache_window140_U0_ap_ready;
wire    matmul_step1_cache_window140_U0_start_out;
wire    matmul_step1_cache_window140_U0_start_write;
wire    matmul_step1_cache_window140_U0_adpt_sm_read;
wire   [95:0] matmul_step1_cache_window140_U0_cache_window_sm_din;
wire    matmul_step1_cache_window140_U0_cache_window_sm_write;
wire    matmul_step2_mac141_U0_ap_start;
wire    matmul_step2_mac141_U0_ap_done;
wire    matmul_step2_mac141_U0_ap_continue;
wire    matmul_step2_mac141_U0_ap_idle;
wire    matmul_step2_mac141_U0_ap_ready;
wire    matmul_step2_mac141_U0_start_out;
wire    matmul_step2_mac141_U0_start_write;
wire    matmul_step2_mac141_U0_cache_window_sm_read;
wire   [383:0] matmul_step2_mac141_U0_mac_sm_din;
wire    matmul_step2_mac141_U0_mac_sm_write;
wire    do_adapt142_U0_ap_start;
wire    do_adapt142_U0_ap_done;
wire    do_adapt142_U0_ap_continue;
wire    do_adapt142_U0_ap_idle;
wire    do_adapt142_U0_ap_ready;
wire    do_adapt142_U0_mac_sm_read;
wire   [31:0] do_adapt142_U0_q_sm_din;
wire    do_adapt142_U0_q_sm_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [95:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [95:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [383:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window140_U0_din;
wire    start_for_matmul_step1_cache_window140_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window140_U0_dout;
wire    start_for_matmul_step1_cache_window140_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac141_U0_din;
wire    start_for_matmul_step2_mac141_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac141_U0_dout;
wire    start_for_matmul_step2_mac141_U0_empty_n;
wire   [0:0] start_for_do_adapt142_U0_din;
wire    start_for_do_adapt142_U0_full_n;
wire   [0:0] start_for_do_adapt142_U0_dout;
wire    start_for_do_adapt142_U0_empty_n;
wire    do_adapt142_U0_start_full_n;
wire    do_adapt142_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_do_adapt139 do_adapt139_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt139_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window140_U0_full_n),
    .ap_done(do_adapt139_U0_ap_done),
    .ap_continue(do_adapt139_U0_ap_continue),
    .ap_idle(do_adapt139_U0_ap_idle),
    .ap_ready(do_adapt139_U0_ap_ready),
    .start_out(do_adapt139_U0_start_out),
    .start_write(do_adapt139_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_adapt139_U0_lnq_sm_cp1_read),
    .adpt_sm_din(do_adapt139_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt139_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window140 matmul_step1_cache_window140_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window140_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac141_U0_full_n),
    .ap_done(matmul_step1_cache_window140_U0_ap_done),
    .ap_continue(matmul_step1_cache_window140_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window140_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window140_U0_ap_ready),
    .start_out(matmul_step1_cache_window140_U0_start_out),
    .start_write(matmul_step1_cache_window140_U0_start_write),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window140_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window140_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window140_U0_cache_window_sm_write)
);

ATTN0_matmul_step2_mac141 matmul_step2_mac141_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac141_U0_ap_start),
    .start_full_n(start_for_do_adapt142_U0_full_n),
    .ap_done(matmul_step2_mac141_U0_ap_done),
    .ap_continue(matmul_step2_mac141_U0_ap_continue),
    .ap_idle(matmul_step2_mac141_U0_ap_idle),
    .ap_ready(matmul_step2_mac141_U0_ap_ready),
    .start_out(matmul_step2_mac141_U0_start_out),
    .start_write(matmul_step2_mac141_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac141_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac141_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac141_U0_mac_sm_write)
);

ATTN0_do_adapt142 do_adapt142_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt142_U0_ap_start),
    .ap_done(do_adapt142_U0_ap_done),
    .ap_continue(do_adapt142_U0_ap_continue),
    .ap_idle(do_adapt142_U0_ap_idle),
    .ap_ready(do_adapt142_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt142_U0_mac_sm_read),
    .q_sm_din(do_adapt142_U0_q_sm_din),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_adapt142_U0_q_sm_write)
);

ATTN0_fifo_w96_d32_A_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt139_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt139_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window140_U0_adpt_sm_read)
);

ATTN0_fifo_w96_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window140_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window140_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac141_U0_cache_window_sm_read)
);

ATTN0_fifo_w384_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac141_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac141_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt142_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window140_U0 start_for_matmul_step1_cache_window140_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window140_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window140_U0_full_n),
    .if_write(do_adapt139_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window140_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window140_U0_empty_n),
    .if_read(matmul_step1_cache_window140_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac141_U0 start_for_matmul_step2_mac141_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac141_U0_din),
    .if_full_n(start_for_matmul_step2_mac141_U0_full_n),
    .if_write(matmul_step1_cache_window140_U0_start_write),
    .if_dout(start_for_matmul_step2_mac141_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac141_U0_empty_n),
    .if_read(matmul_step2_mac141_U0_ap_ready)
);

ATTN0_start_for_do_adapt142_U0 start_for_do_adapt142_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt142_U0_din),
    .if_full_n(start_for_do_adapt142_U0_full_n),
    .if_write(matmul_step2_mac141_U0_start_write),
    .if_dout(start_for_do_adapt142_U0_dout),
    .if_empty_n(start_for_do_adapt142_U0_empty_n),
    .if_read(do_adapt142_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt142_U0_ap_done;

assign ap_idle = (matmul_step2_mac141_U0_ap_idle & matmul_step1_cache_window140_U0_ap_idle & do_adapt142_U0_ap_idle & do_adapt139_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_adapt142_U0_ap_done;

assign ap_sync_ready = do_adapt139_U0_ap_ready;

assign do_adapt139_U0_ap_continue = 1'b1;

assign do_adapt139_U0_ap_start = real_start;

assign do_adapt142_U0_ap_continue = ap_continue;

assign do_adapt142_U0_ap_start = start_for_do_adapt142_U0_empty_n;

assign do_adapt142_U0_start_full_n = 1'b1;

assign do_adapt142_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign lnq_sm_cp1_read = do_adapt139_U0_lnq_sm_cp1_read;

assign matmul_step1_cache_window140_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window140_U0_ap_start = start_for_matmul_step1_cache_window140_U0_empty_n;

assign matmul_step2_mac141_U0_ap_continue = 1'b1;

assign matmul_step2_mac141_U0_ap_start = start_for_matmul_step2_mac141_U0_empty_n;

assign q_sm_din = do_adapt142_U0_q_sm_din;

assign q_sm_write = do_adapt142_U0_q_sm_write;

assign start_for_do_adapt142_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window140_U0_din = 1'b1;

assign start_for_matmul_step2_mac141_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul118
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul126 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt149_U0_ap_start;
wire    do_adapt149_U0_ap_done;
wire    do_adapt149_U0_ap_continue;
wire    do_adapt149_U0_ap_idle;
wire    do_adapt149_U0_ap_ready;
wire    do_adapt149_U0_start_out;
wire    do_adapt149_U0_start_write;
wire    do_adapt149_U0_qq_sm_head1_read;
wire   [63:0] do_adapt149_U0_adpt_sm_din;
wire    do_adapt149_U0_adpt_sm_write;
wire    matmul_step1_cache_window150_U0_ap_start;
wire    matmul_step1_cache_window150_U0_ap_done;
wire    matmul_step1_cache_window150_U0_ap_continue;
wire    matmul_step1_cache_window150_U0_ap_idle;
wire    matmul_step1_cache_window150_U0_ap_ready;
wire    matmul_step1_cache_window150_U0_adpt_sm_read;
wire   [63:0] matmul_step1_cache_window150_U0_cache_window_sm_din;
wire    matmul_step1_cache_window150_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight151_U0_ap_start;
wire    matmul_step1_cache_weight151_U0_ap_done;
wire    matmul_step1_cache_weight151_U0_ap_continue;
wire    matmul_step1_cache_weight151_U0_ap_idle;
wire    matmul_step1_cache_weight151_U0_ap_ready;
wire    matmul_step1_cache_weight151_U0_start_out;
wire    matmul_step1_cache_weight151_U0_start_write;
wire    matmul_step1_cache_weight151_U0_kq_sm_reshape_head1_read;
wire   [223:0] matmul_step1_cache_weight151_U0_weight_sm_din;
wire    matmul_step1_cache_weight151_U0_weight_sm_write;
wire    matmul_step2_mac152_U0_ap_start;
wire    matmul_step2_mac152_U0_ap_done;
wire    matmul_step2_mac152_U0_ap_continue;
wire    matmul_step2_mac152_U0_ap_idle;
wire    matmul_step2_mac152_U0_ap_ready;
wire    matmul_step2_mac152_U0_start_out;
wire    matmul_step2_mac152_U0_start_write;
wire    matmul_step2_mac152_U0_cache_window_sm_read;
wire    matmul_step2_mac152_U0_weight_sm_read;
wire   [223:0] matmul_step2_mac152_U0_mac_sm_din;
wire    matmul_step2_mac152_U0_mac_sm_write;
wire    do_adapt153_U0_ap_start;
wire    do_adapt153_U0_ap_done;
wire    do_adapt153_U0_ap_continue;
wire    do_adapt153_U0_ap_idle;
wire    do_adapt153_U0_ap_ready;
wire    do_adapt153_U0_mac_sm_read;
wire   [31:0] do_adapt153_U0_r_sm_head1_din;
wire    do_adapt153_U0_r_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [63:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [63:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [223:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt149_U0_ap_ready;
wire    ap_sync_do_adapt149_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight151_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window150_U0_din;
wire    start_for_matmul_step1_cache_window150_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window150_U0_dout;
wire    start_for_matmul_step1_cache_window150_U0_empty_n;
wire    matmul_step1_cache_window150_U0_start_full_n;
wire    matmul_step1_cache_window150_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac152_U0_din;
wire    start_for_matmul_step2_mac152_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac152_U0_dout;
wire    start_for_matmul_step2_mac152_U0_empty_n;
wire   [0:0] start_for_do_adapt153_U0_din;
wire    start_for_do_adapt153_U0_full_n;
wire   [0:0] start_for_do_adapt153_U0_dout;
wire    start_for_do_adapt153_U0_empty_n;
wire    do_adapt153_U0_start_full_n;
wire    do_adapt153_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt149_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt149 do_adapt149_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt149_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window150_U0_full_n),
    .ap_done(do_adapt149_U0_ap_done),
    .ap_continue(do_adapt149_U0_ap_continue),
    .ap_idle(do_adapt149_U0_ap_idle),
    .ap_ready(do_adapt149_U0_ap_ready),
    .start_out(do_adapt149_U0_start_out),
    .start_write(do_adapt149_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_adapt149_U0_qq_sm_head1_read),
    .adpt_sm_din(do_adapt149_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt149_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window150 matmul_step1_cache_window150_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window150_U0_ap_start),
    .ap_done(matmul_step1_cache_window150_U0_ap_done),
    .ap_continue(matmul_step1_cache_window150_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window150_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window150_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window150_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window150_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window150_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight151 matmul_step1_cache_weight151_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight151_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac152_U0_full_n),
    .ap_done(matmul_step1_cache_weight151_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight151_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight151_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight151_U0_ap_ready),
    .start_out(matmul_step1_cache_weight151_U0_start_out),
    .start_write(matmul_step1_cache_weight151_U0_start_write),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(matmul_step1_cache_weight151_U0_kq_sm_reshape_head1_read),
    .weight_sm_din(matmul_step1_cache_weight151_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight151_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac152 matmul_step2_mac152_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac152_U0_ap_start),
    .start_full_n(start_for_do_adapt153_U0_full_n),
    .ap_done(matmul_step2_mac152_U0_ap_done),
    .ap_continue(matmul_step2_mac152_U0_ap_continue),
    .ap_idle(matmul_step2_mac152_U0_ap_idle),
    .ap_ready(matmul_step2_mac152_U0_ap_ready),
    .start_out(matmul_step2_mac152_U0_start_out),
    .start_write(matmul_step2_mac152_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac152_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac152_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac152_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac152_U0_mac_sm_write)
);

ATTN0_do_adapt153 do_adapt153_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt153_U0_ap_start),
    .ap_done(do_adapt153_U0_ap_done),
    .ap_continue(do_adapt153_U0_ap_continue),
    .ap_idle(do_adapt153_U0_ap_idle),
    .ap_ready(do_adapt153_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt153_U0_mac_sm_read),
    .r_sm_head1_din(do_adapt153_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_adapt153_U0_r_sm_head1_write)
);

ATTN0_fifo_w64_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt149_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt149_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window150_U0_adpt_sm_read)
);

ATTN0_fifo_w64_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window150_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window150_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac152_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight151_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight151_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac152_U0_weight_sm_read)
);

ATTN0_fifo_w224_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac152_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac152_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt153_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window150_U0 start_for_matmul_step1_cache_window150_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window150_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window150_U0_full_n),
    .if_write(do_adapt149_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window150_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window150_U0_empty_n),
    .if_read(matmul_step1_cache_window150_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac152_U0 start_for_matmul_step2_mac152_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac152_U0_din),
    .if_full_n(start_for_matmul_step2_mac152_U0_full_n),
    .if_write(matmul_step1_cache_weight151_U0_start_write),
    .if_dout(start_for_matmul_step2_mac152_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac152_U0_empty_n),
    .if_read(matmul_step2_mac152_U0_ap_ready)
);

ATTN0_start_for_do_adapt153_U0 start_for_do_adapt153_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt153_U0_din),
    .if_full_n(start_for_do_adapt153_U0_full_n),
    .if_write(matmul_step2_mac152_U0_start_write),
    .if_dout(start_for_do_adapt153_U0_dout),
    .if_empty_n(start_for_do_adapt153_U0_empty_n),
    .if_read(do_adapt153_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt149_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt149_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt149_U0_ap_ready <= ap_sync_do_adapt149_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready <= ap_sync_matmul_step1_cache_weight151_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt153_U0_ap_done;

assign ap_idle = (matmul_step2_mac152_U0_ap_idle & matmul_step1_cache_window150_U0_ap_idle & matmul_step1_cache_weight151_U0_ap_idle & do_adapt153_U0_ap_idle & do_adapt149_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt149_U0_ap_ready = (do_adapt149_U0_ap_ready | ap_sync_reg_do_adapt149_U0_ap_ready);

assign ap_sync_done = do_adapt153_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight151_U0_ap_ready = (matmul_step1_cache_weight151_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight151_U0_ap_ready & ap_sync_do_adapt149_U0_ap_ready);

assign do_adapt149_U0_ap_continue = 1'b1;

assign do_adapt149_U0_ap_start = (real_start & (ap_sync_reg_do_adapt149_U0_ap_ready ^ 1'b1));

assign do_adapt153_U0_ap_continue = ap_continue;

assign do_adapt153_U0_ap_start = start_for_do_adapt153_U0_empty_n;

assign do_adapt153_U0_start_full_n = 1'b1;

assign do_adapt153_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head1_read = matmul_step1_cache_weight151_U0_kq_sm_reshape_head1_read;

assign matmul_step1_cache_weight151_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight151_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight151_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window150_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window150_U0_ap_start = start_for_matmul_step1_cache_window150_U0_empty_n;

assign matmul_step1_cache_window150_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window150_U0_start_write = 1'b0;

assign matmul_step2_mac152_U0_ap_continue = 1'b1;

assign matmul_step2_mac152_U0_ap_start = start_for_matmul_step2_mac152_U0_empty_n;

assign qq_sm_head1_read = do_adapt149_U0_qq_sm_head1_read;

assign r_sm_head1_din = do_adapt153_U0_r_sm_head1_din;

assign r_sm_head1_write = do_adapt153_U0_r_sm_head1_write;

assign start_for_do_adapt153_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window150_U0_din = 1'b1;

assign start_for_matmul_step2_mac152_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul126
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul127 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt154_U0_ap_start;
wire    do_adapt154_U0_ap_done;
wire    do_adapt154_U0_ap_continue;
wire    do_adapt154_U0_ap_idle;
wire    do_adapt154_U0_ap_ready;
wire    do_adapt154_U0_start_out;
wire    do_adapt154_U0_start_write;
wire    do_adapt154_U0_qq_sm_head1_read;
wire   [63:0] do_adapt154_U0_adpt_sm_din;
wire    do_adapt154_U0_adpt_sm_write;
wire    matmul_step1_cache_window155_U0_ap_start;
wire    matmul_step1_cache_window155_U0_ap_done;
wire    matmul_step1_cache_window155_U0_ap_continue;
wire    matmul_step1_cache_window155_U0_ap_idle;
wire    matmul_step1_cache_window155_U0_ap_ready;
wire    matmul_step1_cache_window155_U0_adpt_sm_read;
wire   [63:0] matmul_step1_cache_window155_U0_cache_window_sm_din;
wire    matmul_step1_cache_window155_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight156_U0_ap_start;
wire    matmul_step1_cache_weight156_U0_ap_done;
wire    matmul_step1_cache_weight156_U0_ap_continue;
wire    matmul_step1_cache_weight156_U0_ap_idle;
wire    matmul_step1_cache_weight156_U0_ap_ready;
wire    matmul_step1_cache_weight156_U0_start_out;
wire    matmul_step1_cache_weight156_U0_start_write;
wire    matmul_step1_cache_weight156_U0_kq_sm_reshape_head1_read;
wire   [223:0] matmul_step1_cache_weight156_U0_weight_sm_din;
wire    matmul_step1_cache_weight156_U0_weight_sm_write;
wire    matmul_step2_mac157_U0_ap_start;
wire    matmul_step2_mac157_U0_ap_done;
wire    matmul_step2_mac157_U0_ap_continue;
wire    matmul_step2_mac157_U0_ap_idle;
wire    matmul_step2_mac157_U0_ap_ready;
wire    matmul_step2_mac157_U0_start_out;
wire    matmul_step2_mac157_U0_start_write;
wire    matmul_step2_mac157_U0_cache_window_sm_read;
wire    matmul_step2_mac157_U0_weight_sm_read;
wire   [223:0] matmul_step2_mac157_U0_mac_sm_din;
wire    matmul_step2_mac157_U0_mac_sm_write;
wire    do_adapt158_U0_ap_start;
wire    do_adapt158_U0_ap_done;
wire    do_adapt158_U0_ap_continue;
wire    do_adapt158_U0_ap_idle;
wire    do_adapt158_U0_ap_ready;
wire    do_adapt158_U0_mac_sm_read;
wire   [31:0] do_adapt158_U0_r_sm_head1_din;
wire    do_adapt158_U0_r_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [63:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [63:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [223:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt154_U0_ap_ready;
wire    ap_sync_do_adapt154_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight156_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window155_U0_din;
wire    start_for_matmul_step1_cache_window155_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window155_U0_dout;
wire    start_for_matmul_step1_cache_window155_U0_empty_n;
wire    matmul_step1_cache_window155_U0_start_full_n;
wire    matmul_step1_cache_window155_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac157_U0_din;
wire    start_for_matmul_step2_mac157_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac157_U0_dout;
wire    start_for_matmul_step2_mac157_U0_empty_n;
wire   [0:0] start_for_do_adapt158_U0_din;
wire    start_for_do_adapt158_U0_full_n;
wire   [0:0] start_for_do_adapt158_U0_dout;
wire    start_for_do_adapt158_U0_empty_n;
wire    do_adapt158_U0_start_full_n;
wire    do_adapt158_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt154_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt154 do_adapt154_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt154_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window155_U0_full_n),
    .ap_done(do_adapt154_U0_ap_done),
    .ap_continue(do_adapt154_U0_ap_continue),
    .ap_idle(do_adapt154_U0_ap_idle),
    .ap_ready(do_adapt154_U0_ap_ready),
    .start_out(do_adapt154_U0_start_out),
    .start_write(do_adapt154_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_adapt154_U0_qq_sm_head1_read),
    .adpt_sm_din(do_adapt154_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt154_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window155 matmul_step1_cache_window155_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window155_U0_ap_start),
    .ap_done(matmul_step1_cache_window155_U0_ap_done),
    .ap_continue(matmul_step1_cache_window155_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window155_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window155_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window155_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window155_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window155_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight156 matmul_step1_cache_weight156_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight156_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac157_U0_full_n),
    .ap_done(matmul_step1_cache_weight156_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight156_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight156_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight156_U0_ap_ready),
    .start_out(matmul_step1_cache_weight156_U0_start_out),
    .start_write(matmul_step1_cache_weight156_U0_start_write),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(matmul_step1_cache_weight156_U0_kq_sm_reshape_head1_read),
    .weight_sm_din(matmul_step1_cache_weight156_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight156_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac157 matmul_step2_mac157_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac157_U0_ap_start),
    .start_full_n(start_for_do_adapt158_U0_full_n),
    .ap_done(matmul_step2_mac157_U0_ap_done),
    .ap_continue(matmul_step2_mac157_U0_ap_continue),
    .ap_idle(matmul_step2_mac157_U0_ap_idle),
    .ap_ready(matmul_step2_mac157_U0_ap_ready),
    .start_out(matmul_step2_mac157_U0_start_out),
    .start_write(matmul_step2_mac157_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac157_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac157_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac157_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac157_U0_mac_sm_write)
);

ATTN0_do_adapt158 do_adapt158_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt158_U0_ap_start),
    .ap_done(do_adapt158_U0_ap_done),
    .ap_continue(do_adapt158_U0_ap_continue),
    .ap_idle(do_adapt158_U0_ap_idle),
    .ap_ready(do_adapt158_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt158_U0_mac_sm_read),
    .r_sm_head1_din(do_adapt158_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_adapt158_U0_r_sm_head1_write)
);

ATTN0_fifo_w64_d32_A_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt154_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt154_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window155_U0_adpt_sm_read)
);

ATTN0_fifo_w64_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window155_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window155_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac157_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S_x weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight156_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight156_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac157_U0_weight_sm_read)
);

ATTN0_fifo_w224_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac157_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac157_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt158_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window155_U0 start_for_matmul_step1_cache_window155_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window155_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window155_U0_full_n),
    .if_write(do_adapt154_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window155_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window155_U0_empty_n),
    .if_read(matmul_step1_cache_window155_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac157_U0 start_for_matmul_step2_mac157_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac157_U0_din),
    .if_full_n(start_for_matmul_step2_mac157_U0_full_n),
    .if_write(matmul_step1_cache_weight156_U0_start_write),
    .if_dout(start_for_matmul_step2_mac157_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac157_U0_empty_n),
    .if_read(matmul_step2_mac157_U0_ap_ready)
);

ATTN0_start_for_do_adapt158_U0 start_for_do_adapt158_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt158_U0_din),
    .if_full_n(start_for_do_adapt158_U0_full_n),
    .if_write(matmul_step2_mac157_U0_start_write),
    .if_dout(start_for_do_adapt158_U0_dout),
    .if_empty_n(start_for_do_adapt158_U0_empty_n),
    .if_read(do_adapt158_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt154_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt154_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt154_U0_ap_ready <= ap_sync_do_adapt154_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready <= ap_sync_matmul_step1_cache_weight156_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt158_U0_ap_done;

assign ap_idle = (matmul_step2_mac157_U0_ap_idle & matmul_step1_cache_window155_U0_ap_idle & matmul_step1_cache_weight156_U0_ap_idle & do_adapt158_U0_ap_idle & do_adapt154_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt154_U0_ap_ready = (do_adapt154_U0_ap_ready | ap_sync_reg_do_adapt154_U0_ap_ready);

assign ap_sync_done = do_adapt158_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight156_U0_ap_ready = (matmul_step1_cache_weight156_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight156_U0_ap_ready & ap_sync_do_adapt154_U0_ap_ready);

assign do_adapt154_U0_ap_continue = 1'b1;

assign do_adapt154_U0_ap_start = (real_start & (ap_sync_reg_do_adapt154_U0_ap_ready ^ 1'b1));

assign do_adapt158_U0_ap_continue = ap_continue;

assign do_adapt158_U0_ap_start = start_for_do_adapt158_U0_empty_n;

assign do_adapt158_U0_start_full_n = 1'b1;

assign do_adapt158_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head1_read = matmul_step1_cache_weight156_U0_kq_sm_reshape_head1_read;

assign matmul_step1_cache_weight156_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight156_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight156_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window155_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window155_U0_ap_start = start_for_matmul_step1_cache_window155_U0_empty_n;

assign matmul_step1_cache_window155_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window155_U0_start_write = 1'b0;

assign matmul_step2_mac157_U0_ap_continue = 1'b1;

assign matmul_step2_mac157_U0_ap_start = start_for_matmul_step2_mac157_U0_empty_n;

assign qq_sm_head1_read = do_adapt154_U0_qq_sm_head1_read;

assign r_sm_head1_din = do_adapt158_U0_r_sm_head1_din;

assign r_sm_head1_write = do_adapt158_U0_r_sm_head1_write;

assign start_for_do_adapt158_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window155_U0_din = 1'b1;

assign start_for_matmul_step2_mac157_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul127
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul133 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt165_U0_ap_start;
wire    do_adapt165_U0_ap_done;
wire    do_adapt165_U0_ap_continue;
wire    do_adapt165_U0_ap_idle;
wire    do_adapt165_U0_ap_ready;
wire    do_adapt165_U0_start_out;
wire    do_adapt165_U0_start_write;
wire    do_adapt165_U0_rq_sm_head1_read;
wire   [111:0] do_adapt165_U0_adpt_sm_din;
wire    do_adapt165_U0_adpt_sm_write;
wire    matmul_step1_cache_window166_U0_ap_start;
wire    matmul_step1_cache_window166_U0_ap_done;
wire    matmul_step1_cache_window166_U0_ap_continue;
wire    matmul_step1_cache_window166_U0_ap_idle;
wire    matmul_step1_cache_window166_U0_ap_ready;
wire    matmul_step1_cache_window166_U0_adpt_sm_read;
wire   [111:0] matmul_step1_cache_window166_U0_cache_window_sm_din;
wire    matmul_step1_cache_window166_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed167_U0_ap_start;
wire    matmul_step1_cache_weight_transposed167_U0_ap_done;
wire    matmul_step1_cache_weight_transposed167_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed167_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed167_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed167_U0_start_out;
wire    matmul_step1_cache_weight_transposed167_U0_start_write;
wire    matmul_step1_cache_weight_transposed167_U0_vq_sm_transpose_head1_read;
wire   [223:0] matmul_step1_cache_weight_transposed167_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed167_U0_weight_sm_write;
wire    matmul_step2_mac168_U0_ap_start;
wire    matmul_step2_mac168_U0_ap_done;
wire    matmul_step2_mac168_U0_ap_continue;
wire    matmul_step2_mac168_U0_ap_idle;
wire    matmul_step2_mac168_U0_ap_ready;
wire    matmul_step2_mac168_U0_start_out;
wire    matmul_step2_mac168_U0_start_write;
wire    matmul_step2_mac168_U0_cache_window_sm_read;
wire    matmul_step2_mac168_U0_weight_sm_read;
wire   [127:0] matmul_step2_mac168_U0_mac_sm_din;
wire    matmul_step2_mac168_U0_mac_sm_write;
wire    do_adapt169_U0_ap_start;
wire    do_adapt169_U0_ap_done;
wire    do_adapt169_U0_ap_continue;
wire    do_adapt169_U0_ap_idle;
wire    do_adapt169_U0_ap_ready;
wire    do_adapt169_U0_mac_sm_read;
wire   [31:0] do_adapt169_U0_a_sm_head1_din;
wire    do_adapt169_U0_a_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [111:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [111:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [127:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt165_U0_ap_ready;
wire    ap_sync_do_adapt165_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed167_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window166_U0_din;
wire    start_for_matmul_step1_cache_window166_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window166_U0_dout;
wire    start_for_matmul_step1_cache_window166_U0_empty_n;
wire    matmul_step1_cache_window166_U0_start_full_n;
wire    matmul_step1_cache_window166_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac168_U0_din;
wire    start_for_matmul_step2_mac168_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac168_U0_dout;
wire    start_for_matmul_step2_mac168_U0_empty_n;
wire   [0:0] start_for_do_adapt169_U0_din;
wire    start_for_do_adapt169_U0_full_n;
wire   [0:0] start_for_do_adapt169_U0_dout;
wire    start_for_do_adapt169_U0_empty_n;
wire    do_adapt169_U0_start_full_n;
wire    do_adapt169_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt165_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt165 do_adapt165_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt165_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window166_U0_full_n),
    .ap_done(do_adapt165_U0_ap_done),
    .ap_continue(do_adapt165_U0_ap_continue),
    .ap_idle(do_adapt165_U0_ap_idle),
    .ap_ready(do_adapt165_U0_ap_ready),
    .start_out(do_adapt165_U0_start_out),
    .start_write(do_adapt165_U0_start_write),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_adapt165_U0_rq_sm_head1_read),
    .adpt_sm_din(do_adapt165_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt165_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window166 matmul_step1_cache_window166_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window166_U0_ap_start),
    .ap_done(matmul_step1_cache_window166_U0_ap_done),
    .ap_continue(matmul_step1_cache_window166_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window166_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window166_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window166_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window166_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window166_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight_transposed167 matmul_step1_cache_weight_transposed167_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed167_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac168_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed167_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed167_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed167_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed167_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed167_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed167_U0_start_write),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(matmul_step1_cache_weight_transposed167_U0_vq_sm_transpose_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed167_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed167_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac168 matmul_step2_mac168_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac168_U0_ap_start),
    .start_full_n(start_for_do_adapt169_U0_full_n),
    .ap_done(matmul_step2_mac168_U0_ap_done),
    .ap_continue(matmul_step2_mac168_U0_ap_continue),
    .ap_idle(matmul_step2_mac168_U0_ap_idle),
    .ap_ready(matmul_step2_mac168_U0_ap_ready),
    .start_out(matmul_step2_mac168_U0_start_out),
    .start_write(matmul_step2_mac168_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac168_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac168_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac168_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac168_U0_mac_sm_write)
);

ATTN0_do_adapt169 do_adapt169_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt169_U0_ap_start),
    .ap_done(do_adapt169_U0_ap_done),
    .ap_continue(do_adapt169_U0_ap_continue),
    .ap_idle(do_adapt169_U0_ap_idle),
    .ap_ready(do_adapt169_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt169_U0_mac_sm_read),
    .a_sm_head1_din(do_adapt169_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_adapt169_U0_a_sm_head1_write)
);

ATTN0_fifo_w112_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt165_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt165_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window166_U0_adpt_sm_read)
);

ATTN0_fifo_w112_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window166_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window166_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac168_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S_x1 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed167_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed167_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac168_U0_weight_sm_read)
);

ATTN0_fifo_w128_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac168_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac168_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt169_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window166_U0 start_for_matmul_step1_cache_window166_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window166_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window166_U0_full_n),
    .if_write(do_adapt165_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window166_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window166_U0_empty_n),
    .if_read(matmul_step1_cache_window166_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac168_U0 start_for_matmul_step2_mac168_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac168_U0_din),
    .if_full_n(start_for_matmul_step2_mac168_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed167_U0_start_write),
    .if_dout(start_for_matmul_step2_mac168_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac168_U0_empty_n),
    .if_read(matmul_step2_mac168_U0_ap_ready)
);

ATTN0_start_for_do_adapt169_U0 start_for_do_adapt169_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt169_U0_din),
    .if_full_n(start_for_do_adapt169_U0_full_n),
    .if_write(matmul_step2_mac168_U0_start_write),
    .if_dout(start_for_do_adapt169_U0_dout),
    .if_empty_n(start_for_do_adapt169_U0_empty_n),
    .if_read(do_adapt169_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt165_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt165_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt165_U0_ap_ready <= ap_sync_do_adapt165_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed167_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign a_sm_head1_din = do_adapt169_U0_a_sm_head1_din;

assign a_sm_head1_write = do_adapt169_U0_a_sm_head1_write;

assign ap_done = do_adapt169_U0_ap_done;

assign ap_idle = (matmul_step2_mac168_U0_ap_idle & matmul_step1_cache_window166_U0_ap_idle & matmul_step1_cache_weight_transposed167_U0_ap_idle & do_adapt169_U0_ap_idle & do_adapt165_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt165_U0_ap_ready = (do_adapt165_U0_ap_ready | ap_sync_reg_do_adapt165_U0_ap_ready);

assign ap_sync_done = do_adapt169_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight_transposed167_U0_ap_ready = (matmul_step1_cache_weight_transposed167_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed167_U0_ap_ready & ap_sync_do_adapt165_U0_ap_ready);

assign do_adapt165_U0_ap_continue = 1'b1;

assign do_adapt165_U0_ap_start = (real_start & (ap_sync_reg_do_adapt165_U0_ap_ready ^ 1'b1));

assign do_adapt169_U0_ap_continue = ap_continue;

assign do_adapt169_U0_ap_start = start_for_do_adapt169_U0_empty_n;

assign do_adapt169_U0_start_full_n = 1'b1;

assign do_adapt169_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign matmul_step1_cache_weight_transposed167_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed167_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_transposed167_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window166_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window166_U0_ap_start = start_for_matmul_step1_cache_window166_U0_empty_n;

assign matmul_step1_cache_window166_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window166_U0_start_write = 1'b0;

assign matmul_step2_mac168_U0_ap_continue = 1'b1;

assign matmul_step2_mac168_U0_ap_start = start_for_matmul_step2_mac168_U0_empty_n;

assign rq_sm_head1_read = do_adapt165_U0_rq_sm_head1_read;

assign start_for_do_adapt169_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window166_U0_din = 1'b1;

assign start_for_matmul_step2_mac168_U0_din = 1'b1;

assign start_out = real_start;

assign vq_sm_transpose_head1_read = matmul_step1_cache_weight_transposed167_U0_vq_sm_transpose_head1_read;

endmodule //ATTN0_do_matmul133
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul134 (
        rq_sm_head1_dout,
        rq_sm_head1_empty_n,
        rq_sm_head1_read,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        a_sm_head1_din,
        a_sm_head1_full_n,
        a_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] rq_sm_head1_dout;
input   rq_sm_head1_empty_n;
output   rq_sm_head1_read;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [31:0] a_sm_head1_din;
input   a_sm_head1_full_n;
output   a_sm_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt170_U0_ap_start;
wire    do_adapt170_U0_ap_done;
wire    do_adapt170_U0_ap_continue;
wire    do_adapt170_U0_ap_idle;
wire    do_adapt170_U0_ap_ready;
wire    do_adapt170_U0_start_out;
wire    do_adapt170_U0_start_write;
wire    do_adapt170_U0_rq_sm_head1_read;
wire   [111:0] do_adapt170_U0_adpt_sm_din;
wire    do_adapt170_U0_adpt_sm_write;
wire    matmul_step1_cache_window171_U0_ap_start;
wire    matmul_step1_cache_window171_U0_ap_done;
wire    matmul_step1_cache_window171_U0_ap_continue;
wire    matmul_step1_cache_window171_U0_ap_idle;
wire    matmul_step1_cache_window171_U0_ap_ready;
wire    matmul_step1_cache_window171_U0_adpt_sm_read;
wire   [111:0] matmul_step1_cache_window171_U0_cache_window_sm_din;
wire    matmul_step1_cache_window171_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_transposed172_U0_ap_start;
wire    matmul_step1_cache_weight_transposed172_U0_ap_done;
wire    matmul_step1_cache_weight_transposed172_U0_ap_continue;
wire    matmul_step1_cache_weight_transposed172_U0_ap_idle;
wire    matmul_step1_cache_weight_transposed172_U0_ap_ready;
wire    matmul_step1_cache_weight_transposed172_U0_start_out;
wire    matmul_step1_cache_weight_transposed172_U0_start_write;
wire    matmul_step1_cache_weight_transposed172_U0_vq_sm_transpose_head1_read;
wire   [223:0] matmul_step1_cache_weight_transposed172_U0_weight_sm_din;
wire    matmul_step1_cache_weight_transposed172_U0_weight_sm_write;
wire    matmul_step2_mac173_U0_ap_start;
wire    matmul_step2_mac173_U0_ap_done;
wire    matmul_step2_mac173_U0_ap_continue;
wire    matmul_step2_mac173_U0_ap_idle;
wire    matmul_step2_mac173_U0_ap_ready;
wire    matmul_step2_mac173_U0_start_out;
wire    matmul_step2_mac173_U0_start_write;
wire    matmul_step2_mac173_U0_cache_window_sm_read;
wire    matmul_step2_mac173_U0_weight_sm_read;
wire   [127:0] matmul_step2_mac173_U0_mac_sm_din;
wire    matmul_step2_mac173_U0_mac_sm_write;
wire    do_adapt174_U0_ap_start;
wire    do_adapt174_U0_ap_done;
wire    do_adapt174_U0_ap_continue;
wire    do_adapt174_U0_ap_idle;
wire    do_adapt174_U0_ap_ready;
wire    do_adapt174_U0_mac_sm_read;
wire   [31:0] do_adapt174_U0_a_sm_head1_din;
wire    do_adapt174_U0_a_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [111:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [111:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [127:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt170_U0_ap_ready;
wire    ap_sync_do_adapt170_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_transposed172_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window171_U0_din;
wire    start_for_matmul_step1_cache_window171_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window171_U0_dout;
wire    start_for_matmul_step1_cache_window171_U0_empty_n;
wire    matmul_step1_cache_window171_U0_start_full_n;
wire    matmul_step1_cache_window171_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac173_U0_din;
wire    start_for_matmul_step2_mac173_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac173_U0_dout;
wire    start_for_matmul_step2_mac173_U0_empty_n;
wire   [0:0] start_for_do_adapt174_U0_din;
wire    start_for_do_adapt174_U0_full_n;
wire   [0:0] start_for_do_adapt174_U0_dout;
wire    start_for_do_adapt174_U0_empty_n;
wire    do_adapt174_U0_start_full_n;
wire    do_adapt174_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_sync_reg_do_adapt170_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt170 do_adapt170_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt170_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window171_U0_full_n),
    .ap_done(do_adapt170_U0_ap_done),
    .ap_continue(do_adapt170_U0_ap_continue),
    .ap_idle(do_adapt170_U0_ap_idle),
    .ap_ready(do_adapt170_U0_ap_ready),
    .start_out(do_adapt170_U0_start_out),
    .start_write(do_adapt170_U0_start_write),
    .rq_sm_head1_dout(rq_sm_head1_dout),
    .rq_sm_head1_empty_n(rq_sm_head1_empty_n),
    .rq_sm_head1_read(do_adapt170_U0_rq_sm_head1_read),
    .adpt_sm_din(do_adapt170_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt170_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window171 matmul_step1_cache_window171_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window171_U0_ap_start),
    .ap_done(matmul_step1_cache_window171_U0_ap_done),
    .ap_continue(matmul_step1_cache_window171_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window171_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window171_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window171_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window171_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window171_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight_transposed172 matmul_step1_cache_weight_transposed172_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_transposed172_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac173_U0_full_n),
    .ap_done(matmul_step1_cache_weight_transposed172_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_transposed172_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_transposed172_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_transposed172_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_transposed172_U0_start_out),
    .start_write(matmul_step1_cache_weight_transposed172_U0_start_write),
    .vq_sm_transpose_head1_dout(vq_sm_transpose_head1_dout),
    .vq_sm_transpose_head1_empty_n(vq_sm_transpose_head1_empty_n),
    .vq_sm_transpose_head1_read(matmul_step1_cache_weight_transposed172_U0_vq_sm_transpose_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_transposed172_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_transposed172_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac173 matmul_step2_mac173_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac173_U0_ap_start),
    .start_full_n(start_for_do_adapt174_U0_full_n),
    .ap_done(matmul_step2_mac173_U0_ap_done),
    .ap_continue(matmul_step2_mac173_U0_ap_continue),
    .ap_idle(matmul_step2_mac173_U0_ap_idle),
    .ap_ready(matmul_step2_mac173_U0_ap_ready),
    .start_out(matmul_step2_mac173_U0_start_out),
    .start_write(matmul_step2_mac173_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac173_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac173_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac173_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac173_U0_mac_sm_write)
);

ATTN0_do_adapt174 do_adapt174_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt174_U0_ap_start),
    .ap_done(do_adapt174_U0_ap_done),
    .ap_continue(do_adapt174_U0_ap_continue),
    .ap_idle(do_adapt174_U0_ap_idle),
    .ap_ready(do_adapt174_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt174_U0_mac_sm_read),
    .a_sm_head1_din(do_adapt174_U0_a_sm_head1_din),
    .a_sm_head1_full_n(a_sm_head1_full_n),
    .a_sm_head1_write(do_adapt174_U0_a_sm_head1_write)
);

ATTN0_fifo_w112_d32_A_x adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt170_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt170_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window171_U0_adpt_sm_read)
);

ATTN0_fifo_w112_d2_S_x cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window171_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window171_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac173_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S_x2 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_transposed172_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_transposed172_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac173_U0_weight_sm_read)
);

ATTN0_fifo_w128_d2_S_x mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac173_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac173_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt174_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window171_U0 start_for_matmul_step1_cache_window171_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window171_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window171_U0_full_n),
    .if_write(do_adapt170_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window171_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window171_U0_empty_n),
    .if_read(matmul_step1_cache_window171_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac173_U0 start_for_matmul_step2_mac173_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac173_U0_din),
    .if_full_n(start_for_matmul_step2_mac173_U0_full_n),
    .if_write(matmul_step1_cache_weight_transposed172_U0_start_write),
    .if_dout(start_for_matmul_step2_mac173_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac173_U0_empty_n),
    .if_read(matmul_step2_mac173_U0_ap_ready)
);

ATTN0_start_for_do_adapt174_U0 start_for_do_adapt174_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt174_U0_din),
    .if_full_n(start_for_do_adapt174_U0_full_n),
    .if_write(matmul_step2_mac173_U0_start_write),
    .if_dout(start_for_do_adapt174_U0_dout),
    .if_empty_n(start_for_do_adapt174_U0_empty_n),
    .if_read(do_adapt174_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt170_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_do_adapt170_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt170_U0_ap_ready <= ap_sync_do_adapt170_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_transposed172_U0_ap_ready;
        end
    end
end

assign a_sm_head1_din = do_adapt174_U0_a_sm_head1_din;

assign a_sm_head1_write = do_adapt174_U0_a_sm_head1_write;

assign ap_done = do_adapt174_U0_ap_done;

assign ap_idle = (matmul_step2_mac173_U0_ap_idle & matmul_step1_cache_window171_U0_ap_idle & matmul_step1_cache_weight_transposed172_U0_ap_idle & do_adapt174_U0_ap_idle & do_adapt170_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt170_U0_ap_ready = (do_adapt170_U0_ap_ready | ap_sync_reg_do_adapt170_U0_ap_ready);

assign ap_sync_done = do_adapt174_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight_transposed172_U0_ap_ready = (matmul_step1_cache_weight_transposed172_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_transposed172_U0_ap_ready & ap_sync_do_adapt170_U0_ap_ready);

assign do_adapt170_U0_ap_continue = 1'b1;

assign do_adapt170_U0_ap_start = ((ap_sync_reg_do_adapt170_U0_ap_ready ^ 1'b1) & ap_start);

assign do_adapt174_U0_ap_continue = ap_continue;

assign do_adapt174_U0_ap_start = start_for_do_adapt174_U0_empty_n;

assign do_adapt174_U0_start_full_n = 1'b1;

assign do_adapt174_U0_start_write = 1'b0;

assign matmul_step1_cache_weight_transposed172_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_transposed172_U0_ap_start = ((ap_sync_reg_matmul_step1_cache_weight_transposed172_U0_ap_ready ^ 1'b1) & ap_start);

assign matmul_step1_cache_window171_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window171_U0_ap_start = start_for_matmul_step1_cache_window171_U0_empty_n;

assign matmul_step1_cache_window171_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window171_U0_start_write = 1'b0;

assign matmul_step2_mac173_U0_ap_continue = 1'b1;

assign matmul_step2_mac173_U0_ap_start = start_for_matmul_step2_mac173_U0_empty_n;

assign rq_sm_head1_read = do_adapt170_U0_rq_sm_head1_read;

assign start_for_do_adapt174_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window171_U0_din = 1'b1;

assign start_for_matmul_step2_mac173_U0_din = 1'b1;

assign vq_sm_transpose_head1_read = matmul_step1_cache_weight_transposed172_U0_vq_sm_transpose_head1_read;

endmodule //ATTN0_do_matmul134
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul_1 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        qq_sm_head1_dout,
        qq_sm_head1_empty_n,
        qq_sm_head1_read,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        r_sm_head1_din,
        r_sm_head1_full_n,
        r_sm_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] qq_sm_head1_dout;
input   qq_sm_head1_empty_n;
output   qq_sm_head1_read;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [31:0] r_sm_head1_din;
input   r_sm_head1_full_n;
output   r_sm_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_1_U0_ap_start;
wire    do_adapt_1_U0_ap_done;
wire    do_adapt_1_U0_ap_continue;
wire    do_adapt_1_U0_ap_idle;
wire    do_adapt_1_U0_ap_ready;
wire    do_adapt_1_U0_start_out;
wire    do_adapt_1_U0_start_write;
wire    do_adapt_1_U0_qq_sm_head1_read;
wire   [63:0] do_adapt_1_U0_adpt_sm_din;
wire    do_adapt_1_U0_adpt_sm_write;
wire    matmul_step1_cache_window_1_U0_ap_start;
wire    matmul_step1_cache_window_1_U0_ap_done;
wire    matmul_step1_cache_window_1_U0_ap_continue;
wire    matmul_step1_cache_window_1_U0_ap_idle;
wire    matmul_step1_cache_window_1_U0_ap_ready;
wire    matmul_step1_cache_window_1_U0_adpt_sm_read;
wire   [63:0] matmul_step1_cache_window_1_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_1_U0_cache_window_sm_write;
wire    matmul_step1_cache_weight_U0_ap_start;
wire    matmul_step1_cache_weight_U0_ap_done;
wire    matmul_step1_cache_weight_U0_ap_continue;
wire    matmul_step1_cache_weight_U0_ap_idle;
wire    matmul_step1_cache_weight_U0_ap_ready;
wire    matmul_step1_cache_weight_U0_start_out;
wire    matmul_step1_cache_weight_U0_start_write;
wire    matmul_step1_cache_weight_U0_kq_sm_reshape_head1_read;
wire   [223:0] matmul_step1_cache_weight_U0_weight_sm_din;
wire    matmul_step1_cache_weight_U0_weight_sm_write;
wire    matmul_step2_mac_1_U0_ap_start;
wire    matmul_step2_mac_1_U0_ap_done;
wire    matmul_step2_mac_1_U0_ap_continue;
wire    matmul_step2_mac_1_U0_ap_idle;
wire    matmul_step2_mac_1_U0_ap_ready;
wire    matmul_step2_mac_1_U0_start_out;
wire    matmul_step2_mac_1_U0_start_write;
wire    matmul_step2_mac_1_U0_cache_window_sm_read;
wire    matmul_step2_mac_1_U0_weight_sm_read;
wire   [223:0] matmul_step2_mac_1_U0_mac_sm_din;
wire    matmul_step2_mac_1_U0_mac_sm_write;
wire    do_adapt_9_U0_ap_start;
wire    do_adapt_9_U0_ap_done;
wire    do_adapt_9_U0_ap_continue;
wire    do_adapt_9_U0_ap_idle;
wire    do_adapt_9_U0_ap_ready;
wire    do_adapt_9_U0_mac_sm_read;
wire   [31:0] do_adapt_9_U0_r_sm_head1_din;
wire    do_adapt_9_U0_r_sm_head1_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [63:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [63:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    weight_sm_full_n;
wire   [223:0] weight_sm_dout;
wire    weight_sm_empty_n;
wire    mac_sm_full_n;
wire   [223:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_do_adapt_1_U0_ap_ready;
wire    ap_sync_do_adapt_1_U0_ap_ready;
reg    ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready;
wire    ap_sync_matmul_step1_cache_weight_U0_ap_ready;
wire   [0:0] start_for_matmul_step1_cache_window_1_U0_din;
wire    start_for_matmul_step1_cache_window_1_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_1_U0_dout;
wire    start_for_matmul_step1_cache_window_1_U0_empty_n;
wire    matmul_step1_cache_window_1_U0_start_full_n;
wire    matmul_step1_cache_window_1_U0_start_write;
wire   [0:0] start_for_matmul_step2_mac_1_U0_din;
wire    start_for_matmul_step2_mac_1_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_1_U0_dout;
wire    start_for_matmul_step2_mac_1_U0_empty_n;
wire   [0:0] start_for_do_adapt_9_U0_din;
wire    start_for_do_adapt_9_U0_full_n;
wire   [0:0] start_for_do_adapt_9_U0_dout;
wire    start_for_do_adapt_9_U0_empty_n;
wire    do_adapt_9_U0_start_full_n;
wire    do_adapt_9_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_sync_reg_do_adapt_1_U0_ap_ready = 1'b0;
//#0 ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready = 1'b0;
end

ATTN0_do_adapt_1 do_adapt_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_1_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_1_U0_full_n),
    .ap_done(do_adapt_1_U0_ap_done),
    .ap_continue(do_adapt_1_U0_ap_continue),
    .ap_idle(do_adapt_1_U0_ap_idle),
    .ap_ready(do_adapt_1_U0_ap_ready),
    .start_out(do_adapt_1_U0_start_out),
    .start_write(do_adapt_1_U0_start_write),
    .qq_sm_head1_dout(qq_sm_head1_dout),
    .qq_sm_head1_empty_n(qq_sm_head1_empty_n),
    .qq_sm_head1_read(do_adapt_1_U0_qq_sm_head1_read),
    .adpt_sm_din(do_adapt_1_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_1_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window_1 matmul_step1_cache_window_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_1_U0_ap_start),
    .ap_done(matmul_step1_cache_window_1_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_1_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_1_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_1_U0_ap_ready),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_1_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_1_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_1_U0_cache_window_sm_write)
);

ATTN0_matmul_step1_cache_weight matmul_step1_cache_weight_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_weight_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_1_U0_full_n),
    .ap_done(matmul_step1_cache_weight_U0_ap_done),
    .ap_continue(matmul_step1_cache_weight_U0_ap_continue),
    .ap_idle(matmul_step1_cache_weight_U0_ap_idle),
    .ap_ready(matmul_step1_cache_weight_U0_ap_ready),
    .start_out(matmul_step1_cache_weight_U0_start_out),
    .start_write(matmul_step1_cache_weight_U0_start_write),
    .kq_sm_reshape_head1_dout(kq_sm_reshape_head1_dout),
    .kq_sm_reshape_head1_empty_n(kq_sm_reshape_head1_empty_n),
    .kq_sm_reshape_head1_read(matmul_step1_cache_weight_U0_kq_sm_reshape_head1_read),
    .weight_sm_din(matmul_step1_cache_weight_U0_weight_sm_din),
    .weight_sm_full_n(weight_sm_full_n),
    .weight_sm_write(matmul_step1_cache_weight_U0_weight_sm_write)
);

ATTN0_matmul_step2_mac_1 matmul_step2_mac_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_1_U0_ap_start),
    .start_full_n(start_for_do_adapt_9_U0_full_n),
    .ap_done(matmul_step2_mac_1_U0_ap_done),
    .ap_continue(matmul_step2_mac_1_U0_ap_continue),
    .ap_idle(matmul_step2_mac_1_U0_ap_idle),
    .ap_ready(matmul_step2_mac_1_U0_ap_ready),
    .start_out(matmul_step2_mac_1_U0_start_out),
    .start_write(matmul_step2_mac_1_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_1_U0_cache_window_sm_read),
    .weight_sm_dout(weight_sm_dout),
    .weight_sm_empty_n(weight_sm_empty_n),
    .weight_sm_read(matmul_step2_mac_1_U0_weight_sm_read),
    .mac_sm_din(matmul_step2_mac_1_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_1_U0_mac_sm_write)
);

ATTN0_do_adapt_9 do_adapt_9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_9_U0_ap_start),
    .ap_done(do_adapt_9_U0_ap_done),
    .ap_continue(do_adapt_9_U0_ap_continue),
    .ap_idle(do_adapt_9_U0_ap_idle),
    .ap_ready(do_adapt_9_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_9_U0_mac_sm_read),
    .r_sm_head1_din(do_adapt_9_U0_r_sm_head1_din),
    .r_sm_head1_full_n(r_sm_head1_full_n),
    .r_sm_head1_write(do_adapt_9_U0_r_sm_head1_write)
);

ATTN0_fifo_w64_d32_A_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_1_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_1_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_1_U0_adpt_sm_read)
);

ATTN0_fifo_w64_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_1_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_1_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_1_U0_cache_window_sm_read)
);

ATTN0_fifo_w224_d2_S_x0 weight_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_weight_U0_weight_sm_din),
    .if_full_n(weight_sm_full_n),
    .if_write(matmul_step1_cache_weight_U0_weight_sm_write),
    .if_dout(weight_sm_dout),
    .if_empty_n(weight_sm_empty_n),
    .if_read(matmul_step2_mac_1_U0_weight_sm_read)
);

ATTN0_fifo_w224_d2_S_x0 mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_1_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_1_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_9_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window_1_U0 start_for_matmul_step1_cache_window_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_1_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_1_U0_full_n),
    .if_write(do_adapt_1_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_1_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_1_U0_empty_n),
    .if_read(matmul_step1_cache_window_1_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac_1_U0 start_for_matmul_step2_mac_1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_1_U0_din),
    .if_full_n(start_for_matmul_step2_mac_1_U0_full_n),
    .if_write(matmul_step1_cache_weight_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_1_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_1_U0_empty_n),
    .if_read(matmul_step2_mac_1_U0_ap_ready)
);

ATTN0_start_for_do_adapt_9_U0 start_for_do_adapt_9_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_9_U0_din),
    .if_full_n(start_for_do_adapt_9_U0_full_n),
    .if_write(matmul_step2_mac_1_U0_start_write),
    .if_dout(start_for_do_adapt_9_U0_dout),
    .if_empty_n(start_for_do_adapt_9_U0_empty_n),
    .if_read(do_adapt_9_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_do_adapt_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_do_adapt_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_do_adapt_1_U0_ap_ready <= ap_sync_do_adapt_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= 1'b0;
    end else begin
        if (((real_start & ap_sync_ready) == 1'b1)) begin
            ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready <= ap_sync_matmul_step1_cache_weight_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_9_U0_ap_done;

assign ap_idle = (matmul_step2_mac_1_U0_ap_idle & matmul_step1_cache_window_1_U0_ap_idle & matmul_step1_cache_weight_U0_ap_idle & do_adapt_9_U0_ap_idle & do_adapt_1_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_do_adapt_1_U0_ap_ready = (do_adapt_1_U0_ap_ready | ap_sync_reg_do_adapt_1_U0_ap_ready);

assign ap_sync_done = do_adapt_9_U0_ap_done;

assign ap_sync_matmul_step1_cache_weight_U0_ap_ready = (matmul_step1_cache_weight_U0_ap_ready | ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready);

assign ap_sync_ready = (ap_sync_matmul_step1_cache_weight_U0_ap_ready & ap_sync_do_adapt_1_U0_ap_ready);

assign do_adapt_1_U0_ap_continue = 1'b1;

assign do_adapt_1_U0_ap_start = (real_start & (ap_sync_reg_do_adapt_1_U0_ap_ready ^ 1'b1));

assign do_adapt_9_U0_ap_continue = ap_continue;

assign do_adapt_9_U0_ap_start = start_for_do_adapt_9_U0_empty_n;

assign do_adapt_9_U0_start_full_n = 1'b1;

assign do_adapt_9_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_reshape_head1_read = matmul_step1_cache_weight_U0_kq_sm_reshape_head1_read;

assign matmul_step1_cache_weight_U0_ap_continue = 1'b1;

assign matmul_step1_cache_weight_U0_ap_start = (real_start & (ap_sync_reg_matmul_step1_cache_weight_U0_ap_ready ^ 1'b1));

assign matmul_step1_cache_window_1_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_1_U0_ap_start = start_for_matmul_step1_cache_window_1_U0_empty_n;

assign matmul_step1_cache_window_1_U0_start_full_n = 1'b1;

assign matmul_step1_cache_window_1_U0_start_write = 1'b0;

assign matmul_step2_mac_1_U0_ap_continue = 1'b1;

assign matmul_step2_mac_1_U0_ap_start = start_for_matmul_step2_mac_1_U0_empty_n;

assign qq_sm_head1_read = do_adapt_1_U0_qq_sm_head1_read;

assign r_sm_head1_din = do_adapt_9_U0_r_sm_head1_din;

assign r_sm_head1_write = do_adapt_9_U0_r_sm_head1_write;

assign start_for_do_adapt_9_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_1_U0_din = 1'b1;

assign start_for_matmul_step2_mac_1_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul_2 (
        aq_sm_dout,
        aq_sm_empty_n,
        aq_sm_read,
        o_sm_din,
        o_sm_full_n,
        o_sm_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] aq_sm_dout;
input   aq_sm_empty_n;
output   aq_sm_read;
output  [31:0] o_sm_din;
input   o_sm_full_n;
output   o_sm_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    do_adapt_3_U0_ap_start;
wire    do_adapt_3_U0_ap_done;
wire    do_adapt_3_U0_ap_continue;
wire    do_adapt_3_U0_ap_idle;
wire    do_adapt_3_U0_ap_ready;
wire    do_adapt_3_U0_start_out;
wire    do_adapt_3_U0_start_write;
wire    do_adapt_3_U0_aq_sm_read;
wire   [191:0] do_adapt_3_U0_adpt_sm_din;
wire    do_adapt_3_U0_adpt_sm_write;
wire    matmul_step1_cache_window_2_U0_ap_start;
wire    matmul_step1_cache_window_2_U0_ap_done;
wire    matmul_step1_cache_window_2_U0_ap_continue;
wire    matmul_step1_cache_window_2_U0_ap_idle;
wire    matmul_step1_cache_window_2_U0_ap_ready;
wire    matmul_step1_cache_window_2_U0_start_out;
wire    matmul_step1_cache_window_2_U0_start_write;
wire    matmul_step1_cache_window_2_U0_adpt_sm_read;
wire   [191:0] matmul_step1_cache_window_2_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_2_U0_cache_window_sm_write;
wire    matmul_step2_mac_2_U0_ap_start;
wire    matmul_step2_mac_2_U0_ap_done;
wire    matmul_step2_mac_2_U0_ap_continue;
wire    matmul_step2_mac_2_U0_ap_idle;
wire    matmul_step2_mac_2_U0_ap_ready;
wire    matmul_step2_mac_2_U0_start_out;
wire    matmul_step2_mac_2_U0_start_write;
wire    matmul_step2_mac_2_U0_cache_window_sm_read;
wire   [191:0] matmul_step2_mac_2_U0_mac_sm_din;
wire    matmul_step2_mac_2_U0_mac_sm_write;
wire    do_adapt_4_U0_ap_start;
wire    do_adapt_4_U0_ap_done;
wire    do_adapt_4_U0_ap_continue;
wire    do_adapt_4_U0_ap_idle;
wire    do_adapt_4_U0_ap_ready;
wire    do_adapt_4_U0_mac_sm_read;
wire   [31:0] do_adapt_4_U0_o_sm_din;
wire    do_adapt_4_U0_o_sm_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [191:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [191:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [191:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_2_U0_din;
wire    start_for_matmul_step1_cache_window_2_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_2_U0_dout;
wire    start_for_matmul_step1_cache_window_2_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_2_U0_din;
wire    start_for_matmul_step2_mac_2_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_2_U0_dout;
wire    start_for_matmul_step2_mac_2_U0_empty_n;
wire   [0:0] start_for_do_adapt_4_U0_din;
wire    start_for_do_adapt_4_U0_full_n;
wire   [0:0] start_for_do_adapt_4_U0_dout;
wire    start_for_do_adapt_4_U0_empty_n;
wire    do_adapt_4_U0_start_full_n;
wire    do_adapt_4_U0_start_write;

ATTN0_do_adapt_3 do_adapt_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_3_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_2_U0_full_n),
    .ap_done(do_adapt_3_U0_ap_done),
    .ap_continue(do_adapt_3_U0_ap_continue),
    .ap_idle(do_adapt_3_U0_ap_idle),
    .ap_ready(do_adapt_3_U0_ap_ready),
    .start_out(do_adapt_3_U0_start_out),
    .start_write(do_adapt_3_U0_start_write),
    .aq_sm_dout(aq_sm_dout),
    .aq_sm_empty_n(aq_sm_empty_n),
    .aq_sm_read(do_adapt_3_U0_aq_sm_read),
    .adpt_sm_din(do_adapt_3_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_3_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window_2 matmul_step1_cache_window_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_2_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_2_U0_full_n),
    .ap_done(matmul_step1_cache_window_2_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_2_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_2_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_2_U0_ap_ready),
    .start_out(matmul_step1_cache_window_2_U0_start_out),
    .start_write(matmul_step1_cache_window_2_U0_start_write),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_2_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_2_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_2_U0_cache_window_sm_write)
);

ATTN0_matmul_step2_mac_2 matmul_step2_mac_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_2_U0_ap_start),
    .start_full_n(start_for_do_adapt_4_U0_full_n),
    .ap_done(matmul_step2_mac_2_U0_ap_done),
    .ap_continue(matmul_step2_mac_2_U0_ap_continue),
    .ap_idle(matmul_step2_mac_2_U0_ap_idle),
    .ap_ready(matmul_step2_mac_2_U0_ap_ready),
    .start_out(matmul_step2_mac_2_U0_start_out),
    .start_write(matmul_step2_mac_2_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_2_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_2_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_2_U0_mac_sm_write)
);

ATTN0_do_adapt_4 do_adapt_4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_4_U0_ap_start),
    .ap_done(do_adapt_4_U0_ap_done),
    .ap_continue(do_adapt_4_U0_ap_continue),
    .ap_idle(do_adapt_4_U0_ap_idle),
    .ap_ready(do_adapt_4_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_4_U0_mac_sm_read),
    .o_sm_din(do_adapt_4_U0_o_sm_din),
    .o_sm_full_n(o_sm_full_n),
    .o_sm_write(do_adapt_4_U0_o_sm_write)
);

ATTN0_fifo_w192_d32_A adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_3_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_3_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_2_U0_adpt_sm_read)
);

ATTN0_fifo_w192_d2_S cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_2_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_2_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_2_U0_cache_window_sm_read)
);

ATTN0_fifo_w192_d2_S mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_2_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_2_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_4_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window_2_U0 start_for_matmul_step1_cache_window_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_2_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_2_U0_full_n),
    .if_write(do_adapt_3_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_2_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_2_U0_empty_n),
    .if_read(matmul_step1_cache_window_2_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac_2_U0 start_for_matmul_step2_mac_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_2_U0_din),
    .if_full_n(start_for_matmul_step2_mac_2_U0_full_n),
    .if_write(matmul_step1_cache_window_2_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_2_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_2_U0_empty_n),
    .if_read(matmul_step2_mac_2_U0_ap_ready)
);

ATTN0_start_for_do_adapt_4_U0 start_for_do_adapt_4_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_4_U0_din),
    .if_full_n(start_for_do_adapt_4_U0_full_n),
    .if_write(matmul_step2_mac_2_U0_start_write),
    .if_dout(start_for_do_adapt_4_U0_dout),
    .if_empty_n(start_for_do_adapt_4_U0_empty_n),
    .if_read(do_adapt_4_U0_ap_ready)
);

assign ap_done = do_adapt_4_U0_ap_done;

assign ap_idle = (matmul_step2_mac_2_U0_ap_idle & matmul_step1_cache_window_2_U0_ap_idle & do_adapt_4_U0_ap_idle & do_adapt_3_U0_ap_idle);

assign ap_ready = do_adapt_3_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_adapt_4_U0_ap_done;

assign ap_sync_ready = do_adapt_3_U0_ap_ready;

assign aq_sm_read = do_adapt_3_U0_aq_sm_read;

assign do_adapt_3_U0_ap_continue = 1'b1;

assign do_adapt_3_U0_ap_start = ap_start;

assign do_adapt_4_U0_ap_continue = ap_continue;

assign do_adapt_4_U0_ap_start = start_for_do_adapt_4_U0_empty_n;

assign do_adapt_4_U0_start_full_n = 1'b1;

assign do_adapt_4_U0_start_write = 1'b0;

assign matmul_step1_cache_window_2_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_2_U0_ap_start = start_for_matmul_step1_cache_window_2_U0_empty_n;

assign matmul_step2_mac_2_U0_ap_continue = 1'b1;

assign matmul_step2_mac_2_U0_ap_start = start_for_matmul_step2_mac_2_U0_empty_n;

assign o_sm_din = do_adapt_4_U0_o_sm_din;

assign o_sm_write = do_adapt_4_U0_o_sm_write;

assign start_for_do_adapt_4_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_2_U0_din = 1'b1;

assign start_for_matmul_step2_mac_2_U0_din = 1'b1;

endmodule //ATTN0_do_matmul_2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_matmul_3 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        lnq_sm_cp1_dout,
        lnq_sm_cp1_empty_n,
        lnq_sm_cp1_read,
        q_sm_din,
        q_sm_full_n,
        q_sm_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_cp1_dout;
input   lnq_sm_cp1_empty_n;
output   lnq_sm_cp1_read;
output  [31:0] q_sm_din;
input   q_sm_full_n;
output   q_sm_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    do_adapt_2_U0_ap_start;
wire    do_adapt_2_U0_ap_done;
wire    do_adapt_2_U0_ap_continue;
wire    do_adapt_2_U0_ap_idle;
wire    do_adapt_2_U0_ap_ready;
wire    do_adapt_2_U0_start_out;
wire    do_adapt_2_U0_start_write;
wire    do_adapt_2_U0_lnq_sm_cp1_read;
wire   [95:0] do_adapt_2_U0_adpt_sm_din;
wire    do_adapt_2_U0_adpt_sm_write;
wire    matmul_step1_cache_window_3_U0_ap_start;
wire    matmul_step1_cache_window_3_U0_ap_done;
wire    matmul_step1_cache_window_3_U0_ap_continue;
wire    matmul_step1_cache_window_3_U0_ap_idle;
wire    matmul_step1_cache_window_3_U0_ap_ready;
wire    matmul_step1_cache_window_3_U0_start_out;
wire    matmul_step1_cache_window_3_U0_start_write;
wire    matmul_step1_cache_window_3_U0_adpt_sm_read;
wire   [95:0] matmul_step1_cache_window_3_U0_cache_window_sm_din;
wire    matmul_step1_cache_window_3_U0_cache_window_sm_write;
wire    matmul_step2_mac_3_U0_ap_start;
wire    matmul_step2_mac_3_U0_ap_done;
wire    matmul_step2_mac_3_U0_ap_continue;
wire    matmul_step2_mac_3_U0_ap_idle;
wire    matmul_step2_mac_3_U0_ap_ready;
wire    matmul_step2_mac_3_U0_start_out;
wire    matmul_step2_mac_3_U0_start_write;
wire    matmul_step2_mac_3_U0_cache_window_sm_read;
wire   [383:0] matmul_step2_mac_3_U0_mac_sm_din;
wire    matmul_step2_mac_3_U0_mac_sm_write;
wire    do_adapt_8_U0_ap_start;
wire    do_adapt_8_U0_ap_done;
wire    do_adapt_8_U0_ap_continue;
wire    do_adapt_8_U0_ap_idle;
wire    do_adapt_8_U0_ap_ready;
wire    do_adapt_8_U0_mac_sm_read;
wire   [31:0] do_adapt_8_U0_q_sm_din;
wire    do_adapt_8_U0_q_sm_write;
wire    ap_sync_continue;
wire    adpt_sm_full_n;
wire   [95:0] adpt_sm_dout;
wire    adpt_sm_empty_n;
wire    cache_window_sm_full_n;
wire   [95:0] cache_window_sm_dout;
wire    cache_window_sm_empty_n;
wire    mac_sm_full_n;
wire   [383:0] mac_sm_dout;
wire    mac_sm_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_matmul_step1_cache_window_3_U0_din;
wire    start_for_matmul_step1_cache_window_3_U0_full_n;
wire   [0:0] start_for_matmul_step1_cache_window_3_U0_dout;
wire    start_for_matmul_step1_cache_window_3_U0_empty_n;
wire   [0:0] start_for_matmul_step2_mac_3_U0_din;
wire    start_for_matmul_step2_mac_3_U0_full_n;
wire   [0:0] start_for_matmul_step2_mac_3_U0_dout;
wire    start_for_matmul_step2_mac_3_U0_empty_n;
wire   [0:0] start_for_do_adapt_8_U0_din;
wire    start_for_do_adapt_8_U0_full_n;
wire   [0:0] start_for_do_adapt_8_U0_dout;
wire    start_for_do_adapt_8_U0_empty_n;
wire    do_adapt_8_U0_start_full_n;
wire    do_adapt_8_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_do_adapt_2 do_adapt_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_2_U0_ap_start),
    .start_full_n(start_for_matmul_step1_cache_window_3_U0_full_n),
    .ap_done(do_adapt_2_U0_ap_done),
    .ap_continue(do_adapt_2_U0_ap_continue),
    .ap_idle(do_adapt_2_U0_ap_idle),
    .ap_ready(do_adapt_2_U0_ap_ready),
    .start_out(do_adapt_2_U0_start_out),
    .start_write(do_adapt_2_U0_start_write),
    .lnq_sm_cp1_dout(lnq_sm_cp1_dout),
    .lnq_sm_cp1_empty_n(lnq_sm_cp1_empty_n),
    .lnq_sm_cp1_read(do_adapt_2_U0_lnq_sm_cp1_read),
    .adpt_sm_din(do_adapt_2_U0_adpt_sm_din),
    .adpt_sm_full_n(adpt_sm_full_n),
    .adpt_sm_write(do_adapt_2_U0_adpt_sm_write)
);

ATTN0_matmul_step1_cache_window_3 matmul_step1_cache_window_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step1_cache_window_3_U0_ap_start),
    .start_full_n(start_for_matmul_step2_mac_3_U0_full_n),
    .ap_done(matmul_step1_cache_window_3_U0_ap_done),
    .ap_continue(matmul_step1_cache_window_3_U0_ap_continue),
    .ap_idle(matmul_step1_cache_window_3_U0_ap_idle),
    .ap_ready(matmul_step1_cache_window_3_U0_ap_ready),
    .start_out(matmul_step1_cache_window_3_U0_start_out),
    .start_write(matmul_step1_cache_window_3_U0_start_write),
    .adpt_sm_dout(adpt_sm_dout),
    .adpt_sm_empty_n(adpt_sm_empty_n),
    .adpt_sm_read(matmul_step1_cache_window_3_U0_adpt_sm_read),
    .cache_window_sm_din(matmul_step1_cache_window_3_U0_cache_window_sm_din),
    .cache_window_sm_full_n(cache_window_sm_full_n),
    .cache_window_sm_write(matmul_step1_cache_window_3_U0_cache_window_sm_write)
);

ATTN0_matmul_step2_mac_3 matmul_step2_mac_3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(matmul_step2_mac_3_U0_ap_start),
    .start_full_n(start_for_do_adapt_8_U0_full_n),
    .ap_done(matmul_step2_mac_3_U0_ap_done),
    .ap_continue(matmul_step2_mac_3_U0_ap_continue),
    .ap_idle(matmul_step2_mac_3_U0_ap_idle),
    .ap_ready(matmul_step2_mac_3_U0_ap_ready),
    .start_out(matmul_step2_mac_3_U0_start_out),
    .start_write(matmul_step2_mac_3_U0_start_write),
    .cache_window_sm_dout(cache_window_sm_dout),
    .cache_window_sm_empty_n(cache_window_sm_empty_n),
    .cache_window_sm_read(matmul_step2_mac_3_U0_cache_window_sm_read),
    .mac_sm_din(matmul_step2_mac_3_U0_mac_sm_din),
    .mac_sm_full_n(mac_sm_full_n),
    .mac_sm_write(matmul_step2_mac_3_U0_mac_sm_write)
);

ATTN0_do_adapt_8 do_adapt_8_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(do_adapt_8_U0_ap_start),
    .ap_done(do_adapt_8_U0_ap_done),
    .ap_continue(do_adapt_8_U0_ap_continue),
    .ap_idle(do_adapt_8_U0_ap_idle),
    .ap_ready(do_adapt_8_U0_ap_ready),
    .mac_sm_dout(mac_sm_dout),
    .mac_sm_empty_n(mac_sm_empty_n),
    .mac_sm_read(do_adapt_8_U0_mac_sm_read),
    .q_sm_din(do_adapt_8_U0_q_sm_din),
    .q_sm_full_n(q_sm_full_n),
    .q_sm_write(do_adapt_8_U0_q_sm_write)
);

ATTN0_fifo_w96_d32_A_x0 adpt_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(do_adapt_2_U0_adpt_sm_din),
    .if_full_n(adpt_sm_full_n),
    .if_write(do_adapt_2_U0_adpt_sm_write),
    .if_dout(adpt_sm_dout),
    .if_empty_n(adpt_sm_empty_n),
    .if_read(matmul_step1_cache_window_3_U0_adpt_sm_read)
);

ATTN0_fifo_w96_d2_S_x0 cache_window_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step1_cache_window_3_U0_cache_window_sm_din),
    .if_full_n(cache_window_sm_full_n),
    .if_write(matmul_step1_cache_window_3_U0_cache_window_sm_write),
    .if_dout(cache_window_sm_dout),
    .if_empty_n(cache_window_sm_empty_n),
    .if_read(matmul_step2_mac_3_U0_cache_window_sm_read)
);

ATTN0_fifo_w384_d2_S_x0 mac_sm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(matmul_step2_mac_3_U0_mac_sm_din),
    .if_full_n(mac_sm_full_n),
    .if_write(matmul_step2_mac_3_U0_mac_sm_write),
    .if_dout(mac_sm_dout),
    .if_empty_n(mac_sm_empty_n),
    .if_read(do_adapt_8_U0_mac_sm_read)
);

ATTN0_start_for_matmul_step1_cache_window_3_U0 start_for_matmul_step1_cache_window_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step1_cache_window_3_U0_din),
    .if_full_n(start_for_matmul_step1_cache_window_3_U0_full_n),
    .if_write(do_adapt_2_U0_start_write),
    .if_dout(start_for_matmul_step1_cache_window_3_U0_dout),
    .if_empty_n(start_for_matmul_step1_cache_window_3_U0_empty_n),
    .if_read(matmul_step1_cache_window_3_U0_ap_ready)
);

ATTN0_start_for_matmul_step2_mac_3_U0 start_for_matmul_step2_mac_3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_matmul_step2_mac_3_U0_din),
    .if_full_n(start_for_matmul_step2_mac_3_U0_full_n),
    .if_write(matmul_step1_cache_window_3_U0_start_write),
    .if_dout(start_for_matmul_step2_mac_3_U0_dout),
    .if_empty_n(start_for_matmul_step2_mac_3_U0_empty_n),
    .if_read(matmul_step2_mac_3_U0_ap_ready)
);

ATTN0_start_for_do_adapt_8_U0 start_for_do_adapt_8_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_do_adapt_8_U0_din),
    .if_full_n(start_for_do_adapt_8_U0_full_n),
    .if_write(matmul_step2_mac_3_U0_start_write),
    .if_dout(start_for_do_adapt_8_U0_dout),
    .if_empty_n(start_for_do_adapt_8_U0_empty_n),
    .if_read(do_adapt_8_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = do_adapt_8_U0_ap_done;

assign ap_idle = (matmul_step2_mac_3_U0_ap_idle & matmul_step1_cache_window_3_U0_ap_idle & do_adapt_8_U0_ap_idle & do_adapt_2_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = do_adapt_8_U0_ap_done;

assign ap_sync_ready = do_adapt_2_U0_ap_ready;

assign do_adapt_2_U0_ap_continue = 1'b1;

assign do_adapt_2_U0_ap_start = real_start;

assign do_adapt_8_U0_ap_continue = ap_continue;

assign do_adapt_8_U0_ap_start = start_for_do_adapt_8_U0_empty_n;

assign do_adapt_8_U0_start_full_n = 1'b1;

assign do_adapt_8_U0_start_write = 1'b0;

assign internal_ap_ready = ap_sync_ready;

assign lnq_sm_cp1_read = do_adapt_2_U0_lnq_sm_cp1_read;

assign matmul_step1_cache_window_3_U0_ap_continue = 1'b1;

assign matmul_step1_cache_window_3_U0_ap_start = start_for_matmul_step1_cache_window_3_U0_empty_n;

assign matmul_step2_mac_3_U0_ap_continue = 1'b1;

assign matmul_step2_mac_3_U0_ap_start = start_for_matmul_step2_mac_3_U0_empty_n;

assign q_sm_din = do_adapt_8_U0_q_sm_din;

assign q_sm_write = do_adapt_8_U0_q_sm_write;

assign start_for_do_adapt_8_U0_din = 1'b1;

assign start_for_matmul_step1_cache_window_3_U0_din = 1'b1;

assign start_for_matmul_step2_mac_3_U0_din = 1'b1;

assign start_out = real_start;

endmodule //ATTN0_do_matmul_3
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_merge (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        a_sm_head1_dout,
        a_sm_head1_empty_n,
        a_sm_head1_read,
        a_sm_head2_dout,
        a_sm_head2_empty_n,
        a_sm_head2_read,
        a_sm_head3_dout,
        a_sm_head3_empty_n,
        a_sm_head3_read,
        a_sm_din,
        a_sm_full_n,
        a_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] a_sm_head1_dout;
input   a_sm_head1_empty_n;
output   a_sm_head1_read;
input  [31:0] a_sm_head2_dout;
input   a_sm_head2_empty_n;
output   a_sm_head2_read;
input  [31:0] a_sm_head3_dout;
input   a_sm_head3_empty_n;
output   a_sm_head3_read;
output  [31:0] a_sm_din;
input   a_sm_full_n;
output   a_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg a_sm_head1_read;
reg a_sm_head2_read;
reg a_sm_head3_read;
reg a_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    a_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln63_reg_272;
reg    a_sm_head2_blk_n;
reg    a_sm_head3_blk_n;
reg    a_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln62_reg_256;
reg   [0:0] icmp_ln62_reg_256_pp0_iter2_reg;
reg   [14:0] indvar_flatten13_reg_91;
reg   [8:0] indvar_flatten_reg_102;
reg   [1:0] h_reg_113;
reg   [6:0] cht_reg_124;
wire   [14:0] add_ln62_fu_135_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln62_fu_141_p2;
reg   [0:0] icmp_ln62_reg_256_pp0_iter1_reg;
wire   [0:0] icmp_ln63_fu_147_p2;
reg   [0:0] icmp_ln63_reg_260;
wire   [8:0] select_ln63_1_fu_159_p3;
wire   [1:0] select_ln63_fu_197_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [6:0] cht_4_fu_216_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [1:0] ap_phi_mux_h_phi_fu_117_p4;
reg   [31:0] vec_o_fu_62;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln63_1_fu_153_p2;
wire   [0:0] icmp_ln64_fu_179_p2;
wire   [0:0] xor_ln67_fu_174_p2;
wire   [1:0] select_ln67_fu_167_p3;
wire   [0:0] and_ln67_fu_185_p2;
wire   [1:0] h_6_fu_191_p2;
wire   [0:0] or_ln64_fu_211_p2;
wire   [6:0] add_ln64_fu_205_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cht_reg_124 <= cht_4_fu_216_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cht_reg_124 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln62_reg_256_pp0_iter1_reg == 1'd0))) begin
        h_reg_113 <= select_ln63_reg_272;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_113 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_141_p2 == 1'd0))) begin
        indvar_flatten13_reg_91 <= add_ln62_fu_135_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_91 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_141_p2 == 1'd0))) begin
        indvar_flatten_reg_102 <= select_ln63_1_fu_159_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_102 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((select_ln63_reg_272 == 2'd0)) begin
            vec_o_fu_62 <= a_sm_head1_dout;
        end else if ((select_ln63_reg_272 == 2'd1)) begin
            vec_o_fu_62 <= a_sm_head2_dout;
        end else if ((select_ln63_reg_272 == 2'd2)) begin
            vec_o_fu_62 <= a_sm_head3_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln62_reg_256 <= icmp_ln62_fu_141_p2;
        icmp_ln62_reg_256_pp0_iter1_reg <= icmp_ln62_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln62_reg_256_pp0_iter2_reg <= icmp_ln62_reg_256_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_141_p2 == 1'd0))) begin
        icmp_ln63_reg_260 <= icmp_ln63_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_256 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln63_reg_272 <= select_ln63_fu_197_p3;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_sm_blk_n = a_sm_full_n;
    end else begin
        a_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head1_blk_n = a_sm_head1_empty_n;
    end else begin
        a_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head1_read = 1'b1;
    end else begin
        a_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head2_blk_n = a_sm_head2_empty_n;
    end else begin
        a_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head2_read = 1'b1;
    end else begin
        a_sm_head2_read = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head3_blk_n = a_sm_head3_empty_n;
    end else begin
        a_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln63_reg_272 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        a_sm_head3_read = 1'b1;
    end else begin
        a_sm_head3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_sm_write = 1'b1;
    end else begin
        a_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln62_fu_141_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln62_reg_256_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_h_phi_fu_117_p4 = select_ln63_reg_272;
    end else begin
        ap_phi_mux_h_phi_fu_117_p4 = h_reg_113;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_sm_din = vec_o_fu_62;

assign add_ln62_fu_135_p2 = (indvar_flatten13_reg_91 + 15'd1);

assign add_ln63_1_fu_153_p2 = (indvar_flatten_reg_102 + 9'd1);

assign add_ln64_fu_205_p2 = (cht_reg_124 + 7'd1);

assign and_ln67_fu_185_p2 = (xor_ln67_fu_174_p2 & icmp_ln64_fu_179_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_full_n)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln63_reg_272 == 2'd2) & (1'b0 == a_sm_head3_empty_n)) | ((select_ln63_reg_272 == 2'd1) & (1'b0 == a_sm_head2_empty_n)) | ((select_ln63_reg_272 == 2'd0) & (1'b0 == a_sm_head1_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_full_n)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln63_reg_272 == 2'd2) & (1'b0 == a_sm_head3_empty_n)) | ((select_ln63_reg_272 == 2'd1) & (1'b0 == a_sm_head2_empty_n)) | ((select_ln63_reg_272 == 2'd0) & (1'b0 == a_sm_head1_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == a_sm_full_n)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln63_reg_272 == 2'd2) & (1'b0 == a_sm_head3_empty_n)) | ((select_ln63_reg_272 == 2'd1) & (1'b0 == a_sm_head2_empty_n)) | ((select_ln63_reg_272 == 2'd0) & (1'b0 == a_sm_head1_empty_n)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((select_ln63_reg_272 == 2'd2) & (1'b0 == a_sm_head3_empty_n)) | ((select_ln63_reg_272 == 2'd1) & (1'b0 == a_sm_head2_empty_n)) | ((select_ln63_reg_272 == 2'd0) & (1'b0 == a_sm_head1_empty_n)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln62_reg_256_pp0_iter2_reg == 1'd0) & (1'b0 == a_sm_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cht_4_fu_216_p3 = ((or_ln64_fu_211_p2[0:0] == 1'b1) ? 7'd1 : add_ln64_fu_205_p2);

assign h_6_fu_191_p2 = (select_ln67_fu_167_p3 + 2'd1);

assign icmp_ln62_fu_141_p2 = ((indvar_flatten13_reg_91 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_147_p2 = ((indvar_flatten_reg_102 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_179_p2 = ((cht_reg_124 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln64_fu_211_p2 = (icmp_ln63_reg_260 | and_ln67_fu_185_p2);

assign select_ln63_1_fu_159_p3 = ((icmp_ln63_fu_147_p2[0:0] == 1'b1) ? 9'd1 : add_ln63_1_fu_153_p2);

assign select_ln63_fu_197_p3 = ((and_ln67_fu_185_p2[0:0] == 1'b1) ? h_6_fu_191_p2 : select_ln67_fu_167_p3);

assign select_ln67_fu_167_p3 = ((icmp_ln63_reg_260[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_h_phi_fu_117_p4);

assign start_out = real_start;

assign xor_ln67_fu_174_p2 = (icmp_ln63_reg_260 ^ 1'd1);

endmodule //ATTN0_do_merge
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_quant (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        a_sm_dout,
        a_sm_empty_n,
        a_sm_read,
        aq_sm_din,
        aq_sm_full_n,
        aq_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] a_sm_dout;
input   a_sm_empty_n;
output   a_sm_read;
output  [15:0] aq_sm_din;
input   aq_sm_full_n;
output   aq_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg a_sm_read;
reg aq_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [5:0] attn_inst_quant_a_3_address0;
reg    attn_inst_quant_a_3_ce0;
wire   [2:0] attn_inst_quant_a_3_q0;
wire   [5:0] attn_inst_quant_a_3_address1;
reg    attn_inst_quant_a_3_ce1;
wire   [2:0] attn_inst_quant_a_3_q1;
reg    a_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln54_reg_329;
reg    aq_sm_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln54_reg_329_pp0_iter3_reg;
reg   [14:0] indvar_flatten_reg_120;
wire   [14:0] add_ln54_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_137_p2;
reg   [0:0] icmp_ln54_reg_329_pp0_iter1_reg;
reg   [0:0] icmp_ln54_reg_329_pp0_iter2_reg;
wire   [10:0] trunc_ln145_fu_143_p1;
reg   [10:0] trunc_ln145_reg_333;
reg   [10:0] trunc_ln145_2_reg_338;
wire   [10:0] ret_fu_157_p2;
reg   [10:0] ret_reg_343;
wire   [0:0] icmp_ln886_fu_172_p2;
reg   [0:0] icmp_ln886_reg_350;
wire   [10:0] ret_26_fu_178_p2;
reg   [10:0] ret_26_reg_355;
wire   [0:0] icmp_ln886_13_fu_193_p2;
reg   [0:0] icmp_ln886_13_reg_362;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln534_fu_249_p1;
wire   [63:0] zext_ln534_10_fu_304_p1;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] tmp_131_fu_162_p4;
wire   [2:0] tmp_134_fu_183_p4;
wire   [0:0] tmp_132_fu_215_p3;
wire   [0:0] xor_ln7_fu_222_p2;
wire   [0:0] tmp_130_fu_208_p3;
wire   [0:0] or_ln7_fu_236_p2;
wire   [5:0] select_ln7_fu_228_p3;
wire   [5:0] trunc_ln_fu_199_p4;
wire   [5:0] cursor_V_fu_241_p3;
wire   [0:0] tmp_135_fu_270_p3;
wire   [0:0] xor_ln7_1_fu_277_p2;
wire   [0:0] tmp_133_fu_263_p3;
wire   [0:0] or_ln7_1_fu_291_p2;
wire   [5:0] select_ln7_14_fu_283_p3;
wire   [5:0] trunc_ln67_1_fu_254_p4;
wire   [5:0] cursor_V_7_fu_296_p3;
wire   [10:0] tmp_fu_309_p4;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_do_quant_attn_inst_quant_a_3 #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_a_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_a_3_address0),
    .ce0(attn_inst_quant_a_3_ce0),
    .q0(attn_inst_quant_a_3_q0),
    .address1(attn_inst_quant_a_3_address1),
    .ce1(attn_inst_quant_a_3_ce1),
    .q1(attn_inst_quant_a_3_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_137_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= add_ln54_fu_131_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_120 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_329 <= icmp_ln54_fu_137_p2;
        icmp_ln54_reg_329_pp0_iter1_reg <= icmp_ln54_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln54_reg_329_pp0_iter2_reg <= icmp_ln54_reg_329_pp0_iter1_reg;
        icmp_ln54_reg_329_pp0_iter3_reg <= icmp_ln54_reg_329_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_329_pp0_iter1_reg == 1'd0))) begin
        icmp_ln886_13_reg_362 <= icmp_ln886_13_fu_193_p2;
        icmp_ln886_reg_350 <= icmp_ln886_fu_172_p2;
        ret_26_reg_355 <= ret_26_fu_178_p2;
        ret_reg_343 <= ret_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_2_reg_338 <= {{a_sm_dout[26:16]}};
        trunc_ln145_reg_333 <= trunc_ln145_fu_143_p1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_sm_blk_n = a_sm_empty_n;
    end else begin
        a_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_sm_read = 1'b1;
    end else begin
        a_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aq_sm_blk_n = aq_sm_full_n;
    end else begin
        aq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aq_sm_write = 1'b1;
    end else begin
        aq_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_a_3_ce0 = 1'b1;
    end else begin
        attn_inst_quant_a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_a_3_ce1 = 1'b1;
    end else begin
        attn_inst_quant_a_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_131_p2 = (indvar_flatten_reg_120 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (aq_sm_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == a_sm_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (aq_sm_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == a_sm_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (aq_sm_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == a_sm_empty_n)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln54_reg_329 == 1'd0) & (1'b0 == a_sm_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (aq_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign aq_sm_din = tmp_fu_309_p4;

assign attn_inst_quant_a_3_address0 = zext_ln534_10_fu_304_p1;

assign attn_inst_quant_a_3_address1 = zext_ln534_fu_249_p1;

assign cursor_V_7_fu_296_p3 = ((or_ln7_1_fu_291_p2[0:0] == 1'b1) ? select_ln7_14_fu_283_p3 : trunc_ln67_1_fu_254_p4);

assign cursor_V_fu_241_p3 = ((or_ln7_fu_236_p2[0:0] == 1'b1) ? select_ln7_fu_228_p3 : trunc_ln_fu_199_p4);

assign icmp_ln54_fu_137_p2 = ((indvar_flatten_reg_120 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln886_13_fu_193_p2 = (($signed(tmp_134_fu_183_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_172_p2 = (($signed(tmp_131_fu_162_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign or_ln7_1_fu_291_p2 = (tmp_133_fu_263_p3 | icmp_ln886_13_reg_362);

assign or_ln7_fu_236_p2 = (tmp_130_fu_208_p3 | icmp_ln886_reg_350);

assign ret_26_fu_178_p2 = (trunc_ln145_2_reg_338 + 11'd101);

assign ret_fu_157_p2 = (trunc_ln145_reg_333 + 11'd101);

assign select_ln7_14_fu_283_p3 = ((xor_ln7_1_fu_277_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_228_p3 = ((xor_ln7_fu_222_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign tmp_130_fu_208_p3 = ret_reg_343[32'd10];

assign tmp_131_fu_162_p4 = {{ret_fu_157_p2[10:8]}};

assign tmp_132_fu_215_p3 = ret_reg_343[32'd10];

assign tmp_133_fu_263_p3 = ret_26_reg_355[32'd10];

assign tmp_134_fu_183_p4 = {{ret_26_fu_178_p2[10:8]}};

assign tmp_135_fu_270_p3 = ret_26_reg_355[32'd10];

assign tmp_fu_309_p4 = {{{attn_inst_quant_a_3_q0}, {5'd0}}, {attn_inst_quant_a_3_q1}};

assign trunc_ln145_fu_143_p1 = a_sm_dout[10:0];

assign trunc_ln67_1_fu_254_p4 = {{ret_26_reg_355[7:2]}};

assign trunc_ln_fu_199_p4 = {{ret_reg_343[7:2]}};

assign xor_ln7_1_fu_277_p2 = (tmp_135_fu_270_p3 ^ 1'd1);

assign xor_ln7_fu_222_p2 = (tmp_132_fu_215_p3 ^ 1'd1);

assign zext_ln534_10_fu_304_p1 = cursor_V_7_fu_296_p3;

assign zext_ln534_fu_249_p1 = cursor_V_fu_241_p3;

endmodule //ATTN0_do_quant
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_quant119 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        i_stream_dout,
        i_stream_empty_n,
        i_stream_read,
        o_stream_din,
        o_stream_full_n,
        o_stream_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] i_stream_dout;
input   i_stream_empty_n;
output   i_stream_read;
output  [15:0] o_stream_din;
input   o_stream_full_n;
output   o_stream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg i_stream_read;
reg o_stream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [5:0] attn_inst_quant_q_3_address0;
reg    attn_inst_quant_q_3_ce0;
wire   [2:0] attn_inst_quant_q_3_q0;
wire   [5:0] attn_inst_quant_q_3_address1;
reg    attn_inst_quant_q_3_ce1;
wire   [2:0] attn_inst_quant_q_3_q1;
reg    i_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln54_reg_329;
reg    o_stream_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln54_reg_329_pp0_iter3_reg;
reg   [14:0] indvar_flatten_reg_120;
wire   [14:0] add_ln54_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_137_p2;
reg   [0:0] icmp_ln54_reg_329_pp0_iter1_reg;
reg   [0:0] icmp_ln54_reg_329_pp0_iter2_reg;
wire   [9:0] trunc_ln145_fu_143_p1;
reg   [9:0] trunc_ln145_reg_333;
reg   [9:0] trunc_ln145_3_reg_338;
wire   [9:0] ret_fu_157_p2;
reg   [9:0] ret_reg_343;
wire   [0:0] icmp_ln886_fu_172_p2;
reg   [0:0] icmp_ln886_reg_350;
wire   [9:0] ret_24_fu_178_p2;
reg   [9:0] ret_24_reg_355;
wire   [0:0] icmp_ln886_11_fu_193_p2;
reg   [0:0] icmp_ln886_11_reg_362;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln534_fu_249_p1;
wire   [63:0] zext_ln534_11_fu_304_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_119_fu_162_p4;
wire   [1:0] tmp_122_fu_183_p4;
wire   [0:0] tmp_120_fu_215_p3;
wire   [0:0] xor_ln7_fu_222_p2;
wire   [0:0] tmp_118_fu_208_p3;
wire   [0:0] or_ln7_fu_236_p2;
wire   [5:0] select_ln7_fu_228_p3;
wire   [5:0] trunc_ln_fu_199_p4;
wire   [5:0] cursor_V_fu_241_p3;
wire   [0:0] tmp_123_fu_270_p3;
wire   [0:0] xor_ln7_2_fu_277_p2;
wire   [0:0] tmp_121_fu_263_p3;
wire   [0:0] or_ln7_2_fu_291_p2;
wire   [5:0] select_ln7_8_fu_283_p3;
wire   [5:0] trunc_ln67_3_fu_254_p4;
wire   [5:0] cursor_V_5_fu_296_p3;
wire   [10:0] tmp_fu_309_p4;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_do_quant119_attn_inst_quant_q_3 #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_q_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_q_3_address0),
    .ce0(attn_inst_quant_q_3_ce0),
    .q0(attn_inst_quant_q_3_q0),
    .address1(attn_inst_quant_q_3_address1),
    .ce1(attn_inst_quant_q_3_ce1),
    .q1(attn_inst_quant_q_3_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_137_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= add_ln54_fu_131_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_120 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_329 <= icmp_ln54_fu_137_p2;
        icmp_ln54_reg_329_pp0_iter1_reg <= icmp_ln54_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln54_reg_329_pp0_iter2_reg <= icmp_ln54_reg_329_pp0_iter1_reg;
        icmp_ln54_reg_329_pp0_iter3_reg <= icmp_ln54_reg_329_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_329_pp0_iter1_reg == 1'd0))) begin
        icmp_ln886_11_reg_362 <= icmp_ln886_11_fu_193_p2;
        icmp_ln886_reg_350 <= icmp_ln886_fu_172_p2;
        ret_24_reg_355 <= ret_24_fu_178_p2;
        ret_reg_343 <= ret_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_3_reg_338 <= {{i_stream_dout[25:16]}};
        trunc_ln145_reg_333 <= trunc_ln145_fu_143_p1;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_q_3_ce0 = 1'b1;
    end else begin
        attn_inst_quant_q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_q_3_ce1 = 1'b1;
    end else begin
        attn_inst_quant_q_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_blk_n = i_stream_empty_n;
    end else begin
        i_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_read = 1'b1;
    end else begin
        i_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        o_stream_blk_n = o_stream_full_n;
    end else begin
        o_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_stream_write = 1'b1;
    end else begin
        o_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_131_p2 = (indvar_flatten_reg_120 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln54_reg_329 == 1'd0) & (i_stream_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (o_stream_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_q_3_address0 = zext_ln534_11_fu_304_p1;

assign attn_inst_quant_q_3_address1 = zext_ln534_fu_249_p1;

assign cursor_V_5_fu_296_p3 = ((or_ln7_2_fu_291_p2[0:0] == 1'b1) ? select_ln7_8_fu_283_p3 : trunc_ln67_3_fu_254_p4);

assign cursor_V_fu_241_p3 = ((or_ln7_fu_236_p2[0:0] == 1'b1) ? select_ln7_fu_228_p3 : trunc_ln_fu_199_p4);

assign icmp_ln54_fu_137_p2 = ((indvar_flatten_reg_120 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln886_11_fu_193_p2 = ((tmp_122_fu_183_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_172_p2 = ((tmp_119_fu_162_p4 == 2'd1) ? 1'b1 : 1'b0);

assign o_stream_din = tmp_fu_309_p4;

assign or_ln7_2_fu_291_p2 = (tmp_121_fu_263_p3 | icmp_ln886_11_reg_362);

assign or_ln7_fu_236_p2 = (tmp_118_fu_208_p3 | icmp_ln886_reg_350);

assign ret_24_fu_178_p2 = (trunc_ln145_3_reg_338 + 10'd88);

assign ret_fu_157_p2 = (trunc_ln145_reg_333 + 10'd88);

assign select_ln7_8_fu_283_p3 = ((xor_ln7_2_fu_277_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_228_p3 = ((xor_ln7_fu_222_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign tmp_118_fu_208_p3 = ret_reg_343[32'd9];

assign tmp_119_fu_162_p4 = {{ret_fu_157_p2[9:8]}};

assign tmp_120_fu_215_p3 = ret_reg_343[32'd9];

assign tmp_121_fu_263_p3 = ret_24_reg_355[32'd9];

assign tmp_122_fu_183_p4 = {{ret_24_fu_178_p2[9:8]}};

assign tmp_123_fu_270_p3 = ret_24_reg_355[32'd9];

assign tmp_fu_309_p4 = {{{attn_inst_quant_q_3_q0}, {5'd0}}, {attn_inst_quant_q_3_q1}};

assign trunc_ln145_fu_143_p1 = i_stream_dout[9:0];

assign trunc_ln67_3_fu_254_p4 = {{ret_24_reg_355[7:2]}};

assign trunc_ln_fu_199_p4 = {{ret_reg_343[7:2]}};

assign xor_ln7_2_fu_277_p2 = (tmp_123_fu_270_p3 ^ 1'd1);

assign xor_ln7_fu_222_p2 = (tmp_120_fu_215_p3 ^ 1'd1);

assign zext_ln534_11_fu_304_p1 = cursor_V_5_fu_296_p3;

assign zext_ln534_fu_249_p1 = cursor_V_fu_241_p3;

endmodule //ATTN0_do_quant119
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_quant119_attn_inst_quant_q_3_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 3;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_quant119_attn_inst_quant_q_3_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_quant119_attn_inst_quant_q_3(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd3;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_quant119_attn_inst_quant_q_3_rom ATTN0_do_quant119_attn_inst_quant_q_3_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_quant120 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        i_stream_dout,
        i_stream_empty_n,
        i_stream_read,
        o_stream_din,
        o_stream_full_n,
        o_stream_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] i_stream_dout;
input   i_stream_empty_n;
output   i_stream_read;
output  [15:0] o_stream_din;
input   o_stream_full_n;
output   o_stream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg i_stream_read;
reg o_stream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [5:0] attn_inst_quant_k_3_address0;
reg    attn_inst_quant_k_3_ce0;
wire   [2:0] attn_inst_quant_k_3_q0;
wire   [5:0] attn_inst_quant_k_3_address1;
reg    attn_inst_quant_k_3_ce1;
wire   [2:0] attn_inst_quant_k_3_q1;
reg    i_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln54_reg_329;
reg    o_stream_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln54_reg_329_pp0_iter3_reg;
reg   [14:0] indvar_flatten_reg_120;
wire   [14:0] add_ln54_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_137_p2;
reg   [0:0] icmp_ln54_reg_329_pp0_iter1_reg;
reg   [0:0] icmp_ln54_reg_329_pp0_iter2_reg;
wire   [9:0] trunc_ln145_fu_143_p1;
reg   [9:0] trunc_ln145_reg_333;
reg   [9:0] trunc_ln145_3_reg_338;
wire   [9:0] ret_fu_157_p2;
reg   [9:0] ret_reg_343;
wire   [0:0] icmp_ln886_fu_172_p2;
reg   [0:0] icmp_ln886_reg_350;
wire   [9:0] ret_23_fu_178_p2;
reg   [9:0] ret_23_reg_355;
wire   [0:0] icmp_ln886_10_fu_193_p2;
reg   [0:0] icmp_ln886_10_reg_362;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln534_fu_249_p1;
wire   [63:0] zext_ln534_10_fu_304_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_113_fu_162_p4;
wire   [1:0] tmp_116_fu_183_p4;
wire   [0:0] tmp_114_fu_215_p3;
wire   [0:0] xor_ln7_fu_222_p2;
wire   [0:0] tmp_112_fu_208_p3;
wire   [0:0] or_ln7_fu_236_p2;
wire   [5:0] select_ln7_fu_228_p3;
wire   [5:0] trunc_ln_fu_199_p4;
wire   [5:0] cursor_V_fu_241_p3;
wire   [0:0] tmp_117_fu_270_p3;
wire   [0:0] xor_ln7_1_fu_277_p2;
wire   [0:0] tmp_115_fu_263_p3;
wire   [0:0] or_ln7_1_fu_291_p2;
wire   [5:0] select_ln7_5_fu_283_p3;
wire   [5:0] trunc_ln67_2_fu_254_p4;
wire   [5:0] cursor_V_4_fu_296_p3;
wire   [10:0] tmp_fu_309_p4;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_do_quant120_attn_inst_quant_k_3 #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_k_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_k_3_address0),
    .ce0(attn_inst_quant_k_3_ce0),
    .q0(attn_inst_quant_k_3_q0),
    .address1(attn_inst_quant_k_3_address1),
    .ce1(attn_inst_quant_k_3_ce1),
    .q1(attn_inst_quant_k_3_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_137_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= add_ln54_fu_131_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_120 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_329 <= icmp_ln54_fu_137_p2;
        icmp_ln54_reg_329_pp0_iter1_reg <= icmp_ln54_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln54_reg_329_pp0_iter2_reg <= icmp_ln54_reg_329_pp0_iter1_reg;
        icmp_ln54_reg_329_pp0_iter3_reg <= icmp_ln54_reg_329_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_329_pp0_iter1_reg == 1'd0))) begin
        icmp_ln886_10_reg_362 <= icmp_ln886_10_fu_193_p2;
        icmp_ln886_reg_350 <= icmp_ln886_fu_172_p2;
        ret_23_reg_355 <= ret_23_fu_178_p2;
        ret_reg_343 <= ret_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_3_reg_338 <= {{i_stream_dout[25:16]}};
        trunc_ln145_reg_333 <= trunc_ln145_fu_143_p1;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_k_3_ce0 = 1'b1;
    end else begin
        attn_inst_quant_k_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_k_3_ce1 = 1'b1;
    end else begin
        attn_inst_quant_k_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_blk_n = i_stream_empty_n;
    end else begin
        i_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_read = 1'b1;
    end else begin
        i_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        o_stream_blk_n = o_stream_full_n;
    end else begin
        o_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_stream_write = 1'b1;
    end else begin
        o_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_131_p2 = (indvar_flatten_reg_120 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln54_reg_329 == 1'd0) & (i_stream_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (o_stream_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_k_3_address0 = zext_ln534_10_fu_304_p1;

assign attn_inst_quant_k_3_address1 = zext_ln534_fu_249_p1;

assign cursor_V_4_fu_296_p3 = ((or_ln7_1_fu_291_p2[0:0] == 1'b1) ? select_ln7_5_fu_283_p3 : trunc_ln67_2_fu_254_p4);

assign cursor_V_fu_241_p3 = ((or_ln7_fu_236_p2[0:0] == 1'b1) ? select_ln7_fu_228_p3 : trunc_ln_fu_199_p4);

assign icmp_ln54_fu_137_p2 = ((indvar_flatten_reg_120 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln886_10_fu_193_p2 = ((tmp_116_fu_183_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_172_p2 = ((tmp_113_fu_162_p4 == 2'd1) ? 1'b1 : 1'b0);

assign o_stream_din = tmp_fu_309_p4;

assign or_ln7_1_fu_291_p2 = (tmp_115_fu_263_p3 | icmp_ln886_10_reg_362);

assign or_ln7_fu_236_p2 = (tmp_112_fu_208_p3 | icmp_ln886_reg_350);

assign ret_23_fu_178_p2 = (trunc_ln145_3_reg_338 + 10'd85);

assign ret_fu_157_p2 = (trunc_ln145_reg_333 + 10'd85);

assign select_ln7_5_fu_283_p3 = ((xor_ln7_1_fu_277_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_228_p3 = ((xor_ln7_fu_222_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign tmp_112_fu_208_p3 = ret_reg_343[32'd9];

assign tmp_113_fu_162_p4 = {{ret_fu_157_p2[9:8]}};

assign tmp_114_fu_215_p3 = ret_reg_343[32'd9];

assign tmp_115_fu_263_p3 = ret_23_reg_355[32'd9];

assign tmp_116_fu_183_p4 = {{ret_23_fu_178_p2[9:8]}};

assign tmp_117_fu_270_p3 = ret_23_reg_355[32'd9];

assign tmp_fu_309_p4 = {{{attn_inst_quant_k_3_q0}, {5'd0}}, {attn_inst_quant_k_3_q1}};

assign trunc_ln145_fu_143_p1 = i_stream_dout[9:0];

assign trunc_ln67_2_fu_254_p4 = {{ret_23_reg_355[7:2]}};

assign trunc_ln_fu_199_p4 = {{ret_reg_343[7:2]}};

assign xor_ln7_1_fu_277_p2 = (tmp_117_fu_270_p3 ^ 1'd1);

assign xor_ln7_fu_222_p2 = (tmp_114_fu_215_p3 ^ 1'd1);

assign zext_ln534_10_fu_304_p1 = cursor_V_4_fu_296_p3;

assign zext_ln534_fu_249_p1 = cursor_V_fu_241_p3;

endmodule //ATTN0_do_quant120
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_quant120_attn_inst_quant_k_3_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 3;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_quant120_attn_inst_quant_k_3_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_quant120_attn_inst_quant_k_3(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd3;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_quant120_attn_inst_quant_k_3_rom ATTN0_do_quant120_attn_inst_quant_k_3_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_quant_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        i_stream_dout,
        i_stream_empty_n,
        i_stream_read,
        o_stream_din,
        o_stream_full_n,
        o_stream_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] i_stream_dout;
input   i_stream_empty_n;
output   i_stream_read;
output  [15:0] o_stream_din;
input   o_stream_full_n;
output   o_stream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg i_stream_read;
reg o_stream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [5:0] attn_inst_quant_v_3_address0;
reg    attn_inst_quant_v_3_ce0;
wire   [2:0] attn_inst_quant_v_3_q0;
wire   [5:0] attn_inst_quant_v_3_address1;
reg    attn_inst_quant_v_3_ce1;
wire   [2:0] attn_inst_quant_v_3_q1;
reg    i_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln54_reg_329;
reg    o_stream_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln54_reg_329_pp0_iter3_reg;
reg   [14:0] indvar_flatten_reg_120;
wire   [14:0] add_ln54_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_137_p2;
reg   [0:0] icmp_ln54_reg_329_pp0_iter1_reg;
reg   [0:0] icmp_ln54_reg_329_pp0_iter2_reg;
wire   [10:0] trunc_ln145_fu_143_p1;
reg   [10:0] trunc_ln145_reg_333;
reg   [10:0] trunc_ln145_3_reg_338;
wire   [10:0] ret_fu_157_p2;
reg   [10:0] ret_reg_343;
wire   [0:0] icmp_ln886_fu_172_p2;
reg   [0:0] icmp_ln886_reg_350;
wire   [10:0] ret_25_fu_178_p2;
reg   [10:0] ret_25_reg_355;
wire   [0:0] icmp_ln886_12_fu_193_p2;
reg   [0:0] icmp_ln886_12_reg_362;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln534_fu_249_p1;
wire   [63:0] zext_ln534_12_fu_304_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_125_fu_162_p4;
wire   [1:0] tmp_128_fu_183_p4;
wire   [0:0] tmp_126_fu_215_p3;
wire   [0:0] xor_ln7_fu_222_p2;
wire   [0:0] tmp_124_fu_208_p3;
wire   [0:0] or_ln7_fu_236_p2;
wire   [5:0] select_ln7_fu_228_p3;
wire   [5:0] trunc_ln_fu_199_p4;
wire   [5:0] cursor_V_fu_241_p3;
wire   [0:0] tmp_129_fu_270_p3;
wire   [0:0] xor_ln7_3_fu_277_p2;
wire   [0:0] tmp_127_fu_263_p3;
wire   [0:0] or_ln7_3_fu_291_p2;
wire   [5:0] select_ln7_11_fu_283_p3;
wire   [5:0] trunc_ln67_4_fu_254_p4;
wire   [5:0] cursor_V_6_fu_296_p3;
wire   [10:0] tmp_fu_309_p4;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_do_quant_1_attn_inst_quant_v_3 #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_quant_v_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_quant_v_3_address0),
    .ce0(attn_inst_quant_v_3_ce0),
    .q0(attn_inst_quant_v_3_q0),
    .address1(attn_inst_quant_v_3_address1),
    .ce1(attn_inst_quant_v_3_ce1),
    .q1(attn_inst_quant_v_3_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_137_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= add_ln54_fu_131_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_120 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln54_reg_329 <= icmp_ln54_fu_137_p2;
        icmp_ln54_reg_329_pp0_iter1_reg <= icmp_ln54_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln54_reg_329_pp0_iter2_reg <= icmp_ln54_reg_329_pp0_iter1_reg;
        icmp_ln54_reg_329_pp0_iter3_reg <= icmp_ln54_reg_329_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln54_reg_329_pp0_iter1_reg == 1'd0))) begin
        icmp_ln886_12_reg_362 <= icmp_ln886_12_fu_193_p2;
        icmp_ln886_reg_350 <= icmp_ln886_fu_172_p2;
        ret_25_reg_355 <= ret_25_fu_178_p2;
        ret_reg_343 <= ret_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_3_reg_338 <= {{i_stream_dout[26:16]}};
        trunc_ln145_reg_333 <= trunc_ln145_fu_143_p1;
    end
end

always @ (*) begin
    if ((icmp_ln54_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_v_3_ce0 = 1'b1;
    end else begin
        attn_inst_quant_v_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        attn_inst_quant_v_3_ce1 = 1'b1;
    end else begin
        attn_inst_quant_v_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_blk_n = i_stream_empty_n;
    end else begin
        i_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_read = 1'b1;
    end else begin
        i_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        o_stream_blk_n = o_stream_full_n;
    end else begin
        o_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_stream_write = 1'b1;
    end else begin
        o_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln54_fu_137_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_131_p2 = (indvar_flatten_reg_120 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (o_stream_full_n == 1'b0)) | ((icmp_ln54_reg_329 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln54_reg_329 == 1'd0) & (i_stream_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln54_reg_329_pp0_iter3_reg == 1'd0) & (o_stream_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_quant_v_3_address0 = zext_ln534_12_fu_304_p1;

assign attn_inst_quant_v_3_address1 = zext_ln534_fu_249_p1;

assign cursor_V_6_fu_296_p3 = ((or_ln7_3_fu_291_p2[0:0] == 1'b1) ? select_ln7_11_fu_283_p3 : trunc_ln67_4_fu_254_p4);

assign cursor_V_fu_241_p3 = ((or_ln7_fu_236_p2[0:0] == 1'b1) ? select_ln7_fu_228_p3 : trunc_ln_fu_199_p4);

assign icmp_ln54_fu_137_p2 = ((indvar_flatten_reg_120 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln886_12_fu_193_p2 = ((tmp_128_fu_183_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_172_p2 = ((tmp_125_fu_162_p4 == 2'd1) ? 1'b1 : 1'b0);

assign o_stream_din = tmp_fu_309_p4;

assign or_ln7_3_fu_291_p2 = (tmp_127_fu_263_p3 | icmp_ln886_12_reg_362);

assign or_ln7_fu_236_p2 = (tmp_124_fu_208_p3 | icmp_ln886_reg_350);

assign ret_25_fu_178_p2 = (trunc_ln145_3_reg_338 + 11'd162);

assign ret_fu_157_p2 = (trunc_ln145_reg_333 + 11'd162);

assign select_ln7_11_fu_283_p3 = ((xor_ln7_3_fu_277_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign select_ln7_fu_228_p3 = ((xor_ln7_fu_222_p2[0:0] == 1'b1) ? 6'd63 : 6'd0);

assign start_out = real_start;

assign tmp_124_fu_208_p3 = ret_reg_343[32'd10];

assign tmp_125_fu_162_p4 = {{ret_fu_157_p2[10:9]}};

assign tmp_126_fu_215_p3 = ret_reg_343[32'd10];

assign tmp_127_fu_263_p3 = ret_25_reg_355[32'd10];

assign tmp_128_fu_183_p4 = {{ret_25_fu_178_p2[10:9]}};

assign tmp_129_fu_270_p3 = ret_25_reg_355[32'd10];

assign tmp_fu_309_p4 = {{{attn_inst_quant_v_3_q0}, {5'd0}}, {attn_inst_quant_v_3_q1}};

assign trunc_ln145_fu_143_p1 = i_stream_dout[10:0];

assign trunc_ln67_4_fu_254_p4 = {{ret_25_reg_355[8:3]}};

assign trunc_ln_fu_199_p4 = {{ret_reg_343[8:3]}};

assign xor_ln7_3_fu_277_p2 = (tmp_129_fu_270_p3 ^ 1'd1);

assign xor_ln7_fu_222_p2 = (tmp_126_fu_215_p3 ^ 1'd1);

assign zext_ln534_12_fu_304_p1 = cursor_V_6_fu_296_p3;

assign zext_ln534_fu_249_p1 = cursor_V_fu_241_p3;

endmodule //ATTN0_do_quant_1
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_quant_1_attn_inst_quant_v_3_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 3;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_quant_1_attn_inst_quant_v_3_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_quant_1_attn_inst_quant_v_3(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd3;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_quant_1_attn_inst_quant_v_3_rom ATTN0_do_quant_1_attn_inst_quant_v_3_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_do_quant_attn_inst_quant_a_3_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 3;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_quant_attn_inst_quant_a_3_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_quant_attn_inst_quant_a_3(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd3;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_quant_attn_inst_quant_a_3_rom ATTN0_do_quant_attn_inst_quant_a_3_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape123 (
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack143_U0_ap_start;
wire    unpack143_U0_ap_done;
wire    unpack143_U0_ap_continue;
wire    unpack143_U0_ap_idle;
wire    unpack143_U0_ap_ready;
wire    unpack143_U0_start_out;
wire    unpack143_U0_start_write;
wire    unpack143_U0_kq_sm_head1_read;
wire   [2:0] unpack143_U0_unpacked_stream1_din;
wire    unpack143_U0_unpacked_stream1_write;
wire    reorder144_U0_ap_start;
wire    reorder144_U0_ap_done;
wire    reorder144_U0_ap_continue;
wire    reorder144_U0_ap_idle;
wire    reorder144_U0_ap_ready;
wire    reorder144_U0_unpacked_stream1_read;
wire   [223:0] reorder144_U0_kq_sm_reshape_head1_din;
wire    reorder144_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder144_U0_din;
wire    start_for_reorder144_U0_full_n;
wire   [0:0] start_for_reorder144_U0_dout;
wire    start_for_reorder144_U0_empty_n;
wire    reorder144_U0_start_full_n;
wire    reorder144_U0_start_write;

ATTN0_unpack143 unpack143_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack143_U0_ap_start),
    .start_full_n(start_for_reorder144_U0_full_n),
    .ap_done(unpack143_U0_ap_done),
    .ap_continue(unpack143_U0_ap_continue),
    .ap_idle(unpack143_U0_ap_idle),
    .ap_ready(unpack143_U0_ap_ready),
    .start_out(unpack143_U0_start_out),
    .start_write(unpack143_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack143_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack143_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack143_U0_unpacked_stream1_write)
);

ATTN0_reorder144 reorder144_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder144_U0_ap_start),
    .ap_done(reorder144_U0_ap_done),
    .ap_continue(reorder144_U0_ap_continue),
    .ap_idle(reorder144_U0_ap_idle),
    .ap_ready(reorder144_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder144_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder144_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder144_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack143_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack143_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder144_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder144_U0 start_for_reorder144_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder144_U0_din),
    .if_full_n(start_for_reorder144_U0_full_n),
    .if_write(unpack143_U0_start_write),
    .if_dout(start_for_reorder144_U0_dout),
    .if_empty_n(start_for_reorder144_U0_empty_n),
    .if_read(reorder144_U0_ap_ready)
);

assign ap_done = reorder144_U0_ap_done;

assign ap_idle = (unpack143_U0_ap_idle & reorder144_U0_ap_idle);

assign ap_ready = unpack143_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder144_U0_ap_done;

assign ap_sync_ready = unpack143_U0_ap_ready;

assign kq_sm_head1_read = unpack143_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder144_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder144_U0_kq_sm_reshape_head1_write;

assign reorder144_U0_ap_continue = ap_continue;

assign reorder144_U0_ap_start = start_for_reorder144_U0_empty_n;

assign reorder144_U0_start_full_n = 1'b1;

assign reorder144_U0_start_write = 1'b0;

assign start_for_reorder144_U0_din = 1'b1;

assign unpack143_U0_ap_continue = 1'b1;

assign unpack143_U0_ap_start = ap_start;

endmodule //ATTN0_do_reshape123
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape124 (
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack145_U0_ap_start;
wire    unpack145_U0_ap_done;
wire    unpack145_U0_ap_continue;
wire    unpack145_U0_ap_idle;
wire    unpack145_U0_ap_ready;
wire    unpack145_U0_start_out;
wire    unpack145_U0_start_write;
wire    unpack145_U0_kq_sm_head1_read;
wire   [2:0] unpack145_U0_unpacked_stream1_din;
wire    unpack145_U0_unpacked_stream1_write;
wire    reorder146_U0_ap_start;
wire    reorder146_U0_ap_done;
wire    reorder146_U0_ap_continue;
wire    reorder146_U0_ap_idle;
wire    reorder146_U0_ap_ready;
wire    reorder146_U0_unpacked_stream1_read;
wire   [223:0] reorder146_U0_kq_sm_reshape_head1_din;
wire    reorder146_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder146_U0_din;
wire    start_for_reorder146_U0_full_n;
wire   [0:0] start_for_reorder146_U0_dout;
wire    start_for_reorder146_U0_empty_n;
wire    reorder146_U0_start_full_n;
wire    reorder146_U0_start_write;

ATTN0_unpack145 unpack145_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack145_U0_ap_start),
    .start_full_n(start_for_reorder146_U0_full_n),
    .ap_done(unpack145_U0_ap_done),
    .ap_continue(unpack145_U0_ap_continue),
    .ap_idle(unpack145_U0_ap_idle),
    .ap_ready(unpack145_U0_ap_ready),
    .start_out(unpack145_U0_start_out),
    .start_write(unpack145_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack145_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack145_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack145_U0_unpacked_stream1_write)
);

ATTN0_reorder146 reorder146_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder146_U0_ap_start),
    .ap_done(reorder146_U0_ap_done),
    .ap_continue(reorder146_U0_ap_continue),
    .ap_idle(reorder146_U0_ap_idle),
    .ap_ready(reorder146_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder146_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder146_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder146_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S_x unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack145_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack145_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder146_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder146_U0 start_for_reorder146_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder146_U0_din),
    .if_full_n(start_for_reorder146_U0_full_n),
    .if_write(unpack145_U0_start_write),
    .if_dout(start_for_reorder146_U0_dout),
    .if_empty_n(start_for_reorder146_U0_empty_n),
    .if_read(reorder146_U0_ap_ready)
);

assign ap_done = reorder146_U0_ap_done;

assign ap_idle = (unpack145_U0_ap_idle & reorder146_U0_ap_idle);

assign ap_ready = unpack145_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder146_U0_ap_done;

assign ap_sync_ready = unpack145_U0_ap_ready;

assign kq_sm_head1_read = unpack145_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder146_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder146_U0_kq_sm_reshape_head1_write;

assign reorder146_U0_ap_continue = ap_continue;

assign reorder146_U0_ap_start = start_for_reorder146_U0_empty_n;

assign reorder146_U0_start_full_n = 1'b1;

assign reorder146_U0_start_write = 1'b0;

assign start_for_reorder146_U0_din = 1'b1;

assign unpack145_U0_ap_continue = 1'b1;

assign unpack145_U0_ap_start = ap_start;

endmodule //ATTN0_do_reshape124
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape125 (
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    unpack147_U0_ap_start;
wire    unpack147_U0_ap_done;
wire    unpack147_U0_ap_continue;
wire    unpack147_U0_ap_idle;
wire    unpack147_U0_ap_ready;
wire    unpack147_U0_start_out;
wire    unpack147_U0_start_write;
wire    unpack147_U0_kq_sm_head1_read;
wire   [2:0] unpack147_U0_unpacked_stream1_din;
wire    unpack147_U0_unpacked_stream1_write;
wire    reorder148_U0_ap_start;
wire    reorder148_U0_ap_done;
wire    reorder148_U0_ap_continue;
wire    reorder148_U0_ap_idle;
wire    reorder148_U0_ap_ready;
wire    reorder148_U0_unpacked_stream1_read;
wire   [223:0] reorder148_U0_kq_sm_reshape_head1_din;
wire    reorder148_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder148_U0_din;
wire    start_for_reorder148_U0_full_n;
wire   [0:0] start_for_reorder148_U0_dout;
wire    start_for_reorder148_U0_empty_n;
wire    reorder148_U0_start_full_n;
wire    reorder148_U0_start_write;

ATTN0_unpack147 unpack147_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack147_U0_ap_start),
    .start_full_n(start_for_reorder148_U0_full_n),
    .ap_done(unpack147_U0_ap_done),
    .ap_continue(unpack147_U0_ap_continue),
    .ap_idle(unpack147_U0_ap_idle),
    .ap_ready(unpack147_U0_ap_ready),
    .start_out(unpack147_U0_start_out),
    .start_write(unpack147_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack147_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack147_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack147_U0_unpacked_stream1_write)
);

ATTN0_reorder148 reorder148_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder148_U0_ap_start),
    .ap_done(reorder148_U0_ap_done),
    .ap_continue(reorder148_U0_ap_continue),
    .ap_idle(reorder148_U0_ap_idle),
    .ap_ready(reorder148_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder148_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder148_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder148_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S_x0 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack147_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack147_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder148_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder148_U0 start_for_reorder148_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder148_U0_din),
    .if_full_n(start_for_reorder148_U0_full_n),
    .if_write(unpack147_U0_start_write),
    .if_dout(start_for_reorder148_U0_dout),
    .if_empty_n(start_for_reorder148_U0_empty_n),
    .if_read(reorder148_U0_ap_ready)
);

assign ap_done = reorder148_U0_ap_done;

assign ap_idle = (unpack147_U0_ap_idle & reorder148_U0_ap_idle);

assign ap_ready = unpack147_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder148_U0_ap_done;

assign ap_sync_ready = unpack147_U0_ap_ready;

assign kq_sm_head1_read = unpack147_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder148_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder148_U0_kq_sm_reshape_head1_write;

assign reorder148_U0_ap_continue = ap_continue;

assign reorder148_U0_ap_start = start_for_reorder148_U0_empty_n;

assign reorder148_U0_start_full_n = 1'b1;

assign reorder148_U0_start_write = 1'b0;

assign start_for_reorder148_U0_din = 1'b1;

assign unpack147_U0_ap_continue = 1'b1;

assign unpack147_U0_ap_start = ap_start;

endmodule //ATTN0_do_reshape125
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape130 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack159_U0_ap_start;
wire    unpack159_U0_ap_done;
wire    unpack159_U0_ap_continue;
wire    unpack159_U0_ap_idle;
wire    unpack159_U0_ap_ready;
wire    unpack159_U0_start_out;
wire    unpack159_U0_start_write;
wire    unpack159_U0_kq_sm_head1_read;
wire   [2:0] unpack159_U0_unpacked_stream1_din;
wire    unpack159_U0_unpacked_stream1_write;
wire    reorder160_U0_ap_start;
wire    reorder160_U0_ap_done;
wire    reorder160_U0_ap_continue;
wire    reorder160_U0_ap_idle;
wire    reorder160_U0_ap_ready;
wire    reorder160_U0_unpacked_stream1_read;
wire   [223:0] reorder160_U0_kq_sm_reshape_head1_din;
wire    reorder160_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder160_U0_din;
wire    start_for_reorder160_U0_full_n;
wire   [0:0] start_for_reorder160_U0_dout;
wire    start_for_reorder160_U0_empty_n;
wire    reorder160_U0_start_full_n;
wire    reorder160_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_unpack159 unpack159_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack159_U0_ap_start),
    .start_full_n(start_for_reorder160_U0_full_n),
    .ap_done(unpack159_U0_ap_done),
    .ap_continue(unpack159_U0_ap_continue),
    .ap_idle(unpack159_U0_ap_idle),
    .ap_ready(unpack159_U0_ap_ready),
    .start_out(unpack159_U0_start_out),
    .start_write(unpack159_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack159_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack159_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack159_U0_unpacked_stream1_write)
);

ATTN0_reorder160 reorder160_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder160_U0_ap_start),
    .ap_done(reorder160_U0_ap_done),
    .ap_continue(reorder160_U0_ap_continue),
    .ap_idle(reorder160_U0_ap_idle),
    .ap_ready(reorder160_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder160_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder160_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder160_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S_x1 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack159_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack159_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder160_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder160_U0 start_for_reorder160_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder160_U0_din),
    .if_full_n(start_for_reorder160_U0_full_n),
    .if_write(unpack159_U0_start_write),
    .if_dout(start_for_reorder160_U0_dout),
    .if_empty_n(start_for_reorder160_U0_empty_n),
    .if_read(reorder160_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder160_U0_ap_done;

assign ap_idle = (unpack159_U0_ap_idle & reorder160_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder160_U0_ap_done;

assign ap_sync_ready = unpack159_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_head1_read = unpack159_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder160_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder160_U0_kq_sm_reshape_head1_write;

assign reorder160_U0_ap_continue = ap_continue;

assign reorder160_U0_ap_start = start_for_reorder160_U0_empty_n;

assign reorder160_U0_start_full_n = 1'b1;

assign reorder160_U0_start_write = 1'b0;

assign start_for_reorder160_U0_din = 1'b1;

assign start_out = real_start;

assign unpack159_U0_ap_continue = 1'b1;

assign unpack159_U0_ap_start = real_start;

endmodule //ATTN0_do_reshape130
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape131 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack161_U0_ap_start;
wire    unpack161_U0_ap_done;
wire    unpack161_U0_ap_continue;
wire    unpack161_U0_ap_idle;
wire    unpack161_U0_ap_ready;
wire    unpack161_U0_start_out;
wire    unpack161_U0_start_write;
wire    unpack161_U0_kq_sm_head1_read;
wire   [2:0] unpack161_U0_unpacked_stream1_din;
wire    unpack161_U0_unpacked_stream1_write;
wire    reorder162_U0_ap_start;
wire    reorder162_U0_ap_done;
wire    reorder162_U0_ap_continue;
wire    reorder162_U0_ap_idle;
wire    reorder162_U0_ap_ready;
wire    reorder162_U0_unpacked_stream1_read;
wire   [223:0] reorder162_U0_kq_sm_reshape_head1_din;
wire    reorder162_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder162_U0_din;
wire    start_for_reorder162_U0_full_n;
wire   [0:0] start_for_reorder162_U0_dout;
wire    start_for_reorder162_U0_empty_n;
wire    reorder162_U0_start_full_n;
wire    reorder162_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_unpack161 unpack161_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack161_U0_ap_start),
    .start_full_n(start_for_reorder162_U0_full_n),
    .ap_done(unpack161_U0_ap_done),
    .ap_continue(unpack161_U0_ap_continue),
    .ap_idle(unpack161_U0_ap_idle),
    .ap_ready(unpack161_U0_ap_ready),
    .start_out(unpack161_U0_start_out),
    .start_write(unpack161_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack161_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack161_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack161_U0_unpacked_stream1_write)
);

ATTN0_reorder162 reorder162_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder162_U0_ap_start),
    .ap_done(reorder162_U0_ap_done),
    .ap_continue(reorder162_U0_ap_continue),
    .ap_idle(reorder162_U0_ap_idle),
    .ap_ready(reorder162_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder162_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder162_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder162_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S_x2 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack161_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack161_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder162_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder162_U0 start_for_reorder162_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder162_U0_din),
    .if_full_n(start_for_reorder162_U0_full_n),
    .if_write(unpack161_U0_start_write),
    .if_dout(start_for_reorder162_U0_dout),
    .if_empty_n(start_for_reorder162_U0_empty_n),
    .if_read(reorder162_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder162_U0_ap_done;

assign ap_idle = (unpack161_U0_ap_idle & reorder162_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder162_U0_ap_done;

assign ap_sync_ready = unpack161_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_head1_read = unpack161_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder162_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder162_U0_kq_sm_reshape_head1_write;

assign reorder162_U0_ap_continue = ap_continue;

assign reorder162_U0_ap_start = start_for_reorder162_U0_empty_n;

assign reorder162_U0_start_full_n = 1'b1;

assign reorder162_U0_start_write = 1'b0;

assign start_for_reorder162_U0_din = 1'b1;

assign start_out = real_start;

assign unpack161_U0_ap_continue = 1'b1;

assign unpack161_U0_ap_start = real_start;

endmodule //ATTN0_do_reshape131
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_reshape132 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    unpack163_U0_ap_start;
wire    unpack163_U0_ap_done;
wire    unpack163_U0_ap_continue;
wire    unpack163_U0_ap_idle;
wire    unpack163_U0_ap_ready;
wire    unpack163_U0_start_out;
wire    unpack163_U0_start_write;
wire    unpack163_U0_kq_sm_head1_read;
wire   [2:0] unpack163_U0_unpacked_stream1_din;
wire    unpack163_U0_unpacked_stream1_write;
wire    reorder164_U0_ap_start;
wire    reorder164_U0_ap_done;
wire    reorder164_U0_ap_continue;
wire    reorder164_U0_ap_idle;
wire    reorder164_U0_ap_ready;
wire    reorder164_U0_unpacked_stream1_read;
wire   [223:0] reorder164_U0_kq_sm_reshape_head1_din;
wire    reorder164_U0_kq_sm_reshape_head1_write;
wire    ap_sync_continue;
wire    unpacked_stream_full_n;
wire   [2:0] unpacked_stream_dout;
wire    unpacked_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_reorder164_U0_din;
wire    start_for_reorder164_U0_full_n;
wire   [0:0] start_for_reorder164_U0_dout;
wire    start_for_reorder164_U0_empty_n;
wire    reorder164_U0_start_full_n;
wire    reorder164_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
end

ATTN0_unpack163 unpack163_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(unpack163_U0_ap_start),
    .start_full_n(start_for_reorder164_U0_full_n),
    .ap_done(unpack163_U0_ap_done),
    .ap_continue(unpack163_U0_ap_continue),
    .ap_idle(unpack163_U0_ap_idle),
    .ap_ready(unpack163_U0_ap_ready),
    .start_out(unpack163_U0_start_out),
    .start_write(unpack163_U0_start_write),
    .kq_sm_head1_dout(kq_sm_head1_dout),
    .kq_sm_head1_empty_n(kq_sm_head1_empty_n),
    .kq_sm_head1_read(unpack163_U0_kq_sm_head1_read),
    .unpacked_stream1_din(unpack163_U0_unpacked_stream1_din),
    .unpacked_stream1_full_n(unpacked_stream_full_n),
    .unpacked_stream1_write(unpack163_U0_unpacked_stream1_write)
);

ATTN0_reorder164 reorder164_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(reorder164_U0_ap_start),
    .ap_done(reorder164_U0_ap_done),
    .ap_continue(reorder164_U0_ap_continue),
    .ap_idle(reorder164_U0_ap_idle),
    .ap_ready(reorder164_U0_ap_ready),
    .unpacked_stream1_dout(unpacked_stream_dout),
    .unpacked_stream1_empty_n(unpacked_stream_empty_n),
    .unpacked_stream1_read(reorder164_U0_unpacked_stream1_read),
    .kq_sm_reshape_head1_din(reorder164_U0_kq_sm_reshape_head1_din),
    .kq_sm_reshape_head1_full_n(kq_sm_reshape_head1_full_n),
    .kq_sm_reshape_head1_write(reorder164_U0_kq_sm_reshape_head1_write)
);

ATTN0_fifo_w3_d2_S_x3 unpacked_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(unpack163_U0_unpacked_stream1_din),
    .if_full_n(unpacked_stream_full_n),
    .if_write(unpack163_U0_unpacked_stream1_write),
    .if_dout(unpacked_stream_dout),
    .if_empty_n(unpacked_stream_empty_n),
    .if_read(reorder164_U0_unpacked_stream1_read)
);

ATTN0_start_for_reorder164_U0 start_for_reorder164_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_reorder164_U0_din),
    .if_full_n(start_for_reorder164_U0_full_n),
    .if_write(unpack163_U0_start_write),
    .if_dout(start_for_reorder164_U0_dout),
    .if_empty_n(start_for_reorder164_U0_empty_n),
    .if_read(reorder164_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = reorder164_U0_ap_done;

assign ap_idle = (unpack163_U0_ap_idle & reorder164_U0_ap_idle);

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = reorder164_U0_ap_done;

assign ap_sync_ready = unpack163_U0_ap_ready;

assign internal_ap_ready = ap_sync_ready;

assign kq_sm_head1_read = unpack163_U0_kq_sm_head1_read;

assign kq_sm_reshape_head1_din = reorder164_U0_kq_sm_reshape_head1_din;

assign kq_sm_reshape_head1_write = reorder164_U0_kq_sm_reshape_head1_write;

assign reorder164_U0_ap_continue = ap_continue;

assign reorder164_U0_ap_start = start_for_reorder164_U0_empty_n;

assign reorder164_U0_start_full_n = 1'b1;

assign reorder164_U0_start_write = 1'b0;

assign start_for_reorder164_U0_din = 1'b1;

assign start_out = real_start;

assign unpack163_U0_ap_continue = 1'b1;

assign unpack163_U0_ap_start = real_start;

endmodule //ATTN0_do_reshape132
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head1_dout,
        r_sm_head1_empty_n,
        r_sm_head1_read,
        rq_sm_head1_din,
        rq_sm_head1_full_n,
        rq_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state15 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] r_sm_head1_dout;
input   r_sm_head1_empty_n;
output   r_sm_head1_read;
output  [15:0] rq_sm_head1_din;
input   rq_sm_head1_full_n;
output   rq_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_sm_head1_read;
reg rq_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] attn_inst_softmax_qk_head3_buffer_V_address0;
reg    attn_inst_softmax_qk_head3_buffer_V_ce0;
reg    attn_inst_softmax_qk_head3_buffer_V_we0;
wire   [19:0] attn_inst_softmax_qk_head3_buffer_V_d0;
wire   [7:0] attn_inst_softmax_qk_head3_buffer_V_address1;
reg    attn_inst_softmax_qk_head3_buffer_V_ce1;
wire   [19:0] attn_inst_softmax_qk_head3_buffer_V_q1;
wire   [4:0] attn_inst_softmax_qk_head3_exp_table_V_address0;
reg    attn_inst_softmax_qk_head3_exp_table_V_ce0;
wire   [15:0] attn_inst_softmax_qk_head3_exp_table_V_q0;
wire   [4:0] attn_inst_softmax_qk_head3_exp_table_V_address1;
reg    attn_inst_softmax_qk_head3_exp_table_V_ce1;
wire   [15:0] attn_inst_softmax_qk_head3_exp_table_V_q1;
wire   [7:0] attn_inst_softmax_qk_head3_exp_score_V_address0;
reg    attn_inst_softmax_qk_head3_exp_score_V_ce0;
reg    attn_inst_softmax_qk_head3_exp_score_V_we0;
wire   [31:0] attn_inst_softmax_qk_head3_exp_score_V_d0;
wire   [7:0] attn_inst_softmax_qk_head3_exp_score_V_address1;
reg    attn_inst_softmax_qk_head3_exp_score_V_ce1;
wire   [31:0] attn_inst_softmax_qk_head3_exp_score_V_q1;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_two_V_address0;
reg    attn_inst_softmax_qk_head3_recip_table_two_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_two_V_q0;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_two_V_address1;
reg    attn_inst_softmax_qk_head3_recip_table_two_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_two_V_q1;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_one_V_address0;
reg    attn_inst_softmax_qk_head3_recip_table_one_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_one_V_q0;
wire   [5:0] attn_inst_softmax_qk_head3_recip_table_one_V_address1;
reg    attn_inst_softmax_qk_head3_recip_table_one_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head3_recip_table_one_V_q1;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln113_5_reg_1279;
reg    rq_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter12;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter11_reg;
reg   [15:0] indvar_flatten48_reg_340;
reg   [9:0] indvar_flatten_reg_351;
reg   [7:0] ct_reg_362;
reg   [1:0] state_reg_373;
wire   [15:0] add_ln112_fu_403_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state6_pp0_stage0_iter7;
wire    ap_block_state7_pp0_stage0_iter8;
wire    ap_block_state8_pp0_stage0_iter9;
wire    ap_block_state9_pp0_stage0_iter10;
wire    ap_block_state10_pp0_stage0_iter11;
reg    ap_block_state11_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln112_fu_409_p2;
reg   [0:0] icmp_ln112_reg_1252;
reg   [0:0] icmp_ln112_reg_1252_pp0_iter1_reg;
wire   [0:0] icmp_ln113_fu_415_p2;
reg   [0:0] icmp_ln113_reg_1256;
wire   [0:0] and_ln112_fu_433_p2;
reg   [0:0] and_ln112_reg_1261;
wire   [7:0] select_ln113_fu_445_p3;
reg   [7:0] select_ln113_reg_1266;
wire   [9:0] select_ln113_6_fu_459_p3;
wire   [1:0] select_ln113_5_fu_480_p3;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter2_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter3_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter4_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter5_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter6_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter7_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter8_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter9_reg;
reg   [1:0] select_ln113_5_reg_1279_pp0_iter10_reg;
wire   [63:0] zext_ln114_fu_487_p1;
reg   [63:0] zext_ln114_reg_1284;
reg   [63:0] zext_ln114_reg_1284_pp0_iter2_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter4_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter5_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter6_reg;
wire   [0:0] grp_fu_384_p2;
reg   [0:0] icmp_ln149_reg_1291;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter2_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter4_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter5_reg;
wire   [0:0] icmp_ln169_fu_491_p2;
reg   [0:0] icmp_ln169_reg_1302;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter2_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter5_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter6_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter7_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter8_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter9_reg;
reg   [0:0] icmp_ln124_reg_1306;
reg   [0:0] icmp_ln124_reg_1306_pp0_iter2_reg;
wire   [7:0] add_ln114_fu_496_p2;
wire   [9:0] trunc_ln215_fu_501_p1;
reg   [9:0] trunc_ln215_reg_1319;
reg   [9:0] tmp_6_reg_1324;
wire   [9:0] max_val_13_fu_515_p1;
reg   [9:0] max_val_13_reg_1329;
wire   [9:0] max_val_7_fu_519_p4;
reg   [9:0] max_val_7_reg_1337;
wire   [4:0] cursor_V_fu_581_p3;
reg   [4:0] cursor_V_reg_1345;
wire   [4:0] cursor_V_3_fu_618_p3;
reg   [4:0] cursor_V_3_reg_1350;
wire   [0:0] icmp_ln886_8_fu_727_p2;
reg   [0:0] icmp_ln886_8_reg_1360;
reg   [0:0] icmp_ln886_9_reg_1469;
reg   [0:0] in_two_0_2_load_reg_1406;
reg   [0:0] in_two_0_2_load_reg_1406_pp0_iter10_reg;
reg   [3:0] tmp_106_reg_1413;
wire   [2:0] trunc_ln8_fu_961_p1;
reg   [2:0] trunc_ln8_reg_1418;
reg   [3:0] tmp_107_reg_1423;
wire   [2:0] trunc_ln8_3_fu_1037_p1;
reg   [2:0] trunc_ln8_3_reg_1428;
reg   [15:0] attn_inst_softmax_qk_head3_exp_table_V_load_reg_1443;
reg    ap_enable_reg_pp0_iter5;
reg   [15:0] attn_inst_softmax_qk_head3_exp_table_V_load_1_reg_1448;
wire   [22:0] add_ln691_fu_1120_p2;
reg   [22:0] add_ln691_reg_1453;
wire   [22:0] add_ln691_1_fu_1130_p2;
reg   [22:0] add_ln691_1_reg_1459;
reg   [8:0] trunc_ln1497_8_reg_1464;
wire   [0:0] icmp_ln886_9_fu_1163_p2;
reg   [0:0] icmp_ln886_9_reg_1469_pp0_iter7_reg;
reg   [0:0] icmp_ln886_9_reg_1469_pp0_iter8_reg;
reg   [0:0] icmp_ln886_9_reg_1469_pp0_iter9_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg   [7:0] ap_phi_mux_ct_phi_fu_366_p4;
reg   [1:0] ap_phi_mux_state_phi_fu_377_p4;
wire   [63:0] zext_ln534_8_fu_764_p1;
wire   [63:0] zext_ln534_6_fu_769_p1;
wire   [63:0] zext_ln534_9_fu_805_p1;
wire   [63:0] zext_ln534_7_fu_810_p1;
wire   [63:0] zext_ln534_fu_1080_p1;
wire   [63:0] zext_ln534_1_fu_1084_p1;
reg   [9:0] max_val_fu_162;
wire   [9:0] max_val_14_fu_655_p3;
reg   [9:0] max_val_12_fu_166;
wire   [9:0] max_val_15_fu_671_p3;
reg   [15:0] empty_fu_170;
wire   [15:0] zext_ln139_fu_662_p1;
reg   [15:0] empty_189_fu_174;
wire   [15:0] zext_ln139_3_fu_678_p1;
reg   [7:0] recip_val_V_0_3_fu_178;
wire   [7:0] recip_val_V_0_fu_850_p3;
reg   [7:0] recip_val_V_1_2_fu_182;
reg   [0:0] in_two_0_2_fu_186;
reg   [0:0] in_two_1_2_fu_190;
reg   [22:0] empty_190_fu_194;
reg   [22:0] empty_191_fu_198;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln114_fu_427_p2;
wire   [0:0] xor_ln112_fu_421_p2;
wire   [0:0] or_ln113_fu_439_p2;
wire   [9:0] add_ln113_3_fu_453_p2;
wire   [1:0] select_ln112_fu_467_p3;
wire   [1:0] state_5_fu_474_p2;
wire   [9:0] ret_21_fu_552_p2;
wire   [9:0] ret_17_fu_557_p2;
wire   [0:0] tmp_fu_573_p3;
wire   [4:0] trunc_ln_fu_563_p4;
wire   [9:0] ret_22_fu_589_p2;
wire   [9:0] ret_19_fu_594_p2;
wire   [0:0] tmp_105_fu_610_p3;
wire   [4:0] trunc_ln162_3_fu_600_p4;
wire   [9:0] trunc_ln114_3_fu_548_p1;
wire   [9:0] trunc_ln114_fu_544_p1;
wire   [9:0] select_ln124_9_fu_644_p3;
wire   [0:0] icmp_ln878_fu_650_p2;
wire   [9:0] select_ln124_7_fu_632_p3;
wire   [9:0] select_ln124_8_fu_638_p3;
wire   [0:0] icmp_ln878_1_fu_666_p2;
wire   [9:0] select_ln124_fu_626_p3;
wire   [22:0] add_ln1346_fu_702_p2;
wire   [2:0] tmp_108_fu_717_p4;
wire   [22:0] add_ln1346_9_fu_733_p2;
wire   [0:0] tmp_109_fu_748_p3;
wire   [4:0] trunc_ln4_fu_738_p4;
wire   [4:0] select_ln7_fu_756_p3;
wire   [8:0] trunc_ln3_fu_707_p4;
wire   [22:0] add_ln1346_12_fu_774_p2;
wire   [0:0] tmp_111_fu_789_p3;
wire   [4:0] trunc_ln878_3_fu_779_p4;
wire   [4:0] select_ln7_3_fu_797_p3;
wire   [15:0] trunc_ln215_11_fu_820_p1;
wire   [15:0] tmp_9_fu_832_p4;
wire   [22:0] grp_fu_1169_p2;
wire   [23:0] select_ln1346_fu_895_p3;
wire   [23:0] zext_ln1346_fu_892_p1;
wire   [22:0] select_ln1346_7_fu_902_p3;
wire   [23:0] ret_fu_909_p2;
wire   [3:0] trunc_ln1497_s_fu_920_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_19_fu_915_p2;
wire   [6:0] zext_ln1497_fu_930_p1;
wire   [6:0] trunc_ln1497_4_fu_934_p4;
wire   [6:0] r_fu_944_p3;
wire   [22:0] grp_fu_1177_p2;
wire   [23:0] select_ln1346_8_fu_968_p3;
wire   [23:0] zext_ln1346_3_fu_965_p1;
wire   [22:0] select_ln1346_9_fu_976_p3;
wire   [23:0] ret_20_fu_984_p2;
wire   [3:0] trunc_ln1497_5_fu_995_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_21_fu_990_p2;
wire   [6:0] zext_ln1497_3_fu_1005_p1;
wire   [6:0] trunc_ln1497_6_fu_1009_p4;
wire   [6:0] r_3_fu_1019_p3;
wire   [0:0] icmp_ln886_fu_1041_p2;
wire   [0:0] icmp_ln886_7_fu_1053_p2;
wire   [2:0] select_ln8_3_fu_1058_p3;
wire   [2:0] select_ln8_fu_1046_p3;
wire   [10:0] tmp_1_fu_1065_p4;
wire   [22:0] select_ln149_3_fu_1110_p3;
wire   [22:0] zext_ln691_fu_1117_p1;
wire   [22:0] select_ln149_fu_1103_p3;
wire   [22:0] zext_ln691_1_fu_1127_p1;
wire   [22:0] add_ln1346_11_fu_1137_p2;
wire   [2:0] tmp_110_fu_1153_p4;
wire   [15:0] grp_fu_1169_p0;
wire   [7:0] grp_fu_1169_p1;
wire   [15:0] grp_fu_1177_p0;
wire   [7:0] grp_fu_1177_p1;
reg    grp_fu_1169_ce;
reg    grp_fu_1177_ce;
wire    ap_CS_fsm_state15;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [22:0] grp_fu_1169_p00;
wire   [22:0] grp_fu_1169_p10;
wire   [22:0] grp_fu_1177_p00;
wire   [22:0] grp_fu_1177_p10;
reg    ap_condition_1050;
reg    ap_condition_456;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head3_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_buffer_V_address0),
    .ce0(attn_inst_softmax_qk_head3_buffer_V_ce0),
    .we0(attn_inst_softmax_qk_head3_buffer_V_we0),
    .d0(attn_inst_softmax_qk_head3_buffer_V_d0),
    .address1(attn_inst_softmax_qk_head3_buffer_V_address1),
    .ce1(attn_inst_softmax_qk_head3_buffer_V_ce1),
    .q1(attn_inst_softmax_qk_head3_buffer_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head3_exp_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_exp_table_V_address0),
    .ce0(attn_inst_softmax_qk_head3_exp_table_V_ce0),
    .q0(attn_inst_softmax_qk_head3_exp_table_V_q0),
    .address1(attn_inst_softmax_qk_head3_exp_table_V_address1),
    .ce1(attn_inst_softmax_qk_head3_exp_table_V_ce1),
    .q1(attn_inst_softmax_qk_head3_exp_table_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head3_exp_score_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_exp_score_V_address0),
    .ce0(attn_inst_softmax_qk_head3_exp_score_V_ce0),
    .we0(attn_inst_softmax_qk_head3_exp_score_V_we0),
    .d0(attn_inst_softmax_qk_head3_exp_score_V_d0),
    .address1(attn_inst_softmax_qk_head3_exp_score_V_address1),
    .ce1(attn_inst_softmax_qk_head3_exp_score_V_ce1),
    .q1(attn_inst_softmax_qk_head3_exp_score_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head3_recip_table_two_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_recip_table_two_V_address0),
    .ce0(attn_inst_softmax_qk_head3_recip_table_two_V_ce0),
    .q0(attn_inst_softmax_qk_head3_recip_table_two_V_q0),
    .address1(attn_inst_softmax_qk_head3_recip_table_two_V_address1),
    .ce1(attn_inst_softmax_qk_head3_recip_table_two_V_ce1),
    .q1(attn_inst_softmax_qk_head3_recip_table_two_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head3_recip_table_one_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head3_recip_table_one_V_address0),
    .ce0(attn_inst_softmax_qk_head3_recip_table_one_V_ce0),
    .q0(attn_inst_softmax_qk_head3_recip_table_one_V_q0),
    .address1(attn_inst_softmax_qk_head3_recip_table_one_V_address1),
    .ce1(attn_inst_softmax_qk_head3_recip_table_one_V_ce1),
    .q1(attn_inst_softmax_qk_head3_recip_table_one_V_q1)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U811(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1169_p0),
    .din1(grp_fu_1169_p1),
    .ce(grp_fu_1169_ce),
    .dout(grp_fu_1169_p2)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U812(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1177_p0),
    .din1(grp_fu_1177_p1),
    .ce(grp_fu_1177_ce),
    .dout(grp_fu_1177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ct_reg_362 <= add_ln114_fu_496_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ct_reg_362 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1050)) begin
        if ((icmp_ln886_9_reg_1469_pp0_iter9_reg == 1'd1)) begin
            in_two_1_2_fu_190 <= 1'd0;
        end else if ((icmp_ln886_9_reg_1469_pp0_iter9_reg == 1'd0)) begin
            in_two_1_2_fu_190 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten48_reg_340 <= add_ln112_fu_403_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten48_reg_340 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_351 <= select_ln113_6_fu_459_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_351 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_456)) begin
        if ((icmp_ln886_9_reg_1469_pp0_iter7_reg == 1'd1)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head3_recip_table_one_V_q0;
        end else if ((icmp_ln886_9_reg_1469_pp0_iter7_reg == 1'd0)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head3_recip_table_two_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        state_reg_373 <= select_ln113_5_reg_1279;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_reg_373 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_5_reg_1279_pp0_iter5_reg == 2'd1))) begin
        add_ln691_1_reg_1459 <= add_ln691_1_fu_1130_p2;
        add_ln691_reg_1453 <= add_ln691_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0))) begin
        and_ln112_reg_1261 <= and_ln112_fu_433_p2;
        icmp_ln113_reg_1256 <= icmp_ln113_fu_415_p2;
        select_ln113_reg_1266 <= select_ln113_fu_445_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_5_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head3_exp_table_V_load_1_reg_1448 <= attn_inst_softmax_qk_head3_exp_table_V_q0;
        attn_inst_softmax_qk_head3_exp_table_V_load_reg_1443 <= attn_inst_softmax_qk_head3_exp_table_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_5_reg_1279_pp0_iter2_reg == 2'd1))) begin
        cursor_V_3_reg_1350 <= cursor_V_3_fu_618_p3;
        cursor_V_reg_1345 <= cursor_V_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln113_5_reg_1279_pp0_iter2_reg == 2'd0))) begin
        empty_189_fu_174[9 : 0] <= zext_ln139_3_fu_678_p1[9 : 0];
        empty_fu_170[9 : 0] <= zext_ln139_fu_662_p1[9 : 0];
        max_val_12_fu_166 <= max_val_15_fu_671_p3;
        max_val_fu_162 <= max_val_14_fu_655_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_9_fu_1163_p2 == 1'd1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_9_fu_1163_p2 == 1'd0) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd0) & (select_ln113_5_reg_1279_pp0_iter5_reg == 2'd1)))) begin
        empty_190_fu_194 <= add_ln691_fu_1120_p2;
        empty_191_fu_198 <= add_ln691_1_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln112_reg_1252 <= icmp_ln112_fu_409_p2;
        icmp_ln112_reg_1252_pp0_iter1_reg <= icmp_ln112_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_5_fu_480_p3 == 2'd0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln124_reg_1306 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln124_reg_1306_pp0_iter2_reg <= icmp_ln124_reg_1306;
        icmp_ln149_reg_1291_pp0_iter2_reg <= icmp_ln149_reg_1291;
        icmp_ln149_reg_1291_pp0_iter3_reg <= icmp_ln149_reg_1291_pp0_iter2_reg;
        icmp_ln149_reg_1291_pp0_iter4_reg <= icmp_ln149_reg_1291_pp0_iter3_reg;
        icmp_ln149_reg_1291_pp0_iter5_reg <= icmp_ln149_reg_1291_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter2_reg <= icmp_ln169_reg_1302;
        icmp_ln169_reg_1302_pp0_iter3_reg <= icmp_ln169_reg_1302_pp0_iter2_reg;
        icmp_ln169_reg_1302_pp0_iter4_reg <= icmp_ln169_reg_1302_pp0_iter3_reg;
        icmp_ln169_reg_1302_pp0_iter5_reg <= icmp_ln169_reg_1302_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter6_reg <= icmp_ln169_reg_1302_pp0_iter5_reg;
        icmp_ln169_reg_1302_pp0_iter7_reg <= icmp_ln169_reg_1302_pp0_iter6_reg;
        icmp_ln169_reg_1302_pp0_iter8_reg <= icmp_ln169_reg_1302_pp0_iter7_reg;
        icmp_ln169_reg_1302_pp0_iter9_reg <= icmp_ln169_reg_1302_pp0_iter8_reg;
        icmp_ln886_9_reg_1469_pp0_iter7_reg <= icmp_ln886_9_reg_1469;
        icmp_ln886_9_reg_1469_pp0_iter8_reg <= icmp_ln886_9_reg_1469_pp0_iter7_reg;
        icmp_ln886_9_reg_1469_pp0_iter9_reg <= icmp_ln886_9_reg_1469_pp0_iter8_reg;
        in_two_0_2_load_reg_1406_pp0_iter10_reg <= in_two_0_2_load_reg_1406;
        select_ln113_5_reg_1279_pp0_iter10_reg <= select_ln113_5_reg_1279_pp0_iter9_reg;
        select_ln113_5_reg_1279_pp0_iter11_reg <= select_ln113_5_reg_1279_pp0_iter10_reg;
        select_ln113_5_reg_1279_pp0_iter2_reg <= select_ln113_5_reg_1279;
        select_ln113_5_reg_1279_pp0_iter3_reg <= select_ln113_5_reg_1279_pp0_iter2_reg;
        select_ln113_5_reg_1279_pp0_iter4_reg <= select_ln113_5_reg_1279_pp0_iter3_reg;
        select_ln113_5_reg_1279_pp0_iter5_reg <= select_ln113_5_reg_1279_pp0_iter4_reg;
        select_ln113_5_reg_1279_pp0_iter6_reg <= select_ln113_5_reg_1279_pp0_iter5_reg;
        select_ln113_5_reg_1279_pp0_iter7_reg <= select_ln113_5_reg_1279_pp0_iter6_reg;
        select_ln113_5_reg_1279_pp0_iter8_reg <= select_ln113_5_reg_1279_pp0_iter7_reg;
        select_ln113_5_reg_1279_pp0_iter9_reg <= select_ln113_5_reg_1279_pp0_iter8_reg;
        zext_ln114_reg_1284_pp0_iter2_reg[7 : 0] <= zext_ln114_reg_1284[7 : 0];
        zext_ln114_reg_1284_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter2_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter3_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter5_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter4_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter6_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter5_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_5_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln149_reg_1291 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln113_5_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln169_reg_1302 <= icmp_ln169_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter6_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter6_reg == 2'd1))) begin
        icmp_ln886_8_reg_1360 <= icmp_ln886_8_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter5_reg == 2'd1))) begin
        icmp_ln886_9_reg_1469 <= icmp_ln886_9_fu_1163_p2;
        trunc_ln1497_8_reg_1464 <= {{add_ln1346_11_fu_1137_p2[22:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter7_reg == 2'd1))) begin
        in_two_0_2_fu_186 <= icmp_ln886_8_reg_1360;
        recip_val_V_0_3_fu_178 <= recip_val_V_0_fu_850_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_5_reg_1279_pp0_iter8_reg == 2'd2))) begin
        in_two_0_2_load_reg_1406 <= in_two_0_2_fu_186;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_5_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_val_13_reg_1329 <= max_val_13_fu_515_p1;
        max_val_7_reg_1337 <= {{r_sm_head1_dout[25:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        select_ln113_5_reg_1279 <= select_ln113_5_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_5_reg_1279_pp0_iter10_reg == 2'd2))) begin
        tmp_106_reg_1413 <= {{r_fu_944_p3[6:3]}};
        tmp_107_reg_1423 <= {{r_3_fu_1019_p3[6:3]}};
        trunc_ln8_3_reg_1428 <= trunc_ln8_3_fu_1037_p1;
        trunc_ln8_reg_1418 <= trunc_ln8_fu_961_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_5_reg_1279 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_reg_1324 <= {{attn_inst_softmax_qk_head3_buffer_V_q1[19:10]}};
        trunc_ln215_reg_1319 <= trunc_ln215_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        zext_ln114_reg_1284[7 : 0] <= zext_ln114_fu_487_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ap_phi_mux_ct_phi_fu_366_p4 = add_ln114_fu_496_p2;
    end else begin
        ap_phi_mux_ct_phi_fu_366_p4 = ct_reg_362;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_state_phi_fu_377_p4 = select_ln113_5_reg_1279;
    end else begin
        ap_phi_mux_state_phi_fu_377_p4 = state_reg_373;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head3_buffer_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        attn_inst_softmax_qk_head3_buffer_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_5_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head3_buffer_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_score_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_score_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_5_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head3_exp_score_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_table_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head3_exp_table_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_exp_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_one_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_one_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_one_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_one_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_two_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_two_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head3_recip_table_two_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head3_recip_table_two_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1169_ce = 1'b1;
    end else begin
        grp_fu_1169_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1177_ce = 1'b1;
    end else begin
        grp_fu_1177_ce = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_5_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_blk_n = r_sm_head1_empty_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_5_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_read = 1'b1;
    end else begin
        r_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_blk_n = rq_sm_head1_full_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_write = 1'b1;
    end else begin
        rq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_403_p2 = (indvar_flatten48_reg_340 + 16'd1);

assign add_ln113_3_fu_453_p2 = (indvar_flatten_reg_351 + 10'd1);

assign add_ln114_fu_496_p2 = (select_ln113_reg_1266 + 8'd1);

assign add_ln1346_11_fu_1137_p2 = ($signed(add_ln691_1_fu_1130_p2) + $signed(23'd8363366));

assign add_ln1346_12_fu_774_p2 = ($signed(add_ln691_1_reg_1459) + $signed(23'd7791996));

assign add_ln1346_19_fu_915_p2 = (select_ln1346_7_fu_902_p3 + grp_fu_1169_p2);

assign add_ln1346_21_fu_990_p2 = (select_ln1346_9_fu_976_p3 + grp_fu_1177_p2);

assign add_ln1346_9_fu_733_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd7791996));

assign add_ln1346_fu_702_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd8363366));

assign add_ln691_1_fu_1130_p2 = (select_ln149_fu_1103_p3 + zext_ln691_1_fu_1127_p1);

assign add_ln691_fu_1120_p2 = (select_ln149_3_fu_1110_p3 + zext_ln691_fu_1117_p1);

assign and_ln112_fu_433_p2 = (xor_ln112_fu_421_p2 & icmp_ln114_fu_427_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_5_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_5_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_5_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter12 = ((rq_sm_head1_full_n == 1'b0) & (select_ln113_5_reg_1279_pp0_iter11_reg == 2'd2));
end

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((select_ln113_5_reg_1279 == 2'd0) & (r_sm_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1050 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter9_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter9_reg == 2'd1));
end

always @ (*) begin
    ap_condition_456 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_5_reg_1279_pp0_iter7_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign attn_inst_softmax_qk_head3_buffer_V_address0 = zext_ln114_reg_1284;

assign attn_inst_softmax_qk_head3_buffer_V_address1 = zext_ln114_fu_487_p1;

assign attn_inst_softmax_qk_head3_buffer_V_d0 = {{max_val_7_fu_519_p4}, {max_val_13_fu_515_p1}};

assign attn_inst_softmax_qk_head3_exp_score_V_address0 = zext_ln114_reg_1284_pp0_iter4_reg;

assign attn_inst_softmax_qk_head3_exp_score_V_address1 = zext_ln114_reg_1284_pp0_iter6_reg;

assign attn_inst_softmax_qk_head3_exp_score_V_d0 = {{attn_inst_softmax_qk_head3_exp_table_V_q0}, {attn_inst_softmax_qk_head3_exp_table_V_q1}};

assign attn_inst_softmax_qk_head3_exp_table_V_address0 = zext_ln534_1_fu_1084_p1;

assign attn_inst_softmax_qk_head3_exp_table_V_address1 = zext_ln534_fu_1080_p1;

assign attn_inst_softmax_qk_head3_recip_table_one_V_address0 = zext_ln534_7_fu_810_p1;

assign attn_inst_softmax_qk_head3_recip_table_one_V_address1 = zext_ln534_6_fu_769_p1;

assign attn_inst_softmax_qk_head3_recip_table_two_V_address0 = zext_ln534_9_fu_805_p1;

assign attn_inst_softmax_qk_head3_recip_table_two_V_address1 = zext_ln534_8_fu_764_p1;

assign cursor_V_3_fu_618_p3 = ((tmp_105_fu_610_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln162_3_fu_600_p4);

assign cursor_V_fu_581_p3 = ((tmp_fu_573_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln_fu_563_p4);

assign grp_fu_1169_p0 = grp_fu_1169_p00;

assign grp_fu_1169_p00 = trunc_ln215_11_fu_820_p1;

assign grp_fu_1169_p1 = grp_fu_1169_p10;

assign grp_fu_1169_p10 = recip_val_V_0_3_fu_178;

assign grp_fu_1177_p0 = grp_fu_1177_p00;

assign grp_fu_1177_p00 = tmp_9_fu_832_p4;

assign grp_fu_1177_p1 = grp_fu_1177_p10;

assign grp_fu_1177_p10 = recip_val_V_1_2_fu_182;

assign grp_fu_384_p2 = ((select_ln113_reg_1266 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_409_p2 = ((indvar_flatten48_reg_340 == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_415_p2 = ((indvar_flatten_reg_351 == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_427_p2 = ((ap_phi_mux_ct_phi_fu_366_p4 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_491_p2 = ((select_ln113_reg_1266 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_666_p2 = (($signed(select_ln124_8_fu_638_p3) < $signed(max_val_7_reg_1337)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_650_p2 = (($signed(select_ln124_9_fu_644_p3) < $signed(max_val_13_reg_1329)) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_1053_p2 = ((tmp_107_reg_1423 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_8_fu_727_p2 = ((tmp_108_fu_717_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_9_fu_1163_p2 = ((tmp_110_fu_1153_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_1041_p2 = ((tmp_106_reg_1413 != 4'd0) ? 1'b1 : 1'b0);

assign max_val_13_fu_515_p1 = r_sm_head1_dout[9:0];

assign max_val_14_fu_655_p3 = ((icmp_ln878_fu_650_p2[0:0] == 1'b1) ? max_val_13_reg_1329 : select_ln124_7_fu_632_p3);

assign max_val_15_fu_671_p3 = ((icmp_ln878_1_fu_666_p2[0:0] == 1'b1) ? max_val_7_reg_1337 : select_ln124_fu_626_p3);

assign max_val_7_fu_519_p4 = {{r_sm_head1_dout[25:16]}};

assign or_ln113_fu_439_p2 = (icmp_ln113_fu_415_p2 | and_ln112_fu_433_p2);

assign r_3_fu_1019_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? zext_ln1497_3_fu_1005_p1 : trunc_ln1497_6_fu_1009_p4);

assign r_fu_944_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? zext_ln1497_fu_930_p1 : trunc_ln1497_4_fu_934_p4);

assign recip_val_V_0_fu_850_p3 = ((icmp_ln886_8_reg_1360[0:0] == 1'b1) ? attn_inst_softmax_qk_head3_recip_table_two_V_q1 : attn_inst_softmax_qk_head3_recip_table_one_V_q1);

assign ret_17_fu_557_p2 = (ret_21_fu_552_p2 + 10'd8);

assign ret_19_fu_594_p2 = (ret_22_fu_589_p2 + 10'd8);

assign ret_20_fu_984_p2 = (select_ln1346_8_fu_968_p3 + zext_ln1346_3_fu_965_p1);

assign ret_21_fu_552_p2 = (max_val_fu_162 - trunc_ln215_reg_1319);

assign ret_22_fu_589_p2 = (max_val_12_fu_166 - tmp_6_reg_1324);

assign ret_fu_909_p2 = (select_ln1346_fu_895_p3 + zext_ln1346_fu_892_p1);

assign rq_sm_head1_din = tmp_1_fu_1065_p4;

assign select_ln112_fu_467_p3 = ((icmp_ln113_reg_1256[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_state_phi_fu_377_p4);

assign select_ln113_5_fu_480_p3 = ((and_ln112_reg_1261[0:0] == 1'b1) ? state_5_fu_474_p2 : select_ln112_fu_467_p3);

assign select_ln113_6_fu_459_p3 = ((icmp_ln113_fu_415_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_3_fu_453_p2);

assign select_ln113_fu_445_p3 = ((or_ln113_fu_439_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_ct_phi_fu_366_p4);

assign select_ln124_7_fu_632_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_13_reg_1329 : trunc_ln114_fu_544_p1);

assign select_ln124_8_fu_638_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_7_reg_1337 : max_val_12_fu_166);

assign select_ln124_9_fu_644_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_13_reg_1329 : max_val_fu_162);

assign select_ln124_fu_626_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_7_reg_1337 : trunc_ln114_3_fu_548_p1);

assign select_ln1346_7_fu_902_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_8_fu_968_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln1346_9_fu_976_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_fu_895_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln149_3_fu_1110_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_190_fu_194);

assign select_ln149_fu_1103_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_191_fu_198);

assign select_ln7_3_fu_797_p3 = ((tmp_111_fu_789_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln878_3_fu_779_p4);

assign select_ln7_fu_756_p3 = ((tmp_109_fu_748_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln4_fu_738_p4);

assign select_ln8_3_fu_1058_p3 = ((icmp_ln886_7_fu_1053_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_3_reg_1428);

assign select_ln8_fu_1046_p3 = ((icmp_ln886_fu_1041_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_reg_1418);

assign state_5_fu_474_p2 = (select_ln112_fu_467_p3 + 2'd1);

assign tmp_105_fu_610_p3 = ret_19_fu_594_p2[32'd9];

assign tmp_108_fu_717_p4 = {{add_ln1346_fu_702_p2[22:20]}};

assign tmp_109_fu_748_p3 = add_ln1346_9_fu_733_p2[32'd22];

assign tmp_110_fu_1153_p4 = {{add_ln1346_11_fu_1137_p2[22:20]}};

assign tmp_111_fu_789_p3 = add_ln1346_12_fu_774_p2[32'd22];

assign tmp_1_fu_1065_p4 = {{{select_ln8_3_fu_1058_p3}, {5'd0}}, {select_ln8_fu_1046_p3}};

assign tmp_9_fu_832_p4 = {{attn_inst_softmax_qk_head3_exp_score_V_q1[31:16]}};

assign tmp_fu_573_p3 = ret_17_fu_557_p2[32'd9];

assign trunc_ln114_3_fu_548_p1 = empty_189_fu_174[9:0];

assign trunc_ln114_fu_544_p1 = empty_fu_170[9:0];

assign trunc_ln1497_4_fu_934_p4 = {{add_ln1346_19_fu_915_p2[22:16]}};

assign trunc_ln1497_5_fu_995_p4 = {{ret_20_fu_984_p2[23:20]}};

assign trunc_ln1497_6_fu_1009_p4 = {{add_ln1346_21_fu_990_p2[22:16]}};

assign trunc_ln1497_s_fu_920_p4 = {{ret_fu_909_p2[23:20]}};

assign trunc_ln162_3_fu_600_p4 = {{ret_19_fu_594_p2[8:4]}};

assign trunc_ln215_11_fu_820_p1 = attn_inst_softmax_qk_head3_exp_score_V_q1[15:0];

assign trunc_ln215_fu_501_p1 = attn_inst_softmax_qk_head3_buffer_V_q1[9:0];

assign trunc_ln3_fu_707_p4 = {{add_ln1346_fu_702_p2[22:14]}};

assign trunc_ln4_fu_738_p4 = {{add_ln1346_9_fu_733_p2[21:17]}};

assign trunc_ln878_3_fu_779_p4 = {{add_ln1346_12_fu_774_p2[21:17]}};

assign trunc_ln8_3_fu_1037_p1 = r_3_fu_1019_p3[2:0];

assign trunc_ln8_fu_961_p1 = r_fu_944_p3[2:0];

assign trunc_ln_fu_563_p4 = {{ret_17_fu_557_p2[8:4]}};

assign xor_ln112_fu_421_p2 = (icmp_ln113_fu_415_p2 ^ 1'd1);

assign zext_ln114_fu_487_p1 = select_ln113_reg_1266;

assign zext_ln1346_3_fu_965_p1 = grp_fu_1177_p2;

assign zext_ln1346_fu_892_p1 = grp_fu_1169_p2;

assign zext_ln139_3_fu_678_p1 = max_val_15_fu_671_p3;

assign zext_ln139_fu_662_p1 = max_val_14_fu_655_p3;

assign zext_ln1497_3_fu_1005_p1 = trunc_ln1497_5_fu_995_p4;

assign zext_ln1497_fu_930_p1 = trunc_ln1497_s_fu_920_p4;

assign zext_ln534_1_fu_1084_p1 = cursor_V_3_reg_1350;

assign zext_ln534_6_fu_769_p1 = trunc_ln3_fu_707_p4;

assign zext_ln534_7_fu_810_p1 = trunc_ln1497_8_reg_1464;

assign zext_ln534_8_fu_764_p1 = select_ln7_fu_756_p3;

assign zext_ln534_9_fu_805_p1 = select_ln7_3_fu_797_p3;

assign zext_ln534_fu_1080_p1 = cursor_V_reg_1345;

assign zext_ln691_1_fu_1127_p1 = attn_inst_softmax_qk_head3_exp_table_V_load_1_reg_1448;

assign zext_ln691_fu_1117_p1 = attn_inst_softmax_qk_head3_exp_table_V_load_reg_1443;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1284[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    empty_fu_170[15:10] <= 6'b000000;
    empty_189_fu_174[15:10] <= 6'b000000;
end

endmodule //ATTN0_do_softmax
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_softmax128 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head1_dout,
        r_sm_head1_empty_n,
        r_sm_head1_read,
        rq_sm_head1_din,
        rq_sm_head1_full_n,
        rq_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state15 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] r_sm_head1_dout;
input   r_sm_head1_empty_n;
output   r_sm_head1_read;
output  [15:0] rq_sm_head1_din;
input   rq_sm_head1_full_n;
output   rq_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_sm_head1_read;
reg rq_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] attn_inst_softmax_qk_head1_buffer_V_address0;
reg    attn_inst_softmax_qk_head1_buffer_V_ce0;
reg    attn_inst_softmax_qk_head1_buffer_V_we0;
wire   [19:0] attn_inst_softmax_qk_head1_buffer_V_d0;
wire   [7:0] attn_inst_softmax_qk_head1_buffer_V_address1;
reg    attn_inst_softmax_qk_head1_buffer_V_ce1;
wire   [19:0] attn_inst_softmax_qk_head1_buffer_V_q1;
wire   [4:0] attn_inst_softmax_qk_head1_exp_table_V_address0;
reg    attn_inst_softmax_qk_head1_exp_table_V_ce0;
wire   [15:0] attn_inst_softmax_qk_head1_exp_table_V_q0;
wire   [4:0] attn_inst_softmax_qk_head1_exp_table_V_address1;
reg    attn_inst_softmax_qk_head1_exp_table_V_ce1;
wire   [15:0] attn_inst_softmax_qk_head1_exp_table_V_q1;
wire   [7:0] attn_inst_softmax_qk_head1_exp_score_V_address0;
reg    attn_inst_softmax_qk_head1_exp_score_V_ce0;
reg    attn_inst_softmax_qk_head1_exp_score_V_we0;
wire   [31:0] attn_inst_softmax_qk_head1_exp_score_V_d0;
wire   [7:0] attn_inst_softmax_qk_head1_exp_score_V_address1;
reg    attn_inst_softmax_qk_head1_exp_score_V_ce1;
wire   [31:0] attn_inst_softmax_qk_head1_exp_score_V_q1;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_two_V_address0;
reg    attn_inst_softmax_qk_head1_recip_table_two_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_two_V_q0;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_two_V_address1;
reg    attn_inst_softmax_qk_head1_recip_table_two_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_two_V_q1;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_one_V_address0;
reg    attn_inst_softmax_qk_head1_recip_table_one_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_one_V_q0;
wire   [5:0] attn_inst_softmax_qk_head1_recip_table_one_V_address1;
reg    attn_inst_softmax_qk_head1_recip_table_one_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head1_recip_table_one_V_q1;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln113_3_reg_1279;
reg    rq_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter12;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter11_reg;
reg   [15:0] indvar_flatten48_reg_340;
reg   [9:0] indvar_flatten_reg_351;
reg   [7:0] ct_reg_362;
reg   [1:0] state_reg_373;
wire   [15:0] add_ln112_fu_403_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state6_pp0_stage0_iter7;
wire    ap_block_state7_pp0_stage0_iter8;
wire    ap_block_state8_pp0_stage0_iter9;
wire    ap_block_state9_pp0_stage0_iter10;
wire    ap_block_state10_pp0_stage0_iter11;
reg    ap_block_state11_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln112_fu_409_p2;
reg   [0:0] icmp_ln112_reg_1252;
reg   [0:0] icmp_ln112_reg_1252_pp0_iter1_reg;
wire   [0:0] icmp_ln113_fu_415_p2;
reg   [0:0] icmp_ln113_reg_1256;
wire   [0:0] and_ln112_fu_433_p2;
reg   [0:0] and_ln112_reg_1261;
wire   [7:0] select_ln113_fu_445_p3;
reg   [7:0] select_ln113_reg_1266;
wire   [9:0] select_ln113_4_fu_459_p3;
wire   [1:0] select_ln113_3_fu_480_p3;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter2_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter3_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter4_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter5_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter6_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter7_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter8_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter9_reg;
reg   [1:0] select_ln113_3_reg_1279_pp0_iter10_reg;
wire   [63:0] zext_ln114_fu_487_p1;
reg   [63:0] zext_ln114_reg_1284;
reg   [63:0] zext_ln114_reg_1284_pp0_iter2_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter4_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter5_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter6_reg;
wire   [0:0] grp_fu_384_p2;
reg   [0:0] icmp_ln149_reg_1291;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter2_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter4_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter5_reg;
wire   [0:0] icmp_ln169_fu_491_p2;
reg   [0:0] icmp_ln169_reg_1302;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter2_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter5_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter6_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter7_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter8_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter9_reg;
reg   [0:0] icmp_ln124_reg_1306;
reg   [0:0] icmp_ln124_reg_1306_pp0_iter2_reg;
wire   [7:0] add_ln114_fu_496_p2;
wire   [9:0] trunc_ln215_fu_501_p1;
reg   [9:0] trunc_ln215_reg_1319;
reg   [9:0] tmp_1_reg_1324;
wire   [9:0] max_val_9_fu_515_p1;
reg   [9:0] max_val_9_reg_1329;
wire   [9:0] max_val_4_fu_519_p4;
reg   [9:0] max_val_4_reg_1337;
wire   [4:0] cursor_V_fu_581_p3;
reg   [4:0] cursor_V_reg_1345;
wire   [4:0] cursor_V_2_fu_618_p3;
reg   [4:0] cursor_V_2_reg_1350;
wire   [0:0] icmp_ln886_5_fu_727_p2;
reg   [0:0] icmp_ln886_5_reg_1360;
reg   [0:0] icmp_ln886_6_reg_1469;
reg   [0:0] in_two_0_2_load_reg_1406;
reg   [0:0] in_two_0_2_load_reg_1406_pp0_iter10_reg;
reg   [3:0] tmp_99_reg_1413;
wire   [2:0] trunc_ln8_fu_961_p1;
reg   [2:0] trunc_ln8_reg_1418;
reg   [3:0] tmp_100_reg_1423;
wire   [2:0] trunc_ln8_2_fu_1037_p1;
reg   [2:0] trunc_ln8_2_reg_1428;
reg   [15:0] attn_inst_softmax_qk_head1_exp_table_V_load_reg_1443;
reg    ap_enable_reg_pp0_iter5;
reg   [15:0] attn_inst_softmax_qk_head1_exp_table_V_load_1_reg_1448;
wire   [22:0] add_ln691_fu_1120_p2;
reg   [22:0] add_ln691_reg_1453;
wire   [22:0] add_ln691_1_fu_1130_p2;
reg   [22:0] add_ln691_1_reg_1459;
reg   [8:0] trunc_ln1497_5_reg_1464;
wire   [0:0] icmp_ln886_6_fu_1163_p2;
reg   [0:0] icmp_ln886_6_reg_1469_pp0_iter7_reg;
reg   [0:0] icmp_ln886_6_reg_1469_pp0_iter8_reg;
reg   [0:0] icmp_ln886_6_reg_1469_pp0_iter9_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg   [7:0] ap_phi_mux_ct_phi_fu_366_p4;
reg   [1:0] ap_phi_mux_state_phi_fu_377_p4;
wire   [63:0] zext_ln534_6_fu_764_p1;
wire   [63:0] zext_ln534_4_fu_769_p1;
wire   [63:0] zext_ln534_7_fu_805_p1;
wire   [63:0] zext_ln534_5_fu_810_p1;
wire   [63:0] zext_ln534_fu_1080_p1;
wire   [63:0] zext_ln534_1_fu_1084_p1;
reg   [9:0] max_val_fu_162;
wire   [9:0] max_val_10_fu_655_p3;
reg   [9:0] max_val_8_fu_166;
wire   [9:0] max_val_11_fu_671_p3;
reg   [15:0] empty_fu_170;
wire   [15:0] zext_ln139_fu_662_p1;
reg   [15:0] empty_185_fu_174;
wire   [15:0] zext_ln139_2_fu_678_p1;
reg   [7:0] recip_val_V_0_2_fu_178;
wire   [7:0] recip_val_V_0_fu_850_p3;
reg   [7:0] recip_val_V_1_2_fu_182;
reg   [0:0] in_two_0_2_fu_186;
reg   [0:0] in_two_1_2_fu_190;
reg   [22:0] empty_186_fu_194;
reg   [22:0] empty_187_fu_198;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln114_fu_427_p2;
wire   [0:0] xor_ln112_fu_421_p2;
wire   [0:0] or_ln113_fu_439_p2;
wire   [9:0] add_ln113_2_fu_453_p2;
wire   [1:0] select_ln112_fu_467_p3;
wire   [1:0] state_4_fu_474_p2;
wire   [9:0] ret_14_fu_552_p2;
wire   [9:0] ret_10_fu_557_p2;
wire   [0:0] tmp_fu_573_p3;
wire   [4:0] trunc_ln_fu_563_p4;
wire   [9:0] ret_15_fu_589_p2;
wire   [9:0] ret_12_fu_594_p2;
wire   [0:0] tmp_98_fu_610_p3;
wire   [4:0] trunc_ln162_2_fu_600_p4;
wire   [9:0] trunc_ln114_2_fu_548_p1;
wire   [9:0] trunc_ln114_fu_544_p1;
wire   [9:0] select_ln124_6_fu_644_p3;
wire   [0:0] icmp_ln878_fu_650_p2;
wire   [9:0] select_ln124_4_fu_632_p3;
wire   [9:0] select_ln124_5_fu_638_p3;
wire   [0:0] icmp_ln878_1_fu_666_p2;
wire   [9:0] select_ln124_fu_626_p3;
wire   [22:0] add_ln1346_fu_702_p2;
wire   [2:0] tmp_101_fu_717_p4;
wire   [22:0] add_ln1346_5_fu_733_p2;
wire   [0:0] tmp_102_fu_748_p3;
wire   [4:0] trunc_ln2_fu_738_p4;
wire   [4:0] select_ln7_fu_756_p3;
wire   [8:0] trunc_ln1_fu_707_p4;
wire   [22:0] add_ln1346_8_fu_774_p2;
wire   [0:0] tmp_104_fu_789_p3;
wire   [4:0] trunc_ln878_2_fu_779_p4;
wire   [4:0] select_ln7_2_fu_797_p3;
wire   [15:0] trunc_ln215_10_fu_820_p1;
wire   [15:0] tmp_4_fu_832_p4;
wire   [22:0] grp_fu_1169_p2;
wire   [23:0] select_ln1346_fu_895_p3;
wire   [23:0] zext_ln1346_fu_892_p1;
wire   [22:0] select_ln1346_4_fu_902_p3;
wire   [23:0] ret_fu_909_p2;
wire   [3:0] trunc_ln1497_s_fu_920_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_13_fu_915_p2;
wire   [6:0] zext_ln1497_fu_930_p1;
wire   [6:0] trunc_ln1497_1_fu_934_p4;
wire   [6:0] r_fu_944_p3;
wire   [22:0] grp_fu_1177_p2;
wire   [23:0] select_ln1346_5_fu_968_p3;
wire   [23:0] zext_ln1346_2_fu_965_p1;
wire   [22:0] select_ln1346_6_fu_976_p3;
wire   [23:0] ret_13_fu_984_p2;
wire   [3:0] trunc_ln1497_2_fu_995_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_15_fu_990_p2;
wire   [6:0] zext_ln1497_2_fu_1005_p1;
wire   [6:0] trunc_ln1497_3_fu_1009_p4;
wire   [6:0] r_2_fu_1019_p3;
wire   [0:0] icmp_ln886_fu_1041_p2;
wire   [0:0] icmp_ln886_4_fu_1053_p2;
wire   [2:0] select_ln8_2_fu_1058_p3;
wire   [2:0] select_ln8_fu_1046_p3;
wire   [10:0] tmp_5_fu_1065_p4;
wire   [22:0] select_ln149_2_fu_1110_p3;
wire   [22:0] zext_ln691_fu_1117_p1;
wire   [22:0] select_ln149_fu_1103_p3;
wire   [22:0] zext_ln691_1_fu_1127_p1;
wire   [22:0] add_ln1346_7_fu_1137_p2;
wire   [2:0] tmp_103_fu_1153_p4;
wire   [15:0] grp_fu_1169_p0;
wire   [7:0] grp_fu_1169_p1;
wire   [15:0] grp_fu_1177_p0;
wire   [7:0] grp_fu_1177_p1;
reg    grp_fu_1169_ce;
reg    grp_fu_1177_ce;
wire    ap_CS_fsm_state15;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [22:0] grp_fu_1169_p00;
wire   [22:0] grp_fu_1169_p10;
wire   [22:0] grp_fu_1177_p00;
wire   [22:0] grp_fu_1177_p10;
reg    ap_condition_1050;
reg    ap_condition_456;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head1_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_buffer_V_address0),
    .ce0(attn_inst_softmax_qk_head1_buffer_V_ce0),
    .we0(attn_inst_softmax_qk_head1_buffer_V_we0),
    .d0(attn_inst_softmax_qk_head1_buffer_V_d0),
    .address1(attn_inst_softmax_qk_head1_buffer_V_address1),
    .ce1(attn_inst_softmax_qk_head1_buffer_V_ce1),
    .q1(attn_inst_softmax_qk_head1_buffer_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head1_exp_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_exp_table_V_address0),
    .ce0(attn_inst_softmax_qk_head1_exp_table_V_ce0),
    .q0(attn_inst_softmax_qk_head1_exp_table_V_q0),
    .address1(attn_inst_softmax_qk_head1_exp_table_V_address1),
    .ce1(attn_inst_softmax_qk_head1_exp_table_V_ce1),
    .q1(attn_inst_softmax_qk_head1_exp_table_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head1_exp_score_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_exp_score_V_address0),
    .ce0(attn_inst_softmax_qk_head1_exp_score_V_ce0),
    .we0(attn_inst_softmax_qk_head1_exp_score_V_we0),
    .d0(attn_inst_softmax_qk_head1_exp_score_V_d0),
    .address1(attn_inst_softmax_qk_head1_exp_score_V_address1),
    .ce1(attn_inst_softmax_qk_head1_exp_score_V_ce1),
    .q1(attn_inst_softmax_qk_head1_exp_score_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head1_recip_table_two_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_recip_table_two_V_address0),
    .ce0(attn_inst_softmax_qk_head1_recip_table_two_V_ce0),
    .q0(attn_inst_softmax_qk_head1_recip_table_two_V_q0),
    .address1(attn_inst_softmax_qk_head1_recip_table_two_V_address1),
    .ce1(attn_inst_softmax_qk_head1_recip_table_two_V_ce1),
    .q1(attn_inst_softmax_qk_head1_recip_table_two_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head1_recip_table_one_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head1_recip_table_one_V_address0),
    .ce0(attn_inst_softmax_qk_head1_recip_table_one_V_ce0),
    .q0(attn_inst_softmax_qk_head1_recip_table_one_V_q0),
    .address1(attn_inst_softmax_qk_head1_recip_table_one_V_address1),
    .ce1(attn_inst_softmax_qk_head1_recip_table_one_V_ce1),
    .q1(attn_inst_softmax_qk_head1_recip_table_one_V_q1)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U797(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1169_p0),
    .din1(grp_fu_1169_p1),
    .ce(grp_fu_1169_ce),
    .dout(grp_fu_1169_p2)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U798(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1177_p0),
    .din1(grp_fu_1177_p1),
    .ce(grp_fu_1177_ce),
    .dout(grp_fu_1177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ct_reg_362 <= add_ln114_fu_496_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ct_reg_362 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1050)) begin
        if ((icmp_ln886_6_reg_1469_pp0_iter9_reg == 1'd1)) begin
            in_two_1_2_fu_190 <= 1'd0;
        end else if ((icmp_ln886_6_reg_1469_pp0_iter9_reg == 1'd0)) begin
            in_two_1_2_fu_190 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten48_reg_340 <= add_ln112_fu_403_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten48_reg_340 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_351 <= select_ln113_4_fu_459_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_351 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_456)) begin
        if ((icmp_ln886_6_reg_1469_pp0_iter7_reg == 1'd1)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head1_recip_table_one_V_q0;
        end else if ((icmp_ln886_6_reg_1469_pp0_iter7_reg == 1'd0)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head1_recip_table_two_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        state_reg_373 <= select_ln113_3_reg_1279;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_reg_373 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_3_reg_1279_pp0_iter5_reg == 2'd1))) begin
        add_ln691_1_reg_1459 <= add_ln691_1_fu_1130_p2;
        add_ln691_reg_1453 <= add_ln691_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0))) begin
        and_ln112_reg_1261 <= and_ln112_fu_433_p2;
        icmp_ln113_reg_1256 <= icmp_ln113_fu_415_p2;
        select_ln113_reg_1266 <= select_ln113_fu_445_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_3_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head1_exp_table_V_load_1_reg_1448 <= attn_inst_softmax_qk_head1_exp_table_V_q0;
        attn_inst_softmax_qk_head1_exp_table_V_load_reg_1443 <= attn_inst_softmax_qk_head1_exp_table_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_3_reg_1279_pp0_iter2_reg == 2'd1))) begin
        cursor_V_2_reg_1350 <= cursor_V_2_fu_618_p3;
        cursor_V_reg_1345 <= cursor_V_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln113_3_reg_1279_pp0_iter2_reg == 2'd0))) begin
        empty_185_fu_174[9 : 0] <= zext_ln139_2_fu_678_p1[9 : 0];
        empty_fu_170[9 : 0] <= zext_ln139_fu_662_p1[9 : 0];
        max_val_8_fu_166 <= max_val_11_fu_671_p3;
        max_val_fu_162 <= max_val_10_fu_655_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_6_fu_1163_p2 == 1'd1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_6_fu_1163_p2 == 1'd0) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd0) & (select_ln113_3_reg_1279_pp0_iter5_reg == 2'd1)))) begin
        empty_186_fu_194 <= add_ln691_fu_1120_p2;
        empty_187_fu_198 <= add_ln691_1_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln112_reg_1252 <= icmp_ln112_fu_409_p2;
        icmp_ln112_reg_1252_pp0_iter1_reg <= icmp_ln112_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_3_fu_480_p3 == 2'd0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln124_reg_1306 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln124_reg_1306_pp0_iter2_reg <= icmp_ln124_reg_1306;
        icmp_ln149_reg_1291_pp0_iter2_reg <= icmp_ln149_reg_1291;
        icmp_ln149_reg_1291_pp0_iter3_reg <= icmp_ln149_reg_1291_pp0_iter2_reg;
        icmp_ln149_reg_1291_pp0_iter4_reg <= icmp_ln149_reg_1291_pp0_iter3_reg;
        icmp_ln149_reg_1291_pp0_iter5_reg <= icmp_ln149_reg_1291_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter2_reg <= icmp_ln169_reg_1302;
        icmp_ln169_reg_1302_pp0_iter3_reg <= icmp_ln169_reg_1302_pp0_iter2_reg;
        icmp_ln169_reg_1302_pp0_iter4_reg <= icmp_ln169_reg_1302_pp0_iter3_reg;
        icmp_ln169_reg_1302_pp0_iter5_reg <= icmp_ln169_reg_1302_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter6_reg <= icmp_ln169_reg_1302_pp0_iter5_reg;
        icmp_ln169_reg_1302_pp0_iter7_reg <= icmp_ln169_reg_1302_pp0_iter6_reg;
        icmp_ln169_reg_1302_pp0_iter8_reg <= icmp_ln169_reg_1302_pp0_iter7_reg;
        icmp_ln169_reg_1302_pp0_iter9_reg <= icmp_ln169_reg_1302_pp0_iter8_reg;
        icmp_ln886_6_reg_1469_pp0_iter7_reg <= icmp_ln886_6_reg_1469;
        icmp_ln886_6_reg_1469_pp0_iter8_reg <= icmp_ln886_6_reg_1469_pp0_iter7_reg;
        icmp_ln886_6_reg_1469_pp0_iter9_reg <= icmp_ln886_6_reg_1469_pp0_iter8_reg;
        in_two_0_2_load_reg_1406_pp0_iter10_reg <= in_two_0_2_load_reg_1406;
        select_ln113_3_reg_1279_pp0_iter10_reg <= select_ln113_3_reg_1279_pp0_iter9_reg;
        select_ln113_3_reg_1279_pp0_iter11_reg <= select_ln113_3_reg_1279_pp0_iter10_reg;
        select_ln113_3_reg_1279_pp0_iter2_reg <= select_ln113_3_reg_1279;
        select_ln113_3_reg_1279_pp0_iter3_reg <= select_ln113_3_reg_1279_pp0_iter2_reg;
        select_ln113_3_reg_1279_pp0_iter4_reg <= select_ln113_3_reg_1279_pp0_iter3_reg;
        select_ln113_3_reg_1279_pp0_iter5_reg <= select_ln113_3_reg_1279_pp0_iter4_reg;
        select_ln113_3_reg_1279_pp0_iter6_reg <= select_ln113_3_reg_1279_pp0_iter5_reg;
        select_ln113_3_reg_1279_pp0_iter7_reg <= select_ln113_3_reg_1279_pp0_iter6_reg;
        select_ln113_3_reg_1279_pp0_iter8_reg <= select_ln113_3_reg_1279_pp0_iter7_reg;
        select_ln113_3_reg_1279_pp0_iter9_reg <= select_ln113_3_reg_1279_pp0_iter8_reg;
        zext_ln114_reg_1284_pp0_iter2_reg[7 : 0] <= zext_ln114_reg_1284[7 : 0];
        zext_ln114_reg_1284_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter2_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter3_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter5_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter4_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter6_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter5_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_3_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln149_reg_1291 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln113_3_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln169_reg_1302 <= icmp_ln169_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter6_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter6_reg == 2'd1))) begin
        icmp_ln886_5_reg_1360 <= icmp_ln886_5_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter5_reg == 2'd1))) begin
        icmp_ln886_6_reg_1469 <= icmp_ln886_6_fu_1163_p2;
        trunc_ln1497_5_reg_1464 <= {{add_ln1346_7_fu_1137_p2[22:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter7_reg == 2'd1))) begin
        in_two_0_2_fu_186 <= icmp_ln886_5_reg_1360;
        recip_val_V_0_2_fu_178 <= recip_val_V_0_fu_850_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_3_reg_1279_pp0_iter8_reg == 2'd2))) begin
        in_two_0_2_load_reg_1406 <= in_two_0_2_fu_186;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_3_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_val_4_reg_1337 <= {{r_sm_head1_dout[25:16]}};
        max_val_9_reg_1329 <= max_val_9_fu_515_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        select_ln113_3_reg_1279 <= select_ln113_3_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_3_reg_1279_pp0_iter10_reg == 2'd2))) begin
        tmp_100_reg_1423 <= {{r_2_fu_1019_p3[6:3]}};
        tmp_99_reg_1413 <= {{r_fu_944_p3[6:3]}};
        trunc_ln8_2_reg_1428 <= trunc_ln8_2_fu_1037_p1;
        trunc_ln8_reg_1418 <= trunc_ln8_fu_961_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_3_reg_1279 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_1324 <= {{attn_inst_softmax_qk_head1_buffer_V_q1[19:10]}};
        trunc_ln215_reg_1319 <= trunc_ln215_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        zext_ln114_reg_1284[7 : 0] <= zext_ln114_fu_487_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ap_phi_mux_ct_phi_fu_366_p4 = add_ln114_fu_496_p2;
    end else begin
        ap_phi_mux_ct_phi_fu_366_p4 = ct_reg_362;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_state_phi_fu_377_p4 = select_ln113_3_reg_1279;
    end else begin
        ap_phi_mux_state_phi_fu_377_p4 = state_reg_373;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head1_buffer_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        attn_inst_softmax_qk_head1_buffer_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_3_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head1_buffer_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_score_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_score_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_3_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head1_exp_score_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_table_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head1_exp_table_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_exp_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_one_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_one_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_one_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_one_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_two_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_two_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head1_recip_table_two_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head1_recip_table_two_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1169_ce = 1'b1;
    end else begin
        grp_fu_1169_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1177_ce = 1'b1;
    end else begin
        grp_fu_1177_ce = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_3_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_blk_n = r_sm_head1_empty_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_3_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_read = 1'b1;
    end else begin
        r_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_blk_n = rq_sm_head1_full_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_write = 1'b1;
    end else begin
        rq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_403_p2 = (indvar_flatten48_reg_340 + 16'd1);

assign add_ln113_2_fu_453_p2 = (indvar_flatten_reg_351 + 10'd1);

assign add_ln114_fu_496_p2 = (select_ln113_reg_1266 + 8'd1);

assign add_ln1346_13_fu_915_p2 = (select_ln1346_4_fu_902_p3 + grp_fu_1169_p2);

assign add_ln1346_15_fu_990_p2 = (select_ln1346_6_fu_976_p3 + grp_fu_1177_p2);

assign add_ln1346_5_fu_733_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd7791996));

assign add_ln1346_7_fu_1137_p2 = ($signed(add_ln691_1_fu_1130_p2) + $signed(23'd8363366));

assign add_ln1346_8_fu_774_p2 = ($signed(add_ln691_1_reg_1459) + $signed(23'd7791996));

assign add_ln1346_fu_702_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd8363366));

assign add_ln691_1_fu_1130_p2 = (select_ln149_fu_1103_p3 + zext_ln691_1_fu_1127_p1);

assign add_ln691_fu_1120_p2 = (select_ln149_2_fu_1110_p3 + zext_ln691_fu_1117_p1);

assign and_ln112_fu_433_p2 = (xor_ln112_fu_421_p2 & icmp_ln114_fu_427_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_3_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_3_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_3_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter12 = ((rq_sm_head1_full_n == 1'b0) & (select_ln113_3_reg_1279_pp0_iter11_reg == 2'd2));
end

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((select_ln113_3_reg_1279 == 2'd0) & (r_sm_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1050 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter9_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter9_reg == 2'd1));
end

always @ (*) begin
    ap_condition_456 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_3_reg_1279_pp0_iter7_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign attn_inst_softmax_qk_head1_buffer_V_address0 = zext_ln114_reg_1284;

assign attn_inst_softmax_qk_head1_buffer_V_address1 = zext_ln114_fu_487_p1;

assign attn_inst_softmax_qk_head1_buffer_V_d0 = {{max_val_4_fu_519_p4}, {max_val_9_fu_515_p1}};

assign attn_inst_softmax_qk_head1_exp_score_V_address0 = zext_ln114_reg_1284_pp0_iter4_reg;

assign attn_inst_softmax_qk_head1_exp_score_V_address1 = zext_ln114_reg_1284_pp0_iter6_reg;

assign attn_inst_softmax_qk_head1_exp_score_V_d0 = {{attn_inst_softmax_qk_head1_exp_table_V_q0}, {attn_inst_softmax_qk_head1_exp_table_V_q1}};

assign attn_inst_softmax_qk_head1_exp_table_V_address0 = zext_ln534_1_fu_1084_p1;

assign attn_inst_softmax_qk_head1_exp_table_V_address1 = zext_ln534_fu_1080_p1;

assign attn_inst_softmax_qk_head1_recip_table_one_V_address0 = zext_ln534_5_fu_810_p1;

assign attn_inst_softmax_qk_head1_recip_table_one_V_address1 = zext_ln534_4_fu_769_p1;

assign attn_inst_softmax_qk_head1_recip_table_two_V_address0 = zext_ln534_7_fu_805_p1;

assign attn_inst_softmax_qk_head1_recip_table_two_V_address1 = zext_ln534_6_fu_764_p1;

assign cursor_V_2_fu_618_p3 = ((tmp_98_fu_610_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln162_2_fu_600_p4);

assign cursor_V_fu_581_p3 = ((tmp_fu_573_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln_fu_563_p4);

assign grp_fu_1169_p0 = grp_fu_1169_p00;

assign grp_fu_1169_p00 = trunc_ln215_10_fu_820_p1;

assign grp_fu_1169_p1 = grp_fu_1169_p10;

assign grp_fu_1169_p10 = recip_val_V_0_2_fu_178;

assign grp_fu_1177_p0 = grp_fu_1177_p00;

assign grp_fu_1177_p00 = tmp_4_fu_832_p4;

assign grp_fu_1177_p1 = grp_fu_1177_p10;

assign grp_fu_1177_p10 = recip_val_V_1_2_fu_182;

assign grp_fu_384_p2 = ((select_ln113_reg_1266 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_409_p2 = ((indvar_flatten48_reg_340 == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_415_p2 = ((indvar_flatten_reg_351 == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_427_p2 = ((ap_phi_mux_ct_phi_fu_366_p4 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_491_p2 = ((select_ln113_reg_1266 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_666_p2 = (($signed(select_ln124_5_fu_638_p3) < $signed(max_val_4_reg_1337)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_650_p2 = (($signed(select_ln124_6_fu_644_p3) < $signed(max_val_9_reg_1329)) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_1053_p2 = ((tmp_100_reg_1423 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_727_p2 = ((tmp_101_fu_717_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_6_fu_1163_p2 = ((tmp_103_fu_1153_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_1041_p2 = ((tmp_99_reg_1413 != 4'd0) ? 1'b1 : 1'b0);

assign max_val_10_fu_655_p3 = ((icmp_ln878_fu_650_p2[0:0] == 1'b1) ? max_val_9_reg_1329 : select_ln124_4_fu_632_p3);

assign max_val_11_fu_671_p3 = ((icmp_ln878_1_fu_666_p2[0:0] == 1'b1) ? max_val_4_reg_1337 : select_ln124_fu_626_p3);

assign max_val_4_fu_519_p4 = {{r_sm_head1_dout[25:16]}};

assign max_val_9_fu_515_p1 = r_sm_head1_dout[9:0];

assign or_ln113_fu_439_p2 = (icmp_ln113_fu_415_p2 | and_ln112_fu_433_p2);

assign r_2_fu_1019_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? zext_ln1497_2_fu_1005_p1 : trunc_ln1497_3_fu_1009_p4);

assign r_fu_944_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? zext_ln1497_fu_930_p1 : trunc_ln1497_1_fu_934_p4);

assign recip_val_V_0_fu_850_p3 = ((icmp_ln886_5_reg_1360[0:0] == 1'b1) ? attn_inst_softmax_qk_head1_recip_table_two_V_q1 : attn_inst_softmax_qk_head1_recip_table_one_V_q1);

assign ret_10_fu_557_p2 = (ret_14_fu_552_p2 + 10'd8);

assign ret_12_fu_594_p2 = (ret_15_fu_589_p2 + 10'd8);

assign ret_13_fu_984_p2 = (select_ln1346_5_fu_968_p3 + zext_ln1346_2_fu_965_p1);

assign ret_14_fu_552_p2 = (max_val_fu_162 - trunc_ln215_reg_1319);

assign ret_15_fu_589_p2 = (max_val_8_fu_166 - tmp_1_reg_1324);

assign ret_fu_909_p2 = (select_ln1346_fu_895_p3 + zext_ln1346_fu_892_p1);

assign rq_sm_head1_din = tmp_5_fu_1065_p4;

assign select_ln112_fu_467_p3 = ((icmp_ln113_reg_1256[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_state_phi_fu_377_p4);

assign select_ln113_3_fu_480_p3 = ((and_ln112_reg_1261[0:0] == 1'b1) ? state_4_fu_474_p2 : select_ln112_fu_467_p3);

assign select_ln113_4_fu_459_p3 = ((icmp_ln113_fu_415_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_2_fu_453_p2);

assign select_ln113_fu_445_p3 = ((or_ln113_fu_439_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_ct_phi_fu_366_p4);

assign select_ln124_4_fu_632_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_9_reg_1329 : trunc_ln114_fu_544_p1);

assign select_ln124_5_fu_638_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_4_reg_1337 : max_val_8_fu_166);

assign select_ln124_6_fu_644_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_9_reg_1329 : max_val_fu_162);

assign select_ln124_fu_626_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_4_reg_1337 : trunc_ln114_2_fu_548_p1);

assign select_ln1346_4_fu_902_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_5_fu_968_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln1346_6_fu_976_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_fu_895_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln149_2_fu_1110_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_186_fu_194);

assign select_ln149_fu_1103_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_187_fu_198);

assign select_ln7_2_fu_797_p3 = ((tmp_104_fu_789_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln878_2_fu_779_p4);

assign select_ln7_fu_756_p3 = ((tmp_102_fu_748_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln2_fu_738_p4);

assign select_ln8_2_fu_1058_p3 = ((icmp_ln886_4_fu_1053_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_2_reg_1428);

assign select_ln8_fu_1046_p3 = ((icmp_ln886_fu_1041_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_reg_1418);

assign state_4_fu_474_p2 = (select_ln112_fu_467_p3 + 2'd1);

assign tmp_101_fu_717_p4 = {{add_ln1346_fu_702_p2[22:20]}};

assign tmp_102_fu_748_p3 = add_ln1346_5_fu_733_p2[32'd22];

assign tmp_103_fu_1153_p4 = {{add_ln1346_7_fu_1137_p2[22:20]}};

assign tmp_104_fu_789_p3 = add_ln1346_8_fu_774_p2[32'd22];

assign tmp_4_fu_832_p4 = {{attn_inst_softmax_qk_head1_exp_score_V_q1[31:16]}};

assign tmp_5_fu_1065_p4 = {{{select_ln8_2_fu_1058_p3}, {5'd0}}, {select_ln8_fu_1046_p3}};

assign tmp_98_fu_610_p3 = ret_12_fu_594_p2[32'd9];

assign tmp_fu_573_p3 = ret_10_fu_557_p2[32'd9];

assign trunc_ln114_2_fu_548_p1 = empty_185_fu_174[9:0];

assign trunc_ln114_fu_544_p1 = empty_fu_170[9:0];

assign trunc_ln1497_1_fu_934_p4 = {{add_ln1346_13_fu_915_p2[22:16]}};

assign trunc_ln1497_2_fu_995_p4 = {{ret_13_fu_984_p2[23:20]}};

assign trunc_ln1497_3_fu_1009_p4 = {{add_ln1346_15_fu_990_p2[22:16]}};

assign trunc_ln1497_s_fu_920_p4 = {{ret_fu_909_p2[23:20]}};

assign trunc_ln162_2_fu_600_p4 = {{ret_12_fu_594_p2[8:4]}};

assign trunc_ln1_fu_707_p4 = {{add_ln1346_fu_702_p2[22:14]}};

assign trunc_ln215_10_fu_820_p1 = attn_inst_softmax_qk_head1_exp_score_V_q1[15:0];

assign trunc_ln215_fu_501_p1 = attn_inst_softmax_qk_head1_buffer_V_q1[9:0];

assign trunc_ln2_fu_738_p4 = {{add_ln1346_5_fu_733_p2[21:17]}};

assign trunc_ln878_2_fu_779_p4 = {{add_ln1346_8_fu_774_p2[21:17]}};

assign trunc_ln8_2_fu_1037_p1 = r_2_fu_1019_p3[2:0];

assign trunc_ln8_fu_961_p1 = r_fu_944_p3[2:0];

assign trunc_ln_fu_563_p4 = {{ret_10_fu_557_p2[8:4]}};

assign xor_ln112_fu_421_p2 = (icmp_ln113_fu_415_p2 ^ 1'd1);

assign zext_ln114_fu_487_p1 = select_ln113_reg_1266;

assign zext_ln1346_2_fu_965_p1 = grp_fu_1177_p2;

assign zext_ln1346_fu_892_p1 = grp_fu_1169_p2;

assign zext_ln139_2_fu_678_p1 = max_val_11_fu_671_p3;

assign zext_ln139_fu_662_p1 = max_val_10_fu_655_p3;

assign zext_ln1497_2_fu_1005_p1 = trunc_ln1497_2_fu_995_p4;

assign zext_ln1497_fu_930_p1 = trunc_ln1497_s_fu_920_p4;

assign zext_ln534_1_fu_1084_p1 = cursor_V_2_reg_1350;

assign zext_ln534_4_fu_769_p1 = trunc_ln1_fu_707_p4;

assign zext_ln534_5_fu_810_p1 = trunc_ln1497_5_reg_1464;

assign zext_ln534_6_fu_764_p1 = select_ln7_fu_756_p3;

assign zext_ln534_7_fu_805_p1 = select_ln7_2_fu_797_p3;

assign zext_ln534_fu_1080_p1 = cursor_V_reg_1345;

assign zext_ln691_1_fu_1127_p1 = attn_inst_softmax_qk_head1_exp_table_V_load_1_reg_1448;

assign zext_ln691_fu_1117_p1 = attn_inst_softmax_qk_head1_exp_table_V_load_reg_1443;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1284[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    empty_fu_170[15:10] <= 6'b000000;
    empty_185_fu_174[15:10] <= 6'b000000;
end

endmodule //ATTN0_do_softmax128
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V_ram (addr0, ce0, d0, we0, addr1, ce1, q1,  clk);

parameter DWIDTH = 20;
parameter AWIDTH = 8;
parameter MEM_SIZE = 196;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V_ram.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd20;
parameter AddressRange = 32'd196;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V_ram ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V_ram (addr0, ce0, d0, we0, addr1, ce1, q1,  clk);

parameter DWIDTH = 32;
parameter AWIDTH = 8;
parameter MEM_SIZE = 196;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V_ram.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        q1 <= ram[addr1];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd32;
parameter AddressRange = 32'd196;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V_ram ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 16;
parameter AWIDTH = 5;
parameter MEM_SIZE = 32;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd16;
parameter AddressRange = 32'd32;
parameter AddressWidth = 32'd5;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V_rom ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 8;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V_rom ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

parameter DWIDTH = 8;
parameter AWIDTH = 6;
parameter MEM_SIZE = 64;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

parameter DataWidth = 32'd8;
parameter AddressRange = 32'd64;
parameter AddressWidth = 32'd6;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V_rom ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_softmax129 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        r_sm_head1_dout,
        r_sm_head1_empty_n,
        r_sm_head1_read,
        rq_sm_head1_din,
        rq_sm_head1_full_n,
        rq_sm_head1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state15 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] r_sm_head1_dout;
input   r_sm_head1_empty_n;
output   r_sm_head1_read;
output  [15:0] rq_sm_head1_din;
input   rq_sm_head1_full_n;
output   rq_sm_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_sm_head1_read;
reg rq_sm_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] attn_inst_softmax_qk_head2_buffer_V_address0;
reg    attn_inst_softmax_qk_head2_buffer_V_ce0;
reg    attn_inst_softmax_qk_head2_buffer_V_we0;
wire   [19:0] attn_inst_softmax_qk_head2_buffer_V_d0;
wire   [7:0] attn_inst_softmax_qk_head2_buffer_V_address1;
reg    attn_inst_softmax_qk_head2_buffer_V_ce1;
wire   [19:0] attn_inst_softmax_qk_head2_buffer_V_q1;
wire   [4:0] attn_inst_softmax_qk_head2_exp_table_V_address0;
reg    attn_inst_softmax_qk_head2_exp_table_V_ce0;
wire   [15:0] attn_inst_softmax_qk_head2_exp_table_V_q0;
wire   [4:0] attn_inst_softmax_qk_head2_exp_table_V_address1;
reg    attn_inst_softmax_qk_head2_exp_table_V_ce1;
wire   [15:0] attn_inst_softmax_qk_head2_exp_table_V_q1;
wire   [7:0] attn_inst_softmax_qk_head2_exp_score_V_address0;
reg    attn_inst_softmax_qk_head2_exp_score_V_ce0;
reg    attn_inst_softmax_qk_head2_exp_score_V_we0;
wire   [31:0] attn_inst_softmax_qk_head2_exp_score_V_d0;
wire   [7:0] attn_inst_softmax_qk_head2_exp_score_V_address1;
reg    attn_inst_softmax_qk_head2_exp_score_V_ce1;
wire   [31:0] attn_inst_softmax_qk_head2_exp_score_V_q1;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_two_V_address0;
reg    attn_inst_softmax_qk_head2_recip_table_two_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_two_V_q0;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_two_V_address1;
reg    attn_inst_softmax_qk_head2_recip_table_two_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_two_V_q1;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_one_V_address0;
reg    attn_inst_softmax_qk_head2_recip_table_one_V_ce0;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_one_V_q0;
wire   [5:0] attn_inst_softmax_qk_head2_recip_table_one_V_address1;
reg    attn_inst_softmax_qk_head2_recip_table_one_V_ce1;
wire   [7:0] attn_inst_softmax_qk_head2_recip_table_one_V_q1;
reg    r_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [1:0] select_ln113_1_reg_1279;
reg    rq_sm_head1_blk_n;
reg    ap_enable_reg_pp0_iter12;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter11_reg;
reg   [15:0] indvar_flatten48_reg_340;
reg   [9:0] indvar_flatten_reg_351;
reg   [7:0] ct_reg_362;
reg   [1:0] state_reg_373;
wire   [15:0] add_ln112_fu_403_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state6_pp0_stage0_iter7;
wire    ap_block_state7_pp0_stage0_iter8;
wire    ap_block_state8_pp0_stage0_iter9;
wire    ap_block_state9_pp0_stage0_iter10;
wire    ap_block_state10_pp0_stage0_iter11;
reg    ap_block_state11_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln112_fu_409_p2;
reg   [0:0] icmp_ln112_reg_1252;
reg   [0:0] icmp_ln112_reg_1252_pp0_iter1_reg;
wire   [0:0] icmp_ln113_fu_415_p2;
reg   [0:0] icmp_ln113_reg_1256;
wire   [0:0] and_ln112_fu_433_p2;
reg   [0:0] and_ln112_reg_1261;
wire   [7:0] select_ln113_fu_445_p3;
reg   [7:0] select_ln113_reg_1266;
wire   [9:0] select_ln113_2_fu_459_p3;
wire   [1:0] select_ln113_1_fu_480_p3;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter2_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter3_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter4_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter5_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter6_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter7_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter8_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter9_reg;
reg   [1:0] select_ln113_1_reg_1279_pp0_iter10_reg;
wire   [63:0] zext_ln114_fu_487_p1;
reg   [63:0] zext_ln114_reg_1284;
reg   [63:0] zext_ln114_reg_1284_pp0_iter2_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter3_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter4_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter5_reg;
reg   [63:0] zext_ln114_reg_1284_pp0_iter6_reg;
wire   [0:0] grp_fu_384_p2;
reg   [0:0] icmp_ln149_reg_1291;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter2_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter4_reg;
reg   [0:0] icmp_ln149_reg_1291_pp0_iter5_reg;
wire   [0:0] icmp_ln169_fu_491_p2;
reg   [0:0] icmp_ln169_reg_1302;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter2_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter3_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter4_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter5_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter6_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter7_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter8_reg;
reg   [0:0] icmp_ln169_reg_1302_pp0_iter9_reg;
reg   [0:0] icmp_ln124_reg_1306;
reg   [0:0] icmp_ln124_reg_1306_pp0_iter2_reg;
wire   [7:0] add_ln114_fu_496_p2;
wire   [9:0] trunc_ln215_fu_501_p1;
reg   [9:0] trunc_ln215_reg_1319;
reg   [9:0] tmp_2_reg_1324;
wire   [9:0] max_val_5_fu_515_p1;
reg   [9:0] max_val_5_reg_1329;
wire   [9:0] max_val_1_fu_519_p4;
reg   [9:0] max_val_1_reg_1337;
wire   [4:0] cursor_V_fu_581_p3;
reg   [4:0] cursor_V_reg_1345;
wire   [4:0] cursor_V_1_fu_618_p3;
reg   [4:0] cursor_V_1_reg_1350;
wire   [0:0] icmp_ln886_2_fu_727_p2;
reg   [0:0] icmp_ln886_2_reg_1360;
reg   [0:0] icmp_ln886_3_reg_1469;
reg   [0:0] in_two_0_2_load_reg_1406;
reg   [0:0] in_two_0_2_load_reg_1406_pp0_iter10_reg;
reg   [3:0] tmp_92_reg_1413;
wire   [2:0] trunc_ln8_fu_961_p1;
reg   [2:0] trunc_ln8_reg_1418;
reg   [3:0] tmp_93_reg_1423;
wire   [2:0] trunc_ln8_1_fu_1037_p1;
reg   [2:0] trunc_ln8_1_reg_1428;
reg   [15:0] attn_inst_softmax_qk_head2_exp_table_V_load_reg_1443;
reg    ap_enable_reg_pp0_iter5;
reg   [15:0] attn_inst_softmax_qk_head2_exp_table_V_load_1_reg_1448;
wire   [22:0] add_ln691_fu_1120_p2;
reg   [22:0] add_ln691_reg_1453;
wire   [22:0] add_ln691_1_fu_1130_p2;
reg   [22:0] add_ln691_1_reg_1459;
reg   [8:0] trunc_ln1497_2_reg_1464;
wire   [0:0] icmp_ln886_3_fu_1163_p2;
reg   [0:0] icmp_ln886_3_reg_1469_pp0_iter7_reg;
reg   [0:0] icmp_ln886_3_reg_1469_pp0_iter8_reg;
reg   [0:0] icmp_ln886_3_reg_1469_pp0_iter9_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg   [7:0] ap_phi_mux_ct_phi_fu_366_p4;
reg   [1:0] ap_phi_mux_state_phi_fu_377_p4;
wire   [63:0] zext_ln534_4_fu_764_p1;
wire   [63:0] zext_ln534_2_fu_769_p1;
wire   [63:0] zext_ln534_5_fu_805_p1;
wire   [63:0] zext_ln534_3_fu_810_p1;
wire   [63:0] zext_ln534_fu_1080_p1;
wire   [63:0] zext_ln534_1_fu_1084_p1;
reg   [9:0] max_val_fu_162;
wire   [9:0] max_val_6_fu_655_p3;
reg   [9:0] max_val_4_fu_166;
wire   [9:0] max_val_7_fu_671_p3;
reg   [15:0] empty_fu_170;
wire   [15:0] zext_ln139_fu_662_p1;
reg   [15:0] empty_181_fu_174;
wire   [15:0] zext_ln139_1_fu_678_p1;
reg   [7:0] recip_val_V_0_1_fu_178;
wire   [7:0] recip_val_V_0_fu_850_p3;
reg   [7:0] recip_val_V_1_2_fu_182;
reg   [0:0] in_two_0_2_fu_186;
reg   [0:0] in_two_1_2_fu_190;
reg   [22:0] empty_182_fu_194;
reg   [22:0] empty_183_fu_198;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln114_fu_427_p2;
wire   [0:0] xor_ln112_fu_421_p2;
wire   [0:0] or_ln113_fu_439_p2;
wire   [9:0] add_ln113_1_fu_453_p2;
wire   [1:0] select_ln112_fu_467_p3;
wire   [1:0] state_2_fu_474_p2;
wire   [9:0] ret_7_fu_552_p2;
wire   [9:0] ret_3_fu_557_p2;
wire   [0:0] tmp_fu_573_p3;
wire   [4:0] trunc_ln7_fu_563_p4;
wire   [9:0] ret_8_fu_589_p2;
wire   [9:0] ret_5_fu_594_p2;
wire   [0:0] tmp_91_fu_610_p3;
wire   [4:0] trunc_ln162_1_fu_600_p4;
wire   [9:0] trunc_ln114_1_fu_548_p1;
wire   [9:0] trunc_ln114_fu_544_p1;
wire   [9:0] select_ln124_3_fu_644_p3;
wire   [0:0] icmp_ln878_fu_650_p2;
wire   [9:0] select_ln124_1_fu_632_p3;
wire   [9:0] select_ln124_2_fu_638_p3;
wire   [0:0] icmp_ln878_1_fu_666_p2;
wire   [9:0] select_ln124_fu_626_p3;
wire   [22:0] add_ln1346_fu_702_p2;
wire   [2:0] tmp_94_fu_717_p4;
wire   [22:0] add_ln1346_1_fu_733_p2;
wire   [0:0] tmp_95_fu_748_p3;
wire   [4:0] trunc_ln_fu_738_p4;
wire   [4:0] select_ln7_fu_756_p3;
wire   [8:0] trunc_ln9_fu_707_p4;
wire   [22:0] add_ln1346_4_fu_774_p2;
wire   [0:0] tmp_97_fu_789_p3;
wire   [4:0] trunc_ln878_1_fu_779_p4;
wire   [4:0] select_ln7_1_fu_797_p3;
wire   [15:0] trunc_ln215_9_fu_820_p1;
wire   [15:0] tmp_7_fu_832_p4;
wire   [22:0] grp_fu_1169_p2;
wire   [23:0] select_ln1346_fu_895_p3;
wire   [23:0] zext_ln1346_fu_892_p1;
wire   [22:0] select_ln1346_1_fu_902_p3;
wire   [23:0] ret_fu_909_p2;
wire   [3:0] trunc_ln1497_6_fu_920_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_7_fu_915_p2;
wire   [6:0] zext_ln1497_fu_930_p1;
wire   [6:0] trunc_ln1497_7_fu_934_p4;
wire   [6:0] r_fu_944_p3;
wire   [22:0] grp_fu_1177_p2;
wire   [23:0] select_ln1346_2_fu_968_p3;
wire   [23:0] zext_ln1346_1_fu_965_p1;
wire   [22:0] select_ln1346_3_fu_976_p3;
wire   [23:0] ret_6_fu_984_p2;
wire   [3:0] trunc_ln1497_8_fu_995_p4;
(* use_dsp48 = "no" *) wire   [22:0] add_ln1346_9_fu_990_p2;
wire   [6:0] zext_ln1497_1_fu_1005_p1;
wire   [6:0] trunc_ln1497_9_fu_1009_p4;
wire   [6:0] r_1_fu_1019_p3;
wire   [0:0] icmp_ln886_fu_1041_p2;
wire   [0:0] icmp_ln886_1_fu_1053_p2;
wire   [2:0] select_ln8_1_fu_1058_p3;
wire   [2:0] select_ln8_fu_1046_p3;
wire   [10:0] tmp_8_fu_1065_p4;
wire   [22:0] select_ln149_1_fu_1110_p3;
wire   [22:0] zext_ln691_fu_1117_p1;
wire   [22:0] select_ln149_fu_1103_p3;
wire   [22:0] zext_ln691_1_fu_1127_p1;
wire   [22:0] add_ln1346_3_fu_1137_p2;
wire   [2:0] tmp_96_fu_1153_p4;
wire   [15:0] grp_fu_1169_p0;
wire   [7:0] grp_fu_1169_p1;
wire   [15:0] grp_fu_1177_p0;
wire   [7:0] grp_fu_1177_p1;
reg    grp_fu_1169_ce;
reg    grp_fu_1177_ce;
wire    ap_CS_fsm_state15;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [22:0] grp_fu_1169_p00;
wire   [22:0] grp_fu_1169_p10;
wire   [22:0] grp_fu_1177_p00;
wire   [22:0] grp_fu_1177_p10;
reg    ap_condition_1050;
reg    ap_condition_456;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter12 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter7 = 1'b0;
//#0 ap_enable_reg_pp0_iter8 = 1'b0;
//#0 ap_enable_reg_pp0_iter9 = 1'b0;
//#0 ap_enable_reg_pp0_iter10 = 1'b0;
//#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_buffer_V #(
    .DataWidth( 20 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head2_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_buffer_V_address0),
    .ce0(attn_inst_softmax_qk_head2_buffer_V_ce0),
    .we0(attn_inst_softmax_qk_head2_buffer_V_we0),
    .d0(attn_inst_softmax_qk_head2_buffer_V_d0),
    .address1(attn_inst_softmax_qk_head2_buffer_V_address1),
    .ce1(attn_inst_softmax_qk_head2_buffer_V_ce1),
    .q1(attn_inst_softmax_qk_head2_buffer_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_table_V #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_softmax_qk_head2_exp_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_exp_table_V_address0),
    .ce0(attn_inst_softmax_qk_head2_exp_table_V_ce0),
    .q0(attn_inst_softmax_qk_head2_exp_table_V_q0),
    .address1(attn_inst_softmax_qk_head2_exp_table_V_address1),
    .ce1(attn_inst_softmax_qk_head2_exp_table_V_ce1),
    .q1(attn_inst_softmax_qk_head2_exp_table_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_exp_score_V #(
    .DataWidth( 32 ),
    .AddressRange( 196 ),
    .AddressWidth( 8 ))
attn_inst_softmax_qk_head2_exp_score_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_exp_score_V_address0),
    .ce0(attn_inst_softmax_qk_head2_exp_score_V_ce0),
    .we0(attn_inst_softmax_qk_head2_exp_score_V_we0),
    .d0(attn_inst_softmax_qk_head2_exp_score_V_d0),
    .address1(attn_inst_softmax_qk_head2_exp_score_V_address1),
    .ce1(attn_inst_softmax_qk_head2_exp_score_V_ce1),
    .q1(attn_inst_softmax_qk_head2_exp_score_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_two_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head2_recip_table_two_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_recip_table_two_V_address0),
    .ce0(attn_inst_softmax_qk_head2_recip_table_two_V_ce0),
    .q0(attn_inst_softmax_qk_head2_recip_table_two_V_q0),
    .address1(attn_inst_softmax_qk_head2_recip_table_two_V_address1),
    .ce1(attn_inst_softmax_qk_head2_recip_table_two_V_ce1),
    .q1(attn_inst_softmax_qk_head2_recip_table_two_V_q1)
);

ATTN0_do_softmax128_attn_inst_softmax_qk_head1_recip_table_one_V #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
attn_inst_softmax_qk_head2_recip_table_one_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_softmax_qk_head2_recip_table_one_V_address0),
    .ce0(attn_inst_softmax_qk_head2_recip_table_one_V_ce0),
    .q0(attn_inst_softmax_qk_head2_recip_table_one_V_q0),
    .address1(attn_inst_softmax_qk_head2_recip_table_one_V_address1),
    .ce1(attn_inst_softmax_qk_head2_recip_table_one_V_ce1),
    .q1(attn_inst_softmax_qk_head2_recip_table_one_V_q1)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U807(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1169_p0),
    .din1(grp_fu_1169_p1),
    .ce(grp_fu_1169_ce),
    .dout(grp_fu_1169_p2)
);

ATTN0_mul_mul_16ns_8ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_16ns_8ns_23_4_1_U808(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1177_p0),
    .din1(grp_fu_1177_p1),
    .ce(grp_fu_1177_ce),
    .dout(grp_fu_1177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ct_reg_362 <= add_ln114_fu_496_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ct_reg_362 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1050)) begin
        if ((icmp_ln886_3_reg_1469_pp0_iter9_reg == 1'd1)) begin
            in_two_1_2_fu_190 <= 1'd0;
        end else if ((icmp_ln886_3_reg_1469_pp0_iter9_reg == 1'd0)) begin
            in_two_1_2_fu_190 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten48_reg_340 <= add_ln112_fu_403_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten48_reg_340 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_351 <= select_ln113_2_fu_459_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_351 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_456)) begin
        if ((icmp_ln886_3_reg_1469_pp0_iter7_reg == 1'd1)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head2_recip_table_one_V_q0;
        end else if ((icmp_ln886_3_reg_1469_pp0_iter7_reg == 1'd0)) begin
            recip_val_V_1_2_fu_182 <= attn_inst_softmax_qk_head2_recip_table_two_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        state_reg_373 <= select_ln113_1_reg_1279;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        state_reg_373 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_1_reg_1279_pp0_iter5_reg == 2'd1))) begin
        add_ln691_1_reg_1459 <= add_ln691_1_fu_1130_p2;
        add_ln691_reg_1453 <= add_ln691_fu_1120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd0))) begin
        and_ln112_reg_1261 <= and_ln112_fu_433_p2;
        icmp_ln113_reg_1256 <= icmp_ln113_fu_415_p2;
        select_ln113_reg_1266 <= select_ln113_fu_445_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_1_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head2_exp_table_V_load_1_reg_1448 <= attn_inst_softmax_qk_head2_exp_table_V_q0;
        attn_inst_softmax_qk_head2_exp_table_V_load_reg_1443 <= attn_inst_softmax_qk_head2_exp_table_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_1_reg_1279_pp0_iter2_reg == 2'd1))) begin
        cursor_V_1_reg_1350 <= cursor_V_1_fu_618_p3;
        cursor_V_reg_1345 <= cursor_V_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln113_1_reg_1279_pp0_iter2_reg == 2'd0))) begin
        empty_181_fu_174[9 : 0] <= zext_ln139_1_fu_678_p1[9 : 0];
        empty_fu_170[9 : 0] <= zext_ln139_fu_662_p1[9 : 0];
        max_val_4_fu_166 <= max_val_7_fu_671_p3;
        max_val_fu_162 <= max_val_6_fu_655_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_3_fu_1163_p2 == 1'd1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln886_3_fu_1163_p2 == 1'd0) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter5_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd0) & (select_ln113_1_reg_1279_pp0_iter5_reg == 2'd1)))) begin
        empty_182_fu_194 <= add_ln691_fu_1120_p2;
        empty_183_fu_198 <= add_ln691_1_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln112_reg_1252 <= icmp_ln112_fu_409_p2;
        icmp_ln112_reg_1252_pp0_iter1_reg <= icmp_ln112_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_1_fu_480_p3 == 2'd0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln124_reg_1306 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln124_reg_1306_pp0_iter2_reg <= icmp_ln124_reg_1306;
        icmp_ln149_reg_1291_pp0_iter2_reg <= icmp_ln149_reg_1291;
        icmp_ln149_reg_1291_pp0_iter3_reg <= icmp_ln149_reg_1291_pp0_iter2_reg;
        icmp_ln149_reg_1291_pp0_iter4_reg <= icmp_ln149_reg_1291_pp0_iter3_reg;
        icmp_ln149_reg_1291_pp0_iter5_reg <= icmp_ln149_reg_1291_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter2_reg <= icmp_ln169_reg_1302;
        icmp_ln169_reg_1302_pp0_iter3_reg <= icmp_ln169_reg_1302_pp0_iter2_reg;
        icmp_ln169_reg_1302_pp0_iter4_reg <= icmp_ln169_reg_1302_pp0_iter3_reg;
        icmp_ln169_reg_1302_pp0_iter5_reg <= icmp_ln169_reg_1302_pp0_iter4_reg;
        icmp_ln169_reg_1302_pp0_iter6_reg <= icmp_ln169_reg_1302_pp0_iter5_reg;
        icmp_ln169_reg_1302_pp0_iter7_reg <= icmp_ln169_reg_1302_pp0_iter6_reg;
        icmp_ln169_reg_1302_pp0_iter8_reg <= icmp_ln169_reg_1302_pp0_iter7_reg;
        icmp_ln169_reg_1302_pp0_iter9_reg <= icmp_ln169_reg_1302_pp0_iter8_reg;
        icmp_ln886_3_reg_1469_pp0_iter7_reg <= icmp_ln886_3_reg_1469;
        icmp_ln886_3_reg_1469_pp0_iter8_reg <= icmp_ln886_3_reg_1469_pp0_iter7_reg;
        icmp_ln886_3_reg_1469_pp0_iter9_reg <= icmp_ln886_3_reg_1469_pp0_iter8_reg;
        in_two_0_2_load_reg_1406_pp0_iter10_reg <= in_two_0_2_load_reg_1406;
        select_ln113_1_reg_1279_pp0_iter10_reg <= select_ln113_1_reg_1279_pp0_iter9_reg;
        select_ln113_1_reg_1279_pp0_iter11_reg <= select_ln113_1_reg_1279_pp0_iter10_reg;
        select_ln113_1_reg_1279_pp0_iter2_reg <= select_ln113_1_reg_1279;
        select_ln113_1_reg_1279_pp0_iter3_reg <= select_ln113_1_reg_1279_pp0_iter2_reg;
        select_ln113_1_reg_1279_pp0_iter4_reg <= select_ln113_1_reg_1279_pp0_iter3_reg;
        select_ln113_1_reg_1279_pp0_iter5_reg <= select_ln113_1_reg_1279_pp0_iter4_reg;
        select_ln113_1_reg_1279_pp0_iter6_reg <= select_ln113_1_reg_1279_pp0_iter5_reg;
        select_ln113_1_reg_1279_pp0_iter7_reg <= select_ln113_1_reg_1279_pp0_iter6_reg;
        select_ln113_1_reg_1279_pp0_iter8_reg <= select_ln113_1_reg_1279_pp0_iter7_reg;
        select_ln113_1_reg_1279_pp0_iter9_reg <= select_ln113_1_reg_1279_pp0_iter8_reg;
        zext_ln114_reg_1284_pp0_iter2_reg[7 : 0] <= zext_ln114_reg_1284[7 : 0];
        zext_ln114_reg_1284_pp0_iter3_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter2_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter4_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter3_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter5_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter4_reg[7 : 0];
        zext_ln114_reg_1284_pp0_iter6_reg[7 : 0] <= zext_ln114_reg_1284_pp0_iter5_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln113_1_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln149_reg_1291 <= grp_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln113_1_fu_480_p3 == 2'd1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        icmp_ln169_reg_1302 <= icmp_ln169_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter6_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter6_reg == 2'd1))) begin
        icmp_ln886_2_reg_1360 <= icmp_ln886_2_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln169_reg_1302_pp0_iter5_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter5_reg == 2'd1))) begin
        icmp_ln886_3_reg_1469 <= icmp_ln886_3_fu_1163_p2;
        trunc_ln1497_2_reg_1464 <= {{add_ln1346_3_fu_1137_p2[22:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter7_reg == 2'd1))) begin
        in_two_0_2_fu_186 <= icmp_ln886_2_reg_1360;
        recip_val_V_0_1_fu_178 <= recip_val_V_0_fu_850_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_1_reg_1279_pp0_iter8_reg == 2'd2))) begin
        in_two_0_2_load_reg_1406 <= in_two_0_2_fu_186;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_1_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_val_1_reg_1337 <= {{r_sm_head1_dout[25:16]}};
        max_val_5_reg_1329 <= max_val_5_fu_515_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        select_ln113_1_reg_1279 <= select_ln113_1_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln113_1_reg_1279 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_1324 <= {{attn_inst_softmax_qk_head2_buffer_V_q1[19:10]}};
        trunc_ln215_reg_1319 <= trunc_ln215_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_1_reg_1279_pp0_iter10_reg == 2'd2))) begin
        tmp_92_reg_1413 <= {{r_fu_944_p3[6:3]}};
        tmp_93_reg_1423 <= {{r_1_fu_1019_p3[6:3]}};
        trunc_ln8_1_reg_1428 <= trunc_ln8_1_fu_1037_p1;
        trunc_ln8_reg_1418 <= trunc_ln8_fu_961_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1252 == 1'd0))) begin
        zext_ln114_reg_1284[7 : 0] <= zext_ln114_fu_487_p1[7 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_fu_409_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln112_reg_1252 == 1'd0))) begin
        ap_phi_mux_ct_phi_fu_366_p4 = add_ln114_fu_496_p2;
    end else begin
        ap_phi_mux_ct_phi_fu_366_p4 = ct_reg_362;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln112_reg_1252_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_state_phi_fu_377_p4 = select_ln113_1_reg_1279;
    end else begin
        ap_phi_mux_state_phi_fu_377_p4 = state_reg_373;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head2_buffer_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        attn_inst_softmax_qk_head2_buffer_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_1_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        attn_inst_softmax_qk_head2_buffer_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_score_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_score_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (select_ln113_1_reg_1279_pp0_iter4_reg == 2'd1))) begin
        attn_inst_softmax_qk_head2_exp_score_V_we0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_score_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_table_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        attn_inst_softmax_qk_head2_exp_table_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_exp_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_one_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_one_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_one_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_one_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_two_V_ce0 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_two_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        attn_inst_softmax_qk_head2_recip_table_two_V_ce1 = 1'b1;
    end else begin
        attn_inst_softmax_qk_head2_recip_table_two_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1169_ce = 1'b1;
    end else begin
        grp_fu_1169_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1177_ce = 1'b1;
    end else begin
        grp_fu_1177_ce = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln113_1_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_blk_n = r_sm_head1_empty_n;
    end else begin
        r_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln113_1_reg_1279 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_sm_head1_read = 1'b1;
    end else begin
        r_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_blk_n = rq_sm_head1_full_n;
    end else begin
        rq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        rq_sm_head1_write = 1'b1;
    end else begin
        rq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_403_p2 = (indvar_flatten48_reg_340 + 16'd1);

assign add_ln113_1_fu_453_p2 = (indvar_flatten_reg_351 + 10'd1);

assign add_ln114_fu_496_p2 = (select_ln113_reg_1266 + 8'd1);

assign add_ln1346_1_fu_733_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd7791996));

assign add_ln1346_3_fu_1137_p2 = ($signed(add_ln691_1_fu_1130_p2) + $signed(23'd8363366));

assign add_ln1346_4_fu_774_p2 = ($signed(add_ln691_1_reg_1459) + $signed(23'd7791996));

assign add_ln1346_7_fu_915_p2 = (select_ln1346_1_fu_902_p3 + grp_fu_1169_p2);

assign add_ln1346_9_fu_990_p2 = (select_ln1346_3_fu_976_p3 + grp_fu_1177_p2);

assign add_ln1346_fu_702_p2 = ($signed(add_ln691_reg_1453) + $signed(23'd8363366));

assign add_ln691_1_fu_1130_p2 = (select_ln149_fu_1103_p3 + zext_ln691_1_fu_1127_p1);

assign add_ln691_fu_1120_p2 = (select_ln149_1_fu_1110_p3 + zext_ln691_fu_1117_p1);

assign and_ln112_fu_433_p2 = (xor_ln112_fu_421_p2 & icmp_ln114_fu_427_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_1_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_1_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((rq_sm_head1_full_n == 1'b0) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((select_ln113_1_reg_1279 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (r_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter12 = ((rq_sm_head1_full_n == 1'b0) & (select_ln113_1_reg_1279_pp0_iter11_reg == 2'd2));
end

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((select_ln113_1_reg_1279 == 2'd0) & (r_sm_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1050 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter9_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter9_reg == 2'd1));
end

always @ (*) begin
    ap_condition_456 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln169_reg_1302_pp0_iter7_reg == 1'd1) & (select_ln113_1_reg_1279_pp0_iter7_reg == 2'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign attn_inst_softmax_qk_head2_buffer_V_address0 = zext_ln114_reg_1284;

assign attn_inst_softmax_qk_head2_buffer_V_address1 = zext_ln114_fu_487_p1;

assign attn_inst_softmax_qk_head2_buffer_V_d0 = {{max_val_1_fu_519_p4}, {max_val_5_fu_515_p1}};

assign attn_inst_softmax_qk_head2_exp_score_V_address0 = zext_ln114_reg_1284_pp0_iter4_reg;

assign attn_inst_softmax_qk_head2_exp_score_V_address1 = zext_ln114_reg_1284_pp0_iter6_reg;

assign attn_inst_softmax_qk_head2_exp_score_V_d0 = {{attn_inst_softmax_qk_head2_exp_table_V_q0}, {attn_inst_softmax_qk_head2_exp_table_V_q1}};

assign attn_inst_softmax_qk_head2_exp_table_V_address0 = zext_ln534_1_fu_1084_p1;

assign attn_inst_softmax_qk_head2_exp_table_V_address1 = zext_ln534_fu_1080_p1;

assign attn_inst_softmax_qk_head2_recip_table_one_V_address0 = zext_ln534_3_fu_810_p1;

assign attn_inst_softmax_qk_head2_recip_table_one_V_address1 = zext_ln534_2_fu_769_p1;

assign attn_inst_softmax_qk_head2_recip_table_two_V_address0 = zext_ln534_5_fu_805_p1;

assign attn_inst_softmax_qk_head2_recip_table_two_V_address1 = zext_ln534_4_fu_764_p1;

assign cursor_V_1_fu_618_p3 = ((tmp_91_fu_610_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln162_1_fu_600_p4);

assign cursor_V_fu_581_p3 = ((tmp_fu_573_p3[0:0] == 1'b1) ? 5'd31 : trunc_ln7_fu_563_p4);

assign grp_fu_1169_p0 = grp_fu_1169_p00;

assign grp_fu_1169_p00 = trunc_ln215_9_fu_820_p1;

assign grp_fu_1169_p1 = grp_fu_1169_p10;

assign grp_fu_1169_p10 = recip_val_V_0_1_fu_178;

assign grp_fu_1177_p0 = grp_fu_1177_p00;

assign grp_fu_1177_p00 = tmp_7_fu_832_p4;

assign grp_fu_1177_p1 = grp_fu_1177_p10;

assign grp_fu_1177_p10 = recip_val_V_1_2_fu_182;

assign grp_fu_384_p2 = ((select_ln113_reg_1266 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_409_p2 = ((indvar_flatten48_reg_340 == 16'd57624) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_415_p2 = ((indvar_flatten_reg_351 == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_427_p2 = ((ap_phi_mux_ct_phi_fu_366_p4 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_491_p2 = ((select_ln113_reg_1266 == 8'd195) ? 1'b1 : 1'b0);

assign icmp_ln878_1_fu_666_p2 = (($signed(select_ln124_2_fu_638_p3) < $signed(max_val_1_reg_1337)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_650_p2 = (($signed(select_ln124_3_fu_644_p3) < $signed(max_val_5_reg_1329)) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_1053_p2 = ((tmp_93_reg_1423 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_727_p2 = ((tmp_94_fu_717_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_1163_p2 = ((tmp_96_fu_1153_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_1041_p2 = ((tmp_92_reg_1413 != 4'd0) ? 1'b1 : 1'b0);

assign max_val_1_fu_519_p4 = {{r_sm_head1_dout[25:16]}};

assign max_val_5_fu_515_p1 = r_sm_head1_dout[9:0];

assign max_val_6_fu_655_p3 = ((icmp_ln878_fu_650_p2[0:0] == 1'b1) ? max_val_5_reg_1329 : select_ln124_1_fu_632_p3);

assign max_val_7_fu_671_p3 = ((icmp_ln878_1_fu_666_p2[0:0] == 1'b1) ? max_val_1_reg_1337 : select_ln124_fu_626_p3);

assign or_ln113_fu_439_p2 = (icmp_ln113_fu_415_p2 | and_ln112_fu_433_p2);

assign r_1_fu_1019_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? zext_ln1497_1_fu_1005_p1 : trunc_ln1497_9_fu_1009_p4);

assign r_fu_944_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? zext_ln1497_fu_930_p1 : trunc_ln1497_7_fu_934_p4);

assign recip_val_V_0_fu_850_p3 = ((icmp_ln886_2_reg_1360[0:0] == 1'b1) ? attn_inst_softmax_qk_head2_recip_table_two_V_q1 : attn_inst_softmax_qk_head2_recip_table_one_V_q1);

assign ret_3_fu_557_p2 = (ret_7_fu_552_p2 + 10'd8);

assign ret_5_fu_594_p2 = (ret_8_fu_589_p2 + 10'd8);

assign ret_6_fu_984_p2 = (select_ln1346_2_fu_968_p3 + zext_ln1346_1_fu_965_p1);

assign ret_7_fu_552_p2 = (max_val_fu_162 - trunc_ln215_reg_1319);

assign ret_8_fu_589_p2 = (max_val_4_fu_166 - tmp_2_reg_1324);

assign ret_fu_909_p2 = (select_ln1346_fu_895_p3 + zext_ln1346_fu_892_p1);

assign rq_sm_head1_din = tmp_8_fu_1065_p4;

assign select_ln112_fu_467_p3 = ((icmp_ln113_reg_1256[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_state_phi_fu_377_p4);

assign select_ln113_1_fu_480_p3 = ((and_ln112_reg_1261[0:0] == 1'b1) ? state_2_fu_474_p2 : select_ln112_fu_467_p3);

assign select_ln113_2_fu_459_p3 = ((icmp_ln113_fu_415_p2[0:0] == 1'b1) ? 10'd1 : add_ln113_1_fu_453_p2);

assign select_ln113_fu_445_p3 = ((or_ln113_fu_439_p2[0:0] == 1'b1) ? 8'd0 : ap_phi_mux_ct_phi_fu_366_p4);

assign select_ln124_1_fu_632_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_5_reg_1329 : trunc_ln114_fu_544_p1);

assign select_ln124_2_fu_638_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_1_reg_1337 : max_val_4_fu_166);

assign select_ln124_3_fu_644_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_5_reg_1329 : max_val_fu_162);

assign select_ln124_fu_626_p3 = ((icmp_ln124_reg_1306_pp0_iter2_reg[0:0] == 1'b1) ? max_val_1_reg_1337 : trunc_ln114_1_fu_548_p1);

assign select_ln1346_1_fu_902_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_2_fu_968_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln1346_3_fu_976_p3 = ((in_two_1_2_fu_190[0:0] == 1'b1) ? 23'd524288 : 23'd32768);

assign select_ln1346_fu_895_p3 = ((in_two_0_2_load_reg_1406_pp0_iter10_reg[0:0] == 1'b1) ? 24'd524288 : 24'd32768);

assign select_ln149_1_fu_1110_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_182_fu_194);

assign select_ln149_fu_1103_p3 = ((icmp_ln149_reg_1291_pp0_iter5_reg[0:0] == 1'b1) ? 23'd0 : empty_183_fu_198);

assign select_ln7_1_fu_797_p3 = ((tmp_97_fu_789_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln878_1_fu_779_p4);

assign select_ln7_fu_756_p3 = ((tmp_95_fu_748_p3[0:0] == 1'b1) ? 5'd0 : trunc_ln_fu_738_p4);

assign select_ln8_1_fu_1058_p3 = ((icmp_ln886_1_fu_1053_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_1_reg_1428);

assign select_ln8_fu_1046_p3 = ((icmp_ln886_fu_1041_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln8_reg_1418);

assign state_2_fu_474_p2 = (select_ln112_fu_467_p3 + 2'd1);

assign tmp_7_fu_832_p4 = {{attn_inst_softmax_qk_head2_exp_score_V_q1[31:16]}};

assign tmp_8_fu_1065_p4 = {{{select_ln8_1_fu_1058_p3}, {5'd0}}, {select_ln8_fu_1046_p3}};

assign tmp_91_fu_610_p3 = ret_5_fu_594_p2[32'd9];

assign tmp_94_fu_717_p4 = {{add_ln1346_fu_702_p2[22:20]}};

assign tmp_95_fu_748_p3 = add_ln1346_1_fu_733_p2[32'd22];

assign tmp_96_fu_1153_p4 = {{add_ln1346_3_fu_1137_p2[22:20]}};

assign tmp_97_fu_789_p3 = add_ln1346_4_fu_774_p2[32'd22];

assign tmp_fu_573_p3 = ret_3_fu_557_p2[32'd9];

assign trunc_ln114_1_fu_548_p1 = empty_181_fu_174[9:0];

assign trunc_ln114_fu_544_p1 = empty_fu_170[9:0];

assign trunc_ln1497_6_fu_920_p4 = {{ret_fu_909_p2[23:20]}};

assign trunc_ln1497_7_fu_934_p4 = {{add_ln1346_7_fu_915_p2[22:16]}};

assign trunc_ln1497_8_fu_995_p4 = {{ret_6_fu_984_p2[23:20]}};

assign trunc_ln1497_9_fu_1009_p4 = {{add_ln1346_9_fu_990_p2[22:16]}};

assign trunc_ln162_1_fu_600_p4 = {{ret_5_fu_594_p2[8:4]}};

assign trunc_ln215_9_fu_820_p1 = attn_inst_softmax_qk_head2_exp_score_V_q1[15:0];

assign trunc_ln215_fu_501_p1 = attn_inst_softmax_qk_head2_buffer_V_q1[9:0];

assign trunc_ln7_fu_563_p4 = {{ret_3_fu_557_p2[8:4]}};

assign trunc_ln878_1_fu_779_p4 = {{add_ln1346_4_fu_774_p2[21:17]}};

assign trunc_ln8_1_fu_1037_p1 = r_1_fu_1019_p3[2:0];

assign trunc_ln8_fu_961_p1 = r_fu_944_p3[2:0];

assign trunc_ln9_fu_707_p4 = {{add_ln1346_fu_702_p2[22:14]}};

assign trunc_ln_fu_738_p4 = {{add_ln1346_1_fu_733_p2[21:17]}};

assign xor_ln112_fu_421_p2 = (icmp_ln113_fu_415_p2 ^ 1'd1);

assign zext_ln114_fu_487_p1 = select_ln113_reg_1266;

assign zext_ln1346_1_fu_965_p1 = grp_fu_1177_p2;

assign zext_ln1346_fu_892_p1 = grp_fu_1169_p2;

assign zext_ln139_1_fu_678_p1 = max_val_7_fu_671_p3;

assign zext_ln139_fu_662_p1 = max_val_6_fu_655_p3;

assign zext_ln1497_1_fu_1005_p1 = trunc_ln1497_8_fu_995_p4;

assign zext_ln1497_fu_930_p1 = trunc_ln1497_6_fu_920_p4;

assign zext_ln534_1_fu_1084_p1 = cursor_V_1_reg_1350;

assign zext_ln534_2_fu_769_p1 = trunc_ln9_fu_707_p4;

assign zext_ln534_3_fu_810_p1 = trunc_ln1497_2_reg_1464;

assign zext_ln534_4_fu_764_p1 = select_ln7_fu_756_p3;

assign zext_ln534_5_fu_805_p1 = select_ln7_1_fu_797_p3;

assign zext_ln534_fu_1080_p1 = cursor_V_reg_1345;

assign zext_ln691_1_fu_1127_p1 = attn_inst_softmax_qk_head2_exp_table_V_load_1_reg_1448;

assign zext_ln691_fu_1117_p1 = attn_inst_softmax_qk_head2_exp_table_V_load_reg_1443;

always @ (posedge ap_clk) begin
    zext_ln114_reg_1284[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln114_reg_1284_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    empty_fu_170[15:10] <= 6'b000000;
    empty_181_fu_174[15:10] <= 6'b000000;
end

endmodule //ATTN0_do_softmax129
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_split (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_dout,
        qq_sm_empty_n,
        qq_sm_read,
        qq_sm_head1_din,
        qq_sm_head1_full_n,
        qq_sm_head1_write,
        qq_sm_head2_din,
        qq_sm_head2_full_n,
        qq_sm_head2_write,
        qq_sm_head3_din,
        qq_sm_head3_full_n,
        qq_sm_head3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_dout;
input   qq_sm_empty_n;
output   qq_sm_read;
output  [15:0] qq_sm_head1_din;
input   qq_sm_head1_full_n;
output   qq_sm_head1_write;
output  [15:0] qq_sm_head2_din;
input   qq_sm_head2_full_n;
output   qq_sm_head2_write;
output  [15:0] qq_sm_head3_din;
input   qq_sm_head3_full_n;
output   qq_sm_head3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_read;
reg qq_sm_head1_write;
reg qq_sm_head2_write;
reg qq_sm_head3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln35_reg_230;
reg   [0:0] icmp_ln35_reg_230_pp0_iter1_reg;
reg    qq_sm_head1_blk_n;
reg   [1:0] select_ln36_reg_246;
reg    qq_sm_head2_blk_n;
reg    qq_sm_head3_blk_n;
reg   [14:0] indvar_flatten11_reg_92;
reg   [8:0] indvar_flatten_reg_103;
reg   [1:0] h_reg_114;
reg   [6:0] cht_reg_125;
wire   [14:0] add_ln35_fu_136_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_142_p2;
wire   [0:0] icmp_ln36_fu_148_p2;
reg   [0:0] icmp_ln36_reg_234;
wire   [8:0] select_ln36_3_fu_160_p3;
wire   [1:0] select_ln36_fu_198_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [6:0] cht_3_fu_217_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [1:0] ap_phi_mux_h_phi_fu_118_p4;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_3_fu_154_p2;
wire   [0:0] icmp_ln37_fu_180_p2;
wire   [0:0] xor_ln35_fu_175_p2;
wire   [1:0] select_ln35_fu_168_p3;
wire   [0:0] and_ln35_fu_186_p2;
wire   [1:0] h_5_fu_192_p2;
wire   [0:0] or_ln37_fu_212_p2;
wire   [6:0] add_ln37_fu_206_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cht_reg_125 <= cht_3_fu_217_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cht_reg_125 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        h_reg_114 <= select_ln36_reg_246;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_114 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten11_reg_92 <= add_ln35_fu_136_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_92 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten_reg_103 <= select_ln36_3_fu_160_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_103 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln35_reg_230 <= icmp_ln35_fu_142_p2;
        icmp_ln35_reg_230_pp0_iter1_reg <= icmp_ln35_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        icmp_ln36_reg_234 <= icmp_ln36_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln36_reg_246 <= select_ln36_fu_198_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_h_phi_fu_118_p4 = select_ln36_reg_246;
    end else begin
        ap_phi_mux_h_phi_fu_118_p4 = h_reg_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_blk_n = qq_sm_empty_n;
    end else begin
        qq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_blk_n = qq_sm_head1_full_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_write = 1'b1;
    end else begin
        qq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_blk_n = qq_sm_head2_full_n;
    end else begin
        qq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_write = 1'b1;
    end else begin
        qq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_blk_n = qq_sm_head3_full_n;
    end else begin
        qq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_write = 1'b1;
    end else begin
        qq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_read = 1'b1;
    end else begin
        qq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_136_p2 = (indvar_flatten11_reg_92 + 15'd1);

assign add_ln36_3_fu_154_p2 = (indvar_flatten_reg_103 + 9'd1);

assign add_ln37_fu_206_p2 = (cht_reg_125 + 7'd1);

assign and_ln35_fu_186_p2 = (xor_ln35_fu_175_p2 & icmp_ln37_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cht_3_fu_217_p3 = ((or_ln37_fu_212_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_206_p2);

assign h_5_fu_192_p2 = (select_ln35_fu_168_p3 + 2'd1);

assign icmp_ln35_fu_142_p2 = ((indvar_flatten11_reg_92 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_148_p2 = ((indvar_flatten_reg_103 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_180_p2 = ((cht_reg_125 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln37_fu_212_p2 = (icmp_ln36_reg_234 | and_ln35_fu_186_p2);

assign qq_sm_head1_din = qq_sm_dout;

assign qq_sm_head2_din = qq_sm_dout;

assign qq_sm_head3_din = qq_sm_dout;

assign select_ln35_fu_168_p3 = ((icmp_ln36_reg_234[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_h_phi_fu_118_p4);

assign select_ln36_3_fu_160_p3 = ((icmp_ln36_fu_148_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_3_fu_154_p2);

assign select_ln36_fu_198_p3 = ((and_ln35_fu_186_p2[0:0] == 1'b1) ? h_5_fu_192_p2 : select_ln35_fu_168_p3);

assign start_out = real_start;

assign xor_ln35_fu_175_p2 = (icmp_ln36_reg_234 ^ 1'd1);

endmodule //ATTN0_do_split
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_split121 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_dout,
        qq_sm_empty_n,
        qq_sm_read,
        qq_sm_head1_din,
        qq_sm_head1_full_n,
        qq_sm_head1_write,
        qq_sm_head2_din,
        qq_sm_head2_full_n,
        qq_sm_head2_write,
        qq_sm_head3_din,
        qq_sm_head3_full_n,
        qq_sm_head3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_dout;
input   qq_sm_empty_n;
output   qq_sm_read;
output  [15:0] qq_sm_head1_din;
input   qq_sm_head1_full_n;
output   qq_sm_head1_write;
output  [15:0] qq_sm_head2_din;
input   qq_sm_head2_full_n;
output   qq_sm_head2_write;
output  [15:0] qq_sm_head3_din;
input   qq_sm_head3_full_n;
output   qq_sm_head3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_read;
reg qq_sm_head1_write;
reg qq_sm_head2_write;
reg qq_sm_head3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln35_reg_230;
reg   [0:0] icmp_ln35_reg_230_pp0_iter1_reg;
reg    qq_sm_head1_blk_n;
reg   [1:0] select_ln36_reg_246;
reg    qq_sm_head2_blk_n;
reg    qq_sm_head3_blk_n;
reg   [14:0] indvar_flatten11_reg_92;
reg   [8:0] indvar_flatten_reg_103;
reg   [1:0] h_reg_114;
reg   [6:0] cht_reg_125;
wire   [14:0] add_ln35_fu_136_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_142_p2;
wire   [0:0] icmp_ln36_fu_148_p2;
reg   [0:0] icmp_ln36_reg_234;
wire   [8:0] select_ln36_2_fu_160_p3;
wire   [1:0] select_ln36_fu_198_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [6:0] cht_2_fu_217_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [1:0] ap_phi_mux_h_phi_fu_118_p4;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_2_fu_154_p2;
wire   [0:0] icmp_ln37_fu_180_p2;
wire   [0:0] xor_ln35_fu_175_p2;
wire   [1:0] select_ln35_fu_168_p3;
wire   [0:0] and_ln35_fu_186_p2;
wire   [1:0] h_4_fu_192_p2;
wire   [0:0] or_ln37_fu_212_p2;
wire   [6:0] add_ln37_fu_206_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cht_reg_125 <= cht_2_fu_217_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cht_reg_125 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        h_reg_114 <= select_ln36_reg_246;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_114 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten11_reg_92 <= add_ln35_fu_136_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_92 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten_reg_103 <= select_ln36_2_fu_160_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_103 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln35_reg_230 <= icmp_ln35_fu_142_p2;
        icmp_ln35_reg_230_pp0_iter1_reg <= icmp_ln35_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        icmp_ln36_reg_234 <= icmp_ln36_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln36_reg_246 <= select_ln36_fu_198_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_h_phi_fu_118_p4 = select_ln36_reg_246;
    end else begin
        ap_phi_mux_h_phi_fu_118_p4 = h_reg_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_blk_n = qq_sm_empty_n;
    end else begin
        qq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_blk_n = qq_sm_head1_full_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_write = 1'b1;
    end else begin
        qq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_blk_n = qq_sm_head2_full_n;
    end else begin
        qq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_write = 1'b1;
    end else begin
        qq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_blk_n = qq_sm_head3_full_n;
    end else begin
        qq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_write = 1'b1;
    end else begin
        qq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_read = 1'b1;
    end else begin
        qq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_136_p2 = (indvar_flatten11_reg_92 + 15'd1);

assign add_ln36_2_fu_154_p2 = (indvar_flatten_reg_103 + 9'd1);

assign add_ln37_fu_206_p2 = (cht_reg_125 + 7'd1);

assign and_ln35_fu_186_p2 = (xor_ln35_fu_175_p2 & icmp_ln37_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cht_2_fu_217_p3 = ((or_ln37_fu_212_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_206_p2);

assign h_4_fu_192_p2 = (select_ln35_fu_168_p3 + 2'd1);

assign icmp_ln35_fu_142_p2 = ((indvar_flatten11_reg_92 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_148_p2 = ((indvar_flatten_reg_103 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_180_p2 = ((cht_reg_125 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln37_fu_212_p2 = (icmp_ln36_reg_234 | and_ln35_fu_186_p2);

assign qq_sm_head1_din = qq_sm_dout;

assign qq_sm_head2_din = qq_sm_dout;

assign qq_sm_head3_din = qq_sm_dout;

assign select_ln35_fu_168_p3 = ((icmp_ln36_reg_234[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_h_phi_fu_118_p4);

assign select_ln36_2_fu_160_p3 = ((icmp_ln36_fu_148_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_2_fu_154_p2);

assign select_ln36_fu_198_p3 = ((and_ln35_fu_186_p2[0:0] == 1'b1) ? h_4_fu_192_p2 : select_ln35_fu_168_p3);

assign start_out = real_start;

assign xor_ln35_fu_175_p2 = (icmp_ln36_reg_234 ^ 1'd1);

endmodule //ATTN0_do_split121
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_do_split122 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        qq_sm_dout,
        qq_sm_empty_n,
        qq_sm_read,
        qq_sm_head1_din,
        qq_sm_head1_full_n,
        qq_sm_head1_write,
        qq_sm_head2_din,
        qq_sm_head2_full_n,
        qq_sm_head2_write,
        qq_sm_head3_din,
        qq_sm_head3_full_n,
        qq_sm_head3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] qq_sm_dout;
input   qq_sm_empty_n;
output   qq_sm_read;
output  [15:0] qq_sm_head1_din;
input   qq_sm_head1_full_n;
output   qq_sm_head1_write;
output  [15:0] qq_sm_head2_din;
input   qq_sm_head2_full_n;
output   qq_sm_head2_write;
output  [15:0] qq_sm_head3_din;
input   qq_sm_head3_full_n;
output   qq_sm_head3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg qq_sm_read;
reg qq_sm_head1_write;
reg qq_sm_head2_write;
reg qq_sm_head3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    qq_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln35_reg_230;
reg   [0:0] icmp_ln35_reg_230_pp0_iter1_reg;
reg    qq_sm_head1_blk_n;
reg   [1:0] select_ln36_reg_246;
reg    qq_sm_head2_blk_n;
reg    qq_sm_head3_blk_n;
reg   [14:0] indvar_flatten11_reg_92;
reg   [8:0] indvar_flatten_reg_103;
reg   [1:0] h_reg_114;
reg   [6:0] cht_reg_125;
wire   [14:0] add_ln35_fu_136_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_142_p2;
wire   [0:0] icmp_ln36_fu_148_p2;
reg   [0:0] icmp_ln36_reg_234;
wire   [8:0] select_ln36_1_fu_160_p3;
wire   [1:0] select_ln36_fu_198_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [6:0] cht_1_fu_217_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [1:0] ap_phi_mux_h_phi_fu_118_p4;
reg    ap_block_pp0_stage0_01001;
wire   [8:0] add_ln36_1_fu_154_p2;
wire   [0:0] icmp_ln37_fu_180_p2;
wire   [0:0] xor_ln35_fu_175_p2;
wire   [1:0] select_ln35_fu_168_p3;
wire   [0:0] and_ln35_fu_186_p2;
wire   [1:0] h_2_fu_192_p2;
wire   [0:0] or_ln37_fu_212_p2;
wire   [6:0] add_ln37_fu_206_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cht_reg_125 <= cht_1_fu_217_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cht_reg_125 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        h_reg_114 <= select_ln36_reg_246;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_114 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten11_reg_92 <= add_ln35_fu_136_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten11_reg_92 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        indvar_flatten_reg_103 <= select_ln36_1_fu_160_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_103 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln35_reg_230 <= icmp_ln35_fu_142_p2;
        icmp_ln35_reg_230_pp0_iter1_reg <= icmp_ln35_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd0))) begin
        icmp_ln36_reg_234 <= icmp_ln36_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_230 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln36_reg_246 <= select_ln36_fu_198_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln35_fu_142_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_h_phi_fu_118_p4 = select_ln36_reg_246;
    end else begin
        ap_phi_mux_h_phi_fu_118_p4 = h_reg_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_blk_n = qq_sm_empty_n;
    end else begin
        qq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_blk_n = qq_sm_head1_full_n;
    end else begin
        qq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head1_write = 1'b1;
    end else begin
        qq_sm_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_blk_n = qq_sm_head2_full_n;
    end else begin
        qq_sm_head2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head2_write = 1'b1;
    end else begin
        qq_sm_head2_write = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_blk_n = qq_sm_head3_full_n;
    end else begin
        qq_sm_head3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln36_reg_246 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_head3_write = 1'b1;
    end else begin
        qq_sm_head3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        qq_sm_read = 1'b1;
    end else begin
        qq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_136_p2 = (indvar_flatten11_reg_92 + 15'd1);

assign add_ln36_1_fu_154_p2 = (indvar_flatten_reg_103 + 9'd1);

assign add_ln37_fu_206_p2 = (cht_reg_125 + 7'd1);

assign and_ln35_fu_186_p2 = (xor_ln35_fu_175_p2 & icmp_ln37_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((select_ln36_reg_246 == 2'd2) & (qq_sm_head3_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd1) & (qq_sm_head2_full_n == 1'b0)) | ((select_ln36_reg_246 == 2'd0) & (qq_sm_head1_full_n == 1'b0)) | ((icmp_ln35_reg_230_pp0_iter1_reg == 1'd0) & (qq_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cht_1_fu_217_p3 = ((or_ln37_fu_212_p2[0:0] == 1'b1) ? 7'd1 : add_ln37_fu_206_p2);

assign h_2_fu_192_p2 = (select_ln35_fu_168_p3 + 2'd1);

assign icmp_ln35_fu_142_p2 = ((indvar_flatten11_reg_92 == 15'd18816) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_148_p2 = ((indvar_flatten_reg_103 == 9'd192) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_180_p2 = ((cht_reg_125 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln37_fu_212_p2 = (icmp_ln36_reg_234 | and_ln35_fu_186_p2);

assign qq_sm_head1_din = qq_sm_dout;

assign qq_sm_head2_din = qq_sm_dout;

assign qq_sm_head3_din = qq_sm_dout;

assign select_ln35_fu_168_p3 = ((icmp_ln36_reg_234[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_h_phi_fu_118_p4);

assign select_ln36_1_fu_160_p3 = ((icmp_ln36_fu_148_p2[0:0] == 1'b1) ? 9'd1 : add_ln36_1_fu_154_p2);

assign select_ln36_fu_198_p3 = ((and_ln35_fu_186_p2[0:0] == 1'b1) ? h_2_fu_192_p2 : select_ln35_fu_168_p3);

assign start_out = real_start;

assign xor_ln35_fu_175_p2 = (icmp_ln36_reg_234 ^ 1'd1);

endmodule //ATTN0_do_split122
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w112_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd112;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w112_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd112;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w112_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w112_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd112;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w112_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd112;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w112_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w112_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd112;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w112_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd112;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w112_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w112_d32_A_ram
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w112_d32_A
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w112_d32_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d32_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w112_d32_A_x_ram
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w112_d32_A_x
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w112_d32_A_x_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d32_A_x_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w112_d32_A_x0_ram
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w112_d32_A_x0
#(parameter
    DATA_WIDTH  = 112,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w112_d32_A_x0_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w112_d32_A_x0_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w128_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd128;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w128_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd128;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w128_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w128_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w128_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd128;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w128_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd128;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w128_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w128_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w128_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd128;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w128_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd128;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w128_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w128_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w16_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd16;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w16_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd16;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w16_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w16_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w16_d512_A_ram
#(parameter
    DATA_WIDTH  = 16,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w16_d512_A
#(parameter
    DATA_WIDTH  = 16,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w16_d512_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w16_d512_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w16_d64_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd16;
parameter ADDR_WIDTH = 32'd6;
parameter DEPTH = 7'd64;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w16_d64_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd16;
parameter ADDR_WIDTH  = 32'd6;
parameter DEPTH       = 7'd64;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 7'd1;
            if (mOutPtr == 7'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 7'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 7'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w16_d64_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w16_d64_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w16_d8000_A_ram
#(parameter
    DATA_WIDTH  = 16,
    ADDR_WIDTH  = 13,
    DEPTH       = 8000
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w16_d8000_A
#(parameter
    DATA_WIDTH  = 16,
    ADDR_WIDTH  = 13,
    DEPTH       = 8000
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w16_d8000_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w16_d8000_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w192_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd192;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w192_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd192;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w192_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w192_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w192_d32_A_ram
#(parameter
    DATA_WIDTH  = 192,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w192_d32_A
#(parameter
    DATA_WIDTH  = 192,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w192_d32_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w192_d32_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_x1_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S_x1 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_x1_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_x1_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_x2_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S_x2 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_x2_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_x2_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w224_d2_S_x3_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd224;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w224_d2_S_x3 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd224;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w224_d2_S_x3_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d2_S_x3_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w224_d512_A_ram
#(parameter
    DATA_WIDTH  = 224,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w224_d512_A
#(parameter
    DATA_WIDTH  = 224,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w224_d512_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w224_d512_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w32_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd32;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w32_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd32;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w32_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w32_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w32_d512_A_ram
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w32_d512_A
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 9,
    DEPTH       = 512
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w32_d512_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w32_d512_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w32_d64_A_ram
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 6,
    DEPTH       = 64
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w32_d64_A
#(parameter
    DATA_WIDTH  = 32,
    ADDR_WIDTH  = 6,
    DEPTH       = 64
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w32_d64_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w32_d64_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w384_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd384;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w384_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd384;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w384_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w384_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w384_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd384;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w384_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd384;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w384_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w384_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w384_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd384;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w384_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd384;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w384_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w384_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_x1_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S_x1 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_x1_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_x1_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_x2_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S_x2 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_x2_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_x2_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w3_d2_S_x3_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd3;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w3_d2_S_x3 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd3;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w3_d2_S_x3_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w3_d2_S_x3_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w64_d12288_A_ram
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 14,
    DEPTH       = 12288
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w64_d12288_A
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 14,
    DEPTH       = 12288
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w64_d12288_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d12288_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w64_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd64;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w64_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd64;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w64_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w64_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd64;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w64_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd64;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w64_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w64_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd64;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w64_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd64;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w64_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w64_d32_A_ram
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w64_d32_A
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w64_d32_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d32_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w64_d32_A_x_ram
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w64_d32_A_x
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w64_d32_A_x_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d32_A_x_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w64_d32_A_x0_ram
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w64_d32_A_x0
#(parameter
    DATA_WIDTH  = 64,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w64_d32_A_x0_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w64_d32_A_x0_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w96_d2_S_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd96;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w96_d2_S (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd96;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w96_d2_S_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d2_S_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w96_d2_S_x_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd96;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w96_d2_S_x (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd96;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w96_d2_S_x_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d2_S_x_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_fifo_w96_d2_S_x0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd96;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_fifo_w96_d2_S_x0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd96;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_fifo_w96_d2_S_x0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d2_S_x0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w96_d32_A_ram
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w96_d32_A
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w96_d32_A_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d32_A_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w96_d32_A_x_ram
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w96_d32_A_x
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w96_d32_A_x_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d32_A_x_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1ns/1ps

module ATTN0_fifo_w96_d32_A_x0_ram
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    input  wire                  clk,
    input  wire                  we,
    input  wire [ADDR_WIDTH-1:0] waddr,
    input  wire [DATA_WIDTH-1:0] din,
    input  wire [ADDR_WIDTH-1:0] raddr,
    output wire [DATA_WIDTH-1:0] dout
);

(* rw_addr_collision = "yes" *)
reg  [DATA_WIDTH-1:0] mem[0:DEPTH-1];
reg  [ADDR_WIDTH-1:0] raddr_reg;

//write to ram
always @(posedge clk) begin
    if (we)
        mem[waddr] <= din;
end

//buffer the raddr
always @(posedge clk) begin
    raddr_reg <= raddr;
end

//read from ram
assign dout = mem[raddr_reg];

endmodule

module ATTN0_fifo_w96_d32_A_x0
#(parameter
    DATA_WIDTH  = 96,
    ADDR_WIDTH  = 5,
    DEPTH       = 32
)
(
    // system signal
    input  wire                  clk,
    input  wire                  reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write_ce,
    input  wire                  if_write,
    input  wire [DATA_WIDTH-1:0] if_din,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read_ce,
    input  wire                  if_read,
    output wire [DATA_WIDTH-1:0] if_dout
);
//------------------------Parameter----------------------

//------------------------Local signal-------------------
reg  [ADDR_WIDTH-1:0] waddr = 1'b0;
reg  [ADDR_WIDTH-1:0] raddr = 1'b0;
wire [ADDR_WIDTH-1:0] wnext;
wire [ADDR_WIDTH-1:0] rnext;
wire                  push;
wire                  pop;
reg  [ADDR_WIDTH:0]   mOutPtr = 1'b0;
reg                   full_n = 1'b1;
reg                   empty_n = 1'b0;


//------------------------Instantiation------------------
ATTN0_fifo_w96_d32_A_x0_ram
#(
 .DATA_WIDTH(DATA_WIDTH),
 .ADDR_WIDTH(ADDR_WIDTH),
 .DEPTH(DEPTH))
U_ATTN0_fifo_w96_d32_A_x0_ram(
 .clk(clk),
 .we(push),
 .waddr(waddr),
 .din(if_din),
 .raddr(rnext),
 .dout(if_dout)
);

//------------------------Task and function--------------

//------------------------Body---------------------------
assign if_full_n  = full_n;
assign if_empty_n = empty_n;
assign push       = full_n & if_write_ce & if_write;
assign pop        = empty_n & if_read_ce & if_read;
assign wnext      = !push                ? waddr :
                    (waddr == DEPTH - 1) ? 1'b0  :
                    waddr + 1'b1;
assign rnext      = !pop                 ? raddr :
                    (raddr == DEPTH - 1) ? 1'b0  :
                    raddr + 1'b1;

// waddr
always @(posedge clk) begin
    if (reset == 1'b1)
        waddr <= 1'b0;
    else
        waddr <= wnext;
end

// raddr
always @(posedge clk) begin
    if (reset == 1'b1)
        raddr <= 1'b0;
    else
        raddr <= rnext;
end

// mOutPtr
always @(posedge clk) begin
    if (reset == 1'b1)
        mOutPtr <= 1'b0;
    else if (push & ~pop)
        mOutPtr <= mOutPtr + 1'b1;
    else if (~push & pop)
        mOutPtr <= mOutPtr - 1'b1;
end

// full_n
always @(posedge clk) begin
    if (reset == 1'b1)
        full_n <= 1'b1;
    else if (push & ~pop)
        full_n <= (mOutPtr != DEPTH - 1);
    else if (~push & pop)
        full_n <= 1'b1;
end

// empty_n
always @(posedge clk) begin
    if (reset == 1'b1)
        empty_n <= 1'b0;
    else if (push & ~pop)
        empty_n <= 1'b1;
    else if (~push & pop)
        empty_n <= (mOutPtr != 1'b1);
end

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module ATTN0_mac_muladd_13s_21ns_19ns_33_4_1_DSP48_4(
    input clk,
    input rst,
    input ce,
    input  [13 - 1:0] in0,
    input  [21 - 1:0] in1,
    input  [19 - 1:0] in2,
    output [33 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $unsigned(in1);
assign b  = $signed(in0);
assign c  = $unsigned(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN0_mac_muladd_13s_21ns_19ns_33_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



ATTN0_mac_muladd_13s_21ns_19ns_33_4_1_DSP48_4 ATTN0_mac_muladd_13s_21ns_19ns_33_4_1_DSP48_4_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps

module ATTN0_mac_muladd_15s_17ns_24ns_31_4_1_DSP48_0(
    input clk,
    input rst,
    input ce,
    input  [15 - 1:0] in0,
    input  [17 - 1:0] in1,
    input  [24 - 1:0] in2,
    output [31 - 1:0]  dout);

wire signed [27 - 1:0]     a;
wire signed [18 - 1:0]     b;
wire signed [48 - 1:0]     c;
wire signed [45 - 1:0]     m;
wire signed [48 - 1:0]     p;
reg  signed [45 - 1:0]     m_reg;
reg  signed [27 - 1:0]     a_reg;
reg  signed [18 - 1:0]     b_reg;
reg  signed [48 - 1:0]     p_reg;

assign a  = $signed(in0);
assign b  = $unsigned(in1);
assign c  = $unsigned(in2);

assign m  = a_reg * b_reg;
assign p  = m_reg + c;

always @(posedge clk) begin
    if (ce) begin
        m_reg  <= m;
        a_reg  <= a;
        b_reg  <= b;
        p_reg  <= p;
    end
end

assign dout = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN0_mac_muladd_15s_17ns_24ns_31_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    din2,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter din2_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
input[din2_WIDTH - 1:0] din2;
output[dout_WIDTH - 1:0] dout;



ATTN0_mac_muladd_15s_17ns_24ns_31_4_1_DSP48_0 ATTN0_mac_muladd_15s_17ns_24ns_31_4_1_DSP48_0_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .in0( din0 ),
    .in1( din1 ),
    .in2( din2 ),
    .dout( dout ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_reshape_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln223_reg_1300;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln241_reg_1325;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_314;
reg   [4:0] cot_reg_325;
reg   [4:0] cit_reg_336;
reg   [15:0] indvar_flatten21_reg_347;
reg   [9:0] indvar_flatten7_reg_358;
reg   [4:0] cot_6_reg_369;
reg   [4:0] cit_5_reg_380;
wire   [8:0] add_ln223_3_fu_391_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln223_fu_397_p2;
wire   [4:0] select_ln223_fu_415_p3;
reg   [4:0] select_ln223_reg_1304;
wire   [4:0] select_ln223_3_fu_423_p3;
reg   [4:0] select_ln223_3_reg_1309;
wire   [4:0] add_ln224_fu_431_p2;
wire   [15:0] add_ln241_fu_793_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln241_fu_799_p2;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter1_reg;
wire   [0:0] icmp_ln242_fu_805_p2;
reg   [0:0] icmp_ln242_reg_1329;
wire   [9:0] select_ln242_6_fu_817_p3;
wire   [4:0] select_ln242_fu_860_p3;
reg   [4:0] select_ln242_reg_1341;
wire   [4:0] select_ln242_5_fu_868_p3;
reg   [4:0] select_ln242_5_reg_1347;
reg    ap_enable_reg_pp1_iter1;
wire   [4:0] add_ln243_fu_897_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cot_phi_fu_329_p4;
reg   [4:0] ap_phi_mux_cot_6_phi_fu_373_p4;
reg   [4:0] ap_phi_mux_cit_5_phi_fu_384_p4;
wire   [63:0] zext_ln233_3_fu_453_p1;
wire   [63:0] zext_ln253_3_fu_892_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln224_fu_409_p2;
wire   [4:0] add_ln223_fu_403_p2;
wire   [8:0] tmp_325_fu_437_p3;
wire   [8:0] zext_ln233_fu_444_p1;
wire   [8:0] add_ln233_fu_447_p2;
wire   [2:0] trunc_ln145_133_fu_722_p4;
wire   [2:0] trunc_ln145_129_fu_682_p4;
wire   [2:0] trunc_ln145_125_fu_642_p4;
wire   [2:0] trunc_ln145_121_fu_602_p4;
wire   [2:0] trunc_ln145_117_fu_562_p4;
wire   [2:0] trunc_ln145_113_fu_522_p4;
wire   [2:0] trunc_ln145_109_fu_482_p4;
wire   [2:0] trunc_ln145_132_fu_712_p4;
wire   [2:0] trunc_ln145_128_fu_672_p4;
wire   [2:0] trunc_ln145_124_fu_632_p4;
wire   [2:0] trunc_ln145_120_fu_592_p4;
wire   [2:0] trunc_ln145_116_fu_552_p4;
wire   [2:0] trunc_ln145_112_fu_512_p4;
wire   [2:0] trunc_ln145_108_fu_472_p4;
wire   [2:0] trunc_ln145_131_fu_702_p4;
wire   [2:0] trunc_ln145_127_fu_662_p4;
wire   [2:0] trunc_ln145_123_fu_622_p4;
wire   [2:0] trunc_ln145_119_fu_582_p4;
wire   [2:0] trunc_ln145_115_fu_542_p4;
wire   [2:0] trunc_ln145_111_fu_502_p4;
wire   [2:0] trunc_ln145_107_fu_462_p4;
wire   [2:0] trunc_ln145_130_fu_692_p4;
wire   [2:0] trunc_ln145_126_fu_652_p4;
wire   [2:0] trunc_ln145_122_fu_612_p4;
wire   [2:0] trunc_ln145_118_fu_572_p4;
wire   [2:0] trunc_ln145_114_fu_532_p4;
wire   [2:0] trunc_ln145_110_fu_492_p4;
wire   [2:0] trunc_ln145_fu_458_p1;
wire   [9:0] add_ln242_3_fu_811_p2;
wire   [0:0] icmp_ln243_fu_837_p2;
wire   [0:0] xor_ln241_fu_832_p2;
wire   [4:0] select_ln241_fu_825_p3;
wire   [0:0] and_ln241_fu_843_p2;
wire   [0:0] or_ln242_fu_855_p2;
wire   [4:0] add_ln242_fu_849_p2;
wire   [8:0] tmp_326_cast_fu_876_p3;
wire   [8:0] zext_ln253_fu_883_p1;
wire   [8:0] add_ln253_fu_886_p2;
wire   [2:0] tmp_462_fu_1166_p4;
wire   [2:0] tmp_461_fu_1156_p4;
wire   [2:0] tmp_460_fu_1146_p4;
wire   [2:0] tmp_459_fu_1136_p4;
wire   [2:0] tmp_458_fu_1126_p4;
wire   [2:0] tmp_457_fu_1116_p4;
wire   [2:0] tmp_456_fu_1106_p4;
wire   [2:0] tmp_455_fu_1096_p4;
wire   [2:0] tmp_454_fu_1086_p4;
wire   [2:0] tmp_453_fu_1076_p4;
wire   [2:0] tmp_452_fu_1066_p4;
wire   [2:0] tmp_451_fu_1056_p4;
wire   [2:0] tmp_450_fu_1046_p4;
wire   [2:0] tmp_449_fu_1036_p4;
wire   [2:0] tmp_448_fu_1026_p4;
wire   [2:0] tmp_447_fu_1016_p4;
wire   [2:0] tmp_446_fu_1006_p4;
wire   [2:0] tmp_445_fu_996_p4;
wire   [2:0] tmp_444_fu_986_p4;
wire   [2:0] tmp_443_fu_976_p4;
wire   [2:0] tmp_442_fu_966_p4;
wire   [2:0] tmp_441_fu_956_p4;
wire   [2:0] tmp_440_fu_946_p4;
wire   [2:0] tmp_439_fu_936_p4;
wire   [2:0] tmp_438_fu_926_p4;
wire   [2:0] tmp_437_fu_916_p4;
wire   [2:0] tmp_436_fu_906_p4;
wire   [2:0] trunc_ln253_fu_902_p1;
wire   [218:0] tmp_463_fu_1176_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_5_reg_380 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cit_5_reg_380 <= add_ln243_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        cit_reg_336 <= add_ln224_fu_431_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_336 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_6_reg_369 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cot_6_reg_369 <= select_ln242_5_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_325 <= select_ln223_3_reg_1309;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_325 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_347 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_347 <= add_ln241_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_358 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_358 <= select_ln242_6_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        indvar_flatten_reg_314 <= add_ln223_3_fu_391_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_314 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln223_reg_1300 <= icmp_ln223_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln241_reg_1325 <= icmp_ln241_fu_799_p2;
        icmp_ln241_reg_1325_pp1_iter1_reg <= icmp_ln241_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln241_reg_1325_pp1_iter2_reg <= icmp_ln241_reg_1325_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0))) begin
        icmp_ln242_reg_1329 <= icmp_ln242_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_3_reg_1309 <= select_ln223_3_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_reg_1304 <= select_ln223_fu_415_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln242_5_reg_1347 <= select_ln242_5_fu_868_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln242_reg_1341 <= select_ln242_fu_860_p3;
    end
end

always @ (*) begin
    if ((icmp_ln223_fu_397_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = add_ln243_fu_897_p2;
    end else begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = cit_5_reg_380;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = select_ln242_5_reg_1347;
    end else begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = cot_6_reg_369;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_329_p4 = select_ln223_3_reg_1309;
    end else begin
        ap_phi_mux_cot_phi_fu_329_p4 = cot_reg_325;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln253_3_fu_892_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln233_3_fu_453_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_empty_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_read = 1'b1;
    end else begin
        kq_sm_reshape_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_3_fu_391_p2 = (indvar_flatten_reg_314 + 9'd1);

assign add_ln223_fu_403_p2 = (ap_phi_mux_cot_phi_fu_329_p4 + 5'd1);

assign add_ln224_fu_431_p2 = (select_ln223_fu_415_p3 + 5'd1);

assign add_ln233_fu_447_p2 = (tmp_325_fu_437_p3 + zext_ln233_fu_444_p1);

assign add_ln241_fu_793_p2 = (indvar_flatten21_reg_347 + 16'd1);

assign add_ln242_3_fu_811_p2 = (indvar_flatten7_reg_358 + 10'd1);

assign add_ln242_fu_849_p2 = (select_ln241_fu_825_p3 + 5'd1);

assign add_ln243_fu_897_p2 = (select_ln242_reg_1341 + 5'd1);

assign add_ln253_fu_886_p2 = (tmp_326_cast_fu_876_p3 + zext_ln253_fu_883_p1);

assign and_ln241_fu_843_p2 = (xor_ln241_fu_832_p2 & icmp_ln243_fu_837_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln223_reg_1300 == 1'd0) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_133_fu_722_p4}, {trunc_ln145_129_fu_682_p4}}, {trunc_ln145_125_fu_642_p4}}, {trunc_ln145_121_fu_602_p4}}, {trunc_ln145_117_fu_562_p4}}, {trunc_ln145_113_fu_522_p4}}, {trunc_ln145_109_fu_482_p4}}, {trunc_ln145_132_fu_712_p4}}, {trunc_ln145_128_fu_672_p4}}, {trunc_ln145_124_fu_632_p4}}, {trunc_ln145_120_fu_592_p4}}, {trunc_ln145_116_fu_552_p4}}, {trunc_ln145_112_fu_512_p4}}, {trunc_ln145_108_fu_472_p4}}, {trunc_ln145_131_fu_702_p4}}, {trunc_ln145_127_fu_662_p4}}, {trunc_ln145_123_fu_622_p4}}, {trunc_ln145_119_fu_582_p4}}, {trunc_ln145_115_fu_542_p4}}, {trunc_ln145_111_fu_502_p4}}, {trunc_ln145_107_fu_462_p4}}, {trunc_ln145_130_fu_692_p4}}, {trunc_ln145_126_fu_652_p4}}, {trunc_ln145_122_fu_612_p4}}, {trunc_ln145_118_fu_572_p4}}, {trunc_ln145_114_fu_532_p4}}, {trunc_ln145_110_fu_492_p4}}, {trunc_ln145_fu_458_p1}};

assign icmp_ln223_fu_397_p2 = ((indvar_flatten_reg_314 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_409_p2 = ((cit_reg_336 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_799_p2 = ((indvar_flatten21_reg_347 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_805_p2 = ((indvar_flatten7_reg_358 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_837_p2 = ((ap_phi_mux_cit_5_phi_fu_384_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_855_p2 = (icmp_ln242_reg_1329 | and_ln241_fu_843_p2);

assign select_ln223_3_fu_423_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? add_ln223_fu_403_p2 : ap_phi_mux_cot_phi_fu_329_p4);

assign select_ln223_fu_415_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_336);

assign select_ln241_fu_825_p3 = ((icmp_ln242_reg_1329[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_6_phi_fu_373_p4);

assign select_ln242_5_fu_868_p3 = ((and_ln241_fu_843_p2[0:0] == 1'b1) ? add_ln242_fu_849_p2 : select_ln241_fu_825_p3);

assign select_ln242_6_fu_817_p3 = ((icmp_ln242_fu_805_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_3_fu_811_p2);

assign select_ln242_fu_860_p3 = ((or_ln242_fu_855_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_5_phi_fu_384_p4);

assign start_out = real_start;

assign tmp_325_fu_437_p3 = {{select_ln223_3_reg_1309}, {4'd0}};

assign tmp_326_cast_fu_876_p3 = {{select_ln242_5_reg_1347}, {4'd0}};

assign tmp_436_fu_906_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_437_fu_916_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_438_fu_926_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_439_fu_936_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_440_fu_946_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_441_fu_956_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_442_fu_966_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_443_fu_976_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_444_fu_986_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_445_fu_996_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_446_fu_1006_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_447_fu_1016_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_448_fu_1026_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_449_fu_1036_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_450_fu_1046_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_451_fu_1056_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_452_fu_1066_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_453_fu_1076_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_454_fu_1086_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_455_fu_1096_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_456_fu_1106_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_457_fu_1116_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_458_fu_1126_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_459_fu_1136_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_460_fu_1146_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_461_fu_1156_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_462_fu_1166_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_463_fu_1176_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_462_fu_1166_p4}, {5'd0}}, {tmp_461_fu_1156_p4}}, {5'd0}}, {tmp_460_fu_1146_p4}}, {5'd0}}, {tmp_459_fu_1136_p4}}, {5'd0}}, {tmp_458_fu_1126_p4}}, {5'd0}}, {tmp_457_fu_1116_p4}}, {5'd0}}, {tmp_456_fu_1106_p4}}, {5'd0}}, {tmp_455_fu_1096_p4}}, {5'd0}}, {tmp_454_fu_1086_p4}}, {5'd0}}, {tmp_453_fu_1076_p4}}, {5'd0}}, {tmp_452_fu_1066_p4}}, {5'd0}}, {tmp_451_fu_1056_p4}}, {5'd0}}, {tmp_450_fu_1046_p4}}, {5'd0}}, {tmp_449_fu_1036_p4}}, {5'd0}}, {tmp_448_fu_1026_p4}}, {5'd0}}, {tmp_447_fu_1016_p4}}, {5'd0}}, {tmp_446_fu_1006_p4}}, {5'd0}}, {tmp_445_fu_996_p4}}, {5'd0}}, {tmp_444_fu_986_p4}}, {5'd0}}, {tmp_443_fu_976_p4}}, {5'd0}}, {tmp_442_fu_966_p4}}, {5'd0}}, {tmp_441_fu_956_p4}}, {5'd0}}, {tmp_440_fu_946_p4}}, {5'd0}}, {tmp_439_fu_936_p4}}, {5'd0}}, {tmp_438_fu_926_p4}}, {5'd0}}, {tmp_437_fu_916_p4}}, {5'd0}}, {tmp_436_fu_906_p4}}, {5'd0}}, {trunc_ln253_fu_902_p1}};

assign trunc_ln145_107_fu_462_p4 = {{kq_sm_reshape_head1_dout[10:8]}};

assign trunc_ln145_108_fu_472_p4 = {{kq_sm_reshape_head1_dout[18:16]}};

assign trunc_ln145_109_fu_482_p4 = {{kq_sm_reshape_head1_dout[26:24]}};

assign trunc_ln145_110_fu_492_p4 = {{kq_sm_reshape_head1_dout[34:32]}};

assign trunc_ln145_111_fu_502_p4 = {{kq_sm_reshape_head1_dout[42:40]}};

assign trunc_ln145_112_fu_512_p4 = {{kq_sm_reshape_head1_dout[50:48]}};

assign trunc_ln145_113_fu_522_p4 = {{kq_sm_reshape_head1_dout[58:56]}};

assign trunc_ln145_114_fu_532_p4 = {{kq_sm_reshape_head1_dout[66:64]}};

assign trunc_ln145_115_fu_542_p4 = {{kq_sm_reshape_head1_dout[74:72]}};

assign trunc_ln145_116_fu_552_p4 = {{kq_sm_reshape_head1_dout[82:80]}};

assign trunc_ln145_117_fu_562_p4 = {{kq_sm_reshape_head1_dout[90:88]}};

assign trunc_ln145_118_fu_572_p4 = {{kq_sm_reshape_head1_dout[98:96]}};

assign trunc_ln145_119_fu_582_p4 = {{kq_sm_reshape_head1_dout[106:104]}};

assign trunc_ln145_120_fu_592_p4 = {{kq_sm_reshape_head1_dout[114:112]}};

assign trunc_ln145_121_fu_602_p4 = {{kq_sm_reshape_head1_dout[122:120]}};

assign trunc_ln145_122_fu_612_p4 = {{kq_sm_reshape_head1_dout[130:128]}};

assign trunc_ln145_123_fu_622_p4 = {{kq_sm_reshape_head1_dout[138:136]}};

assign trunc_ln145_124_fu_632_p4 = {{kq_sm_reshape_head1_dout[146:144]}};

assign trunc_ln145_125_fu_642_p4 = {{kq_sm_reshape_head1_dout[154:152]}};

assign trunc_ln145_126_fu_652_p4 = {{kq_sm_reshape_head1_dout[162:160]}};

assign trunc_ln145_127_fu_662_p4 = {{kq_sm_reshape_head1_dout[170:168]}};

assign trunc_ln145_128_fu_672_p4 = {{kq_sm_reshape_head1_dout[178:176]}};

assign trunc_ln145_129_fu_682_p4 = {{kq_sm_reshape_head1_dout[186:184]}};

assign trunc_ln145_130_fu_692_p4 = {{kq_sm_reshape_head1_dout[194:192]}};

assign trunc_ln145_131_fu_702_p4 = {{kq_sm_reshape_head1_dout[202:200]}};

assign trunc_ln145_132_fu_712_p4 = {{kq_sm_reshape_head1_dout[210:208]}};

assign trunc_ln145_133_fu_722_p4 = {{kq_sm_reshape_head1_dout[218:216]}};

assign trunc_ln145_fu_458_p1 = kq_sm_reshape_head1_dout[2:0];

assign trunc_ln253_fu_902_p1 = dynamic_weight_arr_V_q0[2:0];

assign weight_sm_din = tmp_463_fu_1176_p56;

assign xor_ln241_fu_832_p2 = (icmp_ln242_reg_1329 ^ 1'd1);

assign zext_ln233_3_fu_453_p1 = add_ln233_fu_447_p2;

assign zext_ln233_fu_444_p1 = select_ln223_reg_1304;

assign zext_ln253_3_fu_892_p1 = add_ln253_fu_886_p2;

assign zext_ln253_fu_883_p1 = select_ln242_reg_1341;

endmodule //ATTN0_matmul_step1_cache_weight
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight151 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_reshape_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln223_reg_1300;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln241_reg_1325;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_314;
reg   [4:0] cot_reg_325;
reg   [4:0] cit_reg_336;
reg   [15:0] indvar_flatten21_reg_347;
reg   [9:0] indvar_flatten7_reg_358;
reg   [4:0] cot_6_reg_369;
reg   [4:0] cit_5_reg_380;
wire   [8:0] add_ln223_2_fu_391_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln223_fu_397_p2;
wire   [4:0] select_ln223_fu_415_p3;
reg   [4:0] select_ln223_reg_1304;
wire   [4:0] select_ln223_2_fu_423_p3;
reg   [4:0] select_ln223_2_reg_1309;
wire   [4:0] add_ln224_fu_431_p2;
wire   [15:0] add_ln241_fu_793_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln241_fu_799_p2;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter1_reg;
wire   [0:0] icmp_ln242_fu_805_p2;
reg   [0:0] icmp_ln242_reg_1329;
wire   [9:0] select_ln242_4_fu_817_p3;
wire   [4:0] select_ln242_fu_860_p3;
reg   [4:0] select_ln242_reg_1341;
wire   [4:0] select_ln242_3_fu_868_p3;
reg   [4:0] select_ln242_3_reg_1347;
reg    ap_enable_reg_pp1_iter1;
wire   [4:0] add_ln243_fu_897_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cot_phi_fu_329_p4;
reg   [4:0] ap_phi_mux_cot_6_phi_fu_373_p4;
reg   [4:0] ap_phi_mux_cit_5_phi_fu_384_p4;
wire   [63:0] zext_ln233_2_fu_453_p1;
wire   [63:0] zext_ln253_2_fu_892_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln224_fu_409_p2;
wire   [4:0] add_ln223_fu_403_p2;
wire   [8:0] tmp_323_fu_437_p3;
wire   [8:0] zext_ln233_fu_444_p1;
wire   [8:0] add_ln233_fu_447_p2;
wire   [2:0] trunc_ln145_133_fu_722_p4;
wire   [2:0] trunc_ln145_129_fu_682_p4;
wire   [2:0] trunc_ln145_125_fu_642_p4;
wire   [2:0] trunc_ln145_121_fu_602_p4;
wire   [2:0] trunc_ln145_117_fu_562_p4;
wire   [2:0] trunc_ln145_113_fu_522_p4;
wire   [2:0] trunc_ln145_109_fu_482_p4;
wire   [2:0] trunc_ln145_132_fu_712_p4;
wire   [2:0] trunc_ln145_128_fu_672_p4;
wire   [2:0] trunc_ln145_124_fu_632_p4;
wire   [2:0] trunc_ln145_120_fu_592_p4;
wire   [2:0] trunc_ln145_116_fu_552_p4;
wire   [2:0] trunc_ln145_112_fu_512_p4;
wire   [2:0] trunc_ln145_108_fu_472_p4;
wire   [2:0] trunc_ln145_131_fu_702_p4;
wire   [2:0] trunc_ln145_127_fu_662_p4;
wire   [2:0] trunc_ln145_123_fu_622_p4;
wire   [2:0] trunc_ln145_119_fu_582_p4;
wire   [2:0] trunc_ln145_115_fu_542_p4;
wire   [2:0] trunc_ln145_111_fu_502_p4;
wire   [2:0] trunc_ln145_107_fu_462_p4;
wire   [2:0] trunc_ln145_130_fu_692_p4;
wire   [2:0] trunc_ln145_126_fu_652_p4;
wire   [2:0] trunc_ln145_122_fu_612_p4;
wire   [2:0] trunc_ln145_118_fu_572_p4;
wire   [2:0] trunc_ln145_114_fu_532_p4;
wire   [2:0] trunc_ln145_110_fu_492_p4;
wire   [2:0] trunc_ln145_fu_458_p1;
wire   [9:0] add_ln242_2_fu_811_p2;
wire   [0:0] icmp_ln243_fu_837_p2;
wire   [0:0] xor_ln241_fu_832_p2;
wire   [4:0] select_ln241_fu_825_p3;
wire   [0:0] and_ln241_fu_843_p2;
wire   [0:0] or_ln242_fu_855_p2;
wire   [4:0] add_ln242_fu_849_p2;
wire   [8:0] tmp_324_cast_fu_876_p3;
wire   [8:0] zext_ln253_fu_883_p1;
wire   [8:0] add_ln253_fu_886_p2;
wire   [2:0] tmp_434_fu_1166_p4;
wire   [2:0] tmp_433_fu_1156_p4;
wire   [2:0] tmp_432_fu_1146_p4;
wire   [2:0] tmp_431_fu_1136_p4;
wire   [2:0] tmp_430_fu_1126_p4;
wire   [2:0] tmp_429_fu_1116_p4;
wire   [2:0] tmp_428_fu_1106_p4;
wire   [2:0] tmp_427_fu_1096_p4;
wire   [2:0] tmp_426_fu_1086_p4;
wire   [2:0] tmp_425_fu_1076_p4;
wire   [2:0] tmp_424_fu_1066_p4;
wire   [2:0] tmp_423_fu_1056_p4;
wire   [2:0] tmp_422_fu_1046_p4;
wire   [2:0] tmp_421_fu_1036_p4;
wire   [2:0] tmp_420_fu_1026_p4;
wire   [2:0] tmp_419_fu_1016_p4;
wire   [2:0] tmp_418_fu_1006_p4;
wire   [2:0] tmp_417_fu_996_p4;
wire   [2:0] tmp_416_fu_986_p4;
wire   [2:0] tmp_415_fu_976_p4;
wire   [2:0] tmp_414_fu_966_p4;
wire   [2:0] tmp_413_fu_956_p4;
wire   [2:0] tmp_412_fu_946_p4;
wire   [2:0] tmp_411_fu_936_p4;
wire   [2:0] tmp_410_fu_926_p4;
wire   [2:0] tmp_409_fu_916_p4;
wire   [2:0] tmp_408_fu_906_p4;
wire   [2:0] trunc_ln253_fu_902_p1;
wire   [218:0] tmp_435_fu_1176_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_5_reg_380 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cit_5_reg_380 <= add_ln243_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        cit_reg_336 <= add_ln224_fu_431_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_336 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_6_reg_369 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cot_6_reg_369 <= select_ln242_3_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_325 <= select_ln223_2_reg_1309;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_325 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_347 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_347 <= add_ln241_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_358 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_358 <= select_ln242_4_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        indvar_flatten_reg_314 <= add_ln223_2_fu_391_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_314 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln223_reg_1300 <= icmp_ln223_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln241_reg_1325 <= icmp_ln241_fu_799_p2;
        icmp_ln241_reg_1325_pp1_iter1_reg <= icmp_ln241_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln241_reg_1325_pp1_iter2_reg <= icmp_ln241_reg_1325_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0))) begin
        icmp_ln242_reg_1329 <= icmp_ln242_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_2_reg_1309 <= select_ln223_2_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_reg_1304 <= select_ln223_fu_415_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln242_3_reg_1347 <= select_ln242_3_fu_868_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln242_reg_1341 <= select_ln242_fu_860_p3;
    end
end

always @ (*) begin
    if ((icmp_ln223_fu_397_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = add_ln243_fu_897_p2;
    end else begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = cit_5_reg_380;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = select_ln242_3_reg_1347;
    end else begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = cot_6_reg_369;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_329_p4 = select_ln223_2_reg_1309;
    end else begin
        ap_phi_mux_cot_phi_fu_329_p4 = cot_reg_325;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln253_2_fu_892_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln233_2_fu_453_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_empty_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_read = 1'b1;
    end else begin
        kq_sm_reshape_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_2_fu_391_p2 = (indvar_flatten_reg_314 + 9'd1);

assign add_ln223_fu_403_p2 = (ap_phi_mux_cot_phi_fu_329_p4 + 5'd1);

assign add_ln224_fu_431_p2 = (select_ln223_fu_415_p3 + 5'd1);

assign add_ln233_fu_447_p2 = (tmp_323_fu_437_p3 + zext_ln233_fu_444_p1);

assign add_ln241_fu_793_p2 = (indvar_flatten21_reg_347 + 16'd1);

assign add_ln242_2_fu_811_p2 = (indvar_flatten7_reg_358 + 10'd1);

assign add_ln242_fu_849_p2 = (select_ln241_fu_825_p3 + 5'd1);

assign add_ln243_fu_897_p2 = (select_ln242_reg_1341 + 5'd1);

assign add_ln253_fu_886_p2 = (tmp_324_cast_fu_876_p3 + zext_ln253_fu_883_p1);

assign and_ln241_fu_843_p2 = (xor_ln241_fu_832_p2 & icmp_ln243_fu_837_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln223_reg_1300 == 1'd0) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_133_fu_722_p4}, {trunc_ln145_129_fu_682_p4}}, {trunc_ln145_125_fu_642_p4}}, {trunc_ln145_121_fu_602_p4}}, {trunc_ln145_117_fu_562_p4}}, {trunc_ln145_113_fu_522_p4}}, {trunc_ln145_109_fu_482_p4}}, {trunc_ln145_132_fu_712_p4}}, {trunc_ln145_128_fu_672_p4}}, {trunc_ln145_124_fu_632_p4}}, {trunc_ln145_120_fu_592_p4}}, {trunc_ln145_116_fu_552_p4}}, {trunc_ln145_112_fu_512_p4}}, {trunc_ln145_108_fu_472_p4}}, {trunc_ln145_131_fu_702_p4}}, {trunc_ln145_127_fu_662_p4}}, {trunc_ln145_123_fu_622_p4}}, {trunc_ln145_119_fu_582_p4}}, {trunc_ln145_115_fu_542_p4}}, {trunc_ln145_111_fu_502_p4}}, {trunc_ln145_107_fu_462_p4}}, {trunc_ln145_130_fu_692_p4}}, {trunc_ln145_126_fu_652_p4}}, {trunc_ln145_122_fu_612_p4}}, {trunc_ln145_118_fu_572_p4}}, {trunc_ln145_114_fu_532_p4}}, {trunc_ln145_110_fu_492_p4}}, {trunc_ln145_fu_458_p1}};

assign icmp_ln223_fu_397_p2 = ((indvar_flatten_reg_314 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_409_p2 = ((cit_reg_336 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_799_p2 = ((indvar_flatten21_reg_347 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_805_p2 = ((indvar_flatten7_reg_358 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_837_p2 = ((ap_phi_mux_cit_5_phi_fu_384_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_855_p2 = (icmp_ln242_reg_1329 | and_ln241_fu_843_p2);

assign select_ln223_2_fu_423_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? add_ln223_fu_403_p2 : ap_phi_mux_cot_phi_fu_329_p4);

assign select_ln223_fu_415_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_336);

assign select_ln241_fu_825_p3 = ((icmp_ln242_reg_1329[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_6_phi_fu_373_p4);

assign select_ln242_3_fu_868_p3 = ((and_ln241_fu_843_p2[0:0] == 1'b1) ? add_ln242_fu_849_p2 : select_ln241_fu_825_p3);

assign select_ln242_4_fu_817_p3 = ((icmp_ln242_fu_805_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_2_fu_811_p2);

assign select_ln242_fu_860_p3 = ((or_ln242_fu_855_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_5_phi_fu_384_p4);

assign start_out = real_start;

assign tmp_323_fu_437_p3 = {{select_ln223_2_reg_1309}, {4'd0}};

assign tmp_324_cast_fu_876_p3 = {{select_ln242_3_reg_1347}, {4'd0}};

assign tmp_408_fu_906_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_409_fu_916_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_410_fu_926_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_411_fu_936_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_412_fu_946_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_413_fu_956_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_414_fu_966_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_415_fu_976_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_416_fu_986_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_417_fu_996_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_418_fu_1006_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_419_fu_1016_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_420_fu_1026_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_421_fu_1036_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_422_fu_1046_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_423_fu_1056_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_424_fu_1066_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_425_fu_1076_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_426_fu_1086_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_427_fu_1096_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_428_fu_1106_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_429_fu_1116_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_430_fu_1126_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_431_fu_1136_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_432_fu_1146_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_433_fu_1156_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_434_fu_1166_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_435_fu_1176_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_434_fu_1166_p4}, {5'd0}}, {tmp_433_fu_1156_p4}}, {5'd0}}, {tmp_432_fu_1146_p4}}, {5'd0}}, {tmp_431_fu_1136_p4}}, {5'd0}}, {tmp_430_fu_1126_p4}}, {5'd0}}, {tmp_429_fu_1116_p4}}, {5'd0}}, {tmp_428_fu_1106_p4}}, {5'd0}}, {tmp_427_fu_1096_p4}}, {5'd0}}, {tmp_426_fu_1086_p4}}, {5'd0}}, {tmp_425_fu_1076_p4}}, {5'd0}}, {tmp_424_fu_1066_p4}}, {5'd0}}, {tmp_423_fu_1056_p4}}, {5'd0}}, {tmp_422_fu_1046_p4}}, {5'd0}}, {tmp_421_fu_1036_p4}}, {5'd0}}, {tmp_420_fu_1026_p4}}, {5'd0}}, {tmp_419_fu_1016_p4}}, {5'd0}}, {tmp_418_fu_1006_p4}}, {5'd0}}, {tmp_417_fu_996_p4}}, {5'd0}}, {tmp_416_fu_986_p4}}, {5'd0}}, {tmp_415_fu_976_p4}}, {5'd0}}, {tmp_414_fu_966_p4}}, {5'd0}}, {tmp_413_fu_956_p4}}, {5'd0}}, {tmp_412_fu_946_p4}}, {5'd0}}, {tmp_411_fu_936_p4}}, {5'd0}}, {tmp_410_fu_926_p4}}, {5'd0}}, {tmp_409_fu_916_p4}}, {5'd0}}, {tmp_408_fu_906_p4}}, {5'd0}}, {trunc_ln253_fu_902_p1}};

assign trunc_ln145_107_fu_462_p4 = {{kq_sm_reshape_head1_dout[10:8]}};

assign trunc_ln145_108_fu_472_p4 = {{kq_sm_reshape_head1_dout[18:16]}};

assign trunc_ln145_109_fu_482_p4 = {{kq_sm_reshape_head1_dout[26:24]}};

assign trunc_ln145_110_fu_492_p4 = {{kq_sm_reshape_head1_dout[34:32]}};

assign trunc_ln145_111_fu_502_p4 = {{kq_sm_reshape_head1_dout[42:40]}};

assign trunc_ln145_112_fu_512_p4 = {{kq_sm_reshape_head1_dout[50:48]}};

assign trunc_ln145_113_fu_522_p4 = {{kq_sm_reshape_head1_dout[58:56]}};

assign trunc_ln145_114_fu_532_p4 = {{kq_sm_reshape_head1_dout[66:64]}};

assign trunc_ln145_115_fu_542_p4 = {{kq_sm_reshape_head1_dout[74:72]}};

assign trunc_ln145_116_fu_552_p4 = {{kq_sm_reshape_head1_dout[82:80]}};

assign trunc_ln145_117_fu_562_p4 = {{kq_sm_reshape_head1_dout[90:88]}};

assign trunc_ln145_118_fu_572_p4 = {{kq_sm_reshape_head1_dout[98:96]}};

assign trunc_ln145_119_fu_582_p4 = {{kq_sm_reshape_head1_dout[106:104]}};

assign trunc_ln145_120_fu_592_p4 = {{kq_sm_reshape_head1_dout[114:112]}};

assign trunc_ln145_121_fu_602_p4 = {{kq_sm_reshape_head1_dout[122:120]}};

assign trunc_ln145_122_fu_612_p4 = {{kq_sm_reshape_head1_dout[130:128]}};

assign trunc_ln145_123_fu_622_p4 = {{kq_sm_reshape_head1_dout[138:136]}};

assign trunc_ln145_124_fu_632_p4 = {{kq_sm_reshape_head1_dout[146:144]}};

assign trunc_ln145_125_fu_642_p4 = {{kq_sm_reshape_head1_dout[154:152]}};

assign trunc_ln145_126_fu_652_p4 = {{kq_sm_reshape_head1_dout[162:160]}};

assign trunc_ln145_127_fu_662_p4 = {{kq_sm_reshape_head1_dout[170:168]}};

assign trunc_ln145_128_fu_672_p4 = {{kq_sm_reshape_head1_dout[178:176]}};

assign trunc_ln145_129_fu_682_p4 = {{kq_sm_reshape_head1_dout[186:184]}};

assign trunc_ln145_130_fu_692_p4 = {{kq_sm_reshape_head1_dout[194:192]}};

assign trunc_ln145_131_fu_702_p4 = {{kq_sm_reshape_head1_dout[202:200]}};

assign trunc_ln145_132_fu_712_p4 = {{kq_sm_reshape_head1_dout[210:208]}};

assign trunc_ln145_133_fu_722_p4 = {{kq_sm_reshape_head1_dout[218:216]}};

assign trunc_ln145_fu_458_p1 = kq_sm_reshape_head1_dout[2:0];

assign trunc_ln253_fu_902_p1 = dynamic_weight_arr_V_q0[2:0];

assign weight_sm_din = tmp_435_fu_1176_p56;

assign xor_ln241_fu_832_p2 = (icmp_ln242_reg_1329 ^ 1'd1);

assign zext_ln233_2_fu_453_p1 = add_ln233_fu_447_p2;

assign zext_ln233_fu_444_p1 = select_ln223_reg_1304;

assign zext_ln253_2_fu_892_p1 = add_ln253_fu_886_p2;

assign zext_ln253_fu_883_p1 = select_ln242_reg_1341;

endmodule //ATTN0_matmul_step1_cache_weight151
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 84;
parameter AWIDTH = 9;
parameter MEM_SIZE = 448;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd84;
parameter AddressRange = 32'd448;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V_ram ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight156 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_reshape_head1_dout,
        kq_sm_reshape_head1_empty_n,
        kq_sm_reshape_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] kq_sm_reshape_head1_dout;
input   kq_sm_reshape_head1_empty_n;
output   kq_sm_reshape_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_reshape_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_reshape_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln223_reg_1300;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln241_reg_1325;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_314;
reg   [4:0] cot_reg_325;
reg   [4:0] cit_reg_336;
reg   [15:0] indvar_flatten21_reg_347;
reg   [9:0] indvar_flatten7_reg_358;
reg   [4:0] cot_6_reg_369;
reg   [4:0] cit_5_reg_380;
wire   [8:0] add_ln223_1_fu_391_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln223_fu_397_p2;
wire   [4:0] select_ln223_fu_415_p3;
reg   [4:0] select_ln223_reg_1304;
wire   [4:0] select_ln223_1_fu_423_p3;
reg   [4:0] select_ln223_1_reg_1309;
wire   [4:0] add_ln224_fu_431_p2;
wire   [15:0] add_ln241_fu_793_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln241_fu_799_p2;
reg   [0:0] icmp_ln241_reg_1325_pp1_iter1_reg;
wire   [0:0] icmp_ln242_fu_805_p2;
reg   [0:0] icmp_ln242_reg_1329;
wire   [9:0] select_ln242_2_fu_817_p3;
wire   [4:0] select_ln242_fu_860_p3;
reg   [4:0] select_ln242_reg_1341;
wire   [4:0] select_ln242_1_fu_868_p3;
reg   [4:0] select_ln242_1_reg_1347;
reg    ap_enable_reg_pp1_iter1;
wire   [4:0] add_ln243_fu_897_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cot_phi_fu_329_p4;
reg   [4:0] ap_phi_mux_cot_6_phi_fu_373_p4;
reg   [4:0] ap_phi_mux_cit_5_phi_fu_384_p4;
wire   [63:0] zext_ln233_1_fu_453_p1;
wire   [63:0] zext_ln253_1_fu_892_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln224_fu_409_p2;
wire   [4:0] add_ln223_fu_403_p2;
wire   [8:0] tmp_321_fu_437_p3;
wire   [8:0] zext_ln233_fu_444_p1;
wire   [8:0] add_ln233_fu_447_p2;
wire   [2:0] trunc_ln145_133_fu_722_p4;
wire   [2:0] trunc_ln145_129_fu_682_p4;
wire   [2:0] trunc_ln145_125_fu_642_p4;
wire   [2:0] trunc_ln145_121_fu_602_p4;
wire   [2:0] trunc_ln145_117_fu_562_p4;
wire   [2:0] trunc_ln145_113_fu_522_p4;
wire   [2:0] trunc_ln145_109_fu_482_p4;
wire   [2:0] trunc_ln145_132_fu_712_p4;
wire   [2:0] trunc_ln145_128_fu_672_p4;
wire   [2:0] trunc_ln145_124_fu_632_p4;
wire   [2:0] trunc_ln145_120_fu_592_p4;
wire   [2:0] trunc_ln145_116_fu_552_p4;
wire   [2:0] trunc_ln145_112_fu_512_p4;
wire   [2:0] trunc_ln145_108_fu_472_p4;
wire   [2:0] trunc_ln145_131_fu_702_p4;
wire   [2:0] trunc_ln145_127_fu_662_p4;
wire   [2:0] trunc_ln145_123_fu_622_p4;
wire   [2:0] trunc_ln145_119_fu_582_p4;
wire   [2:0] trunc_ln145_115_fu_542_p4;
wire   [2:0] trunc_ln145_111_fu_502_p4;
wire   [2:0] trunc_ln145_107_fu_462_p4;
wire   [2:0] trunc_ln145_130_fu_692_p4;
wire   [2:0] trunc_ln145_126_fu_652_p4;
wire   [2:0] trunc_ln145_122_fu_612_p4;
wire   [2:0] trunc_ln145_118_fu_572_p4;
wire   [2:0] trunc_ln145_114_fu_532_p4;
wire   [2:0] trunc_ln145_110_fu_492_p4;
wire   [2:0] trunc_ln145_fu_458_p1;
wire   [9:0] add_ln242_1_fu_811_p2;
wire   [0:0] icmp_ln243_fu_837_p2;
wire   [0:0] xor_ln241_fu_832_p2;
wire   [4:0] select_ln241_fu_825_p3;
wire   [0:0] and_ln241_fu_843_p2;
wire   [0:0] or_ln242_fu_855_p2;
wire   [4:0] add_ln242_fu_849_p2;
wire   [8:0] tmp_322_cast_fu_876_p3;
wire   [8:0] zext_ln253_fu_883_p1;
wire   [8:0] add_ln253_fu_886_p2;
wire   [2:0] tmp_406_fu_1166_p4;
wire   [2:0] tmp_405_fu_1156_p4;
wire   [2:0] tmp_404_fu_1146_p4;
wire   [2:0] tmp_403_fu_1136_p4;
wire   [2:0] tmp_402_fu_1126_p4;
wire   [2:0] tmp_401_fu_1116_p4;
wire   [2:0] tmp_400_fu_1106_p4;
wire   [2:0] tmp_399_fu_1096_p4;
wire   [2:0] tmp_398_fu_1086_p4;
wire   [2:0] tmp_397_fu_1076_p4;
wire   [2:0] tmp_396_fu_1066_p4;
wire   [2:0] tmp_395_fu_1056_p4;
wire   [2:0] tmp_394_fu_1046_p4;
wire   [2:0] tmp_393_fu_1036_p4;
wire   [2:0] tmp_392_fu_1026_p4;
wire   [2:0] tmp_391_fu_1016_p4;
wire   [2:0] tmp_390_fu_1006_p4;
wire   [2:0] tmp_389_fu_996_p4;
wire   [2:0] tmp_388_fu_986_p4;
wire   [2:0] tmp_387_fu_976_p4;
wire   [2:0] tmp_386_fu_966_p4;
wire   [2:0] tmp_385_fu_956_p4;
wire   [2:0] tmp_384_fu_946_p4;
wire   [2:0] tmp_383_fu_936_p4;
wire   [2:0] tmp_382_fu_926_p4;
wire   [2:0] tmp_381_fu_916_p4;
wire   [2:0] tmp_380_fu_906_p4;
wire   [2:0] trunc_ln253_fu_902_p1;
wire   [218:0] tmp_407_fu_1176_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_5_reg_380 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cit_5_reg_380 <= add_ln243_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        cit_reg_336 <= add_ln224_fu_431_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_336 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_6_reg_369 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        cot_6_reg_369 <= select_ln242_1_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_325 <= select_ln223_1_reg_1309;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_325 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_347 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_347 <= add_ln241_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_358 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_358 <= select_ln242_2_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        indvar_flatten_reg_314 <= add_ln223_1_fu_391_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_314 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln223_reg_1300 <= icmp_ln223_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln241_reg_1325 <= icmp_ln241_fu_799_p2;
        icmp_ln241_reg_1325_pp1_iter1_reg <= icmp_ln241_reg_1325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln241_reg_1325_pp1_iter2_reg <= icmp_ln241_reg_1325_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd0))) begin
        icmp_ln242_reg_1329 <= icmp_ln242_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_1_reg_1309 <= select_ln223_1_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_397_p2 == 1'd0))) begin
        select_ln223_reg_1304 <= select_ln223_fu_415_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln242_1_reg_1347 <= select_ln242_1_fu_868_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln241_reg_1325 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln242_reg_1341 <= select_ln242_fu_860_p3;
    end
end

always @ (*) begin
    if ((icmp_ln223_fu_397_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln241_fu_799_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = add_ln243_fu_897_p2;
    end else begin
        ap_phi_mux_cit_5_phi_fu_384_p4 = cit_5_reg_380;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln241_reg_1325_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = select_ln242_1_reg_1347;
    end else begin
        ap_phi_mux_cot_6_phi_fu_373_p4 = cot_6_reg_369;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_329_p4 = select_ln223_1_reg_1309;
    end else begin
        ap_phi_mux_cot_phi_fu_329_p4 = cot_reg_325;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln253_1_fu_892_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln233_1_fu_453_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_empty_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln223_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_reshape_head1_read = 1'b1;
    end else begin
        kq_sm_reshape_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln223_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_1_fu_391_p2 = (indvar_flatten_reg_314 + 9'd1);

assign add_ln223_fu_403_p2 = (ap_phi_mux_cot_phi_fu_329_p4 + 5'd1);

assign add_ln224_fu_431_p2 = (select_ln223_fu_415_p3 + 5'd1);

assign add_ln233_fu_447_p2 = (tmp_321_fu_437_p3 + zext_ln233_fu_444_p1);

assign add_ln241_fu_793_p2 = (indvar_flatten21_reg_347 + 16'd1);

assign add_ln242_1_fu_811_p2 = (indvar_flatten7_reg_358 + 10'd1);

assign add_ln242_fu_849_p2 = (select_ln241_fu_825_p3 + 5'd1);

assign add_ln243_fu_897_p2 = (select_ln242_reg_1341 + 5'd1);

assign add_ln253_fu_886_p2 = (tmp_322_cast_fu_876_p3 + zext_ln253_fu_883_p1);

assign and_ln241_fu_843_p2 = (xor_ln241_fu_832_p2 & icmp_ln243_fu_837_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln223_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln223_reg_1300 == 1'd0) & (kq_sm_reshape_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln241_reg_1325_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_133_fu_722_p4}, {trunc_ln145_129_fu_682_p4}}, {trunc_ln145_125_fu_642_p4}}, {trunc_ln145_121_fu_602_p4}}, {trunc_ln145_117_fu_562_p4}}, {trunc_ln145_113_fu_522_p4}}, {trunc_ln145_109_fu_482_p4}}, {trunc_ln145_132_fu_712_p4}}, {trunc_ln145_128_fu_672_p4}}, {trunc_ln145_124_fu_632_p4}}, {trunc_ln145_120_fu_592_p4}}, {trunc_ln145_116_fu_552_p4}}, {trunc_ln145_112_fu_512_p4}}, {trunc_ln145_108_fu_472_p4}}, {trunc_ln145_131_fu_702_p4}}, {trunc_ln145_127_fu_662_p4}}, {trunc_ln145_123_fu_622_p4}}, {trunc_ln145_119_fu_582_p4}}, {trunc_ln145_115_fu_542_p4}}, {trunc_ln145_111_fu_502_p4}}, {trunc_ln145_107_fu_462_p4}}, {trunc_ln145_130_fu_692_p4}}, {trunc_ln145_126_fu_652_p4}}, {trunc_ln145_122_fu_612_p4}}, {trunc_ln145_118_fu_572_p4}}, {trunc_ln145_114_fu_532_p4}}, {trunc_ln145_110_fu_492_p4}}, {trunc_ln145_fu_458_p1}};

assign icmp_ln223_fu_397_p2 = ((indvar_flatten_reg_314 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_409_p2 = ((cit_reg_336 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_799_p2 = ((indvar_flatten21_reg_347 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln242_fu_805_p2 = ((indvar_flatten7_reg_358 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_837_p2 = ((ap_phi_mux_cit_5_phi_fu_384_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln242_fu_855_p2 = (icmp_ln242_reg_1329 | and_ln241_fu_843_p2);

assign select_ln223_1_fu_423_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? add_ln223_fu_403_p2 : ap_phi_mux_cot_phi_fu_329_p4);

assign select_ln223_fu_415_p3 = ((icmp_ln224_fu_409_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_336);

assign select_ln241_fu_825_p3 = ((icmp_ln242_reg_1329[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_6_phi_fu_373_p4);

assign select_ln242_1_fu_868_p3 = ((and_ln241_fu_843_p2[0:0] == 1'b1) ? add_ln242_fu_849_p2 : select_ln241_fu_825_p3);

assign select_ln242_2_fu_817_p3 = ((icmp_ln242_fu_805_p2[0:0] == 1'b1) ? 10'd1 : add_ln242_1_fu_811_p2);

assign select_ln242_fu_860_p3 = ((or_ln242_fu_855_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_5_phi_fu_384_p4);

assign start_out = real_start;

assign tmp_321_fu_437_p3 = {{select_ln223_1_reg_1309}, {4'd0}};

assign tmp_322_cast_fu_876_p3 = {{select_ln242_1_reg_1347}, {4'd0}};

assign tmp_380_fu_906_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_381_fu_916_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_382_fu_926_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_383_fu_936_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_384_fu_946_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_385_fu_956_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_386_fu_966_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_387_fu_976_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_388_fu_986_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_389_fu_996_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_390_fu_1006_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_391_fu_1016_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_392_fu_1026_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_393_fu_1036_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_394_fu_1046_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_395_fu_1056_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_396_fu_1066_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_397_fu_1076_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_398_fu_1086_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_399_fu_1096_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_400_fu_1106_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_401_fu_1116_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_402_fu_1126_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_403_fu_1136_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_404_fu_1146_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_405_fu_1156_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_406_fu_1166_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_407_fu_1176_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_406_fu_1166_p4}, {5'd0}}, {tmp_405_fu_1156_p4}}, {5'd0}}, {tmp_404_fu_1146_p4}}, {5'd0}}, {tmp_403_fu_1136_p4}}, {5'd0}}, {tmp_402_fu_1126_p4}}, {5'd0}}, {tmp_401_fu_1116_p4}}, {5'd0}}, {tmp_400_fu_1106_p4}}, {5'd0}}, {tmp_399_fu_1096_p4}}, {5'd0}}, {tmp_398_fu_1086_p4}}, {5'd0}}, {tmp_397_fu_1076_p4}}, {5'd0}}, {tmp_396_fu_1066_p4}}, {5'd0}}, {tmp_395_fu_1056_p4}}, {5'd0}}, {tmp_394_fu_1046_p4}}, {5'd0}}, {tmp_393_fu_1036_p4}}, {5'd0}}, {tmp_392_fu_1026_p4}}, {5'd0}}, {tmp_391_fu_1016_p4}}, {5'd0}}, {tmp_390_fu_1006_p4}}, {5'd0}}, {tmp_389_fu_996_p4}}, {5'd0}}, {tmp_388_fu_986_p4}}, {5'd0}}, {tmp_387_fu_976_p4}}, {5'd0}}, {tmp_386_fu_966_p4}}, {5'd0}}, {tmp_385_fu_956_p4}}, {5'd0}}, {tmp_384_fu_946_p4}}, {5'd0}}, {tmp_383_fu_936_p4}}, {5'd0}}, {tmp_382_fu_926_p4}}, {5'd0}}, {tmp_381_fu_916_p4}}, {5'd0}}, {tmp_380_fu_906_p4}}, {5'd0}}, {trunc_ln253_fu_902_p1}};

assign trunc_ln145_107_fu_462_p4 = {{kq_sm_reshape_head1_dout[10:8]}};

assign trunc_ln145_108_fu_472_p4 = {{kq_sm_reshape_head1_dout[18:16]}};

assign trunc_ln145_109_fu_482_p4 = {{kq_sm_reshape_head1_dout[26:24]}};

assign trunc_ln145_110_fu_492_p4 = {{kq_sm_reshape_head1_dout[34:32]}};

assign trunc_ln145_111_fu_502_p4 = {{kq_sm_reshape_head1_dout[42:40]}};

assign trunc_ln145_112_fu_512_p4 = {{kq_sm_reshape_head1_dout[50:48]}};

assign trunc_ln145_113_fu_522_p4 = {{kq_sm_reshape_head1_dout[58:56]}};

assign trunc_ln145_114_fu_532_p4 = {{kq_sm_reshape_head1_dout[66:64]}};

assign trunc_ln145_115_fu_542_p4 = {{kq_sm_reshape_head1_dout[74:72]}};

assign trunc_ln145_116_fu_552_p4 = {{kq_sm_reshape_head1_dout[82:80]}};

assign trunc_ln145_117_fu_562_p4 = {{kq_sm_reshape_head1_dout[90:88]}};

assign trunc_ln145_118_fu_572_p4 = {{kq_sm_reshape_head1_dout[98:96]}};

assign trunc_ln145_119_fu_582_p4 = {{kq_sm_reshape_head1_dout[106:104]}};

assign trunc_ln145_120_fu_592_p4 = {{kq_sm_reshape_head1_dout[114:112]}};

assign trunc_ln145_121_fu_602_p4 = {{kq_sm_reshape_head1_dout[122:120]}};

assign trunc_ln145_122_fu_612_p4 = {{kq_sm_reshape_head1_dout[130:128]}};

assign trunc_ln145_123_fu_622_p4 = {{kq_sm_reshape_head1_dout[138:136]}};

assign trunc_ln145_124_fu_632_p4 = {{kq_sm_reshape_head1_dout[146:144]}};

assign trunc_ln145_125_fu_642_p4 = {{kq_sm_reshape_head1_dout[154:152]}};

assign trunc_ln145_126_fu_652_p4 = {{kq_sm_reshape_head1_dout[162:160]}};

assign trunc_ln145_127_fu_662_p4 = {{kq_sm_reshape_head1_dout[170:168]}};

assign trunc_ln145_128_fu_672_p4 = {{kq_sm_reshape_head1_dout[178:176]}};

assign trunc_ln145_129_fu_682_p4 = {{kq_sm_reshape_head1_dout[186:184]}};

assign trunc_ln145_130_fu_692_p4 = {{kq_sm_reshape_head1_dout[194:192]}};

assign trunc_ln145_131_fu_702_p4 = {{kq_sm_reshape_head1_dout[202:200]}};

assign trunc_ln145_132_fu_712_p4 = {{kq_sm_reshape_head1_dout[210:208]}};

assign trunc_ln145_133_fu_722_p4 = {{kq_sm_reshape_head1_dout[218:216]}};

assign trunc_ln145_fu_458_p1 = kq_sm_reshape_head1_dout[2:0];

assign trunc_ln253_fu_902_p1 = dynamic_weight_arr_V_q0[2:0];

assign weight_sm_din = tmp_407_fu_1176_p56;

assign xor_ln241_fu_832_p2 = (icmp_ln242_reg_1329 ^ 1'd1);

assign zext_ln233_1_fu_453_p1 = add_ln233_fu_447_p2;

assign zext_ln233_fu_444_p1 = select_ln223_reg_1304;

assign zext_ln253_1_fu_892_p1 = add_ln253_fu_886_p2;

assign zext_ln253_fu_883_p1 = select_ln242_reg_1341;

endmodule //ATTN0_matmul_step1_cache_weight156
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight_transposed (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    vq_sm_transpose_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln286_reg_1346;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln304_reg_1376;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_318;
reg   [4:0] cit_reg_329;
reg   [4:0] cot_reg_340;
reg   [15:0] indvar_flatten21_reg_351;
reg   [9:0] indvar_flatten7_reg_362;
reg   [4:0] cot_3_reg_373;
reg   [4:0] cit_3_reg_384;
wire   [8:0] add_ln286_3_fu_395_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln286_fu_401_p2;
wire   [4:0] select_ln286_fu_419_p3;
reg   [4:0] select_ln286_reg_1350;
wire   [4:0] select_ln286_3_fu_427_p3;
reg   [4:0] select_ln286_3_reg_1355;
wire   [3:0] trunc_ln296_fu_435_p1;
reg   [3:0] trunc_ln296_reg_1361;
wire   [4:0] add_ln287_fu_439_p2;
wire   [15:0] add_ln304_fu_818_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln304_fu_824_p2;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter1_reg;
wire   [0:0] icmp_ln305_fu_830_p2;
reg   [0:0] icmp_ln305_reg_1380;
wire   [9:0] select_ln305_6_fu_842_p3;
wire   [4:0] select_ln305_fu_885_p3;
reg   [4:0] select_ln305_reg_1392;
wire   [4:0] select_ln305_5_fu_893_p3;
reg   [4:0] select_ln305_5_reg_1398;
reg    ap_enable_reg_pp1_iter1;
wire   [3:0] trunc_ln316_fu_901_p1;
reg   [3:0] trunc_ln316_reg_1404;
wire   [4:0] add_ln306_fu_943_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cit_phi_fu_333_p4;
reg   [4:0] ap_phi_mux_cot_3_phi_fu_377_p4;
reg   [4:0] ap_phi_mux_cit_3_phi_fu_388_p4;
wire   [63:0] zext_ln296_6_fu_478_p1;
wire   [63:0] zext_ln316_6_fu_938_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln287_fu_413_p2;
wire   [4:0] add_ln286_fu_407_p2;
wire   [6:0] tmp_318_fu_455_p3;
wire   [8:0] tmp_317_cast_fu_448_p3;
wire   [8:0] zext_ln296_5_fu_462_p1;
wire   [8:0] sub_ln296_fu_466_p2;
wire   [8:0] zext_ln296_fu_445_p1;
wire   [8:0] add_ln296_fu_472_p2;
wire   [2:0] trunc_ln145_71_fu_747_p4;
wire   [2:0] trunc_ln145_64_fu_677_p4;
wire   [2:0] trunc_ln145_57_fu_607_p4;
wire   [2:0] trunc_ln145_50_fu_537_p4;
wire   [2:0] trunc_ln145_70_fu_737_p4;
wire   [2:0] trunc_ln145_63_fu_667_p4;
wire   [2:0] trunc_ln145_56_fu_597_p4;
wire   [2:0] trunc_ln145_49_fu_527_p4;
wire   [2:0] trunc_ln145_69_fu_727_p4;
wire   [2:0] trunc_ln145_62_fu_657_p4;
wire   [2:0] trunc_ln145_55_fu_587_p4;
wire   [2:0] trunc_ln145_48_fu_517_p4;
wire   [2:0] trunc_ln145_68_fu_717_p4;
wire   [2:0] trunc_ln145_61_fu_647_p4;
wire   [2:0] trunc_ln145_54_fu_577_p4;
wire   [2:0] trunc_ln145_47_fu_507_p4;
wire   [2:0] trunc_ln145_67_fu_707_p4;
wire   [2:0] trunc_ln145_60_fu_637_p4;
wire   [2:0] trunc_ln145_53_fu_567_p4;
wire   [2:0] trunc_ln145_46_fu_497_p4;
wire   [2:0] trunc_ln145_66_fu_697_p4;
wire   [2:0] trunc_ln145_59_fu_627_p4;
wire   [2:0] trunc_ln145_52_fu_557_p4;
wire   [2:0] trunc_ln145_45_fu_487_p4;
wire   [2:0] trunc_ln145_65_fu_687_p4;
wire   [2:0] trunc_ln145_58_fu_617_p4;
wire   [2:0] trunc_ln145_51_fu_547_p4;
wire   [2:0] trunc_ln145_fu_483_p1;
wire   [9:0] add_ln305_3_fu_836_p2;
wire   [0:0] icmp_ln306_fu_862_p2;
wire   [0:0] xor_ln304_fu_857_p2;
wire   [4:0] select_ln304_fu_850_p3;
wire   [0:0] and_ln304_fu_868_p2;
wire   [0:0] or_ln305_fu_880_p2;
wire   [4:0] add_ln305_fu_874_p2;
wire   [6:0] tmp_90_fu_912_p3;
wire   [8:0] p_shl_cast_fu_905_p3;
wire   [8:0] zext_ln316_fu_919_p1;
wire   [8:0] sub_ln316_fu_923_p2;
wire   [8:0] zext_ln316_5_fu_929_p1;
wire   [8:0] add_ln316_fu_932_p2;
wire   [2:0] tmp_315_fu_1212_p4;
wire   [2:0] tmp_314_fu_1202_p4;
wire   [2:0] tmp_313_fu_1192_p4;
wire   [2:0] tmp_312_fu_1182_p4;
wire   [2:0] tmp_311_fu_1172_p4;
wire   [2:0] tmp_310_fu_1162_p4;
wire   [2:0] tmp_309_fu_1152_p4;
wire   [2:0] tmp_308_fu_1142_p4;
wire   [2:0] tmp_307_fu_1132_p4;
wire   [2:0] tmp_306_fu_1122_p4;
wire   [2:0] tmp_305_fu_1112_p4;
wire   [2:0] tmp_304_fu_1102_p4;
wire   [2:0] tmp_303_fu_1092_p4;
wire   [2:0] tmp_302_fu_1082_p4;
wire   [2:0] tmp_301_fu_1072_p4;
wire   [2:0] tmp_300_fu_1062_p4;
wire   [2:0] tmp_299_fu_1052_p4;
wire   [2:0] tmp_298_fu_1042_p4;
wire   [2:0] tmp_297_fu_1032_p4;
wire   [2:0] tmp_296_fu_1022_p4;
wire   [2:0] tmp_295_fu_1012_p4;
wire   [2:0] tmp_294_fu_1002_p4;
wire   [2:0] tmp_293_fu_992_p4;
wire   [2:0] tmp_292_fu_982_p4;
wire   [2:0] tmp_291_fu_972_p4;
wire   [2:0] tmp_290_fu_962_p4;
wire   [2:0] tmp_289_fu_952_p4;
wire   [2:0] trunc_ln316_3_fu_948_p1;
wire   [218:0] tmp_316_fu_1222_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_3_reg_384 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cit_3_reg_384 <= add_ln306_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_329 <= select_ln286_3_reg_1355;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_329 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_3_reg_373 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cot_3_reg_373 <= select_ln305_5_reg_1398;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        cot_reg_340 <= add_ln287_fu_439_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_351 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_351 <= add_ln304_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_362 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_362 <= select_ln305_6_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        indvar_flatten_reg_318 <= add_ln286_3_fu_395_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_318 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln286_reg_1346 <= icmp_ln286_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln304_reg_1376 <= icmp_ln304_fu_824_p2;
        icmp_ln304_reg_1376_pp1_iter1_reg <= icmp_ln304_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln304_reg_1376_pp1_iter2_reg <= icmp_ln304_reg_1376_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0))) begin
        icmp_ln305_reg_1380 <= icmp_ln305_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_3_reg_1355 <= select_ln286_3_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_reg_1350 <= select_ln286_fu_419_p3;
        trunc_ln296_reg_1361 <= trunc_ln296_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln305_5_reg_1398 <= select_ln305_5_fu_893_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln305_reg_1392 <= select_ln305_fu_885_p3;
        trunc_ln316_reg_1404 <= trunc_ln316_fu_901_p1;
    end
end

always @ (*) begin
    if ((icmp_ln286_fu_401_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = add_ln306_fu_943_p2;
    end else begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = cit_3_reg_384;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_333_p4 = select_ln286_3_reg_1355;
    end else begin
        ap_phi_mux_cit_phi_fu_333_p4 = cit_reg_329;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = select_ln305_5_reg_1398;
    end else begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = cot_3_reg_373;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln316_6_fu_938_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln296_6_fu_478_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_blk_n = vq_sm_transpose_head1_empty_n;
    end else begin
        vq_sm_transpose_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_read = 1'b1;
    end else begin
        vq_sm_transpose_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_3_fu_395_p2 = (indvar_flatten_reg_318 + 9'd1);

assign add_ln286_fu_407_p2 = (ap_phi_mux_cit_phi_fu_333_p4 + 5'd1);

assign add_ln287_fu_439_p2 = (select_ln286_fu_419_p3 + 5'd1);

assign add_ln296_fu_472_p2 = (sub_ln296_fu_466_p2 + zext_ln296_fu_445_p1);

assign add_ln304_fu_818_p2 = (indvar_flatten21_reg_351 + 16'd1);

assign add_ln305_3_fu_836_p2 = (indvar_flatten7_reg_362 + 10'd1);

assign add_ln305_fu_874_p2 = (select_ln304_fu_850_p3 + 5'd1);

assign add_ln306_fu_943_p2 = (select_ln305_reg_1392 + 5'd1);

assign add_ln316_fu_932_p2 = (sub_ln316_fu_923_p2 + zext_ln316_5_fu_929_p1);

assign and_ln304_fu_868_p2 = (xor_ln304_fu_857_p2 & icmp_ln306_fu_862_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln286_reg_1346 == 1'd0) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_71_fu_747_p4}, {trunc_ln145_64_fu_677_p4}}, {trunc_ln145_57_fu_607_p4}}, {trunc_ln145_50_fu_537_p4}}, {trunc_ln145_70_fu_737_p4}}, {trunc_ln145_63_fu_667_p4}}, {trunc_ln145_56_fu_597_p4}}, {trunc_ln145_49_fu_527_p4}}, {trunc_ln145_69_fu_727_p4}}, {trunc_ln145_62_fu_657_p4}}, {trunc_ln145_55_fu_587_p4}}, {trunc_ln145_48_fu_517_p4}}, {trunc_ln145_68_fu_717_p4}}, {trunc_ln145_61_fu_647_p4}}, {trunc_ln145_54_fu_577_p4}}, {trunc_ln145_47_fu_507_p4}}, {trunc_ln145_67_fu_707_p4}}, {trunc_ln145_60_fu_637_p4}}, {trunc_ln145_53_fu_567_p4}}, {trunc_ln145_46_fu_497_p4}}, {trunc_ln145_66_fu_697_p4}}, {trunc_ln145_59_fu_627_p4}}, {trunc_ln145_52_fu_557_p4}}, {trunc_ln145_45_fu_487_p4}}, {trunc_ln145_65_fu_687_p4}}, {trunc_ln145_58_fu_617_p4}}, {trunc_ln145_51_fu_547_p4}}, {trunc_ln145_fu_483_p1}};

assign icmp_ln286_fu_401_p2 = ((indvar_flatten_reg_318 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_413_p2 = ((cot_reg_340 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_824_p2 = ((indvar_flatten21_reg_351 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_830_p2 = ((indvar_flatten7_reg_362 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_862_p2 = ((ap_phi_mux_cit_3_phi_fu_388_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_880_p2 = (icmp_ln305_reg_1380 | and_ln304_fu_868_p2);

assign p_shl_cast_fu_905_p3 = {{trunc_ln316_reg_1404}, {5'd0}};

assign select_ln286_3_fu_427_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? add_ln286_fu_407_p2 : ap_phi_mux_cit_phi_fu_333_p4);

assign select_ln286_fu_419_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? 5'd0 : cot_reg_340);

assign select_ln304_fu_850_p3 = ((icmp_ln305_reg_1380[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_3_phi_fu_377_p4);

assign select_ln305_5_fu_893_p3 = ((and_ln304_fu_868_p2[0:0] == 1'b1) ? add_ln305_fu_874_p2 : select_ln304_fu_850_p3);

assign select_ln305_6_fu_842_p3 = ((icmp_ln305_fu_830_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_3_fu_836_p2);

assign select_ln305_fu_885_p3 = ((or_ln305_fu_880_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_3_phi_fu_388_p4);

assign start_out = real_start;

assign sub_ln296_fu_466_p2 = (tmp_317_cast_fu_448_p3 - zext_ln296_5_fu_462_p1);

assign sub_ln316_fu_923_p2 = (p_shl_cast_fu_905_p3 - zext_ln316_fu_919_p1);

assign tmp_289_fu_952_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_290_fu_962_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_291_fu_972_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_292_fu_982_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_293_fu_992_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_294_fu_1002_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_295_fu_1012_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_296_fu_1022_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_297_fu_1032_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_298_fu_1042_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_299_fu_1052_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_300_fu_1062_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_301_fu_1072_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_302_fu_1082_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_303_fu_1092_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_304_fu_1102_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_305_fu_1112_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_306_fu_1122_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_307_fu_1132_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_308_fu_1142_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_309_fu_1152_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_310_fu_1162_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_311_fu_1172_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_312_fu_1182_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_313_fu_1192_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_314_fu_1202_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_315_fu_1212_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_316_fu_1222_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_315_fu_1212_p4}, {5'd0}}, {tmp_314_fu_1202_p4}}, {5'd0}}, {tmp_313_fu_1192_p4}}, {5'd0}}, {tmp_312_fu_1182_p4}}, {5'd0}}, {tmp_311_fu_1172_p4}}, {5'd0}}, {tmp_310_fu_1162_p4}}, {5'd0}}, {tmp_309_fu_1152_p4}}, {5'd0}}, {tmp_308_fu_1142_p4}}, {5'd0}}, {tmp_307_fu_1132_p4}}, {5'd0}}, {tmp_306_fu_1122_p4}}, {5'd0}}, {tmp_305_fu_1112_p4}}, {5'd0}}, {tmp_304_fu_1102_p4}}, {5'd0}}, {tmp_303_fu_1092_p4}}, {5'd0}}, {tmp_302_fu_1082_p4}}, {5'd0}}, {tmp_301_fu_1072_p4}}, {5'd0}}, {tmp_300_fu_1062_p4}}, {5'd0}}, {tmp_299_fu_1052_p4}}, {5'd0}}, {tmp_298_fu_1042_p4}}, {5'd0}}, {tmp_297_fu_1032_p4}}, {5'd0}}, {tmp_296_fu_1022_p4}}, {5'd0}}, {tmp_295_fu_1012_p4}}, {5'd0}}, {tmp_294_fu_1002_p4}}, {5'd0}}, {tmp_293_fu_992_p4}}, {5'd0}}, {tmp_292_fu_982_p4}}, {5'd0}}, {tmp_291_fu_972_p4}}, {5'd0}}, {tmp_290_fu_962_p4}}, {5'd0}}, {tmp_289_fu_952_p4}}, {5'd0}}, {trunc_ln316_3_fu_948_p1}};

assign tmp_317_cast_fu_448_p3 = {{trunc_ln296_reg_1361}, {5'd0}};

assign tmp_318_fu_455_p3 = {{select_ln286_reg_1350}, {2'd0}};

assign tmp_90_fu_912_p3 = {{select_ln305_5_reg_1398}, {2'd0}};

assign trunc_ln145_45_fu_487_p4 = {{vq_sm_transpose_head1_dout[10:8]}};

assign trunc_ln145_46_fu_497_p4 = {{vq_sm_transpose_head1_dout[18:16]}};

assign trunc_ln145_47_fu_507_p4 = {{vq_sm_transpose_head1_dout[26:24]}};

assign trunc_ln145_48_fu_517_p4 = {{vq_sm_transpose_head1_dout[34:32]}};

assign trunc_ln145_49_fu_527_p4 = {{vq_sm_transpose_head1_dout[42:40]}};

assign trunc_ln145_50_fu_537_p4 = {{vq_sm_transpose_head1_dout[50:48]}};

assign trunc_ln145_51_fu_547_p4 = {{vq_sm_transpose_head1_dout[58:56]}};

assign trunc_ln145_52_fu_557_p4 = {{vq_sm_transpose_head1_dout[66:64]}};

assign trunc_ln145_53_fu_567_p4 = {{vq_sm_transpose_head1_dout[74:72]}};

assign trunc_ln145_54_fu_577_p4 = {{vq_sm_transpose_head1_dout[82:80]}};

assign trunc_ln145_55_fu_587_p4 = {{vq_sm_transpose_head1_dout[90:88]}};

assign trunc_ln145_56_fu_597_p4 = {{vq_sm_transpose_head1_dout[98:96]}};

assign trunc_ln145_57_fu_607_p4 = {{vq_sm_transpose_head1_dout[106:104]}};

assign trunc_ln145_58_fu_617_p4 = {{vq_sm_transpose_head1_dout[114:112]}};

assign trunc_ln145_59_fu_627_p4 = {{vq_sm_transpose_head1_dout[122:120]}};

assign trunc_ln145_60_fu_637_p4 = {{vq_sm_transpose_head1_dout[130:128]}};

assign trunc_ln145_61_fu_647_p4 = {{vq_sm_transpose_head1_dout[138:136]}};

assign trunc_ln145_62_fu_657_p4 = {{vq_sm_transpose_head1_dout[146:144]}};

assign trunc_ln145_63_fu_667_p4 = {{vq_sm_transpose_head1_dout[154:152]}};

assign trunc_ln145_64_fu_677_p4 = {{vq_sm_transpose_head1_dout[162:160]}};

assign trunc_ln145_65_fu_687_p4 = {{vq_sm_transpose_head1_dout[170:168]}};

assign trunc_ln145_66_fu_697_p4 = {{vq_sm_transpose_head1_dout[178:176]}};

assign trunc_ln145_67_fu_707_p4 = {{vq_sm_transpose_head1_dout[186:184]}};

assign trunc_ln145_68_fu_717_p4 = {{vq_sm_transpose_head1_dout[194:192]}};

assign trunc_ln145_69_fu_727_p4 = {{vq_sm_transpose_head1_dout[202:200]}};

assign trunc_ln145_70_fu_737_p4 = {{vq_sm_transpose_head1_dout[210:208]}};

assign trunc_ln145_71_fu_747_p4 = {{vq_sm_transpose_head1_dout[218:216]}};

assign trunc_ln145_fu_483_p1 = vq_sm_transpose_head1_dout[2:0];

assign trunc_ln296_fu_435_p1 = select_ln286_fu_419_p3[3:0];

assign trunc_ln316_3_fu_948_p1 = dynamic_weight_arr_V_q0[2:0];

assign trunc_ln316_fu_901_p1 = select_ln305_5_fu_893_p3[3:0];

assign weight_sm_din = tmp_316_fu_1222_p56;

assign xor_ln304_fu_857_p2 = (icmp_ln305_reg_1380 ^ 1'd1);

assign zext_ln296_5_fu_462_p1 = tmp_318_fu_455_p3;

assign zext_ln296_6_fu_478_p1 = add_ln296_fu_472_p2;

assign zext_ln296_fu_445_p1 = select_ln286_3_reg_1355;

assign zext_ln316_5_fu_929_p1 = select_ln305_reg_1392;

assign zext_ln316_6_fu_938_p1 = add_ln316_fu_932_p2;

assign zext_ln316_fu_919_p1 = tmp_90_fu_912_p3;

endmodule //ATTN0_matmul_step1_cache_weight_transposed
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight_transposed167 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    vq_sm_transpose_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln286_reg_1346;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln304_reg_1376;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_318;
reg   [4:0] cit_reg_329;
reg   [4:0] cot_reg_340;
reg   [15:0] indvar_flatten21_reg_351;
reg   [9:0] indvar_flatten7_reg_362;
reg   [4:0] cot_3_reg_373;
reg   [4:0] cit_3_reg_384;
wire   [8:0] add_ln286_2_fu_395_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln286_fu_401_p2;
wire   [4:0] select_ln286_fu_419_p3;
reg   [4:0] select_ln286_reg_1350;
wire   [4:0] select_ln286_2_fu_427_p3;
reg   [4:0] select_ln286_2_reg_1355;
wire   [3:0] trunc_ln296_fu_435_p1;
reg   [3:0] trunc_ln296_reg_1361;
wire   [4:0] add_ln287_fu_439_p2;
wire   [15:0] add_ln304_fu_818_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln304_fu_824_p2;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter1_reg;
wire   [0:0] icmp_ln305_fu_830_p2;
reg   [0:0] icmp_ln305_reg_1380;
wire   [9:0] select_ln305_4_fu_842_p3;
wire   [4:0] select_ln305_fu_885_p3;
reg   [4:0] select_ln305_reg_1392;
wire   [4:0] select_ln305_3_fu_893_p3;
reg   [4:0] select_ln305_3_reg_1398;
reg    ap_enable_reg_pp1_iter1;
wire   [3:0] trunc_ln316_fu_901_p1;
reg   [3:0] trunc_ln316_reg_1404;
wire   [4:0] add_ln306_fu_943_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cit_phi_fu_333_p4;
reg   [4:0] ap_phi_mux_cot_3_phi_fu_377_p4;
reg   [4:0] ap_phi_mux_cit_3_phi_fu_388_p4;
wire   [63:0] zext_ln296_4_fu_478_p1;
wire   [63:0] zext_ln316_4_fu_938_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln287_fu_413_p2;
wire   [4:0] add_ln286_fu_407_p2;
wire   [6:0] tmp_290_fu_455_p3;
wire   [8:0] tmp_289_cast_fu_448_p3;
wire   [8:0] zext_ln296_3_fu_462_p1;
wire   [8:0] sub_ln296_fu_466_p2;
wire   [8:0] zext_ln296_fu_445_p1;
wire   [8:0] add_ln296_fu_472_p2;
wire   [2:0] trunc_ln145_71_fu_747_p4;
wire   [2:0] trunc_ln145_64_fu_677_p4;
wire   [2:0] trunc_ln145_57_fu_607_p4;
wire   [2:0] trunc_ln145_50_fu_537_p4;
wire   [2:0] trunc_ln145_70_fu_737_p4;
wire   [2:0] trunc_ln145_63_fu_667_p4;
wire   [2:0] trunc_ln145_56_fu_597_p4;
wire   [2:0] trunc_ln145_49_fu_527_p4;
wire   [2:0] trunc_ln145_69_fu_727_p4;
wire   [2:0] trunc_ln145_62_fu_657_p4;
wire   [2:0] trunc_ln145_55_fu_587_p4;
wire   [2:0] trunc_ln145_48_fu_517_p4;
wire   [2:0] trunc_ln145_68_fu_717_p4;
wire   [2:0] trunc_ln145_61_fu_647_p4;
wire   [2:0] trunc_ln145_54_fu_577_p4;
wire   [2:0] trunc_ln145_47_fu_507_p4;
wire   [2:0] trunc_ln145_67_fu_707_p4;
wire   [2:0] trunc_ln145_60_fu_637_p4;
wire   [2:0] trunc_ln145_53_fu_567_p4;
wire   [2:0] trunc_ln145_46_fu_497_p4;
wire   [2:0] trunc_ln145_66_fu_697_p4;
wire   [2:0] trunc_ln145_59_fu_627_p4;
wire   [2:0] trunc_ln145_52_fu_557_p4;
wire   [2:0] trunc_ln145_45_fu_487_p4;
wire   [2:0] trunc_ln145_65_fu_687_p4;
wire   [2:0] trunc_ln145_58_fu_617_p4;
wire   [2:0] trunc_ln145_51_fu_547_p4;
wire   [2:0] trunc_ln145_fu_483_p1;
wire   [9:0] add_ln305_2_fu_836_p2;
wire   [0:0] icmp_ln306_fu_862_p2;
wire   [0:0] xor_ln304_fu_857_p2;
wire   [4:0] select_ln304_fu_850_p3;
wire   [0:0] and_ln304_fu_868_p2;
wire   [0:0] or_ln305_fu_880_p2;
wire   [4:0] add_ln305_fu_874_p2;
wire   [6:0] tmp_89_fu_912_p3;
wire   [8:0] p_shl_cast_fu_905_p3;
wire   [8:0] zext_ln316_fu_919_p1;
wire   [8:0] sub_ln316_fu_923_p2;
wire   [8:0] zext_ln316_3_fu_929_p1;
wire   [8:0] add_ln316_fu_932_p2;
wire   [2:0] tmp_287_fu_1212_p4;
wire   [2:0] tmp_286_fu_1202_p4;
wire   [2:0] tmp_285_fu_1192_p4;
wire   [2:0] tmp_284_fu_1182_p4;
wire   [2:0] tmp_283_fu_1172_p4;
wire   [2:0] tmp_282_fu_1162_p4;
wire   [2:0] tmp_281_fu_1152_p4;
wire   [2:0] tmp_280_fu_1142_p4;
wire   [2:0] tmp_279_fu_1132_p4;
wire   [2:0] tmp_278_fu_1122_p4;
wire   [2:0] tmp_277_fu_1112_p4;
wire   [2:0] tmp_276_fu_1102_p4;
wire   [2:0] tmp_275_fu_1092_p4;
wire   [2:0] tmp_274_fu_1082_p4;
wire   [2:0] tmp_273_fu_1072_p4;
wire   [2:0] tmp_272_fu_1062_p4;
wire   [2:0] tmp_271_fu_1052_p4;
wire   [2:0] tmp_270_fu_1042_p4;
wire   [2:0] tmp_269_fu_1032_p4;
wire   [2:0] tmp_268_fu_1022_p4;
wire   [2:0] tmp_267_fu_1012_p4;
wire   [2:0] tmp_266_fu_1002_p4;
wire   [2:0] tmp_265_fu_992_p4;
wire   [2:0] tmp_264_fu_982_p4;
wire   [2:0] tmp_263_fu_972_p4;
wire   [2:0] tmp_262_fu_962_p4;
wire   [2:0] tmp_261_fu_952_p4;
wire   [2:0] trunc_ln316_2_fu_948_p1;
wire   [218:0] tmp_288_fu_1222_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_3_reg_384 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cit_3_reg_384 <= add_ln306_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_329 <= select_ln286_2_reg_1355;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_329 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_3_reg_373 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cot_3_reg_373 <= select_ln305_3_reg_1398;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        cot_reg_340 <= add_ln287_fu_439_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_351 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_351 <= add_ln304_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_362 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_362 <= select_ln305_4_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        indvar_flatten_reg_318 <= add_ln286_2_fu_395_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_318 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln286_reg_1346 <= icmp_ln286_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln304_reg_1376 <= icmp_ln304_fu_824_p2;
        icmp_ln304_reg_1376_pp1_iter1_reg <= icmp_ln304_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln304_reg_1376_pp1_iter2_reg <= icmp_ln304_reg_1376_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0))) begin
        icmp_ln305_reg_1380 <= icmp_ln305_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_2_reg_1355 <= select_ln286_2_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_reg_1350 <= select_ln286_fu_419_p3;
        trunc_ln296_reg_1361 <= trunc_ln296_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln305_3_reg_1398 <= select_ln305_3_fu_893_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln305_reg_1392 <= select_ln305_fu_885_p3;
        trunc_ln316_reg_1404 <= trunc_ln316_fu_901_p1;
    end
end

always @ (*) begin
    if ((icmp_ln286_fu_401_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = add_ln306_fu_943_p2;
    end else begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = cit_3_reg_384;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_333_p4 = select_ln286_2_reg_1355;
    end else begin
        ap_phi_mux_cit_phi_fu_333_p4 = cit_reg_329;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = select_ln305_3_reg_1398;
    end else begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = cot_3_reg_373;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln316_4_fu_938_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln296_4_fu_478_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_blk_n = vq_sm_transpose_head1_empty_n;
    end else begin
        vq_sm_transpose_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_read = 1'b1;
    end else begin
        vq_sm_transpose_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_2_fu_395_p2 = (indvar_flatten_reg_318 + 9'd1);

assign add_ln286_fu_407_p2 = (ap_phi_mux_cit_phi_fu_333_p4 + 5'd1);

assign add_ln287_fu_439_p2 = (select_ln286_fu_419_p3 + 5'd1);

assign add_ln296_fu_472_p2 = (sub_ln296_fu_466_p2 + zext_ln296_fu_445_p1);

assign add_ln304_fu_818_p2 = (indvar_flatten21_reg_351 + 16'd1);

assign add_ln305_2_fu_836_p2 = (indvar_flatten7_reg_362 + 10'd1);

assign add_ln305_fu_874_p2 = (select_ln304_fu_850_p3 + 5'd1);

assign add_ln306_fu_943_p2 = (select_ln305_reg_1392 + 5'd1);

assign add_ln316_fu_932_p2 = (sub_ln316_fu_923_p2 + zext_ln316_3_fu_929_p1);

assign and_ln304_fu_868_p2 = (xor_ln304_fu_857_p2 & icmp_ln306_fu_862_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln286_reg_1346 == 1'd0) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_71_fu_747_p4}, {trunc_ln145_64_fu_677_p4}}, {trunc_ln145_57_fu_607_p4}}, {trunc_ln145_50_fu_537_p4}}, {trunc_ln145_70_fu_737_p4}}, {trunc_ln145_63_fu_667_p4}}, {trunc_ln145_56_fu_597_p4}}, {trunc_ln145_49_fu_527_p4}}, {trunc_ln145_69_fu_727_p4}}, {trunc_ln145_62_fu_657_p4}}, {trunc_ln145_55_fu_587_p4}}, {trunc_ln145_48_fu_517_p4}}, {trunc_ln145_68_fu_717_p4}}, {trunc_ln145_61_fu_647_p4}}, {trunc_ln145_54_fu_577_p4}}, {trunc_ln145_47_fu_507_p4}}, {trunc_ln145_67_fu_707_p4}}, {trunc_ln145_60_fu_637_p4}}, {trunc_ln145_53_fu_567_p4}}, {trunc_ln145_46_fu_497_p4}}, {trunc_ln145_66_fu_697_p4}}, {trunc_ln145_59_fu_627_p4}}, {trunc_ln145_52_fu_557_p4}}, {trunc_ln145_45_fu_487_p4}}, {trunc_ln145_65_fu_687_p4}}, {trunc_ln145_58_fu_617_p4}}, {trunc_ln145_51_fu_547_p4}}, {trunc_ln145_fu_483_p1}};

assign icmp_ln286_fu_401_p2 = ((indvar_flatten_reg_318 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_413_p2 = ((cot_reg_340 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_824_p2 = ((indvar_flatten21_reg_351 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_830_p2 = ((indvar_flatten7_reg_362 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_862_p2 = ((ap_phi_mux_cit_3_phi_fu_388_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_880_p2 = (icmp_ln305_reg_1380 | and_ln304_fu_868_p2);

assign p_shl_cast_fu_905_p3 = {{trunc_ln316_reg_1404}, {5'd0}};

assign select_ln286_2_fu_427_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? add_ln286_fu_407_p2 : ap_phi_mux_cit_phi_fu_333_p4);

assign select_ln286_fu_419_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? 5'd0 : cot_reg_340);

assign select_ln304_fu_850_p3 = ((icmp_ln305_reg_1380[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_3_phi_fu_377_p4);

assign select_ln305_3_fu_893_p3 = ((and_ln304_fu_868_p2[0:0] == 1'b1) ? add_ln305_fu_874_p2 : select_ln304_fu_850_p3);

assign select_ln305_4_fu_842_p3 = ((icmp_ln305_fu_830_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_2_fu_836_p2);

assign select_ln305_fu_885_p3 = ((or_ln305_fu_880_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_3_phi_fu_388_p4);

assign start_out = real_start;

assign sub_ln296_fu_466_p2 = (tmp_289_cast_fu_448_p3 - zext_ln296_3_fu_462_p1);

assign sub_ln316_fu_923_p2 = (p_shl_cast_fu_905_p3 - zext_ln316_fu_919_p1);

assign tmp_261_fu_952_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_262_fu_962_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_263_fu_972_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_264_fu_982_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_265_fu_992_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_266_fu_1002_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_267_fu_1012_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_268_fu_1022_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_269_fu_1032_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_270_fu_1042_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_271_fu_1052_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_272_fu_1062_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_273_fu_1072_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_274_fu_1082_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_275_fu_1092_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_276_fu_1102_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_277_fu_1112_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_278_fu_1122_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_279_fu_1132_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_280_fu_1142_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_281_fu_1152_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_282_fu_1162_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_283_fu_1172_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_284_fu_1182_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_285_fu_1192_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_286_fu_1202_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_287_fu_1212_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_288_fu_1222_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_287_fu_1212_p4}, {5'd0}}, {tmp_286_fu_1202_p4}}, {5'd0}}, {tmp_285_fu_1192_p4}}, {5'd0}}, {tmp_284_fu_1182_p4}}, {5'd0}}, {tmp_283_fu_1172_p4}}, {5'd0}}, {tmp_282_fu_1162_p4}}, {5'd0}}, {tmp_281_fu_1152_p4}}, {5'd0}}, {tmp_280_fu_1142_p4}}, {5'd0}}, {tmp_279_fu_1132_p4}}, {5'd0}}, {tmp_278_fu_1122_p4}}, {5'd0}}, {tmp_277_fu_1112_p4}}, {5'd0}}, {tmp_276_fu_1102_p4}}, {5'd0}}, {tmp_275_fu_1092_p4}}, {5'd0}}, {tmp_274_fu_1082_p4}}, {5'd0}}, {tmp_273_fu_1072_p4}}, {5'd0}}, {tmp_272_fu_1062_p4}}, {5'd0}}, {tmp_271_fu_1052_p4}}, {5'd0}}, {tmp_270_fu_1042_p4}}, {5'd0}}, {tmp_269_fu_1032_p4}}, {5'd0}}, {tmp_268_fu_1022_p4}}, {5'd0}}, {tmp_267_fu_1012_p4}}, {5'd0}}, {tmp_266_fu_1002_p4}}, {5'd0}}, {tmp_265_fu_992_p4}}, {5'd0}}, {tmp_264_fu_982_p4}}, {5'd0}}, {tmp_263_fu_972_p4}}, {5'd0}}, {tmp_262_fu_962_p4}}, {5'd0}}, {tmp_261_fu_952_p4}}, {5'd0}}, {trunc_ln316_2_fu_948_p1}};

assign tmp_289_cast_fu_448_p3 = {{trunc_ln296_reg_1361}, {5'd0}};

assign tmp_290_fu_455_p3 = {{select_ln286_reg_1350}, {2'd0}};

assign tmp_89_fu_912_p3 = {{select_ln305_3_reg_1398}, {2'd0}};

assign trunc_ln145_45_fu_487_p4 = {{vq_sm_transpose_head1_dout[10:8]}};

assign trunc_ln145_46_fu_497_p4 = {{vq_sm_transpose_head1_dout[18:16]}};

assign trunc_ln145_47_fu_507_p4 = {{vq_sm_transpose_head1_dout[26:24]}};

assign trunc_ln145_48_fu_517_p4 = {{vq_sm_transpose_head1_dout[34:32]}};

assign trunc_ln145_49_fu_527_p4 = {{vq_sm_transpose_head1_dout[42:40]}};

assign trunc_ln145_50_fu_537_p4 = {{vq_sm_transpose_head1_dout[50:48]}};

assign trunc_ln145_51_fu_547_p4 = {{vq_sm_transpose_head1_dout[58:56]}};

assign trunc_ln145_52_fu_557_p4 = {{vq_sm_transpose_head1_dout[66:64]}};

assign trunc_ln145_53_fu_567_p4 = {{vq_sm_transpose_head1_dout[74:72]}};

assign trunc_ln145_54_fu_577_p4 = {{vq_sm_transpose_head1_dout[82:80]}};

assign trunc_ln145_55_fu_587_p4 = {{vq_sm_transpose_head1_dout[90:88]}};

assign trunc_ln145_56_fu_597_p4 = {{vq_sm_transpose_head1_dout[98:96]}};

assign trunc_ln145_57_fu_607_p4 = {{vq_sm_transpose_head1_dout[106:104]}};

assign trunc_ln145_58_fu_617_p4 = {{vq_sm_transpose_head1_dout[114:112]}};

assign trunc_ln145_59_fu_627_p4 = {{vq_sm_transpose_head1_dout[122:120]}};

assign trunc_ln145_60_fu_637_p4 = {{vq_sm_transpose_head1_dout[130:128]}};

assign trunc_ln145_61_fu_647_p4 = {{vq_sm_transpose_head1_dout[138:136]}};

assign trunc_ln145_62_fu_657_p4 = {{vq_sm_transpose_head1_dout[146:144]}};

assign trunc_ln145_63_fu_667_p4 = {{vq_sm_transpose_head1_dout[154:152]}};

assign trunc_ln145_64_fu_677_p4 = {{vq_sm_transpose_head1_dout[162:160]}};

assign trunc_ln145_65_fu_687_p4 = {{vq_sm_transpose_head1_dout[170:168]}};

assign trunc_ln145_66_fu_697_p4 = {{vq_sm_transpose_head1_dout[178:176]}};

assign trunc_ln145_67_fu_707_p4 = {{vq_sm_transpose_head1_dout[186:184]}};

assign trunc_ln145_68_fu_717_p4 = {{vq_sm_transpose_head1_dout[194:192]}};

assign trunc_ln145_69_fu_727_p4 = {{vq_sm_transpose_head1_dout[202:200]}};

assign trunc_ln145_70_fu_737_p4 = {{vq_sm_transpose_head1_dout[210:208]}};

assign trunc_ln145_71_fu_747_p4 = {{vq_sm_transpose_head1_dout[218:216]}};

assign trunc_ln145_fu_483_p1 = vq_sm_transpose_head1_dout[2:0];

assign trunc_ln296_fu_435_p1 = select_ln286_fu_419_p3[3:0];

assign trunc_ln316_2_fu_948_p1 = dynamic_weight_arr_V_q0[2:0];

assign trunc_ln316_fu_901_p1 = select_ln305_3_fu_893_p3[3:0];

assign weight_sm_din = tmp_288_fu_1222_p56;

assign xor_ln304_fu_857_p2 = (icmp_ln305_reg_1380 ^ 1'd1);

assign zext_ln296_3_fu_462_p1 = tmp_290_fu_455_p3;

assign zext_ln296_4_fu_478_p1 = add_ln296_fu_472_p2;

assign zext_ln296_fu_445_p1 = select_ln286_2_reg_1355;

assign zext_ln316_3_fu_929_p1 = select_ln305_reg_1392;

assign zext_ln316_4_fu_938_p1 = add_ln316_fu_932_p2;

assign zext_ln316_fu_919_p1 = tmp_89_fu_912_p3;

endmodule //ATTN0_matmul_step1_cache_weight_transposed167
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_weight_transposed172 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        vq_sm_transpose_head1_dout,
        vq_sm_transpose_head1_empty_n,
        vq_sm_transpose_head1_read,
        weight_sm_din,
        weight_sm_full_n,
        weight_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [223:0] vq_sm_transpose_head1_dout;
input   vq_sm_transpose_head1_empty_n;
output   vq_sm_transpose_head1_read;
output  [223:0] weight_sm_din;
input   weight_sm_full_n;
output   weight_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg vq_sm_transpose_head1_read;
reg weight_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    vq_sm_transpose_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln286_reg_1346;
reg    weight_sm_blk_n;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln304_reg_1376;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter2_reg;
reg   [8:0] indvar_flatten_reg_318;
reg   [4:0] cit_reg_329;
reg   [4:0] cot_reg_340;
reg   [15:0] indvar_flatten21_reg_351;
reg   [9:0] indvar_flatten7_reg_362;
reg   [4:0] cot_3_reg_373;
reg   [4:0] cit_3_reg_384;
wire   [8:0] add_ln286_1_fu_395_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln286_fu_401_p2;
wire   [4:0] select_ln286_fu_419_p3;
reg   [4:0] select_ln286_reg_1350;
wire   [4:0] select_ln286_1_fu_427_p3;
reg   [4:0] select_ln286_1_reg_1355;
wire   [3:0] trunc_ln296_fu_435_p1;
reg   [3:0] trunc_ln296_reg_1361;
wire   [4:0] add_ln287_fu_439_p2;
wire   [15:0] add_ln304_fu_818_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln304_fu_824_p2;
reg   [0:0] icmp_ln304_reg_1376_pp1_iter1_reg;
wire   [0:0] icmp_ln305_fu_830_p2;
reg   [0:0] icmp_ln305_reg_1380;
wire   [9:0] select_ln305_2_fu_842_p3;
wire   [4:0] select_ln305_fu_885_p3;
reg   [4:0] select_ln305_reg_1392;
wire   [4:0] select_ln305_1_fu_893_p3;
reg   [4:0] select_ln305_1_reg_1398;
reg    ap_enable_reg_pp1_iter1;
wire   [3:0] trunc_ln316_fu_901_p1;
reg   [3:0] trunc_ln316_reg_1404;
wire   [4:0] add_ln306_fu_943_p2;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state6;
reg   [8:0] dynamic_weight_arr_V_address0;
reg    dynamic_weight_arr_V_ce0;
reg    dynamic_weight_arr_V_we0;
wire   [83:0] dynamic_weight_arr_V_d0;
wire   [83:0] dynamic_weight_arr_V_q0;
reg   [4:0] ap_phi_mux_cit_phi_fu_333_p4;
reg   [4:0] ap_phi_mux_cot_3_phi_fu_377_p4;
reg   [4:0] ap_phi_mux_cit_3_phi_fu_388_p4;
wire   [63:0] zext_ln296_2_fu_478_p1;
wire   [63:0] zext_ln316_2_fu_938_p1;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] icmp_ln287_fu_413_p2;
wire   [4:0] add_ln286_fu_407_p2;
wire   [6:0] tmp_262_fu_455_p3;
wire   [8:0] tmp_261_cast_fu_448_p3;
wire   [8:0] zext_ln296_1_fu_462_p1;
wire   [8:0] sub_ln296_fu_466_p2;
wire   [8:0] zext_ln296_fu_445_p1;
wire   [8:0] add_ln296_fu_472_p2;
wire   [2:0] trunc_ln145_71_fu_747_p4;
wire   [2:0] trunc_ln145_64_fu_677_p4;
wire   [2:0] trunc_ln145_57_fu_607_p4;
wire   [2:0] trunc_ln145_50_fu_537_p4;
wire   [2:0] trunc_ln145_70_fu_737_p4;
wire   [2:0] trunc_ln145_63_fu_667_p4;
wire   [2:0] trunc_ln145_56_fu_597_p4;
wire   [2:0] trunc_ln145_49_fu_527_p4;
wire   [2:0] trunc_ln145_69_fu_727_p4;
wire   [2:0] trunc_ln145_62_fu_657_p4;
wire   [2:0] trunc_ln145_55_fu_587_p4;
wire   [2:0] trunc_ln145_48_fu_517_p4;
wire   [2:0] trunc_ln145_68_fu_717_p4;
wire   [2:0] trunc_ln145_61_fu_647_p4;
wire   [2:0] trunc_ln145_54_fu_577_p4;
wire   [2:0] trunc_ln145_47_fu_507_p4;
wire   [2:0] trunc_ln145_67_fu_707_p4;
wire   [2:0] trunc_ln145_60_fu_637_p4;
wire   [2:0] trunc_ln145_53_fu_567_p4;
wire   [2:0] trunc_ln145_46_fu_497_p4;
wire   [2:0] trunc_ln145_66_fu_697_p4;
wire   [2:0] trunc_ln145_59_fu_627_p4;
wire   [2:0] trunc_ln145_52_fu_557_p4;
wire   [2:0] trunc_ln145_45_fu_487_p4;
wire   [2:0] trunc_ln145_65_fu_687_p4;
wire   [2:0] trunc_ln145_58_fu_617_p4;
wire   [2:0] trunc_ln145_51_fu_547_p4;
wire   [2:0] trunc_ln145_fu_483_p1;
wire   [9:0] add_ln305_1_fu_836_p2;
wire   [0:0] icmp_ln306_fu_862_p2;
wire   [0:0] xor_ln304_fu_857_p2;
wire   [4:0] select_ln304_fu_850_p3;
wire   [0:0] and_ln304_fu_868_p2;
wire   [0:0] or_ln305_fu_880_p2;
wire   [4:0] add_ln305_fu_874_p2;
wire   [6:0] tmp_88_fu_912_p3;
wire   [8:0] p_shl_cast_fu_905_p3;
wire   [8:0] zext_ln316_fu_919_p1;
wire   [8:0] sub_ln316_fu_923_p2;
wire   [8:0] zext_ln316_1_fu_929_p1;
wire   [8:0] add_ln316_fu_932_p2;
wire   [2:0] tmp_259_fu_1212_p4;
wire   [2:0] tmp_258_fu_1202_p4;
wire   [2:0] tmp_257_fu_1192_p4;
wire   [2:0] tmp_256_fu_1182_p4;
wire   [2:0] tmp_255_fu_1172_p4;
wire   [2:0] tmp_254_fu_1162_p4;
wire   [2:0] tmp_253_fu_1152_p4;
wire   [2:0] tmp_252_fu_1142_p4;
wire   [2:0] tmp_251_fu_1132_p4;
wire   [2:0] tmp_250_fu_1122_p4;
wire   [2:0] tmp_249_fu_1112_p4;
wire   [2:0] tmp_248_fu_1102_p4;
wire   [2:0] tmp_247_fu_1092_p4;
wire   [2:0] tmp_246_fu_1082_p4;
wire   [2:0] tmp_245_fu_1072_p4;
wire   [2:0] tmp_244_fu_1062_p4;
wire   [2:0] tmp_243_fu_1052_p4;
wire   [2:0] tmp_242_fu_1042_p4;
wire   [2:0] tmp_241_fu_1032_p4;
wire   [2:0] tmp_240_fu_1022_p4;
wire   [2:0] tmp_239_fu_1012_p4;
wire   [2:0] tmp_238_fu_1002_p4;
wire   [2:0] tmp_237_fu_992_p4;
wire   [2:0] tmp_236_fu_982_p4;
wire   [2:0] tmp_235_fu_972_p4;
wire   [2:0] tmp_234_fu_962_p4;
wire   [2:0] tmp_233_fu_952_p4;
wire   [2:0] trunc_ln316_1_fu_948_p1;
wire   [218:0] tmp_260_fu_1222_p56;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

ATTN0_matmul_step1_cache_weight151_dynamic_weight_arr_V #(
    .DataWidth( 84 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
dynamic_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dynamic_weight_arr_V_address0),
    .ce0(dynamic_weight_arr_V_ce0),
    .we0(dynamic_weight_arr_V_we0),
    .d0(dynamic_weight_arr_V_d0),
    .q0(dynamic_weight_arr_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter1_state6)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cit_3_reg_384 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cit_3_reg_384 <= add_ln306_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_329 <= select_ln286_1_reg_1355;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_329 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cot_3_reg_373 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        cot_3_reg_373 <= select_ln305_1_reg_1398;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        cot_reg_340 <= add_ln287_fu_439_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten21_reg_351 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten21_reg_351 <= add_ln304_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten7_reg_362 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten7_reg_362 <= select_ln305_2_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        indvar_flatten_reg_318 <= add_ln286_1_fu_395_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_318 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln286_reg_1346 <= icmp_ln286_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln304_reg_1376 <= icmp_ln304_fu_824_p2;
        icmp_ln304_reg_1376_pp1_iter1_reg <= icmp_ln304_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln304_reg_1376_pp1_iter2_reg <= icmp_ln304_reg_1376_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd0))) begin
        icmp_ln305_reg_1380 <= icmp_ln305_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_1_reg_1355 <= select_ln286_1_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln286_fu_401_p2 == 1'd0))) begin
        select_ln286_reg_1350 <= select_ln286_fu_419_p3;
        trunc_ln296_reg_1361 <= trunc_ln296_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        select_ln305_1_reg_1398 <= select_ln305_1_fu_893_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln305_reg_1392 <= select_ln305_fu_885_p3;
        trunc_ln316_reg_1404 <= trunc_ln316_fu_901_p1;
    end
end

always @ (*) begin
    if ((icmp_ln286_fu_401_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln304_fu_824_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = add_ln306_fu_943_p2;
    end else begin
        ap_phi_mux_cit_3_phi_fu_388_p4 = cit_3_reg_384;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_333_p4 = select_ln286_1_reg_1355;
    end else begin
        ap_phi_mux_cit_phi_fu_333_p4 = cit_reg_329;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln304_reg_1376_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = select_ln305_1_reg_1398;
    end else begin
        ap_phi_mux_cot_3_phi_fu_377_p4 = cot_3_reg_373;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dynamic_weight_arr_V_address0 = zext_ln316_2_fu_938_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_address0 = zext_ln296_2_fu_478_p1;
    end else begin
        dynamic_weight_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dynamic_weight_arr_V_ce0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dynamic_weight_arr_V_we0 = 1'b1;
    end else begin
        dynamic_weight_arr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_blk_n = vq_sm_transpose_head1_empty_n;
    end else begin
        vq_sm_transpose_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln286_reg_1346 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vq_sm_transpose_head1_read = 1'b1;
    end else begin
        vq_sm_transpose_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weight_sm_blk_n = weight_sm_full_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        weight_sm_write = 1'b1;
    end else begin
        weight_sm_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln286_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln286_1_fu_395_p2 = (indvar_flatten_reg_318 + 9'd1);

assign add_ln286_fu_407_p2 = (ap_phi_mux_cit_phi_fu_333_p4 + 5'd1);

assign add_ln287_fu_439_p2 = (select_ln286_fu_419_p3 + 5'd1);

assign add_ln296_fu_472_p2 = (sub_ln296_fu_466_p2 + zext_ln296_fu_445_p1);

assign add_ln304_fu_818_p2 = (indvar_flatten21_reg_351 + 16'd1);

assign add_ln305_1_fu_836_p2 = (indvar_flatten7_reg_362 + 10'd1);

assign add_ln305_fu_874_p2 = (select_ln304_fu_850_p3 + 5'd1);

assign add_ln306_fu_943_p2 = (select_ln305_reg_1392 + 5'd1);

assign add_ln316_fu_932_p2 = (sub_ln316_fu_923_p2 + zext_ln316_1_fu_929_p1);

assign and_ln304_fu_868_p2 = (xor_ln304_fu_857_p2 & icmp_ln306_fu_862_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln286_reg_1346 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (weight_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln286_reg_1346 == 1'd0) & (vq_sm_transpose_head1_empty_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp1_stage0_iter3 = ((icmp_ln304_reg_1376_pp1_iter2_reg == 1'd0) & (weight_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign dynamic_weight_arr_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln145_71_fu_747_p4}, {trunc_ln145_64_fu_677_p4}}, {trunc_ln145_57_fu_607_p4}}, {trunc_ln145_50_fu_537_p4}}, {trunc_ln145_70_fu_737_p4}}, {trunc_ln145_63_fu_667_p4}}, {trunc_ln145_56_fu_597_p4}}, {trunc_ln145_49_fu_527_p4}}, {trunc_ln145_69_fu_727_p4}}, {trunc_ln145_62_fu_657_p4}}, {trunc_ln145_55_fu_587_p4}}, {trunc_ln145_48_fu_517_p4}}, {trunc_ln145_68_fu_717_p4}}, {trunc_ln145_61_fu_647_p4}}, {trunc_ln145_54_fu_577_p4}}, {trunc_ln145_47_fu_507_p4}}, {trunc_ln145_67_fu_707_p4}}, {trunc_ln145_60_fu_637_p4}}, {trunc_ln145_53_fu_567_p4}}, {trunc_ln145_46_fu_497_p4}}, {trunc_ln145_66_fu_697_p4}}, {trunc_ln145_59_fu_627_p4}}, {trunc_ln145_52_fu_557_p4}}, {trunc_ln145_45_fu_487_p4}}, {trunc_ln145_65_fu_687_p4}}, {trunc_ln145_58_fu_617_p4}}, {trunc_ln145_51_fu_547_p4}}, {trunc_ln145_fu_483_p1}};

assign icmp_ln286_fu_401_p2 = ((indvar_flatten_reg_318 == 9'd448) ? 1'b1 : 1'b0);

assign icmp_ln287_fu_413_p2 = ((cot_reg_340 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln304_fu_824_p2 = ((indvar_flatten21_reg_351 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_830_p2 = ((indvar_flatten7_reg_362 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_862_p2 = ((ap_phi_mux_cit_3_phi_fu_388_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln305_fu_880_p2 = (icmp_ln305_reg_1380 | and_ln304_fu_868_p2);

assign p_shl_cast_fu_905_p3 = {{trunc_ln316_reg_1404}, {5'd0}};

assign select_ln286_1_fu_427_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? add_ln286_fu_407_p2 : ap_phi_mux_cit_phi_fu_333_p4);

assign select_ln286_fu_419_p3 = ((icmp_ln287_fu_413_p2[0:0] == 1'b1) ? 5'd0 : cot_reg_340);

assign select_ln304_fu_850_p3 = ((icmp_ln305_reg_1380[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_3_phi_fu_377_p4);

assign select_ln305_1_fu_893_p3 = ((and_ln304_fu_868_p2[0:0] == 1'b1) ? add_ln305_fu_874_p2 : select_ln304_fu_850_p3);

assign select_ln305_2_fu_842_p3 = ((icmp_ln305_fu_830_p2[0:0] == 1'b1) ? 10'd1 : add_ln305_1_fu_836_p2);

assign select_ln305_fu_885_p3 = ((or_ln305_fu_880_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_3_phi_fu_388_p4);

assign start_out = real_start;

assign sub_ln296_fu_466_p2 = (tmp_261_cast_fu_448_p3 - zext_ln296_1_fu_462_p1);

assign sub_ln316_fu_923_p2 = (p_shl_cast_fu_905_p3 - zext_ln316_fu_919_p1);

assign tmp_233_fu_952_p4 = {{dynamic_weight_arr_V_q0[14:12]}};

assign tmp_234_fu_962_p4 = {{dynamic_weight_arr_V_q0[26:24]}};

assign tmp_235_fu_972_p4 = {{dynamic_weight_arr_V_q0[38:36]}};

assign tmp_236_fu_982_p4 = {{dynamic_weight_arr_V_q0[50:48]}};

assign tmp_237_fu_992_p4 = {{dynamic_weight_arr_V_q0[62:60]}};

assign tmp_238_fu_1002_p4 = {{dynamic_weight_arr_V_q0[74:72]}};

assign tmp_239_fu_1012_p4 = {{dynamic_weight_arr_V_q0[5:3]}};

assign tmp_240_fu_1022_p4 = {{dynamic_weight_arr_V_q0[17:15]}};

assign tmp_241_fu_1032_p4 = {{dynamic_weight_arr_V_q0[29:27]}};

assign tmp_242_fu_1042_p4 = {{dynamic_weight_arr_V_q0[41:39]}};

assign tmp_243_fu_1052_p4 = {{dynamic_weight_arr_V_q0[53:51]}};

assign tmp_244_fu_1062_p4 = {{dynamic_weight_arr_V_q0[65:63]}};

assign tmp_245_fu_1072_p4 = {{dynamic_weight_arr_V_q0[77:75]}};

assign tmp_246_fu_1082_p4 = {{dynamic_weight_arr_V_q0[8:6]}};

assign tmp_247_fu_1092_p4 = {{dynamic_weight_arr_V_q0[20:18]}};

assign tmp_248_fu_1102_p4 = {{dynamic_weight_arr_V_q0[32:30]}};

assign tmp_249_fu_1112_p4 = {{dynamic_weight_arr_V_q0[44:42]}};

assign tmp_250_fu_1122_p4 = {{dynamic_weight_arr_V_q0[56:54]}};

assign tmp_251_fu_1132_p4 = {{dynamic_weight_arr_V_q0[68:66]}};

assign tmp_252_fu_1142_p4 = {{dynamic_weight_arr_V_q0[80:78]}};

assign tmp_253_fu_1152_p4 = {{dynamic_weight_arr_V_q0[11:9]}};

assign tmp_254_fu_1162_p4 = {{dynamic_weight_arr_V_q0[23:21]}};

assign tmp_255_fu_1172_p4 = {{dynamic_weight_arr_V_q0[35:33]}};

assign tmp_256_fu_1182_p4 = {{dynamic_weight_arr_V_q0[47:45]}};

assign tmp_257_fu_1192_p4 = {{dynamic_weight_arr_V_q0[59:57]}};

assign tmp_258_fu_1202_p4 = {{dynamic_weight_arr_V_q0[71:69]}};

assign tmp_259_fu_1212_p4 = {{dynamic_weight_arr_V_q0[83:81]}};

assign tmp_260_fu_1222_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_259_fu_1212_p4}, {5'd0}}, {tmp_258_fu_1202_p4}}, {5'd0}}, {tmp_257_fu_1192_p4}}, {5'd0}}, {tmp_256_fu_1182_p4}}, {5'd0}}, {tmp_255_fu_1172_p4}}, {5'd0}}, {tmp_254_fu_1162_p4}}, {5'd0}}, {tmp_253_fu_1152_p4}}, {5'd0}}, {tmp_252_fu_1142_p4}}, {5'd0}}, {tmp_251_fu_1132_p4}}, {5'd0}}, {tmp_250_fu_1122_p4}}, {5'd0}}, {tmp_249_fu_1112_p4}}, {5'd0}}, {tmp_248_fu_1102_p4}}, {5'd0}}, {tmp_247_fu_1092_p4}}, {5'd0}}, {tmp_246_fu_1082_p4}}, {5'd0}}, {tmp_245_fu_1072_p4}}, {5'd0}}, {tmp_244_fu_1062_p4}}, {5'd0}}, {tmp_243_fu_1052_p4}}, {5'd0}}, {tmp_242_fu_1042_p4}}, {5'd0}}, {tmp_241_fu_1032_p4}}, {5'd0}}, {tmp_240_fu_1022_p4}}, {5'd0}}, {tmp_239_fu_1012_p4}}, {5'd0}}, {tmp_238_fu_1002_p4}}, {5'd0}}, {tmp_237_fu_992_p4}}, {5'd0}}, {tmp_236_fu_982_p4}}, {5'd0}}, {tmp_235_fu_972_p4}}, {5'd0}}, {tmp_234_fu_962_p4}}, {5'd0}}, {tmp_233_fu_952_p4}}, {5'd0}}, {trunc_ln316_1_fu_948_p1}};

assign tmp_261_cast_fu_448_p3 = {{trunc_ln296_reg_1361}, {5'd0}};

assign tmp_262_fu_455_p3 = {{select_ln286_reg_1350}, {2'd0}};

assign tmp_88_fu_912_p3 = {{select_ln305_1_reg_1398}, {2'd0}};

assign trunc_ln145_45_fu_487_p4 = {{vq_sm_transpose_head1_dout[10:8]}};

assign trunc_ln145_46_fu_497_p4 = {{vq_sm_transpose_head1_dout[18:16]}};

assign trunc_ln145_47_fu_507_p4 = {{vq_sm_transpose_head1_dout[26:24]}};

assign trunc_ln145_48_fu_517_p4 = {{vq_sm_transpose_head1_dout[34:32]}};

assign trunc_ln145_49_fu_527_p4 = {{vq_sm_transpose_head1_dout[42:40]}};

assign trunc_ln145_50_fu_537_p4 = {{vq_sm_transpose_head1_dout[50:48]}};

assign trunc_ln145_51_fu_547_p4 = {{vq_sm_transpose_head1_dout[58:56]}};

assign trunc_ln145_52_fu_557_p4 = {{vq_sm_transpose_head1_dout[66:64]}};

assign trunc_ln145_53_fu_567_p4 = {{vq_sm_transpose_head1_dout[74:72]}};

assign trunc_ln145_54_fu_577_p4 = {{vq_sm_transpose_head1_dout[82:80]}};

assign trunc_ln145_55_fu_587_p4 = {{vq_sm_transpose_head1_dout[90:88]}};

assign trunc_ln145_56_fu_597_p4 = {{vq_sm_transpose_head1_dout[98:96]}};

assign trunc_ln145_57_fu_607_p4 = {{vq_sm_transpose_head1_dout[106:104]}};

assign trunc_ln145_58_fu_617_p4 = {{vq_sm_transpose_head1_dout[114:112]}};

assign trunc_ln145_59_fu_627_p4 = {{vq_sm_transpose_head1_dout[122:120]}};

assign trunc_ln145_60_fu_637_p4 = {{vq_sm_transpose_head1_dout[130:128]}};

assign trunc_ln145_61_fu_647_p4 = {{vq_sm_transpose_head1_dout[138:136]}};

assign trunc_ln145_62_fu_657_p4 = {{vq_sm_transpose_head1_dout[146:144]}};

assign trunc_ln145_63_fu_667_p4 = {{vq_sm_transpose_head1_dout[154:152]}};

assign trunc_ln145_64_fu_677_p4 = {{vq_sm_transpose_head1_dout[162:160]}};

assign trunc_ln145_65_fu_687_p4 = {{vq_sm_transpose_head1_dout[170:168]}};

assign trunc_ln145_66_fu_697_p4 = {{vq_sm_transpose_head1_dout[178:176]}};

assign trunc_ln145_67_fu_707_p4 = {{vq_sm_transpose_head1_dout[186:184]}};

assign trunc_ln145_68_fu_717_p4 = {{vq_sm_transpose_head1_dout[194:192]}};

assign trunc_ln145_69_fu_727_p4 = {{vq_sm_transpose_head1_dout[202:200]}};

assign trunc_ln145_70_fu_737_p4 = {{vq_sm_transpose_head1_dout[210:208]}};

assign trunc_ln145_71_fu_747_p4 = {{vq_sm_transpose_head1_dout[218:216]}};

assign trunc_ln145_fu_483_p1 = vq_sm_transpose_head1_dout[2:0];

assign trunc_ln296_fu_435_p1 = select_ln286_fu_419_p3[3:0];

assign trunc_ln316_1_fu_948_p1 = dynamic_weight_arr_V_q0[2:0];

assign trunc_ln316_fu_901_p1 = select_ln305_1_fu_893_p3[3:0];

assign weight_sm_din = tmp_260_fu_1222_p56;

assign xor_ln304_fu_857_p2 = (icmp_ln305_reg_1380 ^ 1'd1);

assign zext_ln296_1_fu_462_p1 = tmp_262_fu_455_p3;

assign zext_ln296_2_fu_478_p1 = add_ln296_fu_472_p2;

assign zext_ln296_fu_445_p1 = select_ln286_1_reg_1355;

assign zext_ln316_1_fu_929_p1 = select_ln305_reg_1392;

assign zext_ln316_2_fu_938_p1 = add_ln316_fu_932_p2;

assign zext_ln316_fu_919_p1 = tmp_88_fu_912_p3;

endmodule //ATTN0_matmul_step1_cache_weight_transposed172
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [111:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [111:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_845;
reg   [0:0] select_ln65_28_reg_883;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_845_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_195;
reg   [9:0] indvar_flatten_reg_206;
reg   [4:0] cot_reg_217;
reg   [4:0] cit_reg_228;
wire   [15:0] add_ln64_fu_365_p2;
reg   [15:0] add_ln64_reg_840;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op60_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_371_p2;
wire   [0:0] icmp_ln65_fu_377_p2;
reg   [0:0] icmp_ln65_reg_849;
wire   [4:0] select_ln64_fu_383_p3;
reg   [4:0] select_ln64_reg_855;
wire   [0:0] cmp1023_fu_391_p2;
reg   [0:0] cmp1023_reg_861;
wire   [0:0] and_ln64_fu_409_p2;
reg   [0:0] and_ln64_reg_866;
wire   [4:0] select_ln65_fu_421_p3;
reg   [4:0] select_ln65_reg_872;
wire   [9:0] add_ln65_10_fu_429_p2;
reg   [9:0] add_ln65_10_reg_878;
wire   [0:0] select_ln65_28_fu_450_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_29_fu_457_p3;
reg   [4:0] select_ln65_29_reg_887;
reg   [4:0] wb_V_addr_reg_892;
wire   [4:0] add_ln66_fu_467_p2;
reg   [4:0] add_ln66_reg_897;
wire   [9:0] select_ln65_30_fu_472_p3;
reg   [9:0] select_ln65_30_reg_902;
wire   [2:0] trunc_ln87_fu_478_p1;
wire   [2:0] trunc_ln73_fu_612_p1;
wire   [2:0] trunc_ln73_1_fu_616_p4;
wire   [2:0] trunc_ln73_2_fu_626_p4;
wire   [2:0] trunc_ln73_3_fu_636_p4;
wire   [2:0] trunc_ln73_4_fu_646_p4;
wire   [2:0] trunc_ln73_5_fu_656_p4;
wire   [2:0] trunc_ln73_6_fu_666_p4;
wire   [2:0] trunc_ln73_7_fu_676_p4;
wire   [2:0] trunc_ln73_8_fu_686_p4;
wire   [2:0] trunc_ln73_9_fu_696_p4;
wire   [2:0] trunc_ln73_10_fu_706_p4;
wire   [2:0] trunc_ln73_11_fu_716_p4;
wire   [2:0] trunc_ln73_12_fu_726_p4;
wire   [2:0] trunc_ln73_13_fu_736_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [41:0] wb_V_d0;
wire   [41:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_199_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_210_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_221_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_232_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356;
wire   [63:0] zext_ln66_fu_463_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_403_p2;
wire   [0:0] xor_ln64_fu_397_p2;
wire   [0:0] or_ln65_fu_415_p2;
wire   [4:0] cot_18_fu_439_p2;
wire   [0:0] cmp10_mid1_fu_444_p2;
wire   [0:0] or_ln64_fu_435_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window166_wb_V #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln87_fu_478_p1;
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln73_fu_612_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{adpt_sm_dout[98:96]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{wb_V_q0[41:39]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{adpt_sm_dout[106:104]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{wb_V_q0[38:36]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_28_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_228 <= add_ln66_reg_897;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_228 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_217 <= select_ln65_29_reg_887;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_217 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_195 <= add_ln64_reg_840;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_206 <= select_ln65_30_reg_902;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_840 <= add_ln64_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_371_p2 == 1'd0))) begin
        add_ln65_10_reg_878 <= add_ln65_10_fu_429_p2;
        and_ln64_reg_866 <= and_ln64_fu_409_p2;
        cmp1023_reg_861 <= cmp1023_fu_391_p2;
        icmp_ln65_reg_849 <= icmp_ln65_fu_377_p2;
        select_ln64_reg_855 <= select_ln64_fu_383_p3;
        select_ln65_reg_872 <= select_ln65_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_897 <= add_ln66_fu_467_p2;
        select_ln65_29_reg_887 <= select_ln65_29_fu_457_p3;
        select_ln65_30_reg_902 <= select_ln65_30_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_845 <= icmp_ln64_fu_371_p2;
        icmp_ln64_reg_845_pp0_iter1_reg <= icmp_ln64_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_28_reg_883 <= select_ln65_28_fu_450_p3;
        wb_V_addr_reg_892 <= zext_ln66_fu_463_p1;
    end
end

always @ (*) begin
    if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op60_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_232_p4 = add_ln66_reg_897;
    end else begin
        ap_phi_mux_cit_phi_fu_232_p4 = cit_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_221_p4 = select_ln65_29_reg_887;
    end else begin
        ap_phi_mux_cot_phi_fu_221_p4 = cot_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = add_ln64_reg_840;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = indvar_flatten13_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = select_ln65_30_reg_902;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = indvar_flatten_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_892;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_463_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_365_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_199_p4 + 16'd1);

assign add_ln65_10_fu_429_p2 = (ap_phi_mux_indvar_flatten_phi_fu_210_p4 + 10'd1);

assign add_ln66_fu_467_p2 = (select_ln65_reg_872 + 5'd1);

assign and_ln64_fu_409_p2 = (xor_ln64_fu_397_p2 & icmp_ln66_fu_403_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293 = 'bx;

always @ (*) begin
    ap_predicate_op60_read_state4 = ((select_ln65_28_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0));
end

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248}};

assign cmp1023_fu_391_p2 = ((ap_phi_mux_cot_phi_fu_221_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_444_p2 = ((cot_18_fu_439_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_18_fu_439_p2 = (select_ln64_reg_855 + 5'd1);

assign icmp_ln64_fu_371_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_199_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_377_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_210_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_403_p2 = ((ap_phi_mux_cit_phi_fu_232_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln64_fu_435_p2 = (icmp_ln65_reg_849 | cmp1023_reg_861);

assign or_ln65_fu_415_p2 = (icmp_ln65_fu_377_p2 | and_ln64_fu_409_p2);

assign select_ln64_fu_383_p3 = ((icmp_ln65_fu_377_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_221_p4);

assign select_ln65_28_fu_450_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cmp10_mid1_fu_444_p2 : or_ln64_fu_435_p2);

assign select_ln65_29_fu_457_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cot_18_fu_439_p2 : select_ln64_reg_855);

assign select_ln65_30_fu_472_p3 = ((icmp_ln65_reg_849[0:0] == 1'b1) ? 10'd1 : add_ln65_10_reg_878);

assign select_ln65_fu_421_p3 = ((or_ln65_fu_415_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_232_p4);

assign trunc_ln73_10_fu_706_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_11_fu_716_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_12_fu_726_p4 = {{adpt_sm_dout[98:96]}};

assign trunc_ln73_13_fu_736_p4 = {{adpt_sm_dout[106:104]}};

assign trunc_ln73_1_fu_616_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_2_fu_626_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_3_fu_636_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_4_fu_646_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_5_fu_656_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_6_fu_666_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_7_fu_676_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_8_fu_686_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_9_fu_696_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_fu_612_p1 = adpt_sm_dout[2:0];

assign trunc_ln87_fu_478_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{{{trunc_ln73_13_fu_736_p4}, {trunc_ln73_6_fu_666_p4}}, {trunc_ln73_12_fu_726_p4}}, {trunc_ln73_5_fu_656_p4}}, {trunc_ln73_11_fu_716_p4}}, {trunc_ln73_4_fu_646_p4}}, {trunc_ln73_10_fu_706_p4}}, {trunc_ln73_3_fu_636_p4}}, {trunc_ln73_9_fu_696_p4}}, {trunc_ln73_2_fu_626_p4}}, {trunc_ln73_8_fu_686_p4}}, {trunc_ln73_1_fu_616_p4}}, {trunc_ln73_7_fu_676_p4}}, {trunc_ln73_fu_612_p1}};

assign xor_ln64_fu_397_p2 = (icmp_ln65_fu_377_p2 ^ 1'd1);

assign zext_ln66_fu_463_p1 = select_ln65_reg_872;

endmodule //ATTN0_matmul_step1_cache_window
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window136 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [95:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_763;
reg   [0:0] select_ln65_16_reg_801;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_763_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_183;
reg   [10:0] indvar_flatten_reg_194;
reg   [4:0] cot_reg_205;
reg   [5:0] cit_reg_216;
wire   [15:0] add_ln64_fu_335_p2;
reg   [15:0] add_ln64_reg_758;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op58_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_341_p2;
wire   [0:0] icmp_ln65_fu_347_p2;
reg   [0:0] icmp_ln65_reg_767;
wire   [4:0] select_ln64_fu_353_p3;
reg   [4:0] select_ln64_reg_773;
wire   [0:0] cmp1023_fu_361_p2;
reg   [0:0] cmp1023_reg_779;
wire   [0:0] and_ln64_fu_379_p2;
reg   [0:0] and_ln64_reg_784;
wire   [5:0] select_ln65_fu_391_p3;
reg   [5:0] select_ln65_reg_790;
wire   [10:0] add_ln65_6_fu_399_p2;
reg   [10:0] add_ln65_6_reg_796;
wire   [0:0] select_ln65_16_fu_420_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_17_fu_427_p3;
reg   [4:0] select_ln65_17_reg_805;
reg   [4:0] wb_V_addr_reg_810;
wire   [5:0] add_ln66_fu_437_p2;
reg   [5:0] add_ln66_reg_815;
wire   [10:0] select_ln65_18_fu_442_p3;
reg   [10:0] select_ln65_18_reg_820;
wire   [2:0] trunc_ln87_fu_448_p1;
wire   [2:0] trunc_ln73_fu_562_p1;
wire   [2:0] trunc_ln73_s_fu_566_p4;
wire   [2:0] trunc_ln73_30_fu_576_p4;
wire   [2:0] trunc_ln73_31_fu_586_p4;
wire   [2:0] trunc_ln73_32_fu_596_p4;
wire   [2:0] trunc_ln73_33_fu_606_p4;
wire   [2:0] trunc_ln73_34_fu_616_p4;
wire   [2:0] trunc_ln73_35_fu_626_p4;
wire   [2:0] trunc_ln73_36_fu_636_p4;
wire   [2:0] trunc_ln73_37_fu_646_p4;
wire   [2:0] trunc_ln73_38_fu_656_p4;
wire   [2:0] trunc_ln73_39_fu_666_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [35:0] wb_V_d0;
wire   [35:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_187_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_198_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_209_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_220_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326;
wire   [63:0] zext_ln66_fu_433_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_373_p2;
wire   [0:0] xor_ln64_fu_367_p2;
wire   [0:0] or_ln65_fu_385_p2;
wire   [4:0] cot_12_fu_409_p2;
wire   [0:0] cmp10_mid1_fu_414_p2;
wire   [0:0] or_ln64_fu_405_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window136_wb_V #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln87_fu_448_p1;
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln73_fu_562_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_16_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_216 <= add_ln66_reg_815;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_205 <= select_ln65_17_reg_805;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_205 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_183 <= add_ln64_reg_758;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_183 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_194 <= select_ln65_18_reg_820;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_194 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_758 <= add_ln64_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_341_p2 == 1'd0))) begin
        add_ln65_6_reg_796 <= add_ln65_6_fu_399_p2;
        and_ln64_reg_784 <= and_ln64_fu_379_p2;
        cmp1023_reg_779 <= cmp1023_fu_361_p2;
        icmp_ln65_reg_767 <= icmp_ln65_fu_347_p2;
        select_ln64_reg_773 <= select_ln64_fu_353_p3;
        select_ln65_reg_790 <= select_ln65_fu_391_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_815 <= add_ln66_fu_437_p2;
        select_ln65_17_reg_805 <= select_ln65_17_fu_427_p3;
        select_ln65_18_reg_820 <= select_ln65_18_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_763 <= icmp_ln64_fu_341_p2;
        icmp_ln64_reg_763_pp0_iter1_reg <= icmp_ln64_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_16_reg_801 <= select_ln65_16_fu_420_p3;
        wb_V_addr_reg_810 <= zext_ln66_fu_433_p1;
    end
end

always @ (*) begin
    if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op58_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_220_p4 = add_ln66_reg_815;
    end else begin
        ap_phi_mux_cit_phi_fu_220_p4 = cit_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_209_p4 = select_ln65_17_reg_805;
    end else begin
        ap_phi_mux_cot_phi_fu_209_p4 = cot_reg_205;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = add_ln64_reg_758;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = indvar_flatten13_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = select_ln65_18_reg_820;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = indvar_flatten_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_810;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_433_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_335_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_187_p4 + 16'd1);

assign add_ln65_6_fu_399_p2 = (ap_phi_mux_indvar_flatten_phi_fu_198_p4 + 11'd1);

assign add_ln66_fu_437_p2 = (select_ln65_reg_790 + 6'd1);

assign and_ln64_fu_379_p2 = (xor_ln64_fu_367_p2 & icmp_ln66_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state4 = ((select_ln65_16_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227}};

assign cmp1023_fu_361_p2 = ((ap_phi_mux_cot_phi_fu_209_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_414_p2 = ((cot_12_fu_409_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_12_fu_409_p2 = (select_ln64_reg_773 + 5'd1);

assign icmp_ln64_fu_341_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_187_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_347_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_198_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_373_p2 = ((ap_phi_mux_cit_phi_fu_220_p4 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln64_fu_405_p2 = (icmp_ln65_reg_767 | cmp1023_reg_779);

assign or_ln65_fu_385_p2 = (icmp_ln65_fu_347_p2 | and_ln64_fu_379_p2);

assign select_ln64_fu_353_p3 = ((icmp_ln65_fu_347_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_209_p4);

assign select_ln65_16_fu_420_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cmp10_mid1_fu_414_p2 : or_ln64_fu_405_p2);

assign select_ln65_17_fu_427_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cot_12_fu_409_p2 : select_ln64_reg_773);

assign select_ln65_18_fu_442_p3 = ((icmp_ln65_reg_767[0:0] == 1'b1) ? 11'd1 : add_ln65_6_reg_796);

assign select_ln65_fu_391_p3 = ((or_ln65_fu_385_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_220_p4);

assign start_out = real_start;

assign trunc_ln73_30_fu_576_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_31_fu_586_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_32_fu_596_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_33_fu_606_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_34_fu_616_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_35_fu_626_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_36_fu_636_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_37_fu_646_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_38_fu_656_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_39_fu_666_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_fu_562_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_566_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln87_fu_448_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{trunc_ln73_39_fu_666_p4}, {trunc_ln73_33_fu_606_p4}}, {trunc_ln73_38_fu_656_p4}}, {trunc_ln73_32_fu_596_p4}}, {trunc_ln73_37_fu_646_p4}}, {trunc_ln73_31_fu_586_p4}}, {trunc_ln73_36_fu_636_p4}}, {trunc_ln73_30_fu_576_p4}}, {trunc_ln73_35_fu_626_p4}}, {trunc_ln73_s_fu_566_p4}}, {trunc_ln73_34_fu_616_p4}}, {trunc_ln73_fu_562_p1}};

assign xor_ln64_fu_367_p2 = (icmp_ln65_fu_347_p2 ^ 1'd1);

assign zext_ln66_fu_433_p1 = select_ln65_reg_790;

endmodule //ATTN0_matmul_step1_cache_window136
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window136_wb_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 36;
parameter AWIDTH = 5;
parameter MEM_SIZE = 32;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window136_wb_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd36;
parameter AddressRange = 32'd32;
parameter AddressWidth = 32'd5;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step1_cache_window136_wb_V_ram ATTN0_matmul_step1_cache_window136_wb_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window140 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [95:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_763;
reg   [0:0] select_ln65_13_reg_801;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_763_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_183;
reg   [10:0] indvar_flatten_reg_194;
reg   [4:0] cot_reg_205;
reg   [5:0] cit_reg_216;
wire   [15:0] add_ln64_fu_335_p2;
reg   [15:0] add_ln64_reg_758;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op58_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_341_p2;
wire   [0:0] icmp_ln65_fu_347_p2;
reg   [0:0] icmp_ln65_reg_767;
wire   [4:0] select_ln64_fu_353_p3;
reg   [4:0] select_ln64_reg_773;
wire   [0:0] cmp1023_fu_361_p2;
reg   [0:0] cmp1023_reg_779;
wire   [0:0] and_ln64_fu_379_p2;
reg   [0:0] and_ln64_reg_784;
wire   [5:0] select_ln65_fu_391_p3;
reg   [5:0] select_ln65_reg_790;
wire   [10:0] add_ln65_5_fu_399_p2;
reg   [10:0] add_ln65_5_reg_796;
wire   [0:0] select_ln65_13_fu_420_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_14_fu_427_p3;
reg   [4:0] select_ln65_14_reg_805;
reg   [4:0] wb_V_addr_reg_810;
wire   [5:0] add_ln66_fu_437_p2;
reg   [5:0] add_ln66_reg_815;
wire   [10:0] select_ln65_15_fu_442_p3;
reg   [10:0] select_ln65_15_reg_820;
wire   [2:0] trunc_ln87_fu_448_p1;
wire   [2:0] trunc_ln73_fu_562_p1;
wire   [2:0] trunc_ln73_s_fu_566_p4;
wire   [2:0] trunc_ln73_20_fu_576_p4;
wire   [2:0] trunc_ln73_21_fu_586_p4;
wire   [2:0] trunc_ln73_22_fu_596_p4;
wire   [2:0] trunc_ln73_23_fu_606_p4;
wire   [2:0] trunc_ln73_24_fu_616_p4;
wire   [2:0] trunc_ln73_25_fu_626_p4;
wire   [2:0] trunc_ln73_26_fu_636_p4;
wire   [2:0] trunc_ln73_27_fu_646_p4;
wire   [2:0] trunc_ln73_28_fu_656_p4;
wire   [2:0] trunc_ln73_29_fu_666_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [35:0] wb_V_d0;
wire   [35:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_187_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_198_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_209_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_220_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326;
wire   [63:0] zext_ln66_fu_433_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_373_p2;
wire   [0:0] xor_ln64_fu_367_p2;
wire   [0:0] or_ln65_fu_385_p2;
wire   [4:0] cot_10_fu_409_p2;
wire   [0:0] cmp10_mid1_fu_414_p2;
wire   [0:0] or_ln64_fu_405_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window136_wb_V #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln87_fu_448_p1;
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln73_fu_562_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_13_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_216 <= add_ln66_reg_815;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_205 <= select_ln65_14_reg_805;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_205 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_183 <= add_ln64_reg_758;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_183 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_194 <= select_ln65_15_reg_820;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_194 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_758 <= add_ln64_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_341_p2 == 1'd0))) begin
        add_ln65_5_reg_796 <= add_ln65_5_fu_399_p2;
        and_ln64_reg_784 <= and_ln64_fu_379_p2;
        cmp1023_reg_779 <= cmp1023_fu_361_p2;
        icmp_ln65_reg_767 <= icmp_ln65_fu_347_p2;
        select_ln64_reg_773 <= select_ln64_fu_353_p3;
        select_ln65_reg_790 <= select_ln65_fu_391_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_815 <= add_ln66_fu_437_p2;
        select_ln65_14_reg_805 <= select_ln65_14_fu_427_p3;
        select_ln65_15_reg_820 <= select_ln65_15_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_763 <= icmp_ln64_fu_341_p2;
        icmp_ln64_reg_763_pp0_iter1_reg <= icmp_ln64_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_13_reg_801 <= select_ln65_13_fu_420_p3;
        wb_V_addr_reg_810 <= zext_ln66_fu_433_p1;
    end
end

always @ (*) begin
    if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op58_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_220_p4 = add_ln66_reg_815;
    end else begin
        ap_phi_mux_cit_phi_fu_220_p4 = cit_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_209_p4 = select_ln65_14_reg_805;
    end else begin
        ap_phi_mux_cot_phi_fu_209_p4 = cot_reg_205;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = add_ln64_reg_758;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = indvar_flatten13_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = select_ln65_15_reg_820;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = indvar_flatten_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_810;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_433_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_335_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_187_p4 + 16'd1);

assign add_ln65_5_fu_399_p2 = (ap_phi_mux_indvar_flatten_phi_fu_198_p4 + 11'd1);

assign add_ln66_fu_437_p2 = (select_ln65_reg_790 + 6'd1);

assign and_ln64_fu_379_p2 = (xor_ln64_fu_367_p2 & icmp_ln66_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state4 = ((select_ln65_13_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227}};

assign cmp1023_fu_361_p2 = ((ap_phi_mux_cot_phi_fu_209_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_414_p2 = ((cot_10_fu_409_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_10_fu_409_p2 = (select_ln64_reg_773 + 5'd1);

assign icmp_ln64_fu_341_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_187_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_347_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_198_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_373_p2 = ((ap_phi_mux_cit_phi_fu_220_p4 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln64_fu_405_p2 = (icmp_ln65_reg_767 | cmp1023_reg_779);

assign or_ln65_fu_385_p2 = (icmp_ln65_fu_347_p2 | and_ln64_fu_379_p2);

assign select_ln64_fu_353_p3 = ((icmp_ln65_fu_347_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_209_p4);

assign select_ln65_13_fu_420_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cmp10_mid1_fu_414_p2 : or_ln64_fu_405_p2);

assign select_ln65_14_fu_427_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cot_10_fu_409_p2 : select_ln64_reg_773);

assign select_ln65_15_fu_442_p3 = ((icmp_ln65_reg_767[0:0] == 1'b1) ? 11'd1 : add_ln65_5_reg_796);

assign select_ln65_fu_391_p3 = ((or_ln65_fu_385_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_220_p4);

assign start_out = real_start;

assign trunc_ln73_20_fu_576_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_21_fu_586_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_22_fu_596_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_23_fu_606_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_24_fu_616_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_25_fu_626_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_26_fu_636_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_27_fu_646_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_28_fu_656_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_29_fu_666_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_fu_562_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_566_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln87_fu_448_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{trunc_ln73_29_fu_666_p4}, {trunc_ln73_23_fu_606_p4}}, {trunc_ln73_28_fu_656_p4}}, {trunc_ln73_22_fu_596_p4}}, {trunc_ln73_27_fu_646_p4}}, {trunc_ln73_21_fu_586_p4}}, {trunc_ln73_26_fu_636_p4}}, {trunc_ln73_20_fu_576_p4}}, {trunc_ln73_25_fu_626_p4}}, {trunc_ln73_s_fu_566_p4}}, {trunc_ln73_24_fu_616_p4}}, {trunc_ln73_fu_562_p1}};

assign xor_ln64_fu_367_p2 = (icmp_ln65_fu_347_p2 ^ 1'd1);

assign zext_ln66_fu_433_p1 = select_ln65_reg_790;

endmodule //ATTN0_matmul_step1_cache_window140
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window150 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [63:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_595;
reg   [0:0] select_ln65_10_reg_633;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_595_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_153;
reg   [9:0] indvar_flatten_reg_164;
reg   [4:0] cot_reg_175;
reg   [4:0] cit_reg_186;
wire   [15:0] add_ln64_fu_269_p2;
reg   [15:0] add_ln64_reg_590;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op54_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_275_p2;
wire   [0:0] icmp_ln65_fu_281_p2;
reg   [0:0] icmp_ln65_reg_599;
wire   [4:0] select_ln64_fu_287_p3;
reg   [4:0] select_ln64_reg_605;
wire   [0:0] cmp1023_fu_295_p2;
reg   [0:0] cmp1023_reg_611;
wire   [0:0] and_ln64_fu_313_p2;
reg   [0:0] and_ln64_reg_616;
wire   [4:0] select_ln65_fu_325_p3;
reg   [4:0] select_ln65_reg_622;
wire   [9:0] add_ln65_4_fu_333_p2;
reg   [9:0] add_ln65_4_reg_628;
wire   [0:0] select_ln65_10_fu_354_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_11_fu_361_p3;
reg   [4:0] select_ln65_11_reg_637;
reg   [3:0] wb_V_addr_reg_642;
wire   [4:0] add_ln66_fu_371_p2;
reg   [4:0] add_ln66_reg_647;
wire   [9:0] select_ln65_12_fu_376_p3;
reg   [9:0] select_ln65_12_reg_652;
wire   [2:0] trunc_ln87_fu_382_p1;
wire   [2:0] trunc_ln73_fu_456_p1;
wire   [2:0] trunc_ln73_14_fu_460_p4;
wire   [2:0] trunc_ln73_15_fu_470_p4;
wire   [2:0] trunc_ln73_16_fu_480_p4;
wire   [2:0] trunc_ln73_17_fu_490_p4;
wire   [2:0] trunc_ln73_18_fu_500_p4;
wire   [2:0] trunc_ln73_s_fu_510_p4;
wire   [2:0] trunc_ln73_19_fu_520_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [3:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [23:0] wb_V_d0;
wire   [23:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_157_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_168_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_179_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_190_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260;
wire   [63:0] zext_ln66_fu_367_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_307_p2;
wire   [0:0] xor_ln64_fu_301_p2;
wire   [0:0] or_ln65_fu_319_p2;
wire   [4:0] cot_8_fu_343_p2;
wire   [0:0] cmp10_mid1_fu_348_p2;
wire   [0:0] or_ln64_fu_339_p2;
wire   [58:0] tmp_66_fu_551_p16;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window150_wb_V #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln87_fu_382_p1;
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln73_fu_456_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{adpt_sm_dout[10:8]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{adpt_sm_dout[18:16]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{adpt_sm_dout[26:24]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{adpt_sm_dout[34:32]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{adpt_sm_dout[42:40]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{adpt_sm_dout[50:48]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_10_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{adpt_sm_dout[58:56]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_186 <= add_ln66_reg_647;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_175 <= select_ln65_11_reg_637;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_153 <= add_ln64_reg_590;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_153 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln65_12_reg_652;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln64_reg_590 <= add_ln64_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_275_p2 == 1'd0))) begin
        add_ln65_4_reg_628 <= add_ln65_4_fu_333_p2;
        and_ln64_reg_616 <= and_ln64_fu_313_p2;
        cmp1023_reg_611 <= cmp1023_fu_295_p2;
        icmp_ln65_reg_599 <= icmp_ln65_fu_281_p2;
        select_ln64_reg_605 <= select_ln64_fu_287_p3;
        select_ln65_reg_622 <= select_ln65_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln66_reg_647 <= add_ln66_fu_371_p2;
        select_ln65_11_reg_637 <= select_ln65_11_fu_361_p3;
        select_ln65_12_reg_652 <= select_ln65_12_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_595 <= icmp_ln64_fu_275_p2;
        icmp_ln64_reg_595_pp0_iter1_reg <= icmp_ln64_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_10_reg_633 <= select_ln65_10_fu_354_p3;
        wb_V_addr_reg_642 <= zext_ln66_fu_367_p1;
    end
end

always @ (*) begin
    if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op54_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_190_p4 = add_ln66_reg_647;
    end else begin
        ap_phi_mux_cit_phi_fu_190_p4 = cit_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_179_p4 = select_ln65_11_reg_637;
    end else begin
        ap_phi_mux_cot_phi_fu_179_p4 = cot_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = add_ln64_reg_590;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = indvar_flatten13_reg_153;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = select_ln65_12_reg_652;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = indvar_flatten_reg_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_642;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wb_V_address0 = zext_ln66_fu_367_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_269_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_157_p4 + 16'd1);

assign add_ln65_4_fu_333_p2 = (ap_phi_mux_indvar_flatten_phi_fu_168_p4 + 10'd1);

assign add_ln66_fu_371_p2 = (select_ln65_reg_622 + 5'd1);

assign and_ln64_fu_313_p2 = (xor_ln64_fu_301_p2 & icmp_ln66_fu_307_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197 = 'bx;

always @ (*) begin
    ap_predicate_op54_read_state4 = ((select_ln65_10_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0));
end

assign cache_window_sm_din = tmp_66_fu_551_p16;

assign cmp1023_fu_295_p2 = ((ap_phi_mux_cot_phi_fu_179_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_348_p2 = ((cot_8_fu_343_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_8_fu_343_p2 = (select_ln64_reg_605 + 5'd1);

assign icmp_ln64_fu_275_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_157_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_281_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_168_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_307_p2 = ((ap_phi_mux_cit_phi_fu_190_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln64_fu_339_p2 = (icmp_ln65_reg_599 | cmp1023_reg_611);

assign or_ln65_fu_319_p2 = (icmp_ln65_fu_281_p2 | and_ln64_fu_313_p2);

assign select_ln64_fu_287_p3 = ((icmp_ln65_fu_281_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_179_p4);

assign select_ln65_10_fu_354_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cmp10_mid1_fu_348_p2 : or_ln64_fu_339_p2);

assign select_ln65_11_fu_361_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cot_8_fu_343_p2 : select_ln64_reg_605);

assign select_ln65_12_fu_376_p3 = ((icmp_ln65_reg_599[0:0] == 1'b1) ? 10'd1 : add_ln65_4_reg_628);

assign select_ln65_fu_325_p3 = ((or_ln65_fu_319_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_190_p4);

assign tmp_66_fu_551_p16 = {{{{{{{{{{{{{{{ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260}};

assign trunc_ln73_14_fu_460_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_15_fu_470_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_16_fu_480_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_17_fu_490_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_18_fu_500_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_19_fu_520_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_fu_456_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_510_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln87_fu_382_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{trunc_ln73_19_fu_520_p4}, {trunc_ln73_16_fu_480_p4}}, {trunc_ln73_s_fu_510_p4}}, {trunc_ln73_15_fu_470_p4}}, {trunc_ln73_18_fu_500_p4}}, {trunc_ln73_14_fu_460_p4}}, {trunc_ln73_17_fu_490_p4}}, {trunc_ln73_fu_456_p1}};

assign xor_ln64_fu_301_p2 = (icmp_ln65_fu_281_p2 ^ 1'd1);

assign zext_ln66_fu_367_p1 = select_ln65_reg_622;

endmodule //ATTN0_matmul_step1_cache_window150
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window150_wb_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 24;
parameter AWIDTH = 4;
parameter MEM_SIZE = 16;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window150_wb_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd24;
parameter AddressRange = 32'd16;
parameter AddressWidth = 32'd4;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step1_cache_window150_wb_V_ram ATTN0_matmul_step1_cache_window150_wb_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window155 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [63:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_595;
reg   [0:0] select_ln65_7_reg_633;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_595_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_153;
reg   [9:0] indvar_flatten_reg_164;
reg   [4:0] cot_reg_175;
reg   [4:0] cit_reg_186;
wire   [15:0] add_ln64_fu_269_p2;
reg   [15:0] add_ln64_reg_590;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op54_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_275_p2;
wire   [0:0] icmp_ln65_fu_281_p2;
reg   [0:0] icmp_ln65_reg_599;
wire   [4:0] select_ln64_fu_287_p3;
reg   [4:0] select_ln64_reg_605;
wire   [0:0] cmp1023_fu_295_p2;
reg   [0:0] cmp1023_reg_611;
wire   [0:0] and_ln64_fu_313_p2;
reg   [0:0] and_ln64_reg_616;
wire   [4:0] select_ln65_fu_325_p3;
reg   [4:0] select_ln65_reg_622;
wire   [9:0] add_ln65_3_fu_333_p2;
reg   [9:0] add_ln65_3_reg_628;
wire   [0:0] select_ln65_7_fu_354_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_8_fu_361_p3;
reg   [4:0] select_ln65_8_reg_637;
reg   [3:0] wb_V_addr_reg_642;
wire   [4:0] add_ln66_fu_371_p2;
reg   [4:0] add_ln66_reg_647;
wire   [9:0] select_ln65_9_fu_376_p3;
reg   [9:0] select_ln65_9_reg_652;
wire   [2:0] trunc_ln87_fu_382_p1;
wire   [2:0] trunc_ln73_fu_456_p1;
wire   [2:0] trunc_ln73_s_fu_460_p4;
wire   [2:0] trunc_ln73_13_fu_470_p4;
wire   [2:0] trunc_ln73_14_fu_480_p4;
wire   [2:0] trunc_ln73_15_fu_490_p4;
wire   [2:0] trunc_ln73_16_fu_500_p4;
wire   [2:0] trunc_ln73_17_fu_510_p4;
wire   [2:0] trunc_ln73_18_fu_520_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [3:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [23:0] wb_V_d0;
wire   [23:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_157_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_168_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_179_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_190_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260;
wire   [63:0] zext_ln66_fu_367_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_307_p2;
wire   [0:0] xor_ln64_fu_301_p2;
wire   [0:0] or_ln65_fu_319_p2;
wire   [4:0] cot_6_fu_343_p2;
wire   [0:0] cmp10_mid1_fu_348_p2;
wire   [0:0] or_ln64_fu_339_p2;
wire   [58:0] tmp_65_fu_551_p16;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window150_wb_V #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln87_fu_382_p1;
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln73_fu_456_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{adpt_sm_dout[10:8]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{adpt_sm_dout[18:16]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{adpt_sm_dout[26:24]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{adpt_sm_dout[34:32]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{adpt_sm_dout[42:40]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{adpt_sm_dout[50:48]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_7_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{adpt_sm_dout[58:56]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_186 <= add_ln66_reg_647;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_175 <= select_ln65_8_reg_637;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_153 <= add_ln64_reg_590;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_153 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln65_9_reg_652;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln64_reg_590 <= add_ln64_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_275_p2 == 1'd0))) begin
        add_ln65_3_reg_628 <= add_ln65_3_fu_333_p2;
        and_ln64_reg_616 <= and_ln64_fu_313_p2;
        cmp1023_reg_611 <= cmp1023_fu_295_p2;
        icmp_ln65_reg_599 <= icmp_ln65_fu_281_p2;
        select_ln64_reg_605 <= select_ln64_fu_287_p3;
        select_ln65_reg_622 <= select_ln65_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln66_reg_647 <= add_ln66_fu_371_p2;
        select_ln65_8_reg_637 <= select_ln65_8_fu_361_p3;
        select_ln65_9_reg_652 <= select_ln65_9_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_595 <= icmp_ln64_fu_275_p2;
        icmp_ln64_reg_595_pp0_iter1_reg <= icmp_ln64_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_7_reg_633 <= select_ln65_7_fu_354_p3;
        wb_V_addr_reg_642 <= zext_ln66_fu_367_p1;
    end
end

always @ (*) begin
    if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op54_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_190_p4 = add_ln66_reg_647;
    end else begin
        ap_phi_mux_cit_phi_fu_190_p4 = cit_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_179_p4 = select_ln65_8_reg_637;
    end else begin
        ap_phi_mux_cot_phi_fu_179_p4 = cot_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = add_ln64_reg_590;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = indvar_flatten13_reg_153;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = select_ln65_9_reg_652;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = indvar_flatten_reg_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_642;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wb_V_address0 = zext_ln66_fu_367_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_269_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_157_p4 + 16'd1);

assign add_ln65_3_fu_333_p2 = (ap_phi_mux_indvar_flatten_phi_fu_168_p4 + 10'd1);

assign add_ln66_fu_371_p2 = (select_ln65_reg_622 + 5'd1);

assign and_ln64_fu_313_p2 = (xor_ln64_fu_301_p2 & icmp_ln66_fu_307_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197 = 'bx;

always @ (*) begin
    ap_predicate_op54_read_state4 = ((select_ln65_7_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0));
end

assign cache_window_sm_din = tmp_65_fu_551_p16;

assign cmp1023_fu_295_p2 = ((ap_phi_mux_cot_phi_fu_179_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_348_p2 = ((cot_6_fu_343_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_6_fu_343_p2 = (select_ln64_reg_605 + 5'd1);

assign icmp_ln64_fu_275_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_157_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_281_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_168_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_307_p2 = ((ap_phi_mux_cit_phi_fu_190_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln64_fu_339_p2 = (icmp_ln65_reg_599 | cmp1023_reg_611);

assign or_ln65_fu_319_p2 = (icmp_ln65_fu_281_p2 | and_ln64_fu_313_p2);

assign select_ln64_fu_287_p3 = ((icmp_ln65_fu_281_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_179_p4);

assign select_ln65_7_fu_354_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cmp10_mid1_fu_348_p2 : or_ln64_fu_339_p2);

assign select_ln65_8_fu_361_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cot_6_fu_343_p2 : select_ln64_reg_605);

assign select_ln65_9_fu_376_p3 = ((icmp_ln65_reg_599[0:0] == 1'b1) ? 10'd1 : add_ln65_3_reg_628);

assign select_ln65_fu_325_p3 = ((or_ln65_fu_319_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_190_p4);

assign tmp_65_fu_551_p16 = {{{{{{{{{{{{{{{ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260}};

assign trunc_ln73_13_fu_470_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_14_fu_480_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_15_fu_490_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_16_fu_500_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_17_fu_510_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_18_fu_520_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_fu_456_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_460_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln87_fu_382_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{trunc_ln73_18_fu_520_p4}, {trunc_ln73_14_fu_480_p4}}, {trunc_ln73_17_fu_510_p4}}, {trunc_ln73_13_fu_470_p4}}, {trunc_ln73_16_fu_500_p4}}, {trunc_ln73_s_fu_460_p4}}, {trunc_ln73_15_fu_490_p4}}, {trunc_ln73_fu_456_p1}};

assign xor_ln64_fu_301_p2 = (icmp_ln65_fu_281_p2 ^ 1'd1);

assign zext_ln66_fu_367_p1 = select_ln65_reg_622;

endmodule //ATTN0_matmul_step1_cache_window155
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window166 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [111:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [111:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_845;
reg   [0:0] select_ln65_4_reg_883;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_845_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_195;
reg   [9:0] indvar_flatten_reg_206;
reg   [4:0] cot_reg_217;
reg   [4:0] cit_reg_228;
wire   [15:0] add_ln64_fu_365_p2;
reg   [15:0] add_ln64_reg_840;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op60_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_371_p2;
wire   [0:0] icmp_ln65_fu_377_p2;
reg   [0:0] icmp_ln65_reg_849;
wire   [4:0] select_ln64_fu_383_p3;
reg   [4:0] select_ln64_reg_855;
wire   [0:0] cmp1023_fu_391_p2;
reg   [0:0] cmp1023_reg_861;
wire   [0:0] and_ln64_fu_409_p2;
reg   [0:0] and_ln64_reg_866;
wire   [4:0] select_ln65_fu_421_p3;
reg   [4:0] select_ln65_reg_872;
wire   [9:0] add_ln65_2_fu_429_p2;
reg   [9:0] add_ln65_2_reg_878;
wire   [0:0] select_ln65_4_fu_450_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_5_fu_457_p3;
reg   [4:0] select_ln65_5_reg_887;
reg   [4:0] wb_V_addr_reg_892;
wire   [4:0] add_ln66_fu_467_p2;
reg   [4:0] add_ln66_reg_897;
wire   [9:0] select_ln65_6_fu_472_p3;
reg   [9:0] select_ln65_6_reg_902;
wire   [2:0] trunc_ln87_fu_478_p1;
wire   [2:0] trunc_ln73_fu_612_p1;
wire   [2:0] trunc_ln73_1_fu_616_p4;
wire   [2:0] trunc_ln73_2_fu_626_p4;
wire   [2:0] trunc_ln73_3_fu_636_p4;
wire   [2:0] trunc_ln73_4_fu_646_p4;
wire   [2:0] trunc_ln73_5_fu_656_p4;
wire   [2:0] trunc_ln73_6_fu_666_p4;
wire   [2:0] trunc_ln73_7_fu_676_p4;
wire   [2:0] trunc_ln73_8_fu_686_p4;
wire   [2:0] trunc_ln73_9_fu_696_p4;
wire   [2:0] trunc_ln73_10_fu_706_p4;
wire   [2:0] trunc_ln73_11_fu_716_p4;
wire   [2:0] trunc_ln73_12_fu_726_p4;
wire   [2:0] trunc_ln73_s_fu_736_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [41:0] wb_V_d0;
wire   [41:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_199_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_210_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_221_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_232_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356;
wire   [63:0] zext_ln66_fu_463_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_403_p2;
wire   [0:0] xor_ln64_fu_397_p2;
wire   [0:0] or_ln65_fu_415_p2;
wire   [4:0] cot_4_fu_439_p2;
wire   [0:0] cmp10_mid1_fu_444_p2;
wire   [0:0] or_ln64_fu_435_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window166_wb_V #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln87_fu_478_p1;
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln73_fu_612_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{adpt_sm_dout[98:96]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{wb_V_q0[41:39]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{adpt_sm_dout[106:104]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{wb_V_q0[38:36]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_4_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_228 <= add_ln66_reg_897;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_228 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_217 <= select_ln65_5_reg_887;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_217 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_195 <= add_ln64_reg_840;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_206 <= select_ln65_6_reg_902;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_840 <= add_ln64_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_371_p2 == 1'd0))) begin
        add_ln65_2_reg_878 <= add_ln65_2_fu_429_p2;
        and_ln64_reg_866 <= and_ln64_fu_409_p2;
        cmp1023_reg_861 <= cmp1023_fu_391_p2;
        icmp_ln65_reg_849 <= icmp_ln65_fu_377_p2;
        select_ln64_reg_855 <= select_ln64_fu_383_p3;
        select_ln65_reg_872 <= select_ln65_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_897 <= add_ln66_fu_467_p2;
        select_ln65_5_reg_887 <= select_ln65_5_fu_457_p3;
        select_ln65_6_reg_902 <= select_ln65_6_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_845 <= icmp_ln64_fu_371_p2;
        icmp_ln64_reg_845_pp0_iter1_reg <= icmp_ln64_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_4_reg_883 <= select_ln65_4_fu_450_p3;
        wb_V_addr_reg_892 <= zext_ln66_fu_463_p1;
    end
end

always @ (*) begin
    if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op60_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_232_p4 = add_ln66_reg_897;
    end else begin
        ap_phi_mux_cit_phi_fu_232_p4 = cit_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_221_p4 = select_ln65_5_reg_887;
    end else begin
        ap_phi_mux_cot_phi_fu_221_p4 = cot_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = add_ln64_reg_840;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = indvar_flatten13_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = select_ln65_6_reg_902;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = indvar_flatten_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_892;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_463_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_365_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_199_p4 + 16'd1);

assign add_ln65_2_fu_429_p2 = (ap_phi_mux_indvar_flatten_phi_fu_210_p4 + 10'd1);

assign add_ln66_fu_467_p2 = (select_ln65_reg_872 + 5'd1);

assign and_ln64_fu_409_p2 = (xor_ln64_fu_397_p2 & icmp_ln66_fu_403_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293 = 'bx;

always @ (*) begin
    ap_predicate_op60_read_state4 = ((select_ln65_4_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0));
end

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248}};

assign cmp1023_fu_391_p2 = ((ap_phi_mux_cot_phi_fu_221_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_444_p2 = ((cot_4_fu_439_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_4_fu_439_p2 = (select_ln64_reg_855 + 5'd1);

assign icmp_ln64_fu_371_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_199_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_377_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_210_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_403_p2 = ((ap_phi_mux_cit_phi_fu_232_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln64_fu_435_p2 = (icmp_ln65_reg_849 | cmp1023_reg_861);

assign or_ln65_fu_415_p2 = (icmp_ln65_fu_377_p2 | and_ln64_fu_409_p2);

assign select_ln64_fu_383_p3 = ((icmp_ln65_fu_377_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_221_p4);

assign select_ln65_4_fu_450_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cmp10_mid1_fu_444_p2 : or_ln64_fu_435_p2);

assign select_ln65_5_fu_457_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cot_4_fu_439_p2 : select_ln64_reg_855);

assign select_ln65_6_fu_472_p3 = ((icmp_ln65_reg_849[0:0] == 1'b1) ? 10'd1 : add_ln65_2_reg_878);

assign select_ln65_fu_421_p3 = ((or_ln65_fu_415_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_232_p4);

assign trunc_ln73_10_fu_706_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_11_fu_716_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_12_fu_726_p4 = {{adpt_sm_dout[98:96]}};

assign trunc_ln73_1_fu_616_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_2_fu_626_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_3_fu_636_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_4_fu_646_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_5_fu_656_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_6_fu_666_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_7_fu_676_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_8_fu_686_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_9_fu_696_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_fu_612_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_736_p4 = {{adpt_sm_dout[106:104]}};

assign trunc_ln87_fu_478_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{{{trunc_ln73_s_fu_736_p4}, {trunc_ln73_6_fu_666_p4}}, {trunc_ln73_12_fu_726_p4}}, {trunc_ln73_5_fu_656_p4}}, {trunc_ln73_11_fu_716_p4}}, {trunc_ln73_4_fu_646_p4}}, {trunc_ln73_10_fu_706_p4}}, {trunc_ln73_3_fu_636_p4}}, {trunc_ln73_9_fu_696_p4}}, {trunc_ln73_2_fu_626_p4}}, {trunc_ln73_8_fu_686_p4}}, {trunc_ln73_1_fu_616_p4}}, {trunc_ln73_7_fu_676_p4}}, {trunc_ln73_fu_612_p1}};

assign xor_ln64_fu_397_p2 = (icmp_ln65_fu_377_p2 ^ 1'd1);

assign zext_ln66_fu_463_p1 = select_ln65_reg_872;

endmodule //ATTN0_matmul_step1_cache_window166
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window166_wb_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 42;
parameter AWIDTH = 5;
parameter MEM_SIZE = 28;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window166_wb_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd42;
parameter AddressRange = 32'd28;
parameter AddressWidth = 32'd5;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step1_cache_window166_wb_V_ram ATTN0_matmul_step1_cache_window166_wb_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window171 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [111:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [111:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_845;
reg   [0:0] select_ln65_1_reg_883;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_845_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_195;
reg   [9:0] indvar_flatten_reg_206;
reg   [4:0] cot_reg_217;
reg   [4:0] cit_reg_228;
wire   [15:0] add_ln64_fu_365_p2;
reg   [15:0] add_ln64_reg_840;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op60_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_371_p2;
wire   [0:0] icmp_ln65_fu_377_p2;
reg   [0:0] icmp_ln65_reg_849;
wire   [4:0] select_ln64_fu_383_p3;
reg   [4:0] select_ln64_reg_855;
wire   [0:0] cmp1023_fu_391_p2;
reg   [0:0] cmp1023_reg_861;
wire   [0:0] and_ln64_fu_409_p2;
reg   [0:0] and_ln64_reg_866;
wire   [4:0] select_ln65_fu_421_p3;
reg   [4:0] select_ln65_reg_872;
wire   [9:0] add_ln65_1_fu_429_p2;
reg   [9:0] add_ln65_1_reg_878;
wire   [0:0] select_ln65_1_fu_450_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_2_fu_457_p3;
reg   [4:0] select_ln65_2_reg_887;
reg   [4:0] wb_V_addr_reg_892;
wire   [4:0] add_ln66_fu_467_p2;
reg   [4:0] add_ln66_reg_897;
wire   [9:0] select_ln65_3_fu_472_p3;
reg   [9:0] select_ln65_3_reg_902;
wire   [2:0] trunc_ln87_fu_478_p1;
wire   [2:0] trunc_ln73_fu_612_p1;
wire   [2:0] trunc_ln73_1_fu_616_p4;
wire   [2:0] trunc_ln73_2_fu_626_p4;
wire   [2:0] trunc_ln73_3_fu_636_p4;
wire   [2:0] trunc_ln73_4_fu_646_p4;
wire   [2:0] trunc_ln73_5_fu_656_p4;
wire   [2:0] trunc_ln73_6_fu_666_p4;
wire   [2:0] trunc_ln73_7_fu_676_p4;
wire   [2:0] trunc_ln73_8_fu_686_p4;
wire   [2:0] trunc_ln73_9_fu_696_p4;
wire   [2:0] trunc_ln73_s_fu_706_p4;
wire   [2:0] trunc_ln73_10_fu_716_p4;
wire   [2:0] trunc_ln73_11_fu_726_p4;
wire   [2:0] trunc_ln73_12_fu_736_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [41:0] wb_V_d0;
wire   [41:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_199_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_210_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_221_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_232_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356;
wire   [63:0] zext_ln66_fu_463_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_403_p2;
wire   [0:0] xor_ln64_fu_397_p2;
wire   [0:0] or_ln65_fu_415_p2;
wire   [4:0] cot_2_fu_439_p2;
wire   [0:0] cmp10_mid1_fu_444_p2;
wire   [0:0] or_ln64_fu_435_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window166_wb_V #(
    .DataWidth( 42 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln87_fu_478_p1;
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= trunc_ln73_fu_612_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= {{adpt_sm_dout[98:96]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266 <= ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{wb_V_q0[41:39]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= {{adpt_sm_dout[106:104]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257 <= ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{wb_V_q0[38:36]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_1_reg_883 == 1'd0) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_228 <= add_ln66_reg_897;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_228 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_217 <= select_ln65_2_reg_887;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_217 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_195 <= add_ln64_reg_840;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_206 <= select_ln65_3_reg_902;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_206 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_840 <= add_ln64_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_371_p2 == 1'd0))) begin
        add_ln65_1_reg_878 <= add_ln65_1_fu_429_p2;
        and_ln64_reg_866 <= and_ln64_fu_409_p2;
        cmp1023_reg_861 <= cmp1023_fu_391_p2;
        icmp_ln65_reg_849 <= icmp_ln65_fu_377_p2;
        select_ln64_reg_855 <= select_ln64_fu_383_p3;
        select_ln65_reg_872 <= select_ln65_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_897 <= add_ln66_fu_467_p2;
        select_ln65_2_reg_887 <= select_ln65_2_fu_457_p3;
        select_ln65_3_reg_902 <= select_ln65_3_fu_472_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_845 <= icmp_ln64_fu_371_p2;
        icmp_ln64_reg_845_pp0_iter1_reg <= icmp_ln64_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_1_reg_883 <= select_ln65_1_fu_450_p3;
        wb_V_addr_reg_892 <= zext_ln66_fu_463_p1;
    end
end

always @ (*) begin
    if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op60_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_232_p4 = add_ln66_reg_897;
    end else begin
        ap_phi_mux_cit_phi_fu_232_p4 = cit_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_221_p4 = select_ln65_2_reg_887;
    end else begin
        ap_phi_mux_cot_phi_fu_221_p4 = cot_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = add_ln64_reg_840;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_199_p4 = indvar_flatten13_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = select_ln65_3_reg_902;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_210_p4 = indvar_flatten_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_892;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_463_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_371_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_365_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_199_p4 + 16'd1);

assign add_ln65_1_fu_429_p2 = (ap_phi_mux_indvar_flatten_phi_fu_210_p4 + 10'd1);

assign add_ln66_fu_467_p2 = (select_ln65_reg_872 + 5'd1);

assign and_ln64_fu_409_p2 = (xor_ln64_fu_397_p2 & icmp_ln66_fu_403_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op60_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_845_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_248 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_284 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_275 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_12_0_0_0_load_reg_266 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_13_0_0_0_load_reg_257 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_239 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_356 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_347 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_338 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_329 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_320 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_311 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_302 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_293 = 'bx;

always @ (*) begin
    ap_predicate_op60_read_state4 = ((select_ln65_1_reg_883 == 1'd1) & (icmp_ln64_reg_845 == 1'd0));
end

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_13_0_0_0_load_reg_257}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_12_0_0_0_load_reg_266}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_275}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_284}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_293}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_302}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_311}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_320}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_329}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_338}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_347}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_356}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_239}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_248}};

assign cmp1023_fu_391_p2 = ((ap_phi_mux_cot_phi_fu_221_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_444_p2 = ((cot_2_fu_439_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_2_fu_439_p2 = (select_ln64_reg_855 + 5'd1);

assign icmp_ln64_fu_371_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_199_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_377_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_210_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_403_p2 = ((ap_phi_mux_cit_phi_fu_232_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln64_fu_435_p2 = (icmp_ln65_reg_849 | cmp1023_reg_861);

assign or_ln65_fu_415_p2 = (icmp_ln65_fu_377_p2 | and_ln64_fu_409_p2);

assign select_ln64_fu_383_p3 = ((icmp_ln65_fu_377_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_221_p4);

assign select_ln65_1_fu_450_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cmp10_mid1_fu_444_p2 : or_ln64_fu_435_p2);

assign select_ln65_2_fu_457_p3 = ((and_ln64_reg_866[0:0] == 1'b1) ? cot_2_fu_439_p2 : select_ln64_reg_855);

assign select_ln65_3_fu_472_p3 = ((icmp_ln65_reg_849[0:0] == 1'b1) ? 10'd1 : add_ln65_1_reg_878);

assign select_ln65_fu_421_p3 = ((or_ln65_fu_415_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_232_p4);

assign trunc_ln73_10_fu_716_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_11_fu_726_p4 = {{adpt_sm_dout[98:96]}};

assign trunc_ln73_12_fu_736_p4 = {{adpt_sm_dout[106:104]}};

assign trunc_ln73_1_fu_616_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_2_fu_626_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_3_fu_636_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_4_fu_646_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_5_fu_656_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_6_fu_666_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_7_fu_676_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_8_fu_686_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_9_fu_696_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_fu_612_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_706_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln87_fu_478_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{{{trunc_ln73_12_fu_736_p4}, {trunc_ln73_6_fu_666_p4}}, {trunc_ln73_11_fu_726_p4}}, {trunc_ln73_5_fu_656_p4}}, {trunc_ln73_10_fu_716_p4}}, {trunc_ln73_4_fu_646_p4}}, {trunc_ln73_s_fu_706_p4}}, {trunc_ln73_3_fu_636_p4}}, {trunc_ln73_9_fu_696_p4}}, {trunc_ln73_2_fu_626_p4}}, {trunc_ln73_8_fu_686_p4}}, {trunc_ln73_1_fu_616_p4}}, {trunc_ln73_7_fu_676_p4}}, {trunc_ln73_fu_612_p1}};

assign xor_ln64_fu_397_p2 = (icmp_ln65_fu_377_p2 ^ 1'd1);

assign zext_ln66_fu_463_p1 = select_ln65_reg_872;

endmodule //ATTN0_matmul_step1_cache_window171
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [63:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_595;
reg   [0:0] select_ln65_25_reg_633;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_595_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_153;
reg   [9:0] indvar_flatten_reg_164;
reg   [4:0] cot_reg_175;
reg   [4:0] cit_reg_186;
wire   [15:0] add_ln64_fu_269_p2;
reg   [15:0] add_ln64_reg_590;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op54_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_275_p2;
wire   [0:0] icmp_ln65_fu_281_p2;
reg   [0:0] icmp_ln65_reg_599;
wire   [4:0] select_ln64_fu_287_p3;
reg   [4:0] select_ln64_reg_605;
wire   [0:0] cmp1023_fu_295_p2;
reg   [0:0] cmp1023_reg_611;
wire   [0:0] and_ln64_fu_313_p2;
reg   [0:0] and_ln64_reg_616;
wire   [4:0] select_ln65_fu_325_p3;
reg   [4:0] select_ln65_reg_622;
wire   [9:0] add_ln65_9_fu_333_p2;
reg   [9:0] add_ln65_9_reg_628;
wire   [0:0] select_ln65_25_fu_354_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_26_fu_361_p3;
reg   [4:0] select_ln65_26_reg_637;
reg   [3:0] wb_V_addr_reg_642;
wire   [4:0] add_ln66_fu_371_p2;
reg   [4:0] add_ln66_reg_647;
wire   [9:0] select_ln65_27_fu_376_p3;
reg   [9:0] select_ln65_27_reg_652;
wire   [2:0] trunc_ln87_fu_382_p1;
wire   [2:0] trunc_ln73_fu_456_p1;
wire   [2:0] trunc_ln73_14_fu_460_p4;
wire   [2:0] trunc_ln73_15_fu_470_p4;
wire   [2:0] trunc_ln73_16_fu_480_p4;
wire   [2:0] trunc_ln73_17_fu_490_p4;
wire   [2:0] trunc_ln73_18_fu_500_p4;
wire   [2:0] trunc_ln73_19_fu_510_p4;
wire   [2:0] trunc_ln73_20_fu_520_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [3:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [23:0] wb_V_d0;
wire   [23:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_157_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_168_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_179_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_190_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260;
wire   [63:0] zext_ln66_fu_367_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_307_p2;
wire   [0:0] xor_ln64_fu_301_p2;
wire   [0:0] or_ln65_fu_319_p2;
wire   [4:0] cot_17_fu_343_p2;
wire   [0:0] cmp10_mid1_fu_348_p2;
wire   [0:0] or_ln64_fu_339_p2;
wire   [58:0] tmp_67_fu_551_p16;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window150_wb_V #(
    .DataWidth( 24 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln87_fu_382_p1;
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= trunc_ln73_fu_456_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= {{adpt_sm_dout[10:8]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= {{adpt_sm_dout[18:16]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= {{adpt_sm_dout[26:24]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= {{adpt_sm_dout[34:32]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= {{adpt_sm_dout[42:40]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= {{adpt_sm_dout[50:48]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_25_reg_633 == 1'd0) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= {{adpt_sm_dout[58:56]}};
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_186 <= add_ln66_reg_647;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_175 <= select_ln65_26_reg_637;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_153 <= add_ln64_reg_590;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_153 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln65_27_reg_652;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln64_reg_590 <= add_ln64_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_275_p2 == 1'd0))) begin
        add_ln65_9_reg_628 <= add_ln65_9_fu_333_p2;
        and_ln64_reg_616 <= and_ln64_fu_313_p2;
        cmp1023_reg_611 <= cmp1023_fu_295_p2;
        icmp_ln65_reg_599 <= icmp_ln65_fu_281_p2;
        select_ln64_reg_605 <= select_ln64_fu_287_p3;
        select_ln65_reg_622 <= select_ln65_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln66_reg_647 <= add_ln66_fu_371_p2;
        select_ln65_26_reg_637 <= select_ln65_26_fu_361_p3;
        select_ln65_27_reg_652 <= select_ln65_27_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_595 <= icmp_ln64_fu_275_p2;
        icmp_ln64_reg_595_pp0_iter1_reg <= icmp_ln64_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_25_reg_633 <= select_ln65_25_fu_354_p3;
        wb_V_addr_reg_642 <= zext_ln66_fu_367_p1;
    end
end

always @ (*) begin
    if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op54_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_275_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_190_p4 = add_ln66_reg_647;
    end else begin
        ap_phi_mux_cit_phi_fu_190_p4 = cit_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_179_p4 = select_ln65_26_reg_637;
    end else begin
        ap_phi_mux_cot_phi_fu_179_p4 = cot_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = add_ln64_reg_590;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_157_p4 = indvar_flatten13_reg_153;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = select_ln65_27_reg_652;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_168_p4 = indvar_flatten_reg_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_642;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        wb_V_address0 = zext_ln66_fu_367_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_269_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_157_p4 + 16'd1);

assign add_ln65_9_fu_333_p2 = (ap_phi_mux_indvar_flatten_phi_fu_168_p4 + 10'd1);

assign add_ln66_fu_371_p2 = (select_ln65_reg_622 + 5'd1);

assign and_ln64_fu_313_p2 = (xor_ln64_fu_301_p2 & icmp_ln66_fu_307_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op54_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_595_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_260 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_251 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_242 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_224 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_215 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_206 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_197 = 'bx;

always @ (*) begin
    ap_predicate_op54_read_state4 = ((select_ln65_25_reg_633 == 1'd1) & (icmp_ln64_reg_595 == 1'd0));
end

assign cache_window_sm_din = tmp_67_fu_551_p16;

assign cmp1023_fu_295_p2 = ((ap_phi_mux_cot_phi_fu_179_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_348_p2 = ((cot_17_fu_343_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_17_fu_343_p2 = (select_ln64_reg_605 + 5'd1);

assign icmp_ln64_fu_275_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_157_p4 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_281_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_168_p4 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_307_p2 = ((ap_phi_mux_cit_phi_fu_190_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln64_fu_339_p2 = (icmp_ln65_reg_599 | cmp1023_reg_611);

assign or_ln65_fu_319_p2 = (icmp_ln65_fu_281_p2 | and_ln64_fu_313_p2);

assign select_ln64_fu_287_p3 = ((icmp_ln65_fu_281_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_179_p4);

assign select_ln65_25_fu_354_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cmp10_mid1_fu_348_p2 : or_ln64_fu_339_p2);

assign select_ln65_26_fu_361_p3 = ((and_ln64_reg_616[0:0] == 1'b1) ? cot_17_fu_343_p2 : select_ln64_reg_605);

assign select_ln65_27_fu_376_p3 = ((icmp_ln65_reg_599[0:0] == 1'b1) ? 10'd1 : add_ln65_9_reg_628);

assign select_ln65_fu_325_p3 = ((or_ln65_fu_319_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_190_p4);

assign tmp_67_fu_551_p16 = {{{{{{{{{{{{{{{ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_197}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_206}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_215}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_224}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_233}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_242}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_251}}, {5'd0}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_260}};

assign trunc_ln73_14_fu_460_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_15_fu_470_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_16_fu_480_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_17_fu_490_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_18_fu_500_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_19_fu_510_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_20_fu_520_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_fu_456_p1 = adpt_sm_dout[2:0];

assign trunc_ln87_fu_382_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{trunc_ln73_20_fu_520_p4}, {trunc_ln73_16_fu_480_p4}}, {trunc_ln73_19_fu_510_p4}}, {trunc_ln73_15_fu_470_p4}}, {trunc_ln73_18_fu_500_p4}}, {trunc_ln73_14_fu_460_p4}}, {trunc_ln73_17_fu_490_p4}}, {trunc_ln73_fu_456_p1}};

assign xor_ln64_fu_301_p2 = (icmp_ln65_fu_281_p2 ^ 1'd1);

assign zext_ln66_fu_367_p1 = select_ln65_reg_622;

endmodule //ATTN0_matmul_step1_cache_window_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [191:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_1369;
reg   [0:0] select_ln65_22_reg_1407;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_1369_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_273;
reg   [10:0] indvar_flatten_reg_284;
reg   [5:0] cot_reg_295;
reg   [4:0] cit_reg_306;
wire   [15:0] add_ln64_fu_389_p2;
reg   [15:0] add_ln64_reg_1364;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op71_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_395_p2;
wire   [0:0] icmp_ln65_fu_401_p2;
reg   [0:0] icmp_ln65_reg_1373;
wire   [5:0] select_ln64_fu_407_p3;
reg   [5:0] select_ln64_reg_1379;
wire   [0:0] cmp1023_fu_415_p2;
reg   [0:0] cmp1023_reg_1385;
wire   [0:0] and_ln64_fu_433_p2;
reg   [0:0] and_ln64_reg_1390;
wire   [4:0] select_ln65_fu_445_p3;
reg   [4:0] select_ln65_reg_1396;
wire   [10:0] add_ln65_8_fu_453_p2;
reg   [10:0] add_ln65_8_reg_1402;
wire   [0:0] select_ln65_22_fu_474_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [5:0] select_ln65_23_fu_481_p3;
reg   [5:0] select_ln65_23_reg_1411;
reg   [3:0] wb_V_addr_reg_1416;
wire   [4:0] add_ln66_fu_491_p2;
reg   [4:0] add_ln66_reg_1421;
wire   [10:0] select_ln65_24_fu_496_p3;
reg   [10:0] select_ln65_24_reg_1426;
wire   [50:0] vec_o_data_M_elems_V_1_cast_fu_736_p18;
wire   [2:0] trunc_ln73_37_fu_938_p4;
wire   [2:0] trunc_ln73_38_fu_948_p4;
wire   [2:0] trunc_ln73_39_fu_958_p4;
wire   [2:0] trunc_ln73_40_fu_968_p4;
wire   [2:0] trunc_ln73_41_fu_978_p4;
wire   [2:0] trunc_ln73_42_fu_988_p4;
wire   [2:0] trunc_ln73_43_fu_998_p4;
wire   [50:0] vec_o_data_M_elems_V_cast_fu_1008_p18;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [3:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [71:0] wb_V_d0;
wire   [71:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_277_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_288_p4;
reg   [5:0] ap_phi_mux_cot_phi_fu_299_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_310_p4;
wire   [50:0] ap_phi_reg_pp0_iter0_vec_o_data_M_elems_V_3_in_in_reg_317;
reg   [50:0] ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_22_0_0_0_load_reg_326;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_22_0_0_0_load_reg_326;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_21_0_0_0_load_reg_335;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_21_0_0_0_load_reg_335;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_20_0_0_0_load_reg_344;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_20_0_0_0_load_reg_344;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_19_0_0_0_load_reg_353;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_19_0_0_0_load_reg_353;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_18_0_0_0_load_reg_362;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_18_0_0_0_load_reg_362;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_17_0_0_0_load_reg_371;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_17_0_0_0_load_reg_371;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_23_0_0_0_load_reg_380;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_23_0_0_0_load_reg_380;
wire   [63:0] zext_ln66_fu_487_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_427_p2;
wire   [0:0] xor_ln64_fu_421_p2;
wire   [0:0] or_ln65_fu_439_p2;
wire   [5:0] cot_16_fu_463_p2;
wire   [0:0] cmp10_mid1_fu_468_p2;
wire   [0:0] or_ln64_fu_459_p2;
wire   [2:0] tmp_564_fu_656_p4;
wire   [2:0] tmp_563_fu_646_p4;
wire   [2:0] tmp_562_fu_636_p4;
wire   [2:0] tmp_561_fu_626_p4;
wire   [2:0] tmp_560_fu_616_p4;
wire   [2:0] tmp_559_fu_606_p4;
wire   [2:0] tmp_558_fu_596_p4;
wire   [2:0] tmp_557_fu_586_p4;
wire   [2:0] tmp_556_fu_576_p4;
wire   [2:0] tmp_555_fu_566_p4;
wire   [2:0] tmp_554_fu_556_p4;
wire   [2:0] tmp_553_fu_546_p4;
wire   [2:0] tmp_552_fu_536_p4;
wire   [2:0] tmp_551_fu_526_p4;
wire   [2:0] tmp_550_fu_516_p4;
wire   [2:0] tmp_549_fu_506_p4;
wire   [2:0] trunc_ln87_fu_502_p1;
wire   [2:0] trunc_ln73_36_fu_928_p4;
wire   [2:0] trunc_ln73_35_fu_918_p4;
wire   [2:0] trunc_ln73_34_fu_908_p4;
wire   [2:0] trunc_ln73_33_fu_898_p4;
wire   [2:0] trunc_ln73_32_fu_888_p4;
wire   [2:0] trunc_ln73_31_fu_878_p4;
wire   [2:0] trunc_ln73_30_fu_868_p4;
wire   [2:0] trunc_ln73_29_fu_858_p4;
wire   [2:0] trunc_ln73_28_fu_848_p4;
wire   [2:0] trunc_ln73_27_fu_838_p4;
wire   [2:0] trunc_ln73_26_fu_828_p4;
wire   [2:0] trunc_ln73_25_fu_818_p4;
wire   [2:0] trunc_ln73_24_fu_808_p4;
wire   [2:0] trunc_ln73_23_fu_798_p4;
wire   [2:0] trunc_ln73_22_fu_788_p4;
wire   [2:0] trunc_ln73_21_fu_778_p4;
wire   [2:0] trunc_ln73_fu_774_p1;
wire   [2:0] tmp_232_fu_1253_p4;
wire   [2:0] tmp_231_fu_1243_p4;
wire   [2:0] tmp_230_fu_1233_p4;
wire   [2:0] tmp_229_fu_1223_p4;
wire   [2:0] tmp_228_fu_1213_p4;
wire   [2:0] tmp_227_fu_1203_p4;
wire   [2:0] tmp_226_fu_1193_p4;
wire   [2:0] tmp_225_fu_1183_p4;
wire   [2:0] tmp_224_fu_1173_p4;
wire   [2:0] tmp_223_fu_1163_p4;
wire   [2:0] tmp_222_fu_1153_p4;
wire   [2:0] tmp_221_fu_1143_p4;
wire   [2:0] tmp_220_fu_1133_p4;
wire   [2:0] tmp_219_fu_1123_p4;
wire   [2:0] tmp_218_fu_1113_p4;
wire   [2:0] tmp_217_fu_1103_p4;
wire   [2:0] trunc_ln174_fu_1099_p1;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window_2_wb_V #(
    .DataWidth( 72 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_17_0_0_0_load_reg_371 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_17_0_0_0_load_reg_371 <= {{adpt_sm_dout[138:136]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_17_0_0_0_load_reg_371 <= ap_phi_reg_pp0_iter0_p_fca_0_0_17_0_0_0_load_reg_371;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_18_0_0_0_load_reg_362 <= {{wb_V_q0[41:39]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_18_0_0_0_load_reg_362 <= {{adpt_sm_dout[146:144]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_18_0_0_0_load_reg_362 <= ap_phi_reg_pp0_iter0_p_fca_0_0_18_0_0_0_load_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_19_0_0_0_load_reg_353 <= {{wb_V_q0[47:45]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_19_0_0_0_load_reg_353 <= {{adpt_sm_dout[154:152]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_19_0_0_0_load_reg_353 <= ap_phi_reg_pp0_iter0_p_fca_0_0_19_0_0_0_load_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_20_0_0_0_load_reg_344 <= {{wb_V_q0[53:51]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_20_0_0_0_load_reg_344 <= {{adpt_sm_dout[162:160]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_20_0_0_0_load_reg_344 <= ap_phi_reg_pp0_iter0_p_fca_0_0_20_0_0_0_load_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_21_0_0_0_load_reg_335 <= {{wb_V_q0[59:57]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_21_0_0_0_load_reg_335 <= {{adpt_sm_dout[170:168]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_21_0_0_0_load_reg_335 <= ap_phi_reg_pp0_iter0_p_fca_0_0_21_0_0_0_load_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_22_0_0_0_load_reg_326 <= {{wb_V_q0[65:63]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_22_0_0_0_load_reg_326 <= {{adpt_sm_dout[178:176]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_22_0_0_0_load_reg_326 <= ap_phi_reg_pp0_iter0_p_fca_0_0_22_0_0_0_load_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_23_0_0_0_load_reg_380 <= {{wb_V_q0[71:69]}};
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_23_0_0_0_load_reg_380 <= {{adpt_sm_dout[186:184]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_23_0_0_0_load_reg_380 <= ap_phi_reg_pp0_iter0_p_fca_0_0_23_0_0_0_load_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_22_reg_1407 == 1'd0) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317 <= vec_o_data_M_elems_V_1_cast_fu_736_p18;
    end else if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317 <= vec_o_data_M_elems_V_cast_fu_1008_p18;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317 <= ap_phi_reg_pp0_iter0_vec_o_data_M_elems_V_3_in_in_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_306 <= add_ln66_reg_1421;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_306 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_295 <= select_ln65_23_reg_1411;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_295 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_273 <= add_ln64_reg_1364;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_273 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_284 <= select_ln65_24_reg_1426;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_284 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_1364 <= add_ln64_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_395_p2 == 1'd0))) begin
        add_ln65_8_reg_1402 <= add_ln65_8_fu_453_p2;
        and_ln64_reg_1390 <= and_ln64_fu_433_p2;
        cmp1023_reg_1385 <= cmp1023_fu_415_p2;
        icmp_ln65_reg_1373 <= icmp_ln65_fu_401_p2;
        select_ln64_reg_1379 <= select_ln64_fu_407_p3;
        select_ln65_reg_1396 <= select_ln65_fu_445_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_1421 <= add_ln66_fu_491_p2;
        select_ln65_23_reg_1411 <= select_ln65_23_fu_481_p3;
        select_ln65_24_reg_1426 <= select_ln65_24_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_1369 <= icmp_ln64_fu_395_p2;
        icmp_ln64_reg_1369_pp0_iter1_reg <= icmp_ln64_reg_1369;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_22_reg_1407 <= select_ln65_22_fu_474_p3;
        wb_V_addr_reg_1416 <= zext_ln66_fu_487_p1;
    end
end

always @ (*) begin
    if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op71_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_395_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_310_p4 = add_ln66_reg_1421;
    end else begin
        ap_phi_mux_cit_phi_fu_310_p4 = cit_reg_306;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_299_p4 = select_ln65_23_reg_1411;
    end else begin
        ap_phi_mux_cot_phi_fu_299_p4 = cot_reg_295;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_277_p4 = add_ln64_reg_1364;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_277_p4 = indvar_flatten13_reg_273;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_288_p4 = select_ln65_24_reg_1426;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_288_p4 = indvar_flatten_reg_284;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_1416;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_487_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_395_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_395_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_389_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_277_p4 + 16'd1);

assign add_ln65_8_fu_453_p2 = (ap_phi_mux_indvar_flatten_phi_fu_288_p4 + 11'd1);

assign add_ln66_fu_491_p2 = (select_ln65_reg_1396 + 5'd1);

assign and_ln64_fu_433_p2 = (xor_ln64_fu_421_p2 & icmp_ln66_fu_427_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op71_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op71_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op71_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_1369_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_17_0_0_0_load_reg_371 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_18_0_0_0_load_reg_362 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_19_0_0_0_load_reg_353 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_20_0_0_0_load_reg_344 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_21_0_0_0_load_reg_335 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_22_0_0_0_load_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_23_0_0_0_load_reg_380 = 'bx;

assign ap_phi_reg_pp0_iter0_vec_o_data_M_elems_V_3_in_in_reg_317 = 'bx;

always @ (*) begin
    ap_predicate_op71_read_state4 = ((select_ln65_22_reg_1407 == 1'd1) & (icmp_ln64_reg_1369 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_23_0_0_0_load_reg_380}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_22_0_0_0_load_reg_326}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_21_0_0_0_load_reg_335}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_20_0_0_0_load_reg_344}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_19_0_0_0_load_reg_353}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_18_0_0_0_load_reg_362}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_17_0_0_0_load_reg_371}}}, {5'd0}}}, {tmp_232_fu_1253_p4}}}, {5'd0}}}, {tmp_231_fu_1243_p4}}}, {5'd0}}}, {tmp_230_fu_1233_p4}}}, {5'd0}}}, {tmp_229_fu_1223_p4}}}, {5'd0}}}, {tmp_228_fu_1213_p4}}}, {5'd0}}}, {tmp_227_fu_1203_p4}}}, {5'd0}}}, {tmp_226_fu_1193_p4}}}, {5'd0}}}, {tmp_225_fu_1183_p4}}}, {5'd0}}}, {tmp_224_fu_1173_p4}}}, {5'd0}}}, {tmp_223_fu_1163_p4}}}, {5'd0}}}, {tmp_222_fu_1153_p4}}}, {5'd0}}}, {tmp_221_fu_1143_p4}}}, {5'd0}}}, {tmp_220_fu_1133_p4}}}, {5'd0}}}, {tmp_219_fu_1123_p4}}}, {5'd0}}}, {tmp_218_fu_1113_p4}}}, {5'd0}}}, {tmp_217_fu_1103_p4}}}, {5'd0}}}, {trunc_ln174_fu_1099_p1}};

assign cmp1023_fu_415_p2 = ((ap_phi_mux_cot_phi_fu_299_p4 == 6'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_468_p2 = ((cot_16_fu_463_p2 == 6'd0) ? 1'b1 : 1'b0);

assign cot_16_fu_463_p2 = (select_ln64_reg_1379 + 6'd1);

assign icmp_ln64_fu_395_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_277_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_401_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_288_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_427_p2 = ((ap_phi_mux_cit_phi_fu_310_p4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln64_fu_459_p2 = (icmp_ln65_reg_1373 | cmp1023_reg_1385);

assign or_ln65_fu_439_p2 = (icmp_ln65_fu_401_p2 | and_ln64_fu_433_p2);

assign select_ln64_fu_407_p3 = ((icmp_ln65_fu_401_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cot_phi_fu_299_p4);

assign select_ln65_22_fu_474_p3 = ((and_ln64_reg_1390[0:0] == 1'b1) ? cmp10_mid1_fu_468_p2 : or_ln64_fu_459_p2);

assign select_ln65_23_fu_481_p3 = ((and_ln64_reg_1390[0:0] == 1'b1) ? cot_16_fu_463_p2 : select_ln64_reg_1379);

assign select_ln65_24_fu_496_p3 = ((icmp_ln65_reg_1373[0:0] == 1'b1) ? 11'd1 : add_ln65_8_reg_1402);

assign select_ln65_fu_445_p3 = ((or_ln65_fu_439_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_310_p4);

assign start_out = real_start;

assign tmp_217_fu_1103_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[5:3]}};

assign tmp_218_fu_1113_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[8:6]}};

assign tmp_219_fu_1123_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[11:9]}};

assign tmp_220_fu_1133_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[14:12]}};

assign tmp_221_fu_1143_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[17:15]}};

assign tmp_222_fu_1153_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[20:18]}};

assign tmp_223_fu_1163_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[23:21]}};

assign tmp_224_fu_1173_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[26:24]}};

assign tmp_225_fu_1183_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[29:27]}};

assign tmp_226_fu_1193_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[32:30]}};

assign tmp_227_fu_1203_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[35:33]}};

assign tmp_228_fu_1213_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[38:36]}};

assign tmp_229_fu_1223_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[41:39]}};

assign tmp_230_fu_1233_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[44:42]}};

assign tmp_231_fu_1243_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[47:45]}};

assign tmp_232_fu_1253_p4 = {{ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[50:48]}};

assign tmp_549_fu_506_p4 = {{wb_V_q0[8:6]}};

assign tmp_550_fu_516_p4 = {{wb_V_q0[14:12]}};

assign tmp_551_fu_526_p4 = {{wb_V_q0[20:18]}};

assign tmp_552_fu_536_p4 = {{wb_V_q0[26:24]}};

assign tmp_553_fu_546_p4 = {{wb_V_q0[32:30]}};

assign tmp_554_fu_556_p4 = {{wb_V_q0[38:36]}};

assign tmp_555_fu_566_p4 = {{wb_V_q0[44:42]}};

assign tmp_556_fu_576_p4 = {{wb_V_q0[50:48]}};

assign tmp_557_fu_586_p4 = {{wb_V_q0[56:54]}};

assign tmp_558_fu_596_p4 = {{wb_V_q0[62:60]}};

assign tmp_559_fu_606_p4 = {{wb_V_q0[68:66]}};

assign tmp_560_fu_616_p4 = {{wb_V_q0[5:3]}};

assign tmp_561_fu_626_p4 = {{wb_V_q0[11:9]}};

assign tmp_562_fu_636_p4 = {{wb_V_q0[17:15]}};

assign tmp_563_fu_646_p4 = {{wb_V_q0[23:21]}};

assign tmp_564_fu_656_p4 = {{wb_V_q0[29:27]}};

assign trunc_ln174_fu_1099_p1 = ap_phi_reg_pp0_iter1_vec_o_data_M_elems_V_3_in_in_reg_317[2:0];

assign trunc_ln73_21_fu_778_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln73_22_fu_788_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_23_fu_798_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_24_fu_808_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_25_fu_818_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_26_fu_828_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_27_fu_838_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_28_fu_848_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_29_fu_858_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_30_fu_868_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_31_fu_878_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_32_fu_888_p4 = {{adpt_sm_dout[98:96]}};

assign trunc_ln73_33_fu_898_p4 = {{adpt_sm_dout[106:104]}};

assign trunc_ln73_34_fu_908_p4 = {{adpt_sm_dout[114:112]}};

assign trunc_ln73_35_fu_918_p4 = {{adpt_sm_dout[122:120]}};

assign trunc_ln73_36_fu_928_p4 = {{adpt_sm_dout[130:128]}};

assign trunc_ln73_37_fu_938_p4 = {{adpt_sm_dout[138:136]}};

assign trunc_ln73_38_fu_948_p4 = {{adpt_sm_dout[146:144]}};

assign trunc_ln73_39_fu_958_p4 = {{adpt_sm_dout[154:152]}};

assign trunc_ln73_40_fu_968_p4 = {{adpt_sm_dout[162:160]}};

assign trunc_ln73_41_fu_978_p4 = {{adpt_sm_dout[170:168]}};

assign trunc_ln73_42_fu_988_p4 = {{adpt_sm_dout[178:176]}};

assign trunc_ln73_43_fu_998_p4 = {{adpt_sm_dout[186:184]}};

assign trunc_ln73_fu_774_p1 = adpt_sm_dout[2:0];

assign trunc_ln87_fu_502_p1 = wb_V_q0[2:0];

assign vec_o_data_M_elems_V_1_cast_fu_736_p18 = {{{{{{{{{{{{{{{{{tmp_564_fu_656_p4}, {tmp_563_fu_646_p4}}, {tmp_562_fu_636_p4}}, {tmp_561_fu_626_p4}}, {tmp_560_fu_616_p4}}, {tmp_559_fu_606_p4}}, {tmp_558_fu_596_p4}}, {tmp_557_fu_586_p4}}, {tmp_556_fu_576_p4}}, {tmp_555_fu_566_p4}}, {tmp_554_fu_556_p4}}, {tmp_553_fu_546_p4}}, {tmp_552_fu_536_p4}}, {tmp_551_fu_526_p4}}, {tmp_550_fu_516_p4}}, {tmp_549_fu_506_p4}}, {trunc_ln87_fu_502_p1}};

assign vec_o_data_M_elems_V_cast_fu_1008_p18 = {{{{{{{{{{{{{{{{{trunc_ln73_36_fu_928_p4}, {trunc_ln73_35_fu_918_p4}}, {trunc_ln73_34_fu_908_p4}}, {trunc_ln73_33_fu_898_p4}}, {trunc_ln73_32_fu_888_p4}}, {trunc_ln73_31_fu_878_p4}}, {trunc_ln73_30_fu_868_p4}}, {trunc_ln73_29_fu_858_p4}}, {trunc_ln73_28_fu_848_p4}}, {trunc_ln73_27_fu_838_p4}}, {trunc_ln73_26_fu_828_p4}}, {trunc_ln73_25_fu_818_p4}}, {trunc_ln73_24_fu_808_p4}}, {trunc_ln73_23_fu_798_p4}}, {trunc_ln73_22_fu_788_p4}}, {trunc_ln73_21_fu_778_p4}}, {trunc_ln73_fu_774_p1}};

assign wb_V_d0 = {{{{{{{{{{{{{{{{{{{{{{{{trunc_ln73_43_fu_998_p4}, {trunc_ln73_31_fu_878_p4}}, {trunc_ln73_42_fu_988_p4}}, {trunc_ln73_30_fu_868_p4}}, {trunc_ln73_41_fu_978_p4}}, {trunc_ln73_29_fu_858_p4}}, {trunc_ln73_40_fu_968_p4}}, {trunc_ln73_28_fu_848_p4}}, {trunc_ln73_39_fu_958_p4}}, {trunc_ln73_27_fu_838_p4}}, {trunc_ln73_38_fu_948_p4}}, {trunc_ln73_26_fu_828_p4}}, {trunc_ln73_37_fu_938_p4}}, {trunc_ln73_25_fu_818_p4}}, {trunc_ln73_36_fu_928_p4}}, {trunc_ln73_24_fu_808_p4}}, {trunc_ln73_35_fu_918_p4}}, {trunc_ln73_23_fu_798_p4}}, {trunc_ln73_34_fu_908_p4}}, {trunc_ln73_22_fu_788_p4}}, {trunc_ln73_33_fu_898_p4}}, {trunc_ln73_21_fu_778_p4}}, {trunc_ln73_32_fu_888_p4}}, {trunc_ln73_fu_774_p1}};

assign xor_ln64_fu_421_p2 = (icmp_ln65_fu_401_p2 ^ 1'd1);

assign zext_ln66_fu_487_p1 = select_ln65_reg_1396;

endmodule //ATTN0_matmul_step1_cache_window_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window_2_wb_V_ram (addr0, ce0, d0, we0, q0,  clk);

parameter DWIDTH = 72;
parameter AWIDTH = 4;
parameter MEM_SIZE = 16;

input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        if (we0) 
            ram[addr0] <= d0; 
        q0 <= ram[addr0];
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step1_cache_window_2_wb_V(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0);

parameter DataWidth = 32'd72;
parameter AddressRange = 32'd16;
parameter AddressWidth = 32'd4;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step1_cache_window_2_wb_V_ram ATTN0_matmul_step1_cache_window_2_wb_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .we0( we0 ),
    .d0( d0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step1_cache_window_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        adpt_sm_dout,
        adpt_sm_empty_n,
        adpt_sm_read,
        cache_window_sm_din,
        cache_window_sm_full_n,
        cache_window_sm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] adpt_sm_dout;
input   adpt_sm_empty_n;
output   adpt_sm_read;
output  [95:0] cache_window_sm_din;
input   cache_window_sm_full_n;
output   cache_window_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg adpt_sm_read;
reg cache_window_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    adpt_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_763;
reg   [0:0] select_ln65_19_reg_801;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln64_reg_763_pp0_iter1_reg;
reg   [15:0] indvar_flatten13_reg_183;
reg   [10:0] indvar_flatten_reg_194;
reg   [4:0] cot_reg_205;
reg   [5:0] cit_reg_216;
wire   [15:0] add_ln64_fu_335_p2;
reg   [15:0] add_ln64_reg_758;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op58_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_341_p2;
wire   [0:0] icmp_ln65_fu_347_p2;
reg   [0:0] icmp_ln65_reg_767;
wire   [4:0] select_ln64_fu_353_p3;
reg   [4:0] select_ln64_reg_773;
wire   [0:0] cmp1023_fu_361_p2;
reg   [0:0] cmp1023_reg_779;
wire   [0:0] and_ln64_fu_379_p2;
reg   [0:0] and_ln64_reg_784;
wire   [5:0] select_ln65_fu_391_p3;
reg   [5:0] select_ln65_reg_790;
wire   [10:0] add_ln65_7_fu_399_p2;
reg   [10:0] add_ln65_7_reg_796;
wire   [0:0] select_ln65_19_fu_420_p3;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln65_20_fu_427_p3;
reg   [4:0] select_ln65_20_reg_805;
reg   [4:0] wb_V_addr_reg_810;
wire   [5:0] add_ln66_fu_437_p2;
reg   [5:0] add_ln66_reg_815;
wire   [10:0] select_ln65_21_fu_442_p3;
reg   [10:0] select_ln65_21_reg_820;
wire   [2:0] trunc_ln87_fu_448_p1;
wire   [2:0] trunc_ln73_fu_562_p1;
wire   [2:0] trunc_ln73_s_fu_566_p4;
wire   [2:0] trunc_ln73_40_fu_576_p4;
wire   [2:0] trunc_ln73_41_fu_586_p4;
wire   [2:0] trunc_ln73_42_fu_596_p4;
wire   [2:0] trunc_ln73_43_fu_606_p4;
wire   [2:0] trunc_ln73_44_fu_616_p4;
wire   [2:0] trunc_ln73_45_fu_626_p4;
wire   [2:0] trunc_ln73_46_fu_636_p4;
wire   [2:0] trunc_ln73_47_fu_646_p4;
wire   [2:0] trunc_ln73_48_fu_656_p4;
wire   [2:0] trunc_ln73_49_fu_666_p4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] wb_V_address0;
reg    wb_V_ce0;
reg    wb_V_we0;
wire   [35:0] wb_V_d0;
wire   [35:0] wb_V_q0;
reg   [15:0] ap_phi_mux_indvar_flatten13_phi_fu_187_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_198_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_209_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_220_p4;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317;
wire   [2:0] ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
reg   [2:0] ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326;
wire   [63:0] zext_ln66_fu_433_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln66_fu_373_p2;
wire   [0:0] xor_ln64_fu_367_p2;
wire   [0:0] or_ln65_fu_385_p2;
wire   [4:0] cot_14_fu_409_p2;
wire   [0:0] cmp10_mid1_fu_414_p2;
wire   [0:0] or_ln64_fu_405_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 4'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step1_cache_window136_wb_V #(
    .DataWidth( 36 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
wb_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wb_V_address0),
    .ce0(wb_V_ce0),
    .we0(wb_V_we0),
    .d0(wb_V_d0),
    .q0(wb_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln87_fu_448_p1;
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= trunc_ln73_fu_562_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227 <= ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{wb_V_q0[29:27]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= {{adpt_sm_dout[82:80]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245 <= ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{wb_V_q0[35:33]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= {{adpt_sm_dout[90:88]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236 <= ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{wb_V_q0[8:6]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= {{adpt_sm_dout[10:8]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326 <= ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{wb_V_q0[14:12]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= {{adpt_sm_dout[18:16]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317 <= ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{wb_V_q0[20:18]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= {{adpt_sm_dout[26:24]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308 <= ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{wb_V_q0[26:24]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= {{adpt_sm_dout[34:32]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299 <= ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{wb_V_q0[32:30]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= {{adpt_sm_dout[42:40]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290 <= ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{wb_V_q0[5:3]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= {{adpt_sm_dout[50:48]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281 <= ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{wb_V_q0[11:9]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= {{adpt_sm_dout[58:56]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272 <= ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{wb_V_q0[17:15]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= {{adpt_sm_dout[66:64]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263 <= ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln65_19_reg_801 == 1'd0) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{wb_V_q0[23:21]}};
    end else if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= {{adpt_sm_dout[74:72]}};
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254 <= ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_216 <= add_ln66_reg_815;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_205 <= select_ln65_20_reg_805;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cot_reg_205 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_183 <= add_ln64_reg_758;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_183 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_194 <= select_ln65_21_reg_820;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_194 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln64_reg_758 <= add_ln64_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_341_p2 == 1'd0))) begin
        add_ln65_7_reg_796 <= add_ln65_7_fu_399_p2;
        and_ln64_reg_784 <= and_ln64_fu_379_p2;
        cmp1023_reg_779 <= cmp1023_fu_361_p2;
        icmp_ln65_reg_767 <= icmp_ln65_fu_347_p2;
        select_ln64_reg_773 <= select_ln64_fu_353_p3;
        select_ln65_reg_790 <= select_ln65_fu_391_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln66_reg_815 <= add_ln66_fu_437_p2;
        select_ln65_20_reg_805 <= select_ln65_20_fu_427_p3;
        select_ln65_21_reg_820 <= select_ln65_21_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_763 <= icmp_ln64_fu_341_p2;
        icmp_ln64_reg_763_pp0_iter1_reg <= icmp_ln64_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln65_19_reg_801 <= select_ln65_19_fu_420_p3;
        wb_V_addr_reg_810 <= zext_ln66_fu_433_p1;
    end
end

always @ (*) begin
    if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        adpt_sm_blk_n = adpt_sm_empty_n;
    end else begin
        adpt_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op58_read_state4 == 1'b1))) begin
        adpt_sm_read = 1'b1;
    end else begin
        adpt_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_341_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_220_p4 = add_ln66_reg_815;
    end else begin
        ap_phi_mux_cit_phi_fu_220_p4 = cit_reg_216;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_209_p4 = select_ln65_20_reg_805;
    end else begin
        ap_phi_mux_cot_phi_fu_209_p4 = cot_reg_205;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = add_ln64_reg_758;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_187_p4 = indvar_flatten13_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = select_ln65_21_reg_820;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_198_p4 = indvar_flatten_reg_194;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_full_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_write = 1'b1;
    end else begin
        cache_window_sm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_address0 = wb_V_addr_reg_810;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wb_V_address0 = zext_ln66_fu_433_p1;
    end else begin
        wb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        wb_V_ce0 = 1'b1;
    end else begin
        wb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wb_V_we0 = 1'b1;
    end else begin
        wb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln64_fu_341_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_335_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_187_p4 + 16'd1);

assign add_ln65_7_fu_399_p2 = (ap_phi_mux_indvar_flatten_phi_fu_198_p4 + 11'd1);

assign add_ln66_fu_437_p2 = (select_ln65_reg_790 + 6'd1);

assign and_ln64_fu_379_p2 = (xor_ln64_fu_367_p2 & icmp_ln66_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'b0 == adpt_sm_empty_n) & (ap_predicate_op58_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((icmp_ln64_reg_763_pp0_iter1_reg == 1'd0) & (cache_window_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_fca_0_0_0_0_0_0_load_reg_227 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_10_0_0_0_load_reg_245 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_11_0_0_0_load_reg_236 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_1_0_0_0_load_reg_326 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_2_0_0_0_load_reg_317 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_3_0_0_0_load_reg_308 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_4_0_0_0_load_reg_299 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_5_0_0_0_load_reg_290 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_6_0_0_0_load_reg_281 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_7_0_0_0_load_reg_272 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_8_0_0_0_load_reg_263 = 'bx;

assign ap_phi_reg_pp0_iter0_p_fca_0_0_9_0_0_0_load_reg_254 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state4 = ((select_ln65_19_reg_801 == 1'd1) & (icmp_ln64_reg_763 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign cache_window_sm_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{5'd0}, {ap_phi_reg_pp0_iter1_p_fca_0_0_11_0_0_0_load_reg_236}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_10_0_0_0_load_reg_245}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_9_0_0_0_load_reg_254}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_8_0_0_0_load_reg_263}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_7_0_0_0_load_reg_272}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_6_0_0_0_load_reg_281}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_5_0_0_0_load_reg_290}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_4_0_0_0_load_reg_299}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_3_0_0_0_load_reg_308}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_2_0_0_0_load_reg_317}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_1_0_0_0_load_reg_326}}}, {5'd0}}}, {ap_phi_reg_pp0_iter1_p_fca_0_0_0_0_0_0_load_reg_227}};

assign cmp1023_fu_361_p2 = ((ap_phi_mux_cot_phi_fu_209_p4 == 5'd0) ? 1'b1 : 1'b0);

assign cmp10_mid1_fu_414_p2 = ((cot_14_fu_409_p2 == 5'd0) ? 1'b1 : 1'b0);

assign cot_14_fu_409_p2 = (select_ln64_reg_773 + 5'd1);

assign icmp_ln64_fu_341_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_187_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_347_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_198_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_373_p2 = ((ap_phi_mux_cit_phi_fu_220_p4 == 6'd32) ? 1'b1 : 1'b0);

assign or_ln64_fu_405_p2 = (icmp_ln65_reg_767 | cmp1023_reg_779);

assign or_ln65_fu_385_p2 = (icmp_ln65_fu_347_p2 | and_ln64_fu_379_p2);

assign select_ln64_fu_353_p3 = ((icmp_ln65_fu_347_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_209_p4);

assign select_ln65_19_fu_420_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cmp10_mid1_fu_414_p2 : or_ln64_fu_405_p2);

assign select_ln65_20_fu_427_p3 = ((and_ln64_reg_784[0:0] == 1'b1) ? cot_14_fu_409_p2 : select_ln64_reg_773);

assign select_ln65_21_fu_442_p3 = ((icmp_ln65_reg_767[0:0] == 1'b1) ? 11'd1 : add_ln65_7_reg_796);

assign select_ln65_fu_391_p3 = ((or_ln65_fu_385_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_220_p4);

assign start_out = real_start;

assign trunc_ln73_40_fu_576_p4 = {{adpt_sm_dout[18:16]}};

assign trunc_ln73_41_fu_586_p4 = {{adpt_sm_dout[26:24]}};

assign trunc_ln73_42_fu_596_p4 = {{adpt_sm_dout[34:32]}};

assign trunc_ln73_43_fu_606_p4 = {{adpt_sm_dout[42:40]}};

assign trunc_ln73_44_fu_616_p4 = {{adpt_sm_dout[50:48]}};

assign trunc_ln73_45_fu_626_p4 = {{adpt_sm_dout[58:56]}};

assign trunc_ln73_46_fu_636_p4 = {{adpt_sm_dout[66:64]}};

assign trunc_ln73_47_fu_646_p4 = {{adpt_sm_dout[74:72]}};

assign trunc_ln73_48_fu_656_p4 = {{adpt_sm_dout[82:80]}};

assign trunc_ln73_49_fu_666_p4 = {{adpt_sm_dout[90:88]}};

assign trunc_ln73_fu_562_p1 = adpt_sm_dout[2:0];

assign trunc_ln73_s_fu_566_p4 = {{adpt_sm_dout[10:8]}};

assign trunc_ln87_fu_448_p1 = wb_V_q0[2:0];

assign wb_V_d0 = {{{{{{{{{{{{trunc_ln73_49_fu_666_p4}, {trunc_ln73_43_fu_606_p4}}, {trunc_ln73_48_fu_656_p4}}, {trunc_ln73_42_fu_596_p4}}, {trunc_ln73_47_fu_646_p4}}, {trunc_ln73_41_fu_586_p4}}, {trunc_ln73_46_fu_636_p4}}, {trunc_ln73_40_fu_576_p4}}, {trunc_ln73_45_fu_626_p4}}, {trunc_ln73_s_fu_566_p4}}, {trunc_ln73_44_fu_616_p4}}, {trunc_ln73_fu_562_p1}};

assign xor_ln64_fu_367_p2 = (icmp_ln65_fu_347_p2 ^ 1'd1);

assign zext_ln66_fu_433_p1 = select_ln65_reg_790;

endmodule //ATTN0_matmul_step1_cache_window_3
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [111:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [127:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2066;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2336;
reg   [15:0] indvar_flatten13_reg_243;
reg   [9:0] indvar_flatten_reg_254;
reg   [4:0] cit_reg_265;
wire   [15:0] add_ln336_fu_276_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_282_p2;
reg   [0:0] icmp_ln336_reg_2066_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_288_p2;
reg   [0:0] icmp_ln337_reg_2070;
wire   [9:0] select_ln337_6_fu_300_p3;
wire   [4:0] select_ln337_fu_330_p3;
reg   [4:0] select_ln337_reg_2081;
wire   [0:0] icmp_ln342_fu_338_p2;
reg   [0:0] icmp_ln342_reg_2086;
wire  signed [5:0] mul_ln1345_113_fu_714_p2;
reg  signed [5:0] mul_ln1345_113_reg_2091;
wire  signed [5:0] mul_ln1345_114_fu_738_p2;
reg  signed [5:0] mul_ln1345_114_reg_2096;
wire  signed [5:0] mul_ln1345_115_fu_762_p2;
reg  signed [5:0] mul_ln1345_115_reg_2101;
wire   [6:0] add_ln691_114_fu_796_p2;
reg   [6:0] add_ln691_114_reg_2106;
wire   [6:0] add_ln691_115_fu_802_p2;
reg   [6:0] add_ln691_115_reg_2111;
wire  signed [5:0] mul_ln1345_120_fu_854_p2;
reg  signed [5:0] mul_ln1345_120_reg_2116;
wire  signed [5:0] mul_ln1345_121_fu_864_p2;
reg  signed [5:0] mul_ln1345_121_reg_2121;
wire  signed [5:0] mul_ln1345_122_fu_874_p2;
reg  signed [5:0] mul_ln1345_122_reg_2126;
wire   [6:0] add_ln691_121_fu_894_p2;
reg   [6:0] add_ln691_121_reg_2131;
wire   [6:0] add_ln691_122_fu_900_p2;
reg   [6:0] add_ln691_122_reg_2136;
wire  signed [5:0] mul_ln1345_127_fu_952_p2;
reg  signed [5:0] mul_ln1345_127_reg_2141;
wire  signed [5:0] mul_ln1345_128_fu_962_p2;
reg  signed [5:0] mul_ln1345_128_reg_2146;
wire  signed [5:0] mul_ln1345_129_fu_972_p2;
reg  signed [5:0] mul_ln1345_129_reg_2151;
wire   [6:0] add_ln691_128_fu_992_p2;
reg   [6:0] add_ln691_128_reg_2156;
wire   [6:0] add_ln691_129_fu_998_p2;
reg   [6:0] add_ln691_129_reg_2161;
wire  signed [5:0] mul_ln1345_134_fu_1050_p2;
reg  signed [5:0] mul_ln1345_134_reg_2166;
wire  signed [5:0] mul_ln1345_135_fu_1060_p2;
reg  signed [5:0] mul_ln1345_135_reg_2171;
wire  signed [5:0] mul_ln1345_136_fu_1070_p2;
reg  signed [5:0] mul_ln1345_136_reg_2176;
wire   [6:0] add_ln691_135_fu_1090_p2;
reg   [6:0] add_ln691_135_reg_2181;
wire   [6:0] add_ln691_136_fu_1096_p2;
reg   [6:0] add_ln691_136_reg_2186;
wire  signed [5:0] mul_ln1345_141_fu_1188_p2;
reg  signed [5:0] mul_ln1345_141_reg_2191;
wire  signed [5:0] mul_ln1345_142_fu_1208_p2;
reg  signed [5:0] mul_ln1345_142_reg_2196;
wire  signed [5:0] mul_ln1345_143_fu_1228_p2;
reg  signed [5:0] mul_ln1345_143_reg_2201;
wire   [6:0] add_ln691_142_fu_1258_p2;
reg   [6:0] add_ln691_142_reg_2206;
wire   [6:0] add_ln691_143_fu_1264_p2;
reg   [6:0] add_ln691_143_reg_2211;
wire  signed [5:0] mul_ln1345_148_fu_1300_p2;
reg  signed [5:0] mul_ln1345_148_reg_2216;
wire  signed [5:0] mul_ln1345_149_fu_1306_p2;
reg  signed [5:0] mul_ln1345_149_reg_2221;
wire  signed [5:0] mul_ln1345_150_fu_1312_p2;
reg  signed [5:0] mul_ln1345_150_reg_2226;
wire   [6:0] add_ln691_149_fu_1328_p2;
reg   [6:0] add_ln691_149_reg_2231;
wire   [6:0] add_ln691_150_fu_1334_p2;
reg   [6:0] add_ln691_150_reg_2236;
wire  signed [5:0] mul_ln1345_155_fu_1370_p2;
reg  signed [5:0] mul_ln1345_155_reg_2241;
wire  signed [5:0] mul_ln1345_156_fu_1376_p2;
reg  signed [5:0] mul_ln1345_156_reg_2246;
wire  signed [5:0] mul_ln1345_157_fu_1382_p2;
reg  signed [5:0] mul_ln1345_157_reg_2251;
wire   [6:0] add_ln691_156_fu_1398_p2;
reg   [6:0] add_ln691_156_reg_2256;
wire   [6:0] add_ln691_157_fu_1404_p2;
reg   [6:0] add_ln691_157_reg_2261;
wire  signed [5:0] mul_ln1345_162_fu_1440_p2;
reg  signed [5:0] mul_ln1345_162_reg_2266;
wire  signed [5:0] mul_ln1345_163_fu_1446_p2;
reg  signed [5:0] mul_ln1345_163_reg_2271;
wire  signed [5:0] mul_ln1345_164_fu_1452_p2;
reg  signed [5:0] mul_ln1345_164_reg_2276;
wire   [6:0] add_ln691_163_fu_1468_p2;
reg   [6:0] add_ln691_163_reg_2281;
wire   [6:0] add_ln691_164_fu_1474_p2;
reg   [6:0] add_ln691_164_reg_2286;
wire   [4:0] cit_6_fu_1480_p2;
wire   [10:0] add_ln691_117_fu_1547_p2;
reg   [10:0] add_ln691_117_reg_2296;
wire   [10:0] add_ln691_124_fu_1610_p2;
reg   [10:0] add_ln691_124_reg_2301;
wire   [10:0] add_ln691_131_fu_1673_p2;
reg   [10:0] add_ln691_131_reg_2306;
wire   [10:0] add_ln691_138_fu_1736_p2;
reg   [10:0] add_ln691_138_reg_2311;
wire   [10:0] add_ln691_145_fu_1799_p2;
reg   [10:0] add_ln691_145_reg_2316;
wire   [10:0] add_ln691_152_fu_1862_p2;
reg   [10:0] add_ln691_152_reg_2321;
wire   [10:0] add_ln691_159_fu_1925_p2;
reg   [10:0] add_ln691_159_reg_2326;
wire   [10:0] add_ln691_166_fu_1988_p2;
reg   [10:0] add_ln691_166_reg_2331;
wire   [0:0] icmp_ln378_fu_2014_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [87:0] vec_o_data_M_elems_V_2_fu_220;
wire   [87:0] tmp_192_fu_1994_p9;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_294_p2;
wire   [0:0] icmp_ln338_fu_313_p2;
wire   [0:0] xor_ln336_fu_308_p2;
wire   [0:0] and_ln336_fu_319_p2;
wire   [0:0] or_ln337_fu_325_p2;
wire   [2:0] trunc_ln145_fu_344_p1;
wire   [2:0] trunc_ln145_53_fu_348_p1;
wire  signed [2:0] mul_ln1345_fu_630_p0;
wire  signed [5:0] sext_ln1345_fu_626_p1;
wire   [2:0] mul_ln1345_fu_630_p1;
wire   [5:0] zext_ln1345_fu_622_p1;
wire  signed [5:0] mul_ln1345_fu_630_p2;
wire   [2:0] tmp_204_fu_640_p4;
wire   [2:0] trunc_ln145_18_fu_352_p4;
wire   [2:0] mul_ln1345_111_fu_658_p0;
wire   [5:0] zext_ln1345_27_fu_650_p1;
wire  signed [2:0] mul_ln1345_111_fu_658_p1;
wire  signed [5:0] sext_ln1345_55_fu_654_p1;
wire  signed [5:0] mul_ln1345_111_fu_658_p2;
wire   [2:0] tmp_205_fu_668_p4;
wire   [2:0] trunc_ln145_19_fu_362_p4;
wire   [2:0] mul_ln1345_112_fu_686_p0;
wire   [5:0] zext_ln1345_28_fu_678_p1;
wire  signed [2:0] mul_ln1345_112_fu_686_p1;
wire  signed [5:0] sext_ln1345_56_fu_682_p1;
wire  signed [5:0] mul_ln1345_112_fu_686_p2;
wire   [2:0] tmp_206_fu_696_p4;
wire   [2:0] trunc_ln145_20_fu_372_p4;
wire   [2:0] mul_ln1345_113_fu_714_p0;
wire   [5:0] zext_ln1345_29_fu_706_p1;
wire  signed [2:0] mul_ln1345_113_fu_714_p1;
wire  signed [5:0] sext_ln1345_57_fu_710_p1;
wire   [2:0] tmp_207_fu_720_p4;
wire   [2:0] trunc_ln145_21_fu_382_p4;
wire   [2:0] mul_ln1345_114_fu_738_p0;
wire   [5:0] zext_ln1345_30_fu_730_p1;
wire  signed [2:0] mul_ln1345_114_fu_738_p1;
wire  signed [5:0] sext_ln1345_58_fu_734_p1;
wire   [2:0] tmp_208_fu_744_p4;
wire   [2:0] trunc_ln145_22_fu_392_p4;
wire   [2:0] mul_ln1345_115_fu_762_p0;
wire   [5:0] zext_ln1345_31_fu_754_p1;
wire  signed [2:0] mul_ln1345_115_fu_762_p1;
wire  signed [5:0] sext_ln1345_59_fu_758_p1;
wire   [2:0] tmp_209_fu_768_p4;
wire   [2:0] trunc_ln145_23_fu_402_p4;
wire   [2:0] mul_ln1345_116_fu_786_p0;
wire   [5:0] zext_ln1345_32_fu_778_p1;
wire  signed [2:0] mul_ln1345_116_fu_786_p1;
wire  signed [5:0] sext_ln1345_60_fu_782_p1;
wire  signed [5:0] mul_ln1345_116_fu_786_p2;
wire  signed [6:0] sext_ln368_63_fu_692_p1;
wire  signed [6:0] sext_ln368_fu_664_p1;
wire  signed [6:0] sext_ln691_fu_636_p1;
wire  signed [6:0] sext_ln691_112_fu_792_p1;
wire   [2:0] trunc_ln145_24_fu_412_p4;
wire  signed [2:0] mul_ln1345_117_fu_812_p0;
wire  signed [5:0] sext_ln1345_61_fu_808_p1;
wire   [2:0] mul_ln1345_117_fu_812_p1;
wire  signed [5:0] mul_ln1345_117_fu_812_p2;
wire   [2:0] trunc_ln145_25_fu_422_p4;
wire   [2:0] mul_ln1345_118_fu_826_p0;
wire  signed [2:0] mul_ln1345_118_fu_826_p1;
wire  signed [5:0] sext_ln1345_62_fu_822_p1;
wire  signed [5:0] mul_ln1345_118_fu_826_p2;
wire   [2:0] trunc_ln145_26_fu_432_p4;
wire   [2:0] mul_ln1345_119_fu_840_p0;
wire  signed [2:0] mul_ln1345_119_fu_840_p1;
wire  signed [5:0] sext_ln1345_63_fu_836_p1;
wire  signed [5:0] mul_ln1345_119_fu_840_p2;
wire   [2:0] trunc_ln145_27_fu_442_p4;
wire   [2:0] mul_ln1345_120_fu_854_p0;
wire  signed [2:0] mul_ln1345_120_fu_854_p1;
wire  signed [5:0] sext_ln1345_64_fu_850_p1;
wire   [2:0] trunc_ln145_28_fu_452_p4;
wire   [2:0] mul_ln1345_121_fu_864_p0;
wire  signed [2:0] mul_ln1345_121_fu_864_p1;
wire  signed [5:0] sext_ln1345_65_fu_860_p1;
wire   [2:0] trunc_ln145_29_fu_462_p4;
wire   [2:0] mul_ln1345_122_fu_874_p0;
wire  signed [2:0] mul_ln1345_122_fu_874_p1;
wire  signed [5:0] sext_ln1345_66_fu_870_p1;
wire   [2:0] trunc_ln145_30_fu_472_p4;
wire   [2:0] mul_ln1345_123_fu_884_p0;
wire  signed [2:0] mul_ln1345_123_fu_884_p1;
wire  signed [5:0] sext_ln1345_67_fu_880_p1;
wire  signed [5:0] mul_ln1345_123_fu_884_p2;
wire  signed [6:0] sext_ln368_67_fu_846_p1;
wire  signed [6:0] sext_ln368_66_fu_832_p1;
wire  signed [6:0] sext_ln691_117_fu_818_p1;
wire  signed [6:0] sext_ln691_119_fu_890_p1;
wire   [2:0] trunc_ln145_31_fu_482_p4;
wire  signed [2:0] mul_ln1345_124_fu_910_p0;
wire  signed [5:0] sext_ln1345_68_fu_906_p1;
wire   [2:0] mul_ln1345_124_fu_910_p1;
wire  signed [5:0] mul_ln1345_124_fu_910_p2;
wire   [2:0] trunc_ln145_32_fu_492_p4;
wire   [2:0] mul_ln1345_125_fu_924_p0;
wire  signed [2:0] mul_ln1345_125_fu_924_p1;
wire  signed [5:0] sext_ln1345_69_fu_920_p1;
wire  signed [5:0] mul_ln1345_125_fu_924_p2;
wire   [2:0] trunc_ln145_33_fu_502_p4;
wire   [2:0] mul_ln1345_126_fu_938_p0;
wire  signed [2:0] mul_ln1345_126_fu_938_p1;
wire  signed [5:0] sext_ln1345_70_fu_934_p1;
wire  signed [5:0] mul_ln1345_126_fu_938_p2;
wire   [2:0] trunc_ln145_34_fu_512_p4;
wire   [2:0] mul_ln1345_127_fu_952_p0;
wire  signed [2:0] mul_ln1345_127_fu_952_p1;
wire  signed [5:0] sext_ln1345_71_fu_948_p1;
wire   [2:0] trunc_ln145_35_fu_522_p4;
wire   [2:0] mul_ln1345_128_fu_962_p0;
wire  signed [2:0] mul_ln1345_128_fu_962_p1;
wire  signed [5:0] sext_ln1345_72_fu_958_p1;
wire   [2:0] trunc_ln145_36_fu_532_p4;
wire   [2:0] mul_ln1345_129_fu_972_p0;
wire  signed [2:0] mul_ln1345_129_fu_972_p1;
wire  signed [5:0] sext_ln1345_73_fu_968_p1;
wire   [2:0] trunc_ln145_37_fu_542_p4;
wire   [2:0] mul_ln1345_130_fu_982_p0;
wire  signed [2:0] mul_ln1345_130_fu_982_p1;
wire  signed [5:0] sext_ln1345_74_fu_978_p1;
wire  signed [5:0] mul_ln1345_130_fu_982_p2;
wire  signed [6:0] sext_ln368_71_fu_944_p1;
wire  signed [6:0] sext_ln368_70_fu_930_p1;
wire  signed [6:0] sext_ln691_124_fu_916_p1;
wire  signed [6:0] sext_ln691_126_fu_988_p1;
wire   [2:0] trunc_ln145_38_fu_552_p4;
wire  signed [2:0] mul_ln1345_131_fu_1008_p0;
wire  signed [5:0] sext_ln1345_75_fu_1004_p1;
wire   [2:0] mul_ln1345_131_fu_1008_p1;
wire  signed [5:0] mul_ln1345_131_fu_1008_p2;
wire   [2:0] trunc_ln145_39_fu_562_p4;
wire   [2:0] mul_ln1345_132_fu_1022_p0;
wire  signed [2:0] mul_ln1345_132_fu_1022_p1;
wire  signed [5:0] sext_ln1345_76_fu_1018_p1;
wire  signed [5:0] mul_ln1345_132_fu_1022_p2;
wire   [2:0] trunc_ln145_40_fu_572_p4;
wire   [2:0] mul_ln1345_133_fu_1036_p0;
wire  signed [2:0] mul_ln1345_133_fu_1036_p1;
wire  signed [5:0] sext_ln1345_77_fu_1032_p1;
wire  signed [5:0] mul_ln1345_133_fu_1036_p2;
wire   [2:0] trunc_ln145_41_fu_582_p4;
wire   [2:0] mul_ln1345_134_fu_1050_p0;
wire  signed [2:0] mul_ln1345_134_fu_1050_p1;
wire  signed [5:0] sext_ln1345_78_fu_1046_p1;
wire   [2:0] trunc_ln145_42_fu_592_p4;
wire   [2:0] mul_ln1345_135_fu_1060_p0;
wire  signed [2:0] mul_ln1345_135_fu_1060_p1;
wire  signed [5:0] sext_ln1345_79_fu_1056_p1;
wire   [2:0] trunc_ln145_43_fu_602_p4;
wire   [2:0] mul_ln1345_136_fu_1070_p0;
wire  signed [2:0] mul_ln1345_136_fu_1070_p1;
wire  signed [5:0] sext_ln1345_80_fu_1066_p1;
wire   [2:0] trunc_ln145_44_fu_612_p4;
wire   [2:0] mul_ln1345_137_fu_1080_p0;
wire  signed [2:0] mul_ln1345_137_fu_1080_p1;
wire  signed [5:0] sext_ln1345_81_fu_1076_p1;
wire  signed [5:0] mul_ln1345_137_fu_1080_p2;
wire  signed [6:0] sext_ln368_75_fu_1042_p1;
wire  signed [6:0] sext_ln368_74_fu_1028_p1;
wire  signed [6:0] sext_ln691_131_fu_1014_p1;
wire  signed [6:0] sext_ln691_133_fu_1086_p1;
wire   [2:0] tmp_210_fu_1102_p4;
wire   [2:0] mul_ln1345_138_fu_1116_p0;
wire   [5:0] zext_ln1345_33_fu_1112_p1;
wire  signed [2:0] mul_ln1345_138_fu_1116_p1;
wire  signed [5:0] mul_ln1345_138_fu_1116_p2;
wire   [2:0] tmp_211_fu_1126_p4;
wire   [2:0] mul_ln1345_139_fu_1140_p0;
wire   [5:0] zext_ln1345_34_fu_1136_p1;
wire  signed [2:0] mul_ln1345_139_fu_1140_p1;
wire  signed [5:0] mul_ln1345_139_fu_1140_p2;
wire   [2:0] tmp_212_fu_1150_p4;
wire   [2:0] mul_ln1345_140_fu_1164_p0;
wire   [5:0] zext_ln1345_35_fu_1160_p1;
wire  signed [2:0] mul_ln1345_140_fu_1164_p1;
wire  signed [5:0] mul_ln1345_140_fu_1164_p2;
wire   [2:0] tmp_213_fu_1174_p4;
wire   [2:0] mul_ln1345_141_fu_1188_p0;
wire   [5:0] zext_ln1345_36_fu_1184_p1;
wire  signed [2:0] mul_ln1345_141_fu_1188_p1;
wire   [2:0] tmp_214_fu_1194_p4;
wire   [2:0] mul_ln1345_142_fu_1208_p0;
wire   [5:0] zext_ln1345_37_fu_1204_p1;
wire  signed [2:0] mul_ln1345_142_fu_1208_p1;
wire   [2:0] tmp_215_fu_1214_p4;
wire   [2:0] mul_ln1345_143_fu_1228_p0;
wire   [5:0] zext_ln1345_38_fu_1224_p1;
wire  signed [2:0] mul_ln1345_143_fu_1228_p1;
wire   [2:0] tmp_216_fu_1234_p4;
wire   [2:0] mul_ln1345_144_fu_1248_p0;
wire   [5:0] zext_ln1345_39_fu_1244_p1;
wire  signed [2:0] mul_ln1345_144_fu_1248_p1;
wire  signed [5:0] mul_ln1345_144_fu_1248_p2;
wire  signed [6:0] sext_ln368_79_fu_1170_p1;
wire  signed [6:0] sext_ln368_78_fu_1146_p1;
wire  signed [6:0] sext_ln691_138_fu_1122_p1;
wire  signed [6:0] sext_ln691_140_fu_1254_p1;
wire   [2:0] mul_ln1345_145_fu_1270_p0;
wire  signed [2:0] mul_ln1345_145_fu_1270_p1;
wire  signed [5:0] mul_ln1345_145_fu_1270_p2;
wire   [2:0] mul_ln1345_146_fu_1280_p0;
wire  signed [2:0] mul_ln1345_146_fu_1280_p1;
wire  signed [5:0] mul_ln1345_146_fu_1280_p2;
wire   [2:0] mul_ln1345_147_fu_1290_p0;
wire  signed [2:0] mul_ln1345_147_fu_1290_p1;
wire  signed [5:0] mul_ln1345_147_fu_1290_p2;
wire   [2:0] mul_ln1345_148_fu_1300_p0;
wire  signed [2:0] mul_ln1345_148_fu_1300_p1;
wire   [2:0] mul_ln1345_149_fu_1306_p0;
wire  signed [2:0] mul_ln1345_149_fu_1306_p1;
wire   [2:0] mul_ln1345_150_fu_1312_p0;
wire  signed [2:0] mul_ln1345_150_fu_1312_p1;
wire   [2:0] mul_ln1345_151_fu_1318_p0;
wire  signed [2:0] mul_ln1345_151_fu_1318_p1;
wire  signed [5:0] mul_ln1345_151_fu_1318_p2;
wire  signed [6:0] sext_ln368_83_fu_1296_p1;
wire  signed [6:0] sext_ln368_82_fu_1286_p1;
wire  signed [6:0] sext_ln691_145_fu_1276_p1;
wire  signed [6:0] sext_ln691_147_fu_1324_p1;
wire   [2:0] mul_ln1345_152_fu_1340_p0;
wire  signed [2:0] mul_ln1345_152_fu_1340_p1;
wire  signed [5:0] mul_ln1345_152_fu_1340_p2;
wire   [2:0] mul_ln1345_153_fu_1350_p0;
wire  signed [2:0] mul_ln1345_153_fu_1350_p1;
wire  signed [5:0] mul_ln1345_153_fu_1350_p2;
wire   [2:0] mul_ln1345_154_fu_1360_p0;
wire  signed [2:0] mul_ln1345_154_fu_1360_p1;
wire  signed [5:0] mul_ln1345_154_fu_1360_p2;
wire   [2:0] mul_ln1345_155_fu_1370_p0;
wire  signed [2:0] mul_ln1345_155_fu_1370_p1;
wire   [2:0] mul_ln1345_156_fu_1376_p0;
wire  signed [2:0] mul_ln1345_156_fu_1376_p1;
wire   [2:0] mul_ln1345_157_fu_1382_p0;
wire  signed [2:0] mul_ln1345_157_fu_1382_p1;
wire   [2:0] mul_ln1345_158_fu_1388_p0;
wire  signed [2:0] mul_ln1345_158_fu_1388_p1;
wire  signed [5:0] mul_ln1345_158_fu_1388_p2;
wire  signed [6:0] sext_ln368_87_fu_1366_p1;
wire  signed [6:0] sext_ln368_86_fu_1356_p1;
wire  signed [6:0] sext_ln691_152_fu_1346_p1;
wire  signed [6:0] sext_ln691_154_fu_1394_p1;
wire   [2:0] mul_ln1345_159_fu_1410_p0;
wire  signed [2:0] mul_ln1345_159_fu_1410_p1;
wire  signed [5:0] mul_ln1345_159_fu_1410_p2;
wire   [2:0] mul_ln1345_160_fu_1420_p0;
wire  signed [2:0] mul_ln1345_160_fu_1420_p1;
wire  signed [5:0] mul_ln1345_160_fu_1420_p2;
wire   [2:0] mul_ln1345_161_fu_1430_p0;
wire  signed [2:0] mul_ln1345_161_fu_1430_p1;
wire  signed [5:0] mul_ln1345_161_fu_1430_p2;
wire   [2:0] mul_ln1345_162_fu_1440_p0;
wire  signed [2:0] mul_ln1345_162_fu_1440_p1;
wire   [2:0] mul_ln1345_163_fu_1446_p0;
wire  signed [2:0] mul_ln1345_163_fu_1446_p1;
wire   [2:0] mul_ln1345_164_fu_1452_p0;
wire  signed [2:0] mul_ln1345_164_fu_1452_p1;
wire   [2:0] mul_ln1345_165_fu_1458_p0;
wire  signed [2:0] mul_ln1345_165_fu_1458_p1;
wire  signed [5:0] mul_ln1345_165_fu_1458_p2;
wire  signed [6:0] sext_ln368_91_fu_1436_p1;
wire  signed [6:0] sext_ln368_90_fu_1426_p1;
wire  signed [6:0] sext_ln691_159_fu_1416_p1;
wire  signed [6:0] sext_ln691_161_fu_1464_p1;
wire   [87:0] select_ln342_fu_1489_p3;
wire   [10:0] trunc_ln691_fu_1496_p1;
wire  signed [10:0] sext_ln691_111_fu_1503_p1;
wire  signed [6:0] sext_ln368_65_fu_1506_p1;
wire  signed [6:0] sext_ln368_64_fu_1500_p1;
wire   [6:0] add_ln691_112_fu_1515_p2;
wire  signed [10:0] sext_ln691_113_fu_1521_p1;
wire   [10:0] add_ln691_fu_1509_p2;
wire  signed [7:0] sext_ln691_115_fu_1534_p1;
wire  signed [7:0] sext_ln691_114_fu_1531_p1;
wire   [7:0] add_ln691_116_fu_1537_p2;
wire  signed [10:0] sext_ln691_116_fu_1543_p1;
wire   [10:0] add_ln691_113_fu_1525_p2;
wire   [10:0] tmp_s_fu_1553_p4;
wire  signed [10:0] sext_ln691_118_fu_1566_p1;
wire  signed [6:0] sext_ln368_69_fu_1569_p1;
wire  signed [6:0] sext_ln368_68_fu_1563_p1;
wire   [6:0] add_ln691_119_fu_1578_p2;
wire  signed [10:0] sext_ln691_120_fu_1584_p1;
wire   [10:0] add_ln691_118_fu_1572_p2;
wire  signed [7:0] sext_ln691_122_fu_1597_p1;
wire  signed [7:0] sext_ln691_121_fu_1594_p1;
wire   [7:0] add_ln691_123_fu_1600_p2;
wire  signed [10:0] sext_ln691_123_fu_1606_p1;
wire   [10:0] add_ln691_120_fu_1588_p2;
wire   [10:0] tmp_186_fu_1616_p4;
wire  signed [10:0] sext_ln691_125_fu_1629_p1;
wire  signed [6:0] sext_ln368_73_fu_1632_p1;
wire  signed [6:0] sext_ln368_72_fu_1626_p1;
wire   [6:0] add_ln691_126_fu_1641_p2;
wire  signed [10:0] sext_ln691_127_fu_1647_p1;
wire   [10:0] add_ln691_125_fu_1635_p2;
wire  signed [7:0] sext_ln691_129_fu_1660_p1;
wire  signed [7:0] sext_ln691_128_fu_1657_p1;
wire   [7:0] add_ln691_130_fu_1663_p2;
wire  signed [10:0] sext_ln691_130_fu_1669_p1;
wire   [10:0] add_ln691_127_fu_1651_p2;
wire   [10:0] tmp_187_fu_1679_p4;
wire  signed [10:0] sext_ln691_132_fu_1692_p1;
wire  signed [6:0] sext_ln368_77_fu_1695_p1;
wire  signed [6:0] sext_ln368_76_fu_1689_p1;
wire   [6:0] add_ln691_133_fu_1704_p2;
wire  signed [10:0] sext_ln691_134_fu_1710_p1;
wire   [10:0] add_ln691_132_fu_1698_p2;
wire  signed [7:0] sext_ln691_136_fu_1723_p1;
wire  signed [7:0] sext_ln691_135_fu_1720_p1;
wire   [7:0] add_ln691_137_fu_1726_p2;
wire  signed [10:0] sext_ln691_137_fu_1732_p1;
wire   [10:0] add_ln691_134_fu_1714_p2;
wire   [10:0] tmp_188_fu_1742_p4;
wire  signed [10:0] sext_ln691_139_fu_1755_p1;
wire  signed [6:0] sext_ln368_81_fu_1758_p1;
wire  signed [6:0] sext_ln368_80_fu_1752_p1;
wire   [6:0] add_ln691_140_fu_1767_p2;
wire  signed [10:0] sext_ln691_141_fu_1773_p1;
wire   [10:0] add_ln691_139_fu_1761_p2;
wire  signed [7:0] sext_ln691_143_fu_1786_p1;
wire  signed [7:0] sext_ln691_142_fu_1783_p1;
wire   [7:0] add_ln691_144_fu_1789_p2;
wire  signed [10:0] sext_ln691_144_fu_1795_p1;
wire   [10:0] add_ln691_141_fu_1777_p2;
wire   [10:0] tmp_189_fu_1805_p4;
wire  signed [10:0] sext_ln691_146_fu_1818_p1;
wire  signed [6:0] sext_ln368_85_fu_1821_p1;
wire  signed [6:0] sext_ln368_84_fu_1815_p1;
wire   [6:0] add_ln691_147_fu_1830_p2;
wire  signed [10:0] sext_ln691_148_fu_1836_p1;
wire   [10:0] add_ln691_146_fu_1824_p2;
wire  signed [7:0] sext_ln691_150_fu_1849_p1;
wire  signed [7:0] sext_ln691_149_fu_1846_p1;
wire   [7:0] add_ln691_151_fu_1852_p2;
wire  signed [10:0] sext_ln691_151_fu_1858_p1;
wire   [10:0] add_ln691_148_fu_1840_p2;
wire   [10:0] tmp_190_fu_1868_p4;
wire  signed [10:0] sext_ln691_153_fu_1881_p1;
wire  signed [6:0] sext_ln368_89_fu_1884_p1;
wire  signed [6:0] sext_ln368_88_fu_1878_p1;
wire   [6:0] add_ln691_154_fu_1893_p2;
wire  signed [10:0] sext_ln691_155_fu_1899_p1;
wire   [10:0] add_ln691_153_fu_1887_p2;
wire  signed [7:0] sext_ln691_157_fu_1912_p1;
wire  signed [7:0] sext_ln691_156_fu_1909_p1;
wire   [7:0] add_ln691_158_fu_1915_p2;
wire  signed [10:0] sext_ln691_158_fu_1921_p1;
wire   [10:0] add_ln691_155_fu_1903_p2;
wire   [10:0] tmp_191_fu_1931_p4;
wire  signed [10:0] sext_ln691_160_fu_1944_p1;
wire  signed [6:0] sext_ln368_93_fu_1947_p1;
wire  signed [6:0] sext_ln368_92_fu_1941_p1;
wire   [6:0] add_ln691_161_fu_1956_p2;
wire  signed [10:0] sext_ln691_162_fu_1962_p1;
wire   [10:0] add_ln691_160_fu_1950_p2;
wire  signed [7:0] sext_ln691_164_fu_1975_p1;
wire  signed [7:0] sext_ln691_163_fu_1972_p1;
wire   [7:0] add_ln691_165_fu_1978_p2;
wire  signed [10:0] sext_ln691_165_fu_1984_p1;
wire   [10:0] add_ln691_162_fu_1966_p2;
wire   [122:0] tmp_193_fu_2024_p16;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1002(
    .din0(mul_ln1345_fu_630_p0),
    .din1(mul_ln1345_fu_630_p1),
    .dout(mul_ln1345_fu_630_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1003(
    .din0(mul_ln1345_111_fu_658_p0),
    .din1(mul_ln1345_111_fu_658_p1),
    .dout(mul_ln1345_111_fu_658_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1004(
    .din0(mul_ln1345_112_fu_686_p0),
    .din1(mul_ln1345_112_fu_686_p1),
    .dout(mul_ln1345_112_fu_686_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1005(
    .din0(mul_ln1345_113_fu_714_p0),
    .din1(mul_ln1345_113_fu_714_p1),
    .dout(mul_ln1345_113_fu_714_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1006(
    .din0(mul_ln1345_114_fu_738_p0),
    .din1(mul_ln1345_114_fu_738_p1),
    .dout(mul_ln1345_114_fu_738_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1007(
    .din0(mul_ln1345_115_fu_762_p0),
    .din1(mul_ln1345_115_fu_762_p1),
    .dout(mul_ln1345_115_fu_762_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1008(
    .din0(mul_ln1345_116_fu_786_p0),
    .din1(mul_ln1345_116_fu_786_p1),
    .dout(mul_ln1345_116_fu_786_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1009(
    .din0(mul_ln1345_117_fu_812_p0),
    .din1(mul_ln1345_117_fu_812_p1),
    .dout(mul_ln1345_117_fu_812_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1010(
    .din0(mul_ln1345_118_fu_826_p0),
    .din1(mul_ln1345_118_fu_826_p1),
    .dout(mul_ln1345_118_fu_826_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1011(
    .din0(mul_ln1345_119_fu_840_p0),
    .din1(mul_ln1345_119_fu_840_p1),
    .dout(mul_ln1345_119_fu_840_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1012(
    .din0(mul_ln1345_120_fu_854_p0),
    .din1(mul_ln1345_120_fu_854_p1),
    .dout(mul_ln1345_120_fu_854_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1013(
    .din0(mul_ln1345_121_fu_864_p0),
    .din1(mul_ln1345_121_fu_864_p1),
    .dout(mul_ln1345_121_fu_864_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1014(
    .din0(mul_ln1345_122_fu_874_p0),
    .din1(mul_ln1345_122_fu_874_p1),
    .dout(mul_ln1345_122_fu_874_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1015(
    .din0(mul_ln1345_123_fu_884_p0),
    .din1(mul_ln1345_123_fu_884_p1),
    .dout(mul_ln1345_123_fu_884_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1016(
    .din0(mul_ln1345_124_fu_910_p0),
    .din1(mul_ln1345_124_fu_910_p1),
    .dout(mul_ln1345_124_fu_910_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1017(
    .din0(mul_ln1345_125_fu_924_p0),
    .din1(mul_ln1345_125_fu_924_p1),
    .dout(mul_ln1345_125_fu_924_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1018(
    .din0(mul_ln1345_126_fu_938_p0),
    .din1(mul_ln1345_126_fu_938_p1),
    .dout(mul_ln1345_126_fu_938_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1019(
    .din0(mul_ln1345_127_fu_952_p0),
    .din1(mul_ln1345_127_fu_952_p1),
    .dout(mul_ln1345_127_fu_952_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1020(
    .din0(mul_ln1345_128_fu_962_p0),
    .din1(mul_ln1345_128_fu_962_p1),
    .dout(mul_ln1345_128_fu_962_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1021(
    .din0(mul_ln1345_129_fu_972_p0),
    .din1(mul_ln1345_129_fu_972_p1),
    .dout(mul_ln1345_129_fu_972_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1022(
    .din0(mul_ln1345_130_fu_982_p0),
    .din1(mul_ln1345_130_fu_982_p1),
    .dout(mul_ln1345_130_fu_982_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U1023(
    .din0(mul_ln1345_131_fu_1008_p0),
    .din1(mul_ln1345_131_fu_1008_p1),
    .dout(mul_ln1345_131_fu_1008_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1024(
    .din0(mul_ln1345_132_fu_1022_p0),
    .din1(mul_ln1345_132_fu_1022_p1),
    .dout(mul_ln1345_132_fu_1022_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1025(
    .din0(mul_ln1345_133_fu_1036_p0),
    .din1(mul_ln1345_133_fu_1036_p1),
    .dout(mul_ln1345_133_fu_1036_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1026(
    .din0(mul_ln1345_134_fu_1050_p0),
    .din1(mul_ln1345_134_fu_1050_p1),
    .dout(mul_ln1345_134_fu_1050_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1027(
    .din0(mul_ln1345_135_fu_1060_p0),
    .din1(mul_ln1345_135_fu_1060_p1),
    .dout(mul_ln1345_135_fu_1060_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1028(
    .din0(mul_ln1345_136_fu_1070_p0),
    .din1(mul_ln1345_136_fu_1070_p1),
    .dout(mul_ln1345_136_fu_1070_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1029(
    .din0(mul_ln1345_137_fu_1080_p0),
    .din1(mul_ln1345_137_fu_1080_p1),
    .dout(mul_ln1345_137_fu_1080_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1030(
    .din0(mul_ln1345_138_fu_1116_p0),
    .din1(mul_ln1345_138_fu_1116_p1),
    .dout(mul_ln1345_138_fu_1116_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1031(
    .din0(mul_ln1345_139_fu_1140_p0),
    .din1(mul_ln1345_139_fu_1140_p1),
    .dout(mul_ln1345_139_fu_1140_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1032(
    .din0(mul_ln1345_140_fu_1164_p0),
    .din1(mul_ln1345_140_fu_1164_p1),
    .dout(mul_ln1345_140_fu_1164_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1033(
    .din0(mul_ln1345_141_fu_1188_p0),
    .din1(mul_ln1345_141_fu_1188_p1),
    .dout(mul_ln1345_141_fu_1188_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1034(
    .din0(mul_ln1345_142_fu_1208_p0),
    .din1(mul_ln1345_142_fu_1208_p1),
    .dout(mul_ln1345_142_fu_1208_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1035(
    .din0(mul_ln1345_143_fu_1228_p0),
    .din1(mul_ln1345_143_fu_1228_p1),
    .dout(mul_ln1345_143_fu_1228_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1036(
    .din0(mul_ln1345_144_fu_1248_p0),
    .din1(mul_ln1345_144_fu_1248_p1),
    .dout(mul_ln1345_144_fu_1248_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1037(
    .din0(mul_ln1345_145_fu_1270_p0),
    .din1(mul_ln1345_145_fu_1270_p1),
    .dout(mul_ln1345_145_fu_1270_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1038(
    .din0(mul_ln1345_146_fu_1280_p0),
    .din1(mul_ln1345_146_fu_1280_p1),
    .dout(mul_ln1345_146_fu_1280_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1039(
    .din0(mul_ln1345_147_fu_1290_p0),
    .din1(mul_ln1345_147_fu_1290_p1),
    .dout(mul_ln1345_147_fu_1290_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1040(
    .din0(mul_ln1345_148_fu_1300_p0),
    .din1(mul_ln1345_148_fu_1300_p1),
    .dout(mul_ln1345_148_fu_1300_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1041(
    .din0(mul_ln1345_149_fu_1306_p0),
    .din1(mul_ln1345_149_fu_1306_p1),
    .dout(mul_ln1345_149_fu_1306_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1042(
    .din0(mul_ln1345_150_fu_1312_p0),
    .din1(mul_ln1345_150_fu_1312_p1),
    .dout(mul_ln1345_150_fu_1312_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1043(
    .din0(mul_ln1345_151_fu_1318_p0),
    .din1(mul_ln1345_151_fu_1318_p1),
    .dout(mul_ln1345_151_fu_1318_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1044(
    .din0(mul_ln1345_152_fu_1340_p0),
    .din1(mul_ln1345_152_fu_1340_p1),
    .dout(mul_ln1345_152_fu_1340_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1045(
    .din0(mul_ln1345_153_fu_1350_p0),
    .din1(mul_ln1345_153_fu_1350_p1),
    .dout(mul_ln1345_153_fu_1350_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1046(
    .din0(mul_ln1345_154_fu_1360_p0),
    .din1(mul_ln1345_154_fu_1360_p1),
    .dout(mul_ln1345_154_fu_1360_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1047(
    .din0(mul_ln1345_155_fu_1370_p0),
    .din1(mul_ln1345_155_fu_1370_p1),
    .dout(mul_ln1345_155_fu_1370_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1048(
    .din0(mul_ln1345_156_fu_1376_p0),
    .din1(mul_ln1345_156_fu_1376_p1),
    .dout(mul_ln1345_156_fu_1376_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1049(
    .din0(mul_ln1345_157_fu_1382_p0),
    .din1(mul_ln1345_157_fu_1382_p1),
    .dout(mul_ln1345_157_fu_1382_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1050(
    .din0(mul_ln1345_158_fu_1388_p0),
    .din1(mul_ln1345_158_fu_1388_p1),
    .dout(mul_ln1345_158_fu_1388_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1051(
    .din0(mul_ln1345_159_fu_1410_p0),
    .din1(mul_ln1345_159_fu_1410_p1),
    .dout(mul_ln1345_159_fu_1410_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1052(
    .din0(mul_ln1345_160_fu_1420_p0),
    .din1(mul_ln1345_160_fu_1420_p1),
    .dout(mul_ln1345_160_fu_1420_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1053(
    .din0(mul_ln1345_161_fu_1430_p0),
    .din1(mul_ln1345_161_fu_1430_p1),
    .dout(mul_ln1345_161_fu_1430_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1054(
    .din0(mul_ln1345_162_fu_1440_p0),
    .din1(mul_ln1345_162_fu_1440_p1),
    .dout(mul_ln1345_162_fu_1440_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1055(
    .din0(mul_ln1345_163_fu_1446_p0),
    .din1(mul_ln1345_163_fu_1446_p1),
    .dout(mul_ln1345_163_fu_1446_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1056(
    .din0(mul_ln1345_164_fu_1452_p0),
    .din1(mul_ln1345_164_fu_1452_p1),
    .dout(mul_ln1345_164_fu_1452_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U1057(
    .din0(mul_ln1345_165_fu_1458_p0),
    .din1(mul_ln1345_165_fu_1458_p1),
    .dout(mul_ln1345_165_fu_1458_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_265 <= cit_6_fu_1480_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_265 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten13_reg_243 <= add_ln336_fu_276_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_243 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten_reg_254 <= select_ln337_6_fu_300_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_254 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_114_reg_2106 <= add_ln691_114_fu_796_p2;
        add_ln691_115_reg_2111 <= add_ln691_115_fu_802_p2;
        add_ln691_121_reg_2131 <= add_ln691_121_fu_894_p2;
        add_ln691_122_reg_2136 <= add_ln691_122_fu_900_p2;
        add_ln691_128_reg_2156 <= add_ln691_128_fu_992_p2;
        add_ln691_129_reg_2161 <= add_ln691_129_fu_998_p2;
        add_ln691_135_reg_2181 <= add_ln691_135_fu_1090_p2;
        add_ln691_136_reg_2186 <= add_ln691_136_fu_1096_p2;
        add_ln691_142_reg_2206 <= add_ln691_142_fu_1258_p2;
        add_ln691_143_reg_2211 <= add_ln691_143_fu_1264_p2;
        add_ln691_149_reg_2231 <= add_ln691_149_fu_1328_p2;
        add_ln691_150_reg_2236 <= add_ln691_150_fu_1334_p2;
        add_ln691_156_reg_2256 <= add_ln691_156_fu_1398_p2;
        add_ln691_157_reg_2261 <= add_ln691_157_fu_1404_p2;
        add_ln691_163_reg_2281 <= add_ln691_163_fu_1468_p2;
        add_ln691_164_reg_2286 <= add_ln691_164_fu_1474_p2;
        icmp_ln342_reg_2086 <= icmp_ln342_fu_338_p2;
        mul_ln1345_113_reg_2091 <= mul_ln1345_113_fu_714_p2;
        mul_ln1345_114_reg_2096 <= mul_ln1345_114_fu_738_p2;
        mul_ln1345_115_reg_2101 <= mul_ln1345_115_fu_762_p2;
        mul_ln1345_120_reg_2116 <= mul_ln1345_120_fu_854_p2;
        mul_ln1345_121_reg_2121 <= mul_ln1345_121_fu_864_p2;
        mul_ln1345_122_reg_2126 <= mul_ln1345_122_fu_874_p2;
        mul_ln1345_127_reg_2141 <= mul_ln1345_127_fu_952_p2;
        mul_ln1345_128_reg_2146 <= mul_ln1345_128_fu_962_p2;
        mul_ln1345_129_reg_2151 <= mul_ln1345_129_fu_972_p2;
        mul_ln1345_134_reg_2166 <= mul_ln1345_134_fu_1050_p2;
        mul_ln1345_135_reg_2171 <= mul_ln1345_135_fu_1060_p2;
        mul_ln1345_136_reg_2176 <= mul_ln1345_136_fu_1070_p2;
        mul_ln1345_141_reg_2191 <= mul_ln1345_141_fu_1188_p2;
        mul_ln1345_142_reg_2196 <= mul_ln1345_142_fu_1208_p2;
        mul_ln1345_143_reg_2201 <= mul_ln1345_143_fu_1228_p2;
        mul_ln1345_148_reg_2216 <= mul_ln1345_148_fu_1300_p2;
        mul_ln1345_149_reg_2221 <= mul_ln1345_149_fu_1306_p2;
        mul_ln1345_150_reg_2226 <= mul_ln1345_150_fu_1312_p2;
        mul_ln1345_155_reg_2241 <= mul_ln1345_155_fu_1370_p2;
        mul_ln1345_156_reg_2246 <= mul_ln1345_156_fu_1376_p2;
        mul_ln1345_157_reg_2251 <= mul_ln1345_157_fu_1382_p2;
        mul_ln1345_162_reg_2266 <= mul_ln1345_162_fu_1440_p2;
        mul_ln1345_163_reg_2271 <= mul_ln1345_163_fu_1446_p2;
        mul_ln1345_164_reg_2276 <= mul_ln1345_164_fu_1452_p2;
        select_ln337_reg_2081 <= select_ln337_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        add_ln691_117_reg_2296 <= add_ln691_117_fu_1547_p2;
        add_ln691_124_reg_2301 <= add_ln691_124_fu_1610_p2;
        add_ln691_131_reg_2306 <= add_ln691_131_fu_1673_p2;
        add_ln691_138_reg_2311 <= add_ln691_138_fu_1736_p2;
        add_ln691_145_reg_2316 <= add_ln691_145_fu_1799_p2;
        add_ln691_152_reg_2321 <= add_ln691_152_fu_1862_p2;
        add_ln691_159_reg_2326 <= add_ln691_159_fu_1925_p2;
        add_ln691_166_reg_2331 <= add_ln691_166_fu_1988_p2;
        icmp_ln378_reg_2336 <= icmp_ln378_fu_2014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2066 <= icmp_ln336_fu_282_p2;
        icmp_ln336_reg_2066_pp0_iter1_reg <= icmp_ln336_reg_2066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        icmp_ln337_reg_2070 <= icmp_ln337_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_220 <= tmp_192_fu_1994_p9;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_276_p2 = (indvar_flatten13_reg_243 + 16'd1);

assign add_ln337_fu_294_p2 = (indvar_flatten_reg_254 + 10'd1);

assign add_ln691_112_fu_1515_p2 = ($signed(sext_ln368_65_fu_1506_p1) + $signed(sext_ln368_64_fu_1500_p1));

assign add_ln691_113_fu_1525_p2 = ($signed(sext_ln691_113_fu_1521_p1) + $signed(add_ln691_fu_1509_p2));

assign add_ln691_114_fu_796_p2 = ($signed(sext_ln368_63_fu_692_p1) + $signed(sext_ln368_fu_664_p1));

assign add_ln691_115_fu_802_p2 = ($signed(sext_ln691_fu_636_p1) + $signed(sext_ln691_112_fu_792_p1));

assign add_ln691_116_fu_1537_p2 = ($signed(sext_ln691_115_fu_1534_p1) + $signed(sext_ln691_114_fu_1531_p1));

assign add_ln691_117_fu_1547_p2 = ($signed(sext_ln691_116_fu_1543_p1) + $signed(add_ln691_113_fu_1525_p2));

assign add_ln691_118_fu_1572_p2 = ($signed(tmp_s_fu_1553_p4) + $signed(sext_ln691_118_fu_1566_p1));

assign add_ln691_119_fu_1578_p2 = ($signed(sext_ln368_69_fu_1569_p1) + $signed(sext_ln368_68_fu_1563_p1));

assign add_ln691_120_fu_1588_p2 = ($signed(sext_ln691_120_fu_1584_p1) + $signed(add_ln691_118_fu_1572_p2));

assign add_ln691_121_fu_894_p2 = ($signed(sext_ln368_67_fu_846_p1) + $signed(sext_ln368_66_fu_832_p1));

assign add_ln691_122_fu_900_p2 = ($signed(sext_ln691_117_fu_818_p1) + $signed(sext_ln691_119_fu_890_p1));

assign add_ln691_123_fu_1600_p2 = ($signed(sext_ln691_122_fu_1597_p1) + $signed(sext_ln691_121_fu_1594_p1));

assign add_ln691_124_fu_1610_p2 = ($signed(sext_ln691_123_fu_1606_p1) + $signed(add_ln691_120_fu_1588_p2));

assign add_ln691_125_fu_1635_p2 = ($signed(tmp_186_fu_1616_p4) + $signed(sext_ln691_125_fu_1629_p1));

assign add_ln691_126_fu_1641_p2 = ($signed(sext_ln368_73_fu_1632_p1) + $signed(sext_ln368_72_fu_1626_p1));

assign add_ln691_127_fu_1651_p2 = ($signed(sext_ln691_127_fu_1647_p1) + $signed(add_ln691_125_fu_1635_p2));

assign add_ln691_128_fu_992_p2 = ($signed(sext_ln368_71_fu_944_p1) + $signed(sext_ln368_70_fu_930_p1));

assign add_ln691_129_fu_998_p2 = ($signed(sext_ln691_124_fu_916_p1) + $signed(sext_ln691_126_fu_988_p1));

assign add_ln691_130_fu_1663_p2 = ($signed(sext_ln691_129_fu_1660_p1) + $signed(sext_ln691_128_fu_1657_p1));

assign add_ln691_131_fu_1673_p2 = ($signed(sext_ln691_130_fu_1669_p1) + $signed(add_ln691_127_fu_1651_p2));

assign add_ln691_132_fu_1698_p2 = ($signed(tmp_187_fu_1679_p4) + $signed(sext_ln691_132_fu_1692_p1));

assign add_ln691_133_fu_1704_p2 = ($signed(sext_ln368_77_fu_1695_p1) + $signed(sext_ln368_76_fu_1689_p1));

assign add_ln691_134_fu_1714_p2 = ($signed(sext_ln691_134_fu_1710_p1) + $signed(add_ln691_132_fu_1698_p2));

assign add_ln691_135_fu_1090_p2 = ($signed(sext_ln368_75_fu_1042_p1) + $signed(sext_ln368_74_fu_1028_p1));

assign add_ln691_136_fu_1096_p2 = ($signed(sext_ln691_131_fu_1014_p1) + $signed(sext_ln691_133_fu_1086_p1));

assign add_ln691_137_fu_1726_p2 = ($signed(sext_ln691_136_fu_1723_p1) + $signed(sext_ln691_135_fu_1720_p1));

assign add_ln691_138_fu_1736_p2 = ($signed(sext_ln691_137_fu_1732_p1) + $signed(add_ln691_134_fu_1714_p2));

assign add_ln691_139_fu_1761_p2 = ($signed(tmp_188_fu_1742_p4) + $signed(sext_ln691_139_fu_1755_p1));

assign add_ln691_140_fu_1767_p2 = ($signed(sext_ln368_81_fu_1758_p1) + $signed(sext_ln368_80_fu_1752_p1));

assign add_ln691_141_fu_1777_p2 = ($signed(sext_ln691_141_fu_1773_p1) + $signed(add_ln691_139_fu_1761_p2));

assign add_ln691_142_fu_1258_p2 = ($signed(sext_ln368_79_fu_1170_p1) + $signed(sext_ln368_78_fu_1146_p1));

assign add_ln691_143_fu_1264_p2 = ($signed(sext_ln691_138_fu_1122_p1) + $signed(sext_ln691_140_fu_1254_p1));

assign add_ln691_144_fu_1789_p2 = ($signed(sext_ln691_143_fu_1786_p1) + $signed(sext_ln691_142_fu_1783_p1));

assign add_ln691_145_fu_1799_p2 = ($signed(sext_ln691_144_fu_1795_p1) + $signed(add_ln691_141_fu_1777_p2));

assign add_ln691_146_fu_1824_p2 = ($signed(tmp_189_fu_1805_p4) + $signed(sext_ln691_146_fu_1818_p1));

assign add_ln691_147_fu_1830_p2 = ($signed(sext_ln368_85_fu_1821_p1) + $signed(sext_ln368_84_fu_1815_p1));

assign add_ln691_148_fu_1840_p2 = ($signed(sext_ln691_148_fu_1836_p1) + $signed(add_ln691_146_fu_1824_p2));

assign add_ln691_149_fu_1328_p2 = ($signed(sext_ln368_83_fu_1296_p1) + $signed(sext_ln368_82_fu_1286_p1));

assign add_ln691_150_fu_1334_p2 = ($signed(sext_ln691_145_fu_1276_p1) + $signed(sext_ln691_147_fu_1324_p1));

assign add_ln691_151_fu_1852_p2 = ($signed(sext_ln691_150_fu_1849_p1) + $signed(sext_ln691_149_fu_1846_p1));

assign add_ln691_152_fu_1862_p2 = ($signed(sext_ln691_151_fu_1858_p1) + $signed(add_ln691_148_fu_1840_p2));

assign add_ln691_153_fu_1887_p2 = ($signed(tmp_190_fu_1868_p4) + $signed(sext_ln691_153_fu_1881_p1));

assign add_ln691_154_fu_1893_p2 = ($signed(sext_ln368_89_fu_1884_p1) + $signed(sext_ln368_88_fu_1878_p1));

assign add_ln691_155_fu_1903_p2 = ($signed(sext_ln691_155_fu_1899_p1) + $signed(add_ln691_153_fu_1887_p2));

assign add_ln691_156_fu_1398_p2 = ($signed(sext_ln368_87_fu_1366_p1) + $signed(sext_ln368_86_fu_1356_p1));

assign add_ln691_157_fu_1404_p2 = ($signed(sext_ln691_152_fu_1346_p1) + $signed(sext_ln691_154_fu_1394_p1));

assign add_ln691_158_fu_1915_p2 = ($signed(sext_ln691_157_fu_1912_p1) + $signed(sext_ln691_156_fu_1909_p1));

assign add_ln691_159_fu_1925_p2 = ($signed(sext_ln691_158_fu_1921_p1) + $signed(add_ln691_155_fu_1903_p2));

assign add_ln691_160_fu_1950_p2 = ($signed(tmp_191_fu_1931_p4) + $signed(sext_ln691_160_fu_1944_p1));

assign add_ln691_161_fu_1956_p2 = ($signed(sext_ln368_93_fu_1947_p1) + $signed(sext_ln368_92_fu_1941_p1));

assign add_ln691_162_fu_1966_p2 = ($signed(sext_ln691_162_fu_1962_p1) + $signed(add_ln691_160_fu_1950_p2));

assign add_ln691_163_fu_1468_p2 = ($signed(sext_ln368_91_fu_1436_p1) + $signed(sext_ln368_90_fu_1426_p1));

assign add_ln691_164_fu_1474_p2 = ($signed(sext_ln691_159_fu_1416_p1) + $signed(sext_ln691_161_fu_1464_p1));

assign add_ln691_165_fu_1978_p2 = ($signed(sext_ln691_164_fu_1975_p1) + $signed(sext_ln691_163_fu_1972_p1));

assign add_ln691_166_fu_1988_p2 = ($signed(sext_ln691_165_fu_1984_p1) + $signed(add_ln691_162_fu_1966_p2));

assign add_ln691_fu_1509_p2 = ($signed(trunc_ln691_fu_1496_p1) + $signed(sext_ln691_111_fu_1503_p1));

assign and_ln336_fu_319_p2 = (xor_ln336_fu_308_p2 & icmp_ln338_fu_313_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2336 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_6_fu_1480_p2 = (select_ln337_fu_330_p3 + 5'd1);

assign icmp_ln336_fu_282_p2 = ((indvar_flatten13_reg_243 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_288_p2 = ((indvar_flatten_reg_254 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_313_p2 = ((cit_reg_265 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_338_p2 = ((select_ln337_fu_330_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2014_p2 = ((select_ln337_reg_2081 == 5'd27) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_193_fu_2024_p16;

assign mul_ln1345_111_fu_658_p0 = zext_ln1345_27_fu_650_p1;

assign mul_ln1345_111_fu_658_p1 = sext_ln1345_55_fu_654_p1;

assign mul_ln1345_112_fu_686_p0 = zext_ln1345_28_fu_678_p1;

assign mul_ln1345_112_fu_686_p1 = sext_ln1345_56_fu_682_p1;

assign mul_ln1345_113_fu_714_p0 = zext_ln1345_29_fu_706_p1;

assign mul_ln1345_113_fu_714_p1 = sext_ln1345_57_fu_710_p1;

assign mul_ln1345_114_fu_738_p0 = zext_ln1345_30_fu_730_p1;

assign mul_ln1345_114_fu_738_p1 = sext_ln1345_58_fu_734_p1;

assign mul_ln1345_115_fu_762_p0 = zext_ln1345_31_fu_754_p1;

assign mul_ln1345_115_fu_762_p1 = sext_ln1345_59_fu_758_p1;

assign mul_ln1345_116_fu_786_p0 = zext_ln1345_32_fu_778_p1;

assign mul_ln1345_116_fu_786_p1 = sext_ln1345_60_fu_782_p1;

assign mul_ln1345_117_fu_812_p0 = sext_ln1345_61_fu_808_p1;

assign mul_ln1345_117_fu_812_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_118_fu_826_p0 = zext_ln1345_27_fu_650_p1;

assign mul_ln1345_118_fu_826_p1 = sext_ln1345_62_fu_822_p1;

assign mul_ln1345_119_fu_840_p0 = zext_ln1345_28_fu_678_p1;

assign mul_ln1345_119_fu_840_p1 = sext_ln1345_63_fu_836_p1;

assign mul_ln1345_120_fu_854_p0 = zext_ln1345_29_fu_706_p1;

assign mul_ln1345_120_fu_854_p1 = sext_ln1345_64_fu_850_p1;

assign mul_ln1345_121_fu_864_p0 = zext_ln1345_30_fu_730_p1;

assign mul_ln1345_121_fu_864_p1 = sext_ln1345_65_fu_860_p1;

assign mul_ln1345_122_fu_874_p0 = zext_ln1345_31_fu_754_p1;

assign mul_ln1345_122_fu_874_p1 = sext_ln1345_66_fu_870_p1;

assign mul_ln1345_123_fu_884_p0 = zext_ln1345_32_fu_778_p1;

assign mul_ln1345_123_fu_884_p1 = sext_ln1345_67_fu_880_p1;

assign mul_ln1345_124_fu_910_p0 = sext_ln1345_68_fu_906_p1;

assign mul_ln1345_124_fu_910_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_125_fu_924_p0 = zext_ln1345_27_fu_650_p1;

assign mul_ln1345_125_fu_924_p1 = sext_ln1345_69_fu_920_p1;

assign mul_ln1345_126_fu_938_p0 = zext_ln1345_28_fu_678_p1;

assign mul_ln1345_126_fu_938_p1 = sext_ln1345_70_fu_934_p1;

assign mul_ln1345_127_fu_952_p0 = zext_ln1345_29_fu_706_p1;

assign mul_ln1345_127_fu_952_p1 = sext_ln1345_71_fu_948_p1;

assign mul_ln1345_128_fu_962_p0 = zext_ln1345_30_fu_730_p1;

assign mul_ln1345_128_fu_962_p1 = sext_ln1345_72_fu_958_p1;

assign mul_ln1345_129_fu_972_p0 = zext_ln1345_31_fu_754_p1;

assign mul_ln1345_129_fu_972_p1 = sext_ln1345_73_fu_968_p1;

assign mul_ln1345_130_fu_982_p0 = zext_ln1345_32_fu_778_p1;

assign mul_ln1345_130_fu_982_p1 = sext_ln1345_74_fu_978_p1;

assign mul_ln1345_131_fu_1008_p0 = sext_ln1345_75_fu_1004_p1;

assign mul_ln1345_131_fu_1008_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_132_fu_1022_p0 = zext_ln1345_27_fu_650_p1;

assign mul_ln1345_132_fu_1022_p1 = sext_ln1345_76_fu_1018_p1;

assign mul_ln1345_133_fu_1036_p0 = zext_ln1345_28_fu_678_p1;

assign mul_ln1345_133_fu_1036_p1 = sext_ln1345_77_fu_1032_p1;

assign mul_ln1345_134_fu_1050_p0 = zext_ln1345_29_fu_706_p1;

assign mul_ln1345_134_fu_1050_p1 = sext_ln1345_78_fu_1046_p1;

assign mul_ln1345_135_fu_1060_p0 = zext_ln1345_30_fu_730_p1;

assign mul_ln1345_135_fu_1060_p1 = sext_ln1345_79_fu_1056_p1;

assign mul_ln1345_136_fu_1070_p0 = zext_ln1345_31_fu_754_p1;

assign mul_ln1345_136_fu_1070_p1 = sext_ln1345_80_fu_1066_p1;

assign mul_ln1345_137_fu_1080_p0 = zext_ln1345_32_fu_778_p1;

assign mul_ln1345_137_fu_1080_p1 = sext_ln1345_81_fu_1076_p1;

assign mul_ln1345_138_fu_1116_p0 = zext_ln1345_33_fu_1112_p1;

assign mul_ln1345_138_fu_1116_p1 = sext_ln1345_fu_626_p1;

assign mul_ln1345_139_fu_1140_p0 = zext_ln1345_34_fu_1136_p1;

assign mul_ln1345_139_fu_1140_p1 = sext_ln1345_55_fu_654_p1;

assign mul_ln1345_140_fu_1164_p0 = zext_ln1345_35_fu_1160_p1;

assign mul_ln1345_140_fu_1164_p1 = sext_ln1345_56_fu_682_p1;

assign mul_ln1345_141_fu_1188_p0 = zext_ln1345_36_fu_1184_p1;

assign mul_ln1345_141_fu_1188_p1 = sext_ln1345_57_fu_710_p1;

assign mul_ln1345_142_fu_1208_p0 = zext_ln1345_37_fu_1204_p1;

assign mul_ln1345_142_fu_1208_p1 = sext_ln1345_58_fu_734_p1;

assign mul_ln1345_143_fu_1228_p0 = zext_ln1345_38_fu_1224_p1;

assign mul_ln1345_143_fu_1228_p1 = sext_ln1345_59_fu_758_p1;

assign mul_ln1345_144_fu_1248_p0 = zext_ln1345_39_fu_1244_p1;

assign mul_ln1345_144_fu_1248_p1 = sext_ln1345_60_fu_782_p1;

assign mul_ln1345_145_fu_1270_p0 = zext_ln1345_33_fu_1112_p1;

assign mul_ln1345_145_fu_1270_p1 = sext_ln1345_61_fu_808_p1;

assign mul_ln1345_146_fu_1280_p0 = zext_ln1345_34_fu_1136_p1;

assign mul_ln1345_146_fu_1280_p1 = sext_ln1345_62_fu_822_p1;

assign mul_ln1345_147_fu_1290_p0 = zext_ln1345_35_fu_1160_p1;

assign mul_ln1345_147_fu_1290_p1 = sext_ln1345_63_fu_836_p1;

assign mul_ln1345_148_fu_1300_p0 = zext_ln1345_36_fu_1184_p1;

assign mul_ln1345_148_fu_1300_p1 = sext_ln1345_64_fu_850_p1;

assign mul_ln1345_149_fu_1306_p0 = zext_ln1345_37_fu_1204_p1;

assign mul_ln1345_149_fu_1306_p1 = sext_ln1345_65_fu_860_p1;

assign mul_ln1345_150_fu_1312_p0 = zext_ln1345_38_fu_1224_p1;

assign mul_ln1345_150_fu_1312_p1 = sext_ln1345_66_fu_870_p1;

assign mul_ln1345_151_fu_1318_p0 = zext_ln1345_39_fu_1244_p1;

assign mul_ln1345_151_fu_1318_p1 = sext_ln1345_67_fu_880_p1;

assign mul_ln1345_152_fu_1340_p0 = zext_ln1345_33_fu_1112_p1;

assign mul_ln1345_152_fu_1340_p1 = sext_ln1345_68_fu_906_p1;

assign mul_ln1345_153_fu_1350_p0 = zext_ln1345_34_fu_1136_p1;

assign mul_ln1345_153_fu_1350_p1 = sext_ln1345_69_fu_920_p1;

assign mul_ln1345_154_fu_1360_p0 = zext_ln1345_35_fu_1160_p1;

assign mul_ln1345_154_fu_1360_p1 = sext_ln1345_70_fu_934_p1;

assign mul_ln1345_155_fu_1370_p0 = zext_ln1345_36_fu_1184_p1;

assign mul_ln1345_155_fu_1370_p1 = sext_ln1345_71_fu_948_p1;

assign mul_ln1345_156_fu_1376_p0 = zext_ln1345_37_fu_1204_p1;

assign mul_ln1345_156_fu_1376_p1 = sext_ln1345_72_fu_958_p1;

assign mul_ln1345_157_fu_1382_p0 = zext_ln1345_38_fu_1224_p1;

assign mul_ln1345_157_fu_1382_p1 = sext_ln1345_73_fu_968_p1;

assign mul_ln1345_158_fu_1388_p0 = zext_ln1345_39_fu_1244_p1;

assign mul_ln1345_158_fu_1388_p1 = sext_ln1345_74_fu_978_p1;

assign mul_ln1345_159_fu_1410_p0 = zext_ln1345_33_fu_1112_p1;

assign mul_ln1345_159_fu_1410_p1 = sext_ln1345_75_fu_1004_p1;

assign mul_ln1345_160_fu_1420_p0 = zext_ln1345_34_fu_1136_p1;

assign mul_ln1345_160_fu_1420_p1 = sext_ln1345_76_fu_1018_p1;

assign mul_ln1345_161_fu_1430_p0 = zext_ln1345_35_fu_1160_p1;

assign mul_ln1345_161_fu_1430_p1 = sext_ln1345_77_fu_1032_p1;

assign mul_ln1345_162_fu_1440_p0 = zext_ln1345_36_fu_1184_p1;

assign mul_ln1345_162_fu_1440_p1 = sext_ln1345_78_fu_1046_p1;

assign mul_ln1345_163_fu_1446_p0 = zext_ln1345_37_fu_1204_p1;

assign mul_ln1345_163_fu_1446_p1 = sext_ln1345_79_fu_1056_p1;

assign mul_ln1345_164_fu_1452_p0 = zext_ln1345_38_fu_1224_p1;

assign mul_ln1345_164_fu_1452_p1 = sext_ln1345_80_fu_1066_p1;

assign mul_ln1345_165_fu_1458_p0 = zext_ln1345_39_fu_1244_p1;

assign mul_ln1345_165_fu_1458_p1 = sext_ln1345_81_fu_1076_p1;

assign mul_ln1345_fu_630_p0 = sext_ln1345_fu_626_p1;

assign mul_ln1345_fu_630_p1 = zext_ln1345_fu_622_p1;

assign or_ln337_fu_325_p2 = (icmp_ln337_reg_2070 | and_ln336_fu_319_p2);

assign select_ln337_6_fu_300_p3 = ((icmp_ln337_fu_288_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_294_p2);

assign select_ln337_fu_330_p3 = ((or_ln337_fu_325_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_265);

assign select_ln342_fu_1489_p3 = ((icmp_ln342_reg_2086[0:0] == 1'b1) ? 88'd0 : vec_o_data_M_elems_V_2_fu_220);

assign sext_ln1345_55_fu_654_p1 = $signed(trunc_ln145_18_fu_352_p4);

assign sext_ln1345_56_fu_682_p1 = $signed(trunc_ln145_19_fu_362_p4);

assign sext_ln1345_57_fu_710_p1 = $signed(trunc_ln145_20_fu_372_p4);

assign sext_ln1345_58_fu_734_p1 = $signed(trunc_ln145_21_fu_382_p4);

assign sext_ln1345_59_fu_758_p1 = $signed(trunc_ln145_22_fu_392_p4);

assign sext_ln1345_60_fu_782_p1 = $signed(trunc_ln145_23_fu_402_p4);

assign sext_ln1345_61_fu_808_p1 = $signed(trunc_ln145_24_fu_412_p4);

assign sext_ln1345_62_fu_822_p1 = $signed(trunc_ln145_25_fu_422_p4);

assign sext_ln1345_63_fu_836_p1 = $signed(trunc_ln145_26_fu_432_p4);

assign sext_ln1345_64_fu_850_p1 = $signed(trunc_ln145_27_fu_442_p4);

assign sext_ln1345_65_fu_860_p1 = $signed(trunc_ln145_28_fu_452_p4);

assign sext_ln1345_66_fu_870_p1 = $signed(trunc_ln145_29_fu_462_p4);

assign sext_ln1345_67_fu_880_p1 = $signed(trunc_ln145_30_fu_472_p4);

assign sext_ln1345_68_fu_906_p1 = $signed(trunc_ln145_31_fu_482_p4);

assign sext_ln1345_69_fu_920_p1 = $signed(trunc_ln145_32_fu_492_p4);

assign sext_ln1345_70_fu_934_p1 = $signed(trunc_ln145_33_fu_502_p4);

assign sext_ln1345_71_fu_948_p1 = $signed(trunc_ln145_34_fu_512_p4);

assign sext_ln1345_72_fu_958_p1 = $signed(trunc_ln145_35_fu_522_p4);

assign sext_ln1345_73_fu_968_p1 = $signed(trunc_ln145_36_fu_532_p4);

assign sext_ln1345_74_fu_978_p1 = $signed(trunc_ln145_37_fu_542_p4);

assign sext_ln1345_75_fu_1004_p1 = $signed(trunc_ln145_38_fu_552_p4);

assign sext_ln1345_76_fu_1018_p1 = $signed(trunc_ln145_39_fu_562_p4);

assign sext_ln1345_77_fu_1032_p1 = $signed(trunc_ln145_40_fu_572_p4);

assign sext_ln1345_78_fu_1046_p1 = $signed(trunc_ln145_41_fu_582_p4);

assign sext_ln1345_79_fu_1056_p1 = $signed(trunc_ln145_42_fu_592_p4);

assign sext_ln1345_80_fu_1066_p1 = $signed(trunc_ln145_43_fu_602_p4);

assign sext_ln1345_81_fu_1076_p1 = $signed(trunc_ln145_44_fu_612_p4);

assign sext_ln1345_fu_626_p1 = $signed(trunc_ln145_53_fu_348_p1);

assign sext_ln368_63_fu_692_p1 = mul_ln1345_112_fu_686_p2;

assign sext_ln368_64_fu_1500_p1 = mul_ln1345_113_reg_2091;

assign sext_ln368_65_fu_1506_p1 = mul_ln1345_115_reg_2101;

assign sext_ln368_66_fu_832_p1 = mul_ln1345_118_fu_826_p2;

assign sext_ln368_67_fu_846_p1 = mul_ln1345_119_fu_840_p2;

assign sext_ln368_68_fu_1563_p1 = mul_ln1345_120_reg_2116;

assign sext_ln368_69_fu_1569_p1 = mul_ln1345_122_reg_2126;

assign sext_ln368_70_fu_930_p1 = mul_ln1345_125_fu_924_p2;

assign sext_ln368_71_fu_944_p1 = mul_ln1345_126_fu_938_p2;

assign sext_ln368_72_fu_1626_p1 = mul_ln1345_127_reg_2141;

assign sext_ln368_73_fu_1632_p1 = mul_ln1345_129_reg_2151;

assign sext_ln368_74_fu_1028_p1 = mul_ln1345_132_fu_1022_p2;

assign sext_ln368_75_fu_1042_p1 = mul_ln1345_133_fu_1036_p2;

assign sext_ln368_76_fu_1689_p1 = mul_ln1345_134_reg_2166;

assign sext_ln368_77_fu_1695_p1 = mul_ln1345_136_reg_2176;

assign sext_ln368_78_fu_1146_p1 = mul_ln1345_139_fu_1140_p2;

assign sext_ln368_79_fu_1170_p1 = mul_ln1345_140_fu_1164_p2;

assign sext_ln368_80_fu_1752_p1 = mul_ln1345_141_reg_2191;

assign sext_ln368_81_fu_1758_p1 = mul_ln1345_143_reg_2201;

assign sext_ln368_82_fu_1286_p1 = mul_ln1345_146_fu_1280_p2;

assign sext_ln368_83_fu_1296_p1 = mul_ln1345_147_fu_1290_p2;

assign sext_ln368_84_fu_1815_p1 = mul_ln1345_148_reg_2216;

assign sext_ln368_85_fu_1821_p1 = mul_ln1345_150_reg_2226;

assign sext_ln368_86_fu_1356_p1 = mul_ln1345_153_fu_1350_p2;

assign sext_ln368_87_fu_1366_p1 = mul_ln1345_154_fu_1360_p2;

assign sext_ln368_88_fu_1878_p1 = mul_ln1345_155_reg_2241;

assign sext_ln368_89_fu_1884_p1 = mul_ln1345_157_reg_2251;

assign sext_ln368_90_fu_1426_p1 = mul_ln1345_160_fu_1420_p2;

assign sext_ln368_91_fu_1436_p1 = mul_ln1345_161_fu_1430_p2;

assign sext_ln368_92_fu_1941_p1 = mul_ln1345_162_reg_2266;

assign sext_ln368_93_fu_1947_p1 = mul_ln1345_164_reg_2276;

assign sext_ln368_fu_664_p1 = mul_ln1345_111_fu_658_p2;

assign sext_ln691_111_fu_1503_p1 = mul_ln1345_114_reg_2096;

assign sext_ln691_112_fu_792_p1 = mul_ln1345_116_fu_786_p2;

assign sext_ln691_113_fu_1521_p1 = $signed(add_ln691_112_fu_1515_p2);

assign sext_ln691_114_fu_1531_p1 = $signed(add_ln691_114_reg_2106);

assign sext_ln691_115_fu_1534_p1 = $signed(add_ln691_115_reg_2111);

assign sext_ln691_116_fu_1543_p1 = $signed(add_ln691_116_fu_1537_p2);

assign sext_ln691_117_fu_818_p1 = mul_ln1345_117_fu_812_p2;

assign sext_ln691_118_fu_1566_p1 = mul_ln1345_121_reg_2121;

assign sext_ln691_119_fu_890_p1 = mul_ln1345_123_fu_884_p2;

assign sext_ln691_120_fu_1584_p1 = $signed(add_ln691_119_fu_1578_p2);

assign sext_ln691_121_fu_1594_p1 = $signed(add_ln691_121_reg_2131);

assign sext_ln691_122_fu_1597_p1 = $signed(add_ln691_122_reg_2136);

assign sext_ln691_123_fu_1606_p1 = $signed(add_ln691_123_fu_1600_p2);

assign sext_ln691_124_fu_916_p1 = mul_ln1345_124_fu_910_p2;

assign sext_ln691_125_fu_1629_p1 = mul_ln1345_128_reg_2146;

assign sext_ln691_126_fu_988_p1 = mul_ln1345_130_fu_982_p2;

assign sext_ln691_127_fu_1647_p1 = $signed(add_ln691_126_fu_1641_p2);

assign sext_ln691_128_fu_1657_p1 = $signed(add_ln691_128_reg_2156);

assign sext_ln691_129_fu_1660_p1 = $signed(add_ln691_129_reg_2161);

assign sext_ln691_130_fu_1669_p1 = $signed(add_ln691_130_fu_1663_p2);

assign sext_ln691_131_fu_1014_p1 = mul_ln1345_131_fu_1008_p2;

assign sext_ln691_132_fu_1692_p1 = mul_ln1345_135_reg_2171;

assign sext_ln691_133_fu_1086_p1 = mul_ln1345_137_fu_1080_p2;

assign sext_ln691_134_fu_1710_p1 = $signed(add_ln691_133_fu_1704_p2);

assign sext_ln691_135_fu_1720_p1 = $signed(add_ln691_135_reg_2181);

assign sext_ln691_136_fu_1723_p1 = $signed(add_ln691_136_reg_2186);

assign sext_ln691_137_fu_1732_p1 = $signed(add_ln691_137_fu_1726_p2);

assign sext_ln691_138_fu_1122_p1 = mul_ln1345_138_fu_1116_p2;

assign sext_ln691_139_fu_1755_p1 = mul_ln1345_142_reg_2196;

assign sext_ln691_140_fu_1254_p1 = mul_ln1345_144_fu_1248_p2;

assign sext_ln691_141_fu_1773_p1 = $signed(add_ln691_140_fu_1767_p2);

assign sext_ln691_142_fu_1783_p1 = $signed(add_ln691_142_reg_2206);

assign sext_ln691_143_fu_1786_p1 = $signed(add_ln691_143_reg_2211);

assign sext_ln691_144_fu_1795_p1 = $signed(add_ln691_144_fu_1789_p2);

assign sext_ln691_145_fu_1276_p1 = mul_ln1345_145_fu_1270_p2;

assign sext_ln691_146_fu_1818_p1 = mul_ln1345_149_reg_2221;

assign sext_ln691_147_fu_1324_p1 = mul_ln1345_151_fu_1318_p2;

assign sext_ln691_148_fu_1836_p1 = $signed(add_ln691_147_fu_1830_p2);

assign sext_ln691_149_fu_1846_p1 = $signed(add_ln691_149_reg_2231);

assign sext_ln691_150_fu_1849_p1 = $signed(add_ln691_150_reg_2236);

assign sext_ln691_151_fu_1858_p1 = $signed(add_ln691_151_fu_1852_p2);

assign sext_ln691_152_fu_1346_p1 = mul_ln1345_152_fu_1340_p2;

assign sext_ln691_153_fu_1881_p1 = mul_ln1345_156_reg_2246;

assign sext_ln691_154_fu_1394_p1 = mul_ln1345_158_fu_1388_p2;

assign sext_ln691_155_fu_1899_p1 = $signed(add_ln691_154_fu_1893_p2);

assign sext_ln691_156_fu_1909_p1 = $signed(add_ln691_156_reg_2256);

assign sext_ln691_157_fu_1912_p1 = $signed(add_ln691_157_reg_2261);

assign sext_ln691_158_fu_1921_p1 = $signed(add_ln691_158_fu_1915_p2);

assign sext_ln691_159_fu_1416_p1 = mul_ln1345_159_fu_1410_p2;

assign sext_ln691_160_fu_1944_p1 = mul_ln1345_163_reg_2271;

assign sext_ln691_161_fu_1464_p1 = mul_ln1345_165_fu_1458_p2;

assign sext_ln691_162_fu_1962_p1 = $signed(add_ln691_161_fu_1956_p2);

assign sext_ln691_163_fu_1972_p1 = $signed(add_ln691_163_reg_2281);

assign sext_ln691_164_fu_1975_p1 = $signed(add_ln691_164_reg_2286);

assign sext_ln691_165_fu_1984_p1 = $signed(add_ln691_165_fu_1978_p2);

assign sext_ln691_fu_636_p1 = mul_ln1345_fu_630_p2;

assign start_out = real_start;

assign tmp_186_fu_1616_p4 = {{select_ln342_fu_1489_p3[32:22]}};

assign tmp_187_fu_1679_p4 = {{select_ln342_fu_1489_p3[43:33]}};

assign tmp_188_fu_1742_p4 = {{select_ln342_fu_1489_p3[54:44]}};

assign tmp_189_fu_1805_p4 = {{select_ln342_fu_1489_p3[65:55]}};

assign tmp_190_fu_1868_p4 = {{select_ln342_fu_1489_p3[76:66]}};

assign tmp_191_fu_1931_p4 = {{select_ln342_fu_1489_p3[87:77]}};

assign tmp_192_fu_1994_p9 = {{{{{{{{add_ln691_166_fu_1988_p2}, {add_ln691_159_fu_1925_p2}}, {add_ln691_152_fu_1862_p2}}, {add_ln691_145_fu_1799_p2}}, {add_ln691_138_fu_1736_p2}}, {add_ln691_131_fu_1673_p2}}, {add_ln691_124_fu_1610_p2}}, {add_ln691_117_fu_1547_p2}};

assign tmp_193_fu_2024_p16 = {{{{{{{{{{{{{{{add_ln691_166_reg_2331}, {5'd0}}, {add_ln691_159_reg_2326}}, {5'd0}}, {add_ln691_152_reg_2321}}, {5'd0}}, {add_ln691_145_reg_2316}}, {5'd0}}, {add_ln691_138_reg_2311}}, {5'd0}}, {add_ln691_131_reg_2306}}, {5'd0}}, {add_ln691_124_reg_2301}}, {5'd0}}, {add_ln691_117_reg_2296}};

assign tmp_204_fu_640_p4 = {{cache_window_sm_dout[10:8]}};

assign tmp_205_fu_668_p4 = {{cache_window_sm_dout[18:16]}};

assign tmp_206_fu_696_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_207_fu_720_p4 = {{cache_window_sm_dout[34:32]}};

assign tmp_208_fu_744_p4 = {{cache_window_sm_dout[42:40]}};

assign tmp_209_fu_768_p4 = {{cache_window_sm_dout[50:48]}};

assign tmp_210_fu_1102_p4 = {{cache_window_sm_dout[58:56]}};

assign tmp_211_fu_1126_p4 = {{cache_window_sm_dout[66:64]}};

assign tmp_212_fu_1150_p4 = {{cache_window_sm_dout[74:72]}};

assign tmp_213_fu_1174_p4 = {{cache_window_sm_dout[82:80]}};

assign tmp_214_fu_1194_p4 = {{cache_window_sm_dout[90:88]}};

assign tmp_215_fu_1214_p4 = {{cache_window_sm_dout[98:96]}};

assign tmp_216_fu_1234_p4 = {{cache_window_sm_dout[106:104]}};

assign tmp_s_fu_1553_p4 = {{select_ln342_fu_1489_p3[21:11]}};

assign trunc_ln145_18_fu_352_p4 = {{weight_sm_dout[10:8]}};

assign trunc_ln145_19_fu_362_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_20_fu_372_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_21_fu_382_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_22_fu_392_p4 = {{weight_sm_dout[42:40]}};

assign trunc_ln145_23_fu_402_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_24_fu_412_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_25_fu_422_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_26_fu_432_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln145_27_fu_442_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_28_fu_452_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_29_fu_462_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln145_30_fu_472_p4 = {{weight_sm_dout[106:104]}};

assign trunc_ln145_31_fu_482_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_32_fu_492_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_33_fu_502_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_34_fu_512_p4 = {{weight_sm_dout[138:136]}};

assign trunc_ln145_35_fu_522_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_36_fu_532_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_37_fu_542_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_38_fu_552_p4 = {{weight_sm_dout[170:168]}};

assign trunc_ln145_39_fu_562_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_40_fu_572_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_41_fu_582_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_42_fu_592_p4 = {{weight_sm_dout[202:200]}};

assign trunc_ln145_43_fu_602_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_44_fu_612_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_53_fu_348_p1 = weight_sm_dout[2:0];

assign trunc_ln145_fu_344_p1 = cache_window_sm_dout[2:0];

assign trunc_ln691_fu_1496_p1 = select_ln342_fu_1489_p3[10:0];

assign xor_ln336_fu_308_p2 = (icmp_ln337_reg_2070 ^ 1'd1);

assign zext_ln1345_27_fu_650_p1 = tmp_204_fu_640_p4;

assign zext_ln1345_28_fu_678_p1 = tmp_205_fu_668_p4;

assign zext_ln1345_29_fu_706_p1 = tmp_206_fu_696_p4;

assign zext_ln1345_30_fu_730_p1 = tmp_207_fu_720_p4;

assign zext_ln1345_31_fu_754_p1 = tmp_208_fu_744_p4;

assign zext_ln1345_32_fu_778_p1 = tmp_209_fu_768_p4;

assign zext_ln1345_33_fu_1112_p1 = tmp_210_fu_1102_p4;

assign zext_ln1345_34_fu_1136_p1 = tmp_211_fu_1126_p4;

assign zext_ln1345_35_fu_1160_p1 = tmp_212_fu_1150_p4;

assign zext_ln1345_36_fu_1184_p1 = tmp_213_fu_1174_p4;

assign zext_ln1345_37_fu_1204_p1 = tmp_214_fu_1194_p4;

assign zext_ln1345_38_fu_1224_p1 = tmp_215_fu_1214_p4;

assign zext_ln1345_39_fu_1244_p1 = tmp_216_fu_1234_p4;

assign zext_ln1345_fu_622_p1 = trunc_ln145_fu_344_p1;

endmodule //ATTN0_matmul_step2_mac
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac137 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [383:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [3:0] attn_inst_matmul_gen_q_bias_arr_V_address0;
reg    attn_inst_matmul_gen_q_bias_arr_V_ce0;
wire   [131:0] attn_inst_matmul_gen_q_bias_arr_V_q0;
wire   [8:0] attn_inst_matmul_gen_q_weight_arr_V_address0;
reg    attn_inst_matmul_gen_q_weight_arr_V_ce0;
wire   [215:0] attn_inst_matmul_gen_q_weight_arr_V_q0;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln120_reg_4807;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter1_reg;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln161_reg_4869;
reg   [0:0] icmp_ln161_reg_4869_pp0_iter1_reg;
reg   [15:0] indvar_flatten20_reg_548;
reg   [10:0] indvar_flatten_reg_560;
reg   [4:0] cot_reg_571;
reg   [5:0] cit_reg_583;
reg   [131:0] attn_inst_matmul_gen_q_bias_arr_V_load_1_reg_4802;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln120_fu_594_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter2_reg;
wire   [0:0] icmp_ln121_fu_600_p2;
reg   [0:0] icmp_ln121_reg_4811;
reg   [0:0] icmp_ln121_reg_4811_pp0_iter1_reg;
wire   [4:0] select_ln120_fu_606_p3;
reg   [4:0] select_ln120_reg_4818;
wire   [0:0] and_ln120_fu_626_p2;
reg   [0:0] and_ln120_reg_4824;
reg   [0:0] and_ln120_reg_4824_pp0_iter1_reg;
wire   [5:0] select_ln121_fu_638_p3;
reg   [5:0] select_ln121_reg_4831;
wire   [10:0] add_ln121_2_fu_646_p2;
reg   [10:0] add_ln121_2_reg_4839;
wire   [15:0] add_ln120_fu_652_p2;
reg   [15:0] add_ln120_reg_4844;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] add_ln121_fu_658_p2;
reg   [4:0] add_ln121_reg_4849;
wire   [4:0] select_ln121_7_fu_693_p3;
reg   [4:0] select_ln121_7_reg_4854;
wire   [8:0] add_ln215_fu_702_p2;
reg   [8:0] add_ln215_reg_4859;
wire   [0:0] icmp_ln126_fu_708_p2;
reg   [0:0] icmp_ln126_reg_4864;
reg   [0:0] icmp_ln126_reg_4864_pp0_iter1_reg;
wire   [0:0] icmp_ln161_fu_713_p2;
wire   [5:0] add_ln122_fu_718_p2;
reg   [5:0] add_ln122_reg_4873;
wire   [10:0] select_ln121_8_fu_723_p3;
reg   [10:0] select_ln121_8_reg_4878;
reg   [131:0] attn_inst_matmul_gen_q_bias_arr_V_load_reg_4893;
reg   [2:0] trunc_ln145_119_reg_4903;
reg   [2:0] trunc_ln145_120_reg_4908;
reg   [2:0] trunc_ln145_121_reg_4913;
reg   [2:0] trunc_ln145_122_reg_4918;
reg   [2:0] trunc_ln145_123_reg_4923;
reg   [2:0] trunc_ln145_124_reg_4928;
wire  signed [5:0] sext_ln1345_208_fu_864_p1;
reg  signed [5:0] sext_ln1345_208_reg_4933;
wire  signed [5:0] mul_ln1345_fu_868_p2;
reg  signed [5:0] mul_ln1345_reg_4938;
wire  signed [5:0] sext_ln1345_210_fu_888_p1;
reg  signed [5:0] sext_ln1345_210_reg_4943;
wire  signed [5:0] mul_ln1345_364_fu_892_p2;
reg  signed [5:0] mul_ln1345_364_reg_4948;
wire  signed [5:0] sext_ln1345_212_fu_912_p1;
reg  signed [5:0] sext_ln1345_212_reg_4953;
wire  signed [5:0] mul_ln1345_365_fu_916_p2;
reg  signed [5:0] mul_ln1345_365_reg_4958;
wire  signed [5:0] sext_ln1345_214_fu_936_p1;
reg  signed [5:0] sext_ln1345_214_reg_4963;
wire  signed [5:0] mul_ln1345_366_fu_940_p2;
reg  signed [5:0] mul_ln1345_366_reg_4968;
wire  signed [5:0] sext_ln1345_216_fu_960_p1;
reg  signed [5:0] sext_ln1345_216_reg_4973;
wire  signed [5:0] mul_ln1345_367_fu_964_p2;
reg  signed [5:0] mul_ln1345_367_reg_4978;
wire  signed [5:0] sext_ln1345_218_fu_984_p1;
reg  signed [5:0] sext_ln1345_218_reg_4983;
wire  signed [5:0] mul_ln1345_368_fu_988_p2;
reg  signed [5:0] mul_ln1345_368_reg_4988;
wire  signed [5:0] sext_ln1345_219_fu_1004_p1;
reg  signed [5:0] sext_ln1345_219_reg_4993;
wire  signed [5:0] mul_ln1345_369_fu_1008_p2;
reg  signed [5:0] mul_ln1345_369_reg_4998;
wire  signed [5:0] sext_ln1345_220_fu_1024_p1;
reg  signed [5:0] sext_ln1345_220_reg_5003;
wire  signed [5:0] mul_ln1345_370_fu_1028_p2;
reg  signed [5:0] mul_ln1345_370_reg_5008;
wire  signed [5:0] sext_ln1345_221_fu_1044_p1;
reg  signed [5:0] sext_ln1345_221_reg_5013;
wire  signed [5:0] mul_ln1345_371_fu_1048_p2;
reg  signed [5:0] mul_ln1345_371_reg_5018;
wire  signed [5:0] sext_ln1345_222_fu_1064_p1;
reg  signed [5:0] sext_ln1345_222_reg_5023;
wire  signed [5:0] mul_ln1345_372_fu_1068_p2;
reg  signed [5:0] mul_ln1345_372_reg_5028;
wire  signed [5:0] sext_ln1345_223_fu_1084_p1;
reg  signed [5:0] sext_ln1345_223_reg_5033;
wire  signed [5:0] mul_ln1345_373_fu_1088_p2;
reg  signed [5:0] mul_ln1345_373_reg_5038;
wire  signed [5:0] sext_ln1345_224_fu_1104_p1;
reg  signed [5:0] sext_ln1345_224_reg_5043;
wire  signed [5:0] mul_ln1345_374_fu_1108_p2;
reg  signed [5:0] mul_ln1345_374_reg_5048;
wire  signed [5:0] sext_ln1345_225_fu_1124_p1;
reg  signed [5:0] sext_ln1345_225_reg_5053;
wire  signed [5:0] mul_ln1345_375_fu_1128_p2;
reg  signed [5:0] mul_ln1345_375_reg_5058;
wire  signed [5:0] sext_ln1345_226_fu_1144_p1;
reg  signed [5:0] sext_ln1345_226_reg_5063;
wire  signed [5:0] mul_ln1345_376_fu_1148_p2;
reg  signed [5:0] mul_ln1345_376_reg_5068;
wire  signed [5:0] sext_ln1345_227_fu_1164_p1;
reg  signed [5:0] sext_ln1345_227_reg_5073;
wire  signed [5:0] mul_ln1345_377_fu_1168_p2;
reg  signed [5:0] mul_ln1345_377_reg_5078;
wire  signed [5:0] sext_ln1345_228_fu_1184_p1;
reg  signed [5:0] sext_ln1345_228_reg_5083;
wire  signed [5:0] mul_ln1345_378_fu_1188_p2;
reg  signed [5:0] mul_ln1345_378_reg_5088;
wire  signed [5:0] sext_ln1345_229_fu_1204_p1;
reg  signed [5:0] sext_ln1345_229_reg_5093;
wire  signed [5:0] mul_ln1345_379_fu_1208_p2;
reg  signed [5:0] mul_ln1345_379_reg_5098;
wire  signed [5:0] sext_ln1345_230_fu_1224_p1;
reg  signed [5:0] sext_ln1345_230_reg_5103;
wire  signed [5:0] mul_ln1345_380_fu_1228_p2;
reg  signed [5:0] mul_ln1345_380_reg_5108;
wire  signed [5:0] sext_ln1345_231_fu_1244_p1;
reg  signed [5:0] sext_ln1345_231_reg_5113;
wire  signed [5:0] mul_ln1345_381_fu_1248_p2;
reg  signed [5:0] mul_ln1345_381_reg_5118;
wire  signed [5:0] sext_ln1345_232_fu_1264_p1;
reg  signed [5:0] sext_ln1345_232_reg_5123;
wire  signed [5:0] mul_ln1345_382_fu_1268_p2;
reg  signed [5:0] mul_ln1345_382_reg_5128;
wire  signed [5:0] sext_ln1345_233_fu_1284_p1;
reg  signed [5:0] sext_ln1345_233_reg_5133;
wire  signed [5:0] mul_ln1345_383_fu_1288_p2;
reg  signed [5:0] mul_ln1345_383_reg_5138;
wire  signed [5:0] sext_ln1345_234_fu_1304_p1;
reg  signed [5:0] sext_ln1345_234_reg_5143;
wire  signed [5:0] mul_ln1345_384_fu_1308_p2;
reg  signed [5:0] mul_ln1345_384_reg_5148;
wire  signed [5:0] sext_ln1345_235_fu_1324_p1;
reg  signed [5:0] sext_ln1345_235_reg_5153;
wire  signed [5:0] mul_ln1345_385_fu_1328_p2;
reg  signed [5:0] mul_ln1345_385_reg_5158;
wire  signed [5:0] sext_ln1345_236_fu_1344_p1;
reg  signed [5:0] sext_ln1345_236_reg_5163;
wire  signed [5:0] mul_ln1345_386_fu_1348_p2;
reg  signed [5:0] mul_ln1345_386_reg_5168;
wire  signed [5:0] sext_ln1345_237_fu_1364_p1;
reg  signed [5:0] sext_ln1345_237_reg_5173;
wire  signed [5:0] mul_ln1345_387_fu_1368_p2;
reg  signed [5:0] mul_ln1345_387_reg_5178;
wire  signed [5:0] sext_ln1345_238_fu_1384_p1;
reg  signed [5:0] sext_ln1345_238_reg_5183;
wire  signed [5:0] mul_ln1345_388_fu_1388_p2;
reg  signed [5:0] mul_ln1345_388_reg_5188;
wire  signed [5:0] sext_ln1345_239_fu_1404_p1;
reg  signed [5:0] sext_ln1345_239_reg_5193;
wire  signed [5:0] mul_ln1345_389_fu_1408_p2;
reg  signed [5:0] mul_ln1345_389_reg_5198;
wire  signed [5:0] sext_ln1345_240_fu_1424_p1;
reg  signed [5:0] sext_ln1345_240_reg_5203;
wire  signed [5:0] mul_ln1345_390_fu_1428_p2;
reg  signed [5:0] mul_ln1345_390_reg_5208;
wire  signed [5:0] sext_ln1345_241_fu_1444_p1;
reg  signed [5:0] sext_ln1345_241_reg_5213;
wire  signed [5:0] mul_ln1345_391_fu_1448_p2;
reg  signed [5:0] mul_ln1345_391_reg_5218;
wire  signed [5:0] sext_ln1345_242_fu_1464_p1;
reg  signed [5:0] sext_ln1345_242_reg_5223;
wire  signed [5:0] mul_ln1345_392_fu_1468_p2;
reg  signed [5:0] mul_ln1345_392_reg_5228;
wire  signed [5:0] sext_ln1345_243_fu_1484_p1;
reg  signed [5:0] sext_ln1345_243_reg_5233;
wire  signed [5:0] mul_ln1345_393_fu_1488_p2;
reg  signed [5:0] mul_ln1345_393_reg_5238;
wire  signed [5:0] sext_ln1345_244_fu_1504_p1;
reg  signed [5:0] sext_ln1345_244_reg_5243;
wire  signed [5:0] mul_ln1345_394_fu_1508_p2;
reg  signed [5:0] mul_ln1345_394_reg_5248;
wire  signed [5:0] sext_ln1345_245_fu_1524_p1;
reg  signed [5:0] sext_ln1345_245_reg_5253;
wire  signed [5:0] mul_ln1345_395_fu_1528_p2;
reg  signed [5:0] mul_ln1345_395_reg_5258;
wire  signed [5:0] sext_ln1345_246_fu_1544_p1;
reg  signed [5:0] sext_ln1345_246_reg_5263;
wire  signed [5:0] mul_ln1345_396_fu_1548_p2;
reg  signed [5:0] mul_ln1345_396_reg_5268;
wire  signed [5:0] sext_ln1345_247_fu_1564_p1;
reg  signed [5:0] sext_ln1345_247_reg_5273;
wire  signed [5:0] mul_ln1345_397_fu_1568_p2;
reg  signed [5:0] mul_ln1345_397_reg_5278;
wire  signed [5:0] sext_ln1345_248_fu_1584_p1;
reg  signed [5:0] sext_ln1345_248_reg_5283;
wire  signed [5:0] mul_ln1345_398_fu_1588_p2;
reg  signed [5:0] mul_ln1345_398_reg_5288;
wire  signed [5:0] sext_ln1345_249_fu_1604_p1;
reg  signed [5:0] sext_ln1345_249_reg_5293;
wire  signed [5:0] mul_ln1345_399_fu_1608_p2;
reg  signed [5:0] mul_ln1345_399_reg_5298;
wire  signed [5:0] sext_ln1345_250_fu_1624_p1;
reg  signed [5:0] sext_ln1345_250_reg_5303;
wire  signed [5:0] mul_ln1345_400_fu_1628_p2;
reg  signed [5:0] mul_ln1345_400_reg_5308;
wire  signed [5:0] sext_ln1345_251_fu_1644_p1;
reg  signed [5:0] sext_ln1345_251_reg_5313;
wire  signed [5:0] mul_ln1345_401_fu_1648_p2;
reg  signed [5:0] mul_ln1345_401_reg_5318;
wire  signed [5:0] sext_ln1345_252_fu_1664_p1;
reg  signed [5:0] sext_ln1345_252_reg_5323;
wire  signed [5:0] mul_ln1345_402_fu_1668_p2;
reg  signed [5:0] mul_ln1345_402_reg_5328;
wire  signed [5:0] sext_ln1345_253_fu_1684_p1;
reg  signed [5:0] sext_ln1345_253_reg_5333;
wire  signed [5:0] mul_ln1345_403_fu_1688_p2;
reg  signed [5:0] mul_ln1345_403_reg_5338;
wire  signed [5:0] sext_ln1345_254_fu_1704_p1;
reg  signed [5:0] sext_ln1345_254_reg_5343;
wire  signed [5:0] mul_ln1345_404_fu_1708_p2;
reg  signed [5:0] mul_ln1345_404_reg_5348;
wire  signed [5:0] sext_ln1345_255_fu_1724_p1;
reg  signed [5:0] sext_ln1345_255_reg_5353;
wire  signed [5:0] mul_ln1345_405_fu_1728_p2;
reg  signed [5:0] mul_ln1345_405_reg_5358;
wire  signed [5:0] sext_ln1345_256_fu_1744_p1;
reg  signed [5:0] sext_ln1345_256_reg_5363;
wire  signed [5:0] mul_ln1345_406_fu_1748_p2;
reg  signed [5:0] mul_ln1345_406_reg_5368;
wire  signed [5:0] sext_ln1345_257_fu_1764_p1;
reg  signed [5:0] sext_ln1345_257_reg_5373;
wire  signed [5:0] mul_ln1345_407_fu_1768_p2;
reg  signed [5:0] mul_ln1345_407_reg_5378;
wire  signed [5:0] sext_ln1345_258_fu_1784_p1;
reg  signed [5:0] sext_ln1345_258_reg_5383;
wire  signed [5:0] mul_ln1345_408_fu_1788_p2;
reg  signed [5:0] mul_ln1345_408_reg_5388;
wire  signed [5:0] sext_ln1345_259_fu_1804_p1;
reg  signed [5:0] sext_ln1345_259_reg_5393;
wire  signed [5:0] mul_ln1345_409_fu_1808_p2;
reg  signed [5:0] mul_ln1345_409_reg_5398;
wire  signed [5:0] sext_ln1345_260_fu_1824_p1;
reg  signed [5:0] sext_ln1345_260_reg_5403;
wire  signed [5:0] mul_ln1345_410_fu_1828_p2;
reg  signed [5:0] mul_ln1345_410_reg_5408;
wire  signed [5:0] sext_ln1345_261_fu_1844_p1;
reg  signed [5:0] sext_ln1345_261_reg_5413;
wire  signed [5:0] mul_ln1345_411_fu_1848_p2;
reg  signed [5:0] mul_ln1345_411_reg_5418;
wire  signed [5:0] sext_ln1345_262_fu_1864_p1;
reg  signed [5:0] sext_ln1345_262_reg_5423;
wire  signed [5:0] mul_ln1345_412_fu_1868_p2;
reg  signed [5:0] mul_ln1345_412_reg_5428;
wire  signed [5:0] sext_ln1345_263_fu_1884_p1;
reg  signed [5:0] sext_ln1345_263_reg_5433;
wire  signed [5:0] mul_ln1345_413_fu_1888_p2;
reg  signed [5:0] mul_ln1345_413_reg_5438;
wire  signed [5:0] sext_ln1345_264_fu_1904_p1;
reg  signed [5:0] sext_ln1345_264_reg_5443;
wire  signed [5:0] mul_ln1345_414_fu_1908_p2;
reg  signed [5:0] mul_ln1345_414_reg_5448;
wire  signed [5:0] sext_ln1345_265_fu_1924_p1;
reg  signed [5:0] sext_ln1345_265_reg_5453;
wire  signed [5:0] mul_ln1345_415_fu_1928_p2;
reg  signed [5:0] mul_ln1345_415_reg_5458;
wire  signed [5:0] sext_ln1345_266_fu_1944_p1;
reg  signed [5:0] sext_ln1345_266_reg_5463;
wire  signed [5:0] mul_ln1345_416_fu_1948_p2;
reg  signed [5:0] mul_ln1345_416_reg_5468;
wire  signed [5:0] sext_ln1345_267_fu_1964_p1;
reg  signed [5:0] sext_ln1345_267_reg_5473;
wire  signed [5:0] mul_ln1345_417_fu_1968_p2;
reg  signed [5:0] mul_ln1345_417_reg_5478;
wire  signed [5:0] sext_ln1345_268_fu_1984_p1;
reg  signed [5:0] sext_ln1345_268_reg_5483;
wire  signed [5:0] mul_ln1345_418_fu_1988_p2;
reg  signed [5:0] mul_ln1345_418_reg_5488;
wire  signed [5:0] sext_ln1345_269_fu_2004_p1;
reg  signed [5:0] sext_ln1345_269_reg_5493;
wire  signed [5:0] mul_ln1345_419_fu_2008_p2;
reg  signed [5:0] mul_ln1345_419_reg_5498;
wire  signed [5:0] sext_ln1345_270_fu_2024_p1;
reg  signed [5:0] sext_ln1345_270_reg_5503;
wire  signed [5:0] mul_ln1345_420_fu_2028_p2;
reg  signed [5:0] mul_ln1345_420_reg_5508;
wire  signed [5:0] sext_ln1345_271_fu_2044_p1;
reg  signed [5:0] sext_ln1345_271_reg_5513;
wire  signed [5:0] mul_ln1345_421_fu_2048_p2;
reg  signed [5:0] mul_ln1345_421_reg_5518;
wire  signed [5:0] sext_ln1345_272_fu_2064_p1;
reg  signed [5:0] sext_ln1345_272_reg_5523;
wire  signed [5:0] mul_ln1345_422_fu_2068_p2;
reg  signed [5:0] mul_ln1345_422_reg_5528;
wire  signed [5:0] sext_ln1345_273_fu_2084_p1;
reg  signed [5:0] sext_ln1345_273_reg_5533;
wire  signed [5:0] mul_ln1345_423_fu_2088_p2;
reg  signed [5:0] mul_ln1345_423_reg_5538;
wire  signed [5:0] sext_ln1345_274_fu_2104_p1;
reg  signed [5:0] sext_ln1345_274_reg_5543;
wire  signed [5:0] mul_ln1345_424_fu_2108_p2;
reg  signed [5:0] mul_ln1345_424_reg_5548;
wire  signed [5:0] sext_ln1345_275_fu_2124_p1;
reg  signed [5:0] sext_ln1345_275_reg_5553;
wire  signed [5:0] mul_ln1345_425_fu_2128_p2;
reg  signed [5:0] mul_ln1345_425_reg_5558;
wire  signed [5:0] sext_ln1345_276_fu_2144_p1;
reg  signed [5:0] sext_ln1345_276_reg_5563;
wire  signed [5:0] mul_ln1345_426_fu_2148_p2;
reg  signed [5:0] mul_ln1345_426_reg_5568;
wire  signed [5:0] sext_ln1345_277_fu_2164_p1;
reg  signed [5:0] sext_ln1345_277_reg_5573;
wire  signed [5:0] mul_ln1345_427_fu_2168_p2;
reg  signed [5:0] mul_ln1345_427_reg_5578;
wire  signed [5:0] sext_ln1345_278_fu_2184_p1;
reg  signed [5:0] sext_ln1345_278_reg_5583;
wire  signed [5:0] mul_ln1345_428_fu_2188_p2;
reg  signed [5:0] mul_ln1345_428_reg_5588;
wire  signed [5:0] sext_ln1345_279_fu_2204_p1;
reg  signed [5:0] sext_ln1345_279_reg_5593;
wire  signed [5:0] mul_ln1345_429_fu_2208_p2;
reg  signed [5:0] mul_ln1345_429_reg_5598;
wire  signed [5:0] sext_ln1345_280_fu_2224_p1;
reg  signed [5:0] sext_ln1345_280_reg_5603;
wire  signed [5:0] mul_ln1345_430_fu_2228_p2;
reg  signed [5:0] mul_ln1345_430_reg_5608;
wire  signed [5:0] sext_ln1345_281_fu_2244_p1;
reg  signed [5:0] sext_ln1345_281_reg_5613;
wire  signed [5:0] mul_ln1345_431_fu_2248_p2;
reg  signed [5:0] mul_ln1345_431_reg_5618;
wire  signed [5:0] sext_ln1345_282_fu_2264_p1;
reg  signed [5:0] sext_ln1345_282_reg_5623;
wire  signed [5:0] mul_ln1345_432_fu_2268_p2;
reg  signed [5:0] mul_ln1345_432_reg_5628;
wire  signed [5:0] sext_ln1345_283_fu_2284_p1;
reg  signed [5:0] sext_ln1345_283_reg_5633;
wire  signed [5:0] mul_ln1345_433_fu_2288_p2;
reg  signed [5:0] mul_ln1345_433_reg_5638;
wire  signed [5:0] sext_ln1345_284_fu_2304_p1;
reg  signed [5:0] sext_ln1345_284_reg_5643;
wire  signed [5:0] mul_ln1345_434_fu_2308_p2;
reg  signed [5:0] mul_ln1345_434_reg_5648;
wire   [10:0] trunc_ln691_fu_2347_p1;
reg   [10:0] trunc_ln691_reg_5653;
wire   [6:0] add_ln691_fu_2366_p2;
reg   [6:0] add_ln691_reg_5658;
wire   [7:0] add_ln691_367_fu_2392_p2;
reg   [7:0] add_ln691_367_reg_5663;
reg   [10:0] tmp_313_reg_5668;
wire   [6:0] add_ln691_369_fu_2426_p2;
reg   [6:0] add_ln691_369_reg_5673;
wire   [7:0] add_ln691_373_fu_2452_p2;
reg   [7:0] add_ln691_373_reg_5678;
reg   [10:0] tmp_320_reg_5683;
wire   [6:0] add_ln691_375_fu_2486_p2;
reg   [6:0] add_ln691_375_reg_5688;
wire   [7:0] add_ln691_379_fu_2512_p2;
reg   [7:0] add_ln691_379_reg_5693;
reg   [10:0] tmp_327_reg_5698;
wire   [6:0] add_ln691_381_fu_2546_p2;
reg   [6:0] add_ln691_381_reg_5703;
wire   [7:0] add_ln691_385_fu_2572_p2;
reg   [7:0] add_ln691_385_reg_5708;
reg   [10:0] tmp_334_reg_5713;
wire   [6:0] add_ln691_387_fu_2606_p2;
reg   [6:0] add_ln691_387_reg_5718;
wire   [7:0] add_ln691_391_fu_2632_p2;
reg   [7:0] add_ln691_391_reg_5723;
reg   [10:0] tmp_341_reg_5728;
wire   [6:0] add_ln691_393_fu_2666_p2;
reg   [6:0] add_ln691_393_reg_5733;
wire   [7:0] add_ln691_397_fu_2692_p2;
reg   [7:0] add_ln691_397_reg_5738;
reg   [10:0] tmp_348_reg_5743;
wire   [6:0] add_ln691_399_fu_2726_p2;
reg   [6:0] add_ln691_399_reg_5748;
wire   [7:0] add_ln691_403_fu_2752_p2;
reg   [7:0] add_ln691_403_reg_5753;
reg   [10:0] tmp_355_reg_5758;
wire   [6:0] add_ln691_405_fu_2786_p2;
reg   [6:0] add_ln691_405_reg_5763;
wire   [7:0] add_ln691_409_fu_2812_p2;
reg   [7:0] add_ln691_409_reg_5768;
reg   [10:0] tmp_362_reg_5773;
wire   [6:0] add_ln691_411_fu_2846_p2;
reg   [6:0] add_ln691_411_reg_5778;
wire   [7:0] add_ln691_415_fu_2872_p2;
reg   [7:0] add_ln691_415_reg_5783;
reg   [10:0] tmp_369_reg_5788;
wire   [6:0] add_ln691_417_fu_2906_p2;
reg   [6:0] add_ln691_417_reg_5793;
wire   [7:0] add_ln691_421_fu_2932_p2;
reg   [7:0] add_ln691_421_reg_5798;
reg   [10:0] tmp_376_reg_5803;
wire   [6:0] add_ln691_423_fu_2966_p2;
reg   [6:0] add_ln691_423_reg_5808;
wire   [7:0] add_ln691_427_fu_2992_p2;
reg   [7:0] add_ln691_427_reg_5813;
reg   [10:0] tmp_383_reg_5818;
wire   [6:0] add_ln691_429_fu_3026_p2;
reg   [6:0] add_ln691_429_reg_5823;
wire   [7:0] add_ln691_433_fu_3052_p2;
reg   [7:0] add_ln691_433_reg_5828;
reg   [10:0] tmp_389_reg_5833;
wire   [6:0] add_ln691_435_fu_3140_p2;
reg   [6:0] add_ln691_435_reg_5838;
wire   [7:0] add_ln691_439_fu_3166_p2;
reg   [7:0] add_ln691_439_reg_5843;
reg   [10:0] tmp_390_reg_5848;
wire   [6:0] add_ln691_441_fu_3236_p2;
reg   [6:0] add_ln691_441_reg_5853;
wire   [7:0] add_ln691_445_fu_3262_p2;
reg   [7:0] add_ln691_445_reg_5858;
reg   [10:0] tmp_391_reg_5863;
wire   [6:0] add_ln691_447_fu_3332_p2;
reg   [6:0] add_ln691_447_reg_5868;
wire   [7:0] add_ln691_451_fu_3358_p2;
reg   [7:0] add_ln691_451_reg_5873;
reg   [10:0] tmp_392_reg_5878;
wire   [6:0] add_ln691_453_fu_3428_p2;
reg   [6:0] add_ln691_453_reg_5883;
wire   [7:0] add_ln691_457_fu_3454_p2;
reg   [7:0] add_ln691_457_reg_5888;
reg   [10:0] tmp_393_reg_5893;
wire   [6:0] add_ln691_459_fu_3524_p2;
reg   [6:0] add_ln691_459_reg_5898;
wire   [7:0] add_ln691_463_fu_3550_p2;
reg   [7:0] add_ln691_463_reg_5903;
reg   [10:0] tmp_394_reg_5908;
wire   [6:0] add_ln691_465_fu_3620_p2;
reg   [6:0] add_ln691_465_reg_5913;
wire   [7:0] add_ln691_469_fu_3646_p2;
reg   [7:0] add_ln691_469_reg_5918;
reg   [10:0] tmp_395_reg_5923;
wire   [6:0] add_ln691_471_fu_3716_p2;
reg   [6:0] add_ln691_471_reg_5928;
wire   [7:0] add_ln691_475_fu_3742_p2;
reg   [7:0] add_ln691_475_reg_5933;
reg   [10:0] tmp_396_reg_5938;
wire   [6:0] add_ln691_477_fu_3812_p2;
reg   [6:0] add_ln691_477_reg_5943;
wire   [7:0] add_ln691_481_fu_3838_p2;
reg   [7:0] add_ln691_481_reg_5948;
reg   [10:0] tmp_397_reg_5953;
wire   [6:0] add_ln691_483_fu_3908_p2;
reg   [6:0] add_ln691_483_reg_5958;
wire   [7:0] add_ln691_487_fu_3934_p2;
reg   [7:0] add_ln691_487_reg_5963;
reg   [10:0] tmp_398_reg_5968;
wire   [6:0] add_ln691_489_fu_4004_p2;
reg   [6:0] add_ln691_489_reg_5973;
wire   [7:0] add_ln691_493_fu_4030_p2;
reg   [7:0] add_ln691_493_reg_5978;
reg   [10:0] tmp_399_reg_5983;
wire   [6:0] add_ln691_495_fu_4100_p2;
reg   [6:0] add_ln691_495_reg_5988;
wire   [7:0] add_ln691_499_fu_4126_p2;
reg   [7:0] add_ln691_499_reg_5993;
reg   [10:0] tmp_400_reg_5998;
wire   [6:0] add_ln691_501_fu_4196_p2;
reg   [6:0] add_ln691_501_reg_6003;
wire   [7:0] add_ln691_505_fu_4222_p2;
reg   [7:0] add_ln691_505_reg_6008;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state6;
reg   [15:0] ap_phi_mux_indvar_flatten20_phi_fu_552_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_564_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_575_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_587_p4;
wire   [63:0] zext_ln121_fu_729_p1;
wire   [63:0] zext_ln215_2_fu_734_p1;
wire   [63:0] zext_ln121_2_fu_738_p1;
reg   [263:0] vec_o_data_M_elems_V_2_fu_496;
wire   [263:0] tmp_401_fu_4636_p25;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state1;
wire   [0:0] icmp_ln122_fu_620_p2;
wire   [0:0] xor_ln120_fu_614_p2;
wire   [0:0] or_ln121_fu_632_p2;
wire   [3:0] trunc_ln215_3_fu_667_p1;
wire   [3:0] trunc_ln215_fu_663_p1;
wire   [3:0] select_ln120_4_fu_671_p3;
wire   [3:0] select_ln121_5_fu_678_p3;
wire   [8:0] tmp_cast_fu_685_p3;
wire   [8:0] zext_ln215_fu_699_p1;
wire   [2:0] trunc_ln145_fu_742_p1;
wire  signed [2:0] trunc_ln215_4_fu_856_p1;
wire  signed [2:0] mul_ln1345_fu_868_p1;
wire  signed [5:0] sext_ln1345_fu_860_p1;
wire   [2:0] trunc_ln145_s_fu_746_p4;
wire  signed [2:0] tmp_s_fu_874_p4;
wire  signed [2:0] mul_ln1345_364_fu_892_p1;
wire  signed [5:0] sext_ln1345_209_fu_884_p1;
wire   [2:0] trunc_ln145_115_fu_756_p4;
wire  signed [2:0] tmp_308_fu_898_p4;
wire  signed [2:0] mul_ln1345_365_fu_916_p1;
wire  signed [5:0] sext_ln1345_211_fu_908_p1;
wire   [2:0] trunc_ln145_116_fu_766_p4;
wire  signed [2:0] tmp_309_fu_922_p4;
wire  signed [2:0] mul_ln1345_366_fu_940_p1;
wire  signed [5:0] sext_ln1345_213_fu_932_p1;
wire   [2:0] trunc_ln145_117_fu_776_p4;
wire  signed [2:0] tmp_310_fu_946_p4;
wire  signed [2:0] mul_ln1345_367_fu_964_p1;
wire  signed [5:0] sext_ln1345_215_fu_956_p1;
wire   [2:0] trunc_ln145_118_fu_786_p4;
wire  signed [2:0] tmp_311_fu_970_p4;
wire  signed [2:0] mul_ln1345_368_fu_988_p1;
wire  signed [5:0] sext_ln1345_217_fu_980_p1;
wire  signed [2:0] tmp_312_fu_994_p4;
wire  signed [2:0] mul_ln1345_369_fu_1008_p1;
wire  signed [2:0] tmp_314_fu_1014_p4;
wire  signed [2:0] mul_ln1345_370_fu_1028_p1;
wire  signed [2:0] tmp_315_fu_1034_p4;
wire  signed [2:0] mul_ln1345_371_fu_1048_p1;
wire  signed [2:0] tmp_316_fu_1054_p4;
wire  signed [2:0] mul_ln1345_372_fu_1068_p1;
wire  signed [2:0] tmp_317_fu_1074_p4;
wire  signed [2:0] mul_ln1345_373_fu_1088_p1;
wire  signed [2:0] tmp_318_fu_1094_p4;
wire  signed [2:0] mul_ln1345_374_fu_1108_p1;
wire  signed [2:0] tmp_319_fu_1114_p4;
wire  signed [2:0] mul_ln1345_375_fu_1128_p1;
wire  signed [2:0] tmp_321_fu_1134_p4;
wire  signed [2:0] mul_ln1345_376_fu_1148_p1;
wire  signed [2:0] tmp_322_fu_1154_p4;
wire  signed [2:0] mul_ln1345_377_fu_1168_p1;
wire  signed [2:0] tmp_323_fu_1174_p4;
wire  signed [2:0] mul_ln1345_378_fu_1188_p1;
wire  signed [2:0] tmp_324_fu_1194_p4;
wire  signed [2:0] mul_ln1345_379_fu_1208_p1;
wire  signed [2:0] tmp_325_fu_1214_p4;
wire  signed [2:0] mul_ln1345_380_fu_1228_p1;
wire  signed [2:0] tmp_326_fu_1234_p4;
wire  signed [2:0] mul_ln1345_381_fu_1248_p1;
wire  signed [2:0] tmp_328_fu_1254_p4;
wire  signed [2:0] mul_ln1345_382_fu_1268_p1;
wire  signed [2:0] tmp_329_fu_1274_p4;
wire  signed [2:0] mul_ln1345_383_fu_1288_p1;
wire  signed [2:0] tmp_330_fu_1294_p4;
wire  signed [2:0] mul_ln1345_384_fu_1308_p1;
wire  signed [2:0] tmp_331_fu_1314_p4;
wire  signed [2:0] mul_ln1345_385_fu_1328_p1;
wire  signed [2:0] tmp_332_fu_1334_p4;
wire  signed [2:0] mul_ln1345_386_fu_1348_p1;
wire  signed [2:0] tmp_333_fu_1354_p4;
wire  signed [2:0] mul_ln1345_387_fu_1368_p1;
wire  signed [2:0] tmp_335_fu_1374_p4;
wire  signed [2:0] mul_ln1345_388_fu_1388_p1;
wire  signed [2:0] tmp_336_fu_1394_p4;
wire  signed [2:0] mul_ln1345_389_fu_1408_p1;
wire  signed [2:0] tmp_337_fu_1414_p4;
wire  signed [2:0] mul_ln1345_390_fu_1428_p1;
wire  signed [2:0] tmp_338_fu_1434_p4;
wire  signed [2:0] mul_ln1345_391_fu_1448_p1;
wire  signed [2:0] tmp_339_fu_1454_p4;
wire  signed [2:0] mul_ln1345_392_fu_1468_p1;
wire  signed [2:0] tmp_340_fu_1474_p4;
wire  signed [2:0] mul_ln1345_393_fu_1488_p1;
wire  signed [2:0] tmp_342_fu_1494_p4;
wire  signed [2:0] mul_ln1345_394_fu_1508_p1;
wire  signed [2:0] tmp_343_fu_1514_p4;
wire  signed [2:0] mul_ln1345_395_fu_1528_p1;
wire  signed [2:0] tmp_344_fu_1534_p4;
wire  signed [2:0] mul_ln1345_396_fu_1548_p1;
wire  signed [2:0] tmp_345_fu_1554_p4;
wire  signed [2:0] mul_ln1345_397_fu_1568_p1;
wire  signed [2:0] tmp_346_fu_1574_p4;
wire  signed [2:0] mul_ln1345_398_fu_1588_p1;
wire  signed [2:0] tmp_347_fu_1594_p4;
wire  signed [2:0] mul_ln1345_399_fu_1608_p1;
wire  signed [2:0] tmp_349_fu_1614_p4;
wire  signed [2:0] mul_ln1345_400_fu_1628_p1;
wire  signed [2:0] tmp_350_fu_1634_p4;
wire  signed [2:0] mul_ln1345_401_fu_1648_p1;
wire  signed [2:0] tmp_351_fu_1654_p4;
wire  signed [2:0] mul_ln1345_402_fu_1668_p1;
wire  signed [2:0] tmp_352_fu_1674_p4;
wire  signed [2:0] mul_ln1345_403_fu_1688_p1;
wire  signed [2:0] tmp_353_fu_1694_p4;
wire  signed [2:0] mul_ln1345_404_fu_1708_p1;
wire  signed [2:0] tmp_354_fu_1714_p4;
wire  signed [2:0] mul_ln1345_405_fu_1728_p1;
wire  signed [2:0] tmp_356_fu_1734_p4;
wire  signed [2:0] mul_ln1345_406_fu_1748_p1;
wire  signed [2:0] tmp_357_fu_1754_p4;
wire  signed [2:0] mul_ln1345_407_fu_1768_p1;
wire  signed [2:0] tmp_358_fu_1774_p4;
wire  signed [2:0] mul_ln1345_408_fu_1788_p1;
wire  signed [2:0] tmp_359_fu_1794_p4;
wire  signed [2:0] mul_ln1345_409_fu_1808_p1;
wire  signed [2:0] tmp_360_fu_1814_p4;
wire  signed [2:0] mul_ln1345_410_fu_1828_p1;
wire  signed [2:0] tmp_361_fu_1834_p4;
wire  signed [2:0] mul_ln1345_411_fu_1848_p1;
wire  signed [2:0] tmp_363_fu_1854_p4;
wire  signed [2:0] mul_ln1345_412_fu_1868_p1;
wire  signed [2:0] tmp_364_fu_1874_p4;
wire  signed [2:0] mul_ln1345_413_fu_1888_p1;
wire  signed [2:0] tmp_365_fu_1894_p4;
wire  signed [2:0] mul_ln1345_414_fu_1908_p1;
wire  signed [2:0] tmp_366_fu_1914_p4;
wire  signed [2:0] mul_ln1345_415_fu_1928_p1;
wire  signed [2:0] tmp_367_fu_1934_p4;
wire  signed [2:0] mul_ln1345_416_fu_1948_p1;
wire  signed [2:0] tmp_368_fu_1954_p4;
wire  signed [2:0] mul_ln1345_417_fu_1968_p1;
wire  signed [2:0] tmp_370_fu_1974_p4;
wire  signed [2:0] mul_ln1345_418_fu_1988_p1;
wire  signed [2:0] tmp_371_fu_1994_p4;
wire  signed [2:0] mul_ln1345_419_fu_2008_p1;
wire  signed [2:0] tmp_372_fu_2014_p4;
wire  signed [2:0] mul_ln1345_420_fu_2028_p1;
wire  signed [2:0] tmp_373_fu_2034_p4;
wire  signed [2:0] mul_ln1345_421_fu_2048_p1;
wire  signed [2:0] tmp_374_fu_2054_p4;
wire  signed [2:0] mul_ln1345_422_fu_2068_p1;
wire  signed [2:0] tmp_375_fu_2074_p4;
wire  signed [2:0] mul_ln1345_423_fu_2088_p1;
wire  signed [2:0] tmp_377_fu_2094_p4;
wire  signed [2:0] mul_ln1345_424_fu_2108_p1;
wire  signed [2:0] tmp_378_fu_2114_p4;
wire  signed [2:0] mul_ln1345_425_fu_2128_p1;
wire  signed [2:0] tmp_379_fu_2134_p4;
wire  signed [2:0] mul_ln1345_426_fu_2148_p1;
wire  signed [2:0] tmp_380_fu_2154_p4;
wire  signed [2:0] mul_ln1345_427_fu_2168_p1;
wire  signed [2:0] tmp_381_fu_2174_p4;
wire  signed [2:0] mul_ln1345_428_fu_2188_p1;
wire  signed [2:0] tmp_382_fu_2194_p4;
wire  signed [2:0] mul_ln1345_429_fu_2208_p1;
wire  signed [2:0] tmp_384_fu_2214_p4;
wire  signed [2:0] mul_ln1345_430_fu_2228_p1;
wire  signed [2:0] tmp_385_fu_2234_p4;
wire  signed [2:0] mul_ln1345_431_fu_2248_p1;
wire  signed [2:0] tmp_386_fu_2254_p4;
wire  signed [2:0] mul_ln1345_432_fu_2268_p1;
wire  signed [2:0] tmp_387_fu_2274_p4;
wire  signed [2:0] mul_ln1345_433_fu_2288_p1;
wire  signed [2:0] tmp_388_fu_2294_p4;
wire  signed [2:0] mul_ln1345_434_fu_2308_p1;
wire   [131:0] select_ln120_3_fu_2317_p3;
wire   [131:0] select_ln121_6_fu_2322_p3;
wire   [263:0] vec_o_data_M_elems_V_fu_2329_p3;
wire   [263:0] select_ln126_fu_2337_p3;
wire  signed [6:0] sext_ln151_97_fu_2357_p1;
wire  signed [6:0] sext_ln151_98_fu_2360_p1;
wire  signed [6:0] sext_ln151_96_fu_2354_p1;
wire  signed [6:0] sext_ln151_fu_2351_p1;
wire   [6:0] add_ln691_365_fu_2372_p2;
wire  signed [6:0] sext_ln691_fu_2344_p1;
wire  signed [6:0] sext_ln691_364_fu_2363_p1;
wire   [6:0] add_ln691_366_fu_2382_p2;
wire  signed [7:0] sext_ln691_367_fu_2388_p1;
wire  signed [7:0] sext_ln691_366_fu_2378_p1;
wire  signed [6:0] sext_ln151_101_fu_2417_p1;
wire  signed [6:0] sext_ln151_102_fu_2420_p1;
wire  signed [6:0] sext_ln151_100_fu_2414_p1;
wire  signed [6:0] sext_ln151_99_fu_2411_p1;
wire   [6:0] add_ln691_371_fu_2432_p2;
wire  signed [6:0] sext_ln691_369_fu_2398_p1;
wire  signed [6:0] sext_ln691_370_fu_2423_p1;
wire   [6:0] add_ln691_372_fu_2442_p2;
wire  signed [7:0] sext_ln691_373_fu_2448_p1;
wire  signed [7:0] sext_ln691_372_fu_2438_p1;
wire  signed [6:0] sext_ln151_105_fu_2477_p1;
wire  signed [6:0] sext_ln151_106_fu_2480_p1;
wire  signed [6:0] sext_ln151_104_fu_2474_p1;
wire  signed [6:0] sext_ln151_103_fu_2471_p1;
wire   [6:0] add_ln691_377_fu_2492_p2;
wire  signed [6:0] sext_ln691_375_fu_2458_p1;
wire  signed [6:0] sext_ln691_376_fu_2483_p1;
wire   [6:0] add_ln691_378_fu_2502_p2;
wire  signed [7:0] sext_ln691_379_fu_2508_p1;
wire  signed [7:0] sext_ln691_378_fu_2498_p1;
wire  signed [6:0] sext_ln151_109_fu_2537_p1;
wire  signed [6:0] sext_ln151_110_fu_2540_p1;
wire  signed [6:0] sext_ln151_108_fu_2534_p1;
wire  signed [6:0] sext_ln151_107_fu_2531_p1;
wire   [6:0] add_ln691_383_fu_2552_p2;
wire  signed [6:0] sext_ln691_381_fu_2518_p1;
wire  signed [6:0] sext_ln691_382_fu_2543_p1;
wire   [6:0] add_ln691_384_fu_2562_p2;
wire  signed [7:0] sext_ln691_385_fu_2568_p1;
wire  signed [7:0] sext_ln691_384_fu_2558_p1;
wire  signed [6:0] sext_ln151_113_fu_2597_p1;
wire  signed [6:0] sext_ln151_114_fu_2600_p1;
wire  signed [6:0] sext_ln151_112_fu_2594_p1;
wire  signed [6:0] sext_ln151_111_fu_2591_p1;
wire   [6:0] add_ln691_389_fu_2612_p2;
wire  signed [6:0] sext_ln691_387_fu_2578_p1;
wire  signed [6:0] sext_ln691_388_fu_2603_p1;
wire   [6:0] add_ln691_390_fu_2622_p2;
wire  signed [7:0] sext_ln691_391_fu_2628_p1;
wire  signed [7:0] sext_ln691_390_fu_2618_p1;
wire  signed [6:0] sext_ln151_117_fu_2657_p1;
wire  signed [6:0] sext_ln151_118_fu_2660_p1;
wire  signed [6:0] sext_ln151_116_fu_2654_p1;
wire  signed [6:0] sext_ln151_115_fu_2651_p1;
wire   [6:0] add_ln691_395_fu_2672_p2;
wire  signed [6:0] sext_ln691_393_fu_2638_p1;
wire  signed [6:0] sext_ln691_394_fu_2663_p1;
wire   [6:0] add_ln691_396_fu_2682_p2;
wire  signed [7:0] sext_ln691_397_fu_2688_p1;
wire  signed [7:0] sext_ln691_396_fu_2678_p1;
wire  signed [6:0] sext_ln151_121_fu_2717_p1;
wire  signed [6:0] sext_ln151_122_fu_2720_p1;
wire  signed [6:0] sext_ln151_120_fu_2714_p1;
wire  signed [6:0] sext_ln151_119_fu_2711_p1;
wire   [6:0] add_ln691_401_fu_2732_p2;
wire  signed [6:0] sext_ln691_399_fu_2698_p1;
wire  signed [6:0] sext_ln691_400_fu_2723_p1;
wire   [6:0] add_ln691_402_fu_2742_p2;
wire  signed [7:0] sext_ln691_403_fu_2748_p1;
wire  signed [7:0] sext_ln691_402_fu_2738_p1;
wire  signed [6:0] sext_ln151_125_fu_2777_p1;
wire  signed [6:0] sext_ln151_126_fu_2780_p1;
wire  signed [6:0] sext_ln151_124_fu_2774_p1;
wire  signed [6:0] sext_ln151_123_fu_2771_p1;
wire   [6:0] add_ln691_407_fu_2792_p2;
wire  signed [6:0] sext_ln691_405_fu_2758_p1;
wire  signed [6:0] sext_ln691_406_fu_2783_p1;
wire   [6:0] add_ln691_408_fu_2802_p2;
wire  signed [7:0] sext_ln691_409_fu_2808_p1;
wire  signed [7:0] sext_ln691_408_fu_2798_p1;
wire  signed [6:0] sext_ln151_129_fu_2837_p1;
wire  signed [6:0] sext_ln151_130_fu_2840_p1;
wire  signed [6:0] sext_ln151_128_fu_2834_p1;
wire  signed [6:0] sext_ln151_127_fu_2831_p1;
wire   [6:0] add_ln691_413_fu_2852_p2;
wire  signed [6:0] sext_ln691_411_fu_2818_p1;
wire  signed [6:0] sext_ln691_412_fu_2843_p1;
wire   [6:0] add_ln691_414_fu_2862_p2;
wire  signed [7:0] sext_ln691_415_fu_2868_p1;
wire  signed [7:0] sext_ln691_414_fu_2858_p1;
wire  signed [6:0] sext_ln151_133_fu_2897_p1;
wire  signed [6:0] sext_ln151_134_fu_2900_p1;
wire  signed [6:0] sext_ln151_132_fu_2894_p1;
wire  signed [6:0] sext_ln151_131_fu_2891_p1;
wire   [6:0] add_ln691_419_fu_2912_p2;
wire  signed [6:0] sext_ln691_417_fu_2878_p1;
wire  signed [6:0] sext_ln691_418_fu_2903_p1;
wire   [6:0] add_ln691_420_fu_2922_p2;
wire  signed [7:0] sext_ln691_421_fu_2928_p1;
wire  signed [7:0] sext_ln691_420_fu_2918_p1;
wire  signed [6:0] sext_ln151_137_fu_2957_p1;
wire  signed [6:0] sext_ln151_138_fu_2960_p1;
wire  signed [6:0] sext_ln151_136_fu_2954_p1;
wire  signed [6:0] sext_ln151_135_fu_2951_p1;
wire   [6:0] add_ln691_425_fu_2972_p2;
wire  signed [6:0] sext_ln691_423_fu_2938_p1;
wire  signed [6:0] sext_ln691_424_fu_2963_p1;
wire   [6:0] add_ln691_426_fu_2982_p2;
wire  signed [7:0] sext_ln691_427_fu_2988_p1;
wire  signed [7:0] sext_ln691_426_fu_2978_p1;
wire  signed [6:0] sext_ln151_141_fu_3017_p1;
wire  signed [6:0] sext_ln151_142_fu_3020_p1;
wire  signed [6:0] sext_ln151_140_fu_3014_p1;
wire  signed [6:0] sext_ln151_139_fu_3011_p1;
wire   [6:0] add_ln691_431_fu_3032_p2;
wire  signed [6:0] sext_ln691_429_fu_2998_p1;
wire  signed [6:0] sext_ln691_430_fu_3023_p1;
wire   [6:0] add_ln691_432_fu_3042_p2;
wire  signed [7:0] sext_ln691_433_fu_3048_p1;
wire  signed [7:0] sext_ln691_432_fu_3038_p1;
wire  signed [2:0] mul_ln1345_435_fu_3061_p0;
wire  signed [2:0] mul_ln1345_435_fu_3061_p1;
wire  signed [5:0] sext_ln1345_285_fu_3058_p1;
wire  signed [5:0] mul_ln1345_435_fu_3061_p2;
wire  signed [2:0] mul_ln1345_436_fu_3083_p0;
wire  signed [2:0] mul_ln1345_436_fu_3083_p1;
wire  signed [5:0] sext_ln1345_286_fu_3080_p1;
wire  signed [5:0] mul_ln1345_436_fu_3083_p2;
wire  signed [2:0] mul_ln1345_437_fu_3095_p0;
wire  signed [2:0] mul_ln1345_437_fu_3095_p1;
wire  signed [5:0] sext_ln1345_287_fu_3092_p1;
wire  signed [5:0] mul_ln1345_437_fu_3095_p2;
wire  signed [2:0] mul_ln1345_438_fu_3107_p0;
wire  signed [2:0] mul_ln1345_438_fu_3107_p1;
wire  signed [5:0] sext_ln1345_288_fu_3104_p1;
wire  signed [5:0] mul_ln1345_438_fu_3107_p2;
wire  signed [2:0] mul_ln1345_439_fu_3119_p0;
wire  signed [2:0] mul_ln1345_439_fu_3119_p1;
wire  signed [5:0] sext_ln1345_289_fu_3116_p1;
wire  signed [5:0] mul_ln1345_439_fu_3119_p2;
wire  signed [2:0] mul_ln1345_440_fu_3131_p0;
wire  signed [2:0] mul_ln1345_440_fu_3131_p1;
wire  signed [5:0] sext_ln1345_290_fu_3128_p1;
wire  signed [5:0] mul_ln1345_440_fu_3131_p2;
wire  signed [6:0] sext_ln151_145_fu_3112_p1;
wire  signed [6:0] sext_ln151_146_fu_3124_p1;
wire  signed [6:0] sext_ln151_144_fu_3100_p1;
wire  signed [6:0] sext_ln151_143_fu_3088_p1;
wire   [6:0] add_ln691_437_fu_3146_p2;
wire  signed [6:0] sext_ln691_435_fu_3066_p1;
wire  signed [6:0] sext_ln691_436_fu_3136_p1;
wire   [6:0] add_ln691_438_fu_3156_p2;
wire  signed [7:0] sext_ln691_439_fu_3162_p1;
wire  signed [7:0] sext_ln691_438_fu_3152_p1;
wire  signed [2:0] mul_ln1345_441_fu_3172_p0;
wire  signed [2:0] mul_ln1345_441_fu_3172_p1;
wire  signed [5:0] mul_ln1345_441_fu_3172_p2;
wire  signed [2:0] mul_ln1345_442_fu_3191_p0;
wire  signed [2:0] mul_ln1345_442_fu_3191_p1;
wire  signed [5:0] mul_ln1345_442_fu_3191_p2;
wire  signed [2:0] mul_ln1345_443_fu_3200_p0;
wire  signed [2:0] mul_ln1345_443_fu_3200_p1;
wire  signed [5:0] mul_ln1345_443_fu_3200_p2;
wire  signed [2:0] mul_ln1345_444_fu_3209_p0;
wire  signed [2:0] mul_ln1345_444_fu_3209_p1;
wire  signed [5:0] mul_ln1345_444_fu_3209_p2;
wire  signed [2:0] mul_ln1345_445_fu_3218_p0;
wire  signed [2:0] mul_ln1345_445_fu_3218_p1;
wire  signed [5:0] mul_ln1345_445_fu_3218_p2;
wire  signed [2:0] mul_ln1345_446_fu_3227_p0;
wire  signed [2:0] mul_ln1345_446_fu_3227_p1;
wire  signed [5:0] mul_ln1345_446_fu_3227_p2;
wire  signed [6:0] sext_ln151_149_fu_3214_p1;
wire  signed [6:0] sext_ln151_150_fu_3223_p1;
wire  signed [6:0] sext_ln151_148_fu_3205_p1;
wire  signed [6:0] sext_ln151_147_fu_3196_p1;
wire   [6:0] add_ln691_443_fu_3242_p2;
wire  signed [6:0] sext_ln691_441_fu_3177_p1;
wire  signed [6:0] sext_ln691_442_fu_3232_p1;
wire   [6:0] add_ln691_444_fu_3252_p2;
wire  signed [7:0] sext_ln691_445_fu_3258_p1;
wire  signed [7:0] sext_ln691_444_fu_3248_p1;
wire  signed [2:0] mul_ln1345_447_fu_3268_p0;
wire  signed [2:0] mul_ln1345_447_fu_3268_p1;
wire  signed [5:0] mul_ln1345_447_fu_3268_p2;
wire  signed [2:0] mul_ln1345_448_fu_3287_p0;
wire  signed [2:0] mul_ln1345_448_fu_3287_p1;
wire  signed [5:0] mul_ln1345_448_fu_3287_p2;
wire  signed [2:0] mul_ln1345_449_fu_3296_p0;
wire  signed [2:0] mul_ln1345_449_fu_3296_p1;
wire  signed [5:0] mul_ln1345_449_fu_3296_p2;
wire  signed [2:0] mul_ln1345_450_fu_3305_p0;
wire  signed [2:0] mul_ln1345_450_fu_3305_p1;
wire  signed [5:0] mul_ln1345_450_fu_3305_p2;
wire  signed [2:0] mul_ln1345_451_fu_3314_p0;
wire  signed [2:0] mul_ln1345_451_fu_3314_p1;
wire  signed [5:0] mul_ln1345_451_fu_3314_p2;
wire  signed [2:0] mul_ln1345_452_fu_3323_p0;
wire  signed [2:0] mul_ln1345_452_fu_3323_p1;
wire  signed [5:0] mul_ln1345_452_fu_3323_p2;
wire  signed [6:0] sext_ln151_153_fu_3310_p1;
wire  signed [6:0] sext_ln151_154_fu_3319_p1;
wire  signed [6:0] sext_ln151_152_fu_3301_p1;
wire  signed [6:0] sext_ln151_151_fu_3292_p1;
wire   [6:0] add_ln691_449_fu_3338_p2;
wire  signed [6:0] sext_ln691_447_fu_3273_p1;
wire  signed [6:0] sext_ln691_448_fu_3328_p1;
wire   [6:0] add_ln691_450_fu_3348_p2;
wire  signed [7:0] sext_ln691_451_fu_3354_p1;
wire  signed [7:0] sext_ln691_450_fu_3344_p1;
wire  signed [2:0] mul_ln1345_453_fu_3364_p0;
wire  signed [2:0] mul_ln1345_453_fu_3364_p1;
wire  signed [5:0] mul_ln1345_453_fu_3364_p2;
wire  signed [2:0] mul_ln1345_454_fu_3383_p0;
wire  signed [2:0] mul_ln1345_454_fu_3383_p1;
wire  signed [5:0] mul_ln1345_454_fu_3383_p2;
wire  signed [2:0] mul_ln1345_455_fu_3392_p0;
wire  signed [2:0] mul_ln1345_455_fu_3392_p1;
wire  signed [5:0] mul_ln1345_455_fu_3392_p2;
wire  signed [2:0] mul_ln1345_456_fu_3401_p0;
wire  signed [2:0] mul_ln1345_456_fu_3401_p1;
wire  signed [5:0] mul_ln1345_456_fu_3401_p2;
wire  signed [2:0] mul_ln1345_457_fu_3410_p0;
wire  signed [2:0] mul_ln1345_457_fu_3410_p1;
wire  signed [5:0] mul_ln1345_457_fu_3410_p2;
wire  signed [2:0] mul_ln1345_458_fu_3419_p0;
wire  signed [2:0] mul_ln1345_458_fu_3419_p1;
wire  signed [5:0] mul_ln1345_458_fu_3419_p2;
wire  signed [6:0] sext_ln151_157_fu_3406_p1;
wire  signed [6:0] sext_ln151_158_fu_3415_p1;
wire  signed [6:0] sext_ln151_156_fu_3397_p1;
wire  signed [6:0] sext_ln151_155_fu_3388_p1;
wire   [6:0] add_ln691_455_fu_3434_p2;
wire  signed [6:0] sext_ln691_453_fu_3369_p1;
wire  signed [6:0] sext_ln691_454_fu_3424_p1;
wire   [6:0] add_ln691_456_fu_3444_p2;
wire  signed [7:0] sext_ln691_457_fu_3450_p1;
wire  signed [7:0] sext_ln691_456_fu_3440_p1;
wire  signed [2:0] mul_ln1345_459_fu_3460_p0;
wire  signed [2:0] mul_ln1345_459_fu_3460_p1;
wire  signed [5:0] mul_ln1345_459_fu_3460_p2;
wire  signed [2:0] mul_ln1345_460_fu_3479_p0;
wire  signed [2:0] mul_ln1345_460_fu_3479_p1;
wire  signed [5:0] mul_ln1345_460_fu_3479_p2;
wire  signed [2:0] mul_ln1345_461_fu_3488_p0;
wire  signed [2:0] mul_ln1345_461_fu_3488_p1;
wire  signed [5:0] mul_ln1345_461_fu_3488_p2;
wire  signed [2:0] mul_ln1345_462_fu_3497_p0;
wire  signed [2:0] mul_ln1345_462_fu_3497_p1;
wire  signed [5:0] mul_ln1345_462_fu_3497_p2;
wire  signed [2:0] mul_ln1345_463_fu_3506_p0;
wire  signed [2:0] mul_ln1345_463_fu_3506_p1;
wire  signed [5:0] mul_ln1345_463_fu_3506_p2;
wire  signed [2:0] mul_ln1345_464_fu_3515_p0;
wire  signed [2:0] mul_ln1345_464_fu_3515_p1;
wire  signed [5:0] mul_ln1345_464_fu_3515_p2;
wire  signed [6:0] sext_ln151_161_fu_3502_p1;
wire  signed [6:0] sext_ln151_162_fu_3511_p1;
wire  signed [6:0] sext_ln151_160_fu_3493_p1;
wire  signed [6:0] sext_ln151_159_fu_3484_p1;
wire   [6:0] add_ln691_461_fu_3530_p2;
wire  signed [6:0] sext_ln691_459_fu_3465_p1;
wire  signed [6:0] sext_ln691_460_fu_3520_p1;
wire   [6:0] add_ln691_462_fu_3540_p2;
wire  signed [7:0] sext_ln691_463_fu_3546_p1;
wire  signed [7:0] sext_ln691_462_fu_3536_p1;
wire  signed [2:0] mul_ln1345_465_fu_3556_p0;
wire  signed [2:0] mul_ln1345_465_fu_3556_p1;
wire  signed [5:0] mul_ln1345_465_fu_3556_p2;
wire  signed [2:0] mul_ln1345_466_fu_3575_p0;
wire  signed [2:0] mul_ln1345_466_fu_3575_p1;
wire  signed [5:0] mul_ln1345_466_fu_3575_p2;
wire  signed [2:0] mul_ln1345_467_fu_3584_p0;
wire  signed [2:0] mul_ln1345_467_fu_3584_p1;
wire  signed [5:0] mul_ln1345_467_fu_3584_p2;
wire  signed [2:0] mul_ln1345_468_fu_3593_p0;
wire  signed [2:0] mul_ln1345_468_fu_3593_p1;
wire  signed [5:0] mul_ln1345_468_fu_3593_p2;
wire  signed [2:0] mul_ln1345_469_fu_3602_p0;
wire  signed [2:0] mul_ln1345_469_fu_3602_p1;
wire  signed [5:0] mul_ln1345_469_fu_3602_p2;
wire  signed [2:0] mul_ln1345_470_fu_3611_p0;
wire  signed [2:0] mul_ln1345_470_fu_3611_p1;
wire  signed [5:0] mul_ln1345_470_fu_3611_p2;
wire  signed [6:0] sext_ln151_165_fu_3598_p1;
wire  signed [6:0] sext_ln151_166_fu_3607_p1;
wire  signed [6:0] sext_ln151_164_fu_3589_p1;
wire  signed [6:0] sext_ln151_163_fu_3580_p1;
wire   [6:0] add_ln691_467_fu_3626_p2;
wire  signed [6:0] sext_ln691_465_fu_3561_p1;
wire  signed [6:0] sext_ln691_466_fu_3616_p1;
wire   [6:0] add_ln691_468_fu_3636_p2;
wire  signed [7:0] sext_ln691_469_fu_3642_p1;
wire  signed [7:0] sext_ln691_468_fu_3632_p1;
wire  signed [2:0] mul_ln1345_471_fu_3652_p0;
wire  signed [2:0] mul_ln1345_471_fu_3652_p1;
wire  signed [5:0] mul_ln1345_471_fu_3652_p2;
wire  signed [2:0] mul_ln1345_472_fu_3671_p0;
wire  signed [2:0] mul_ln1345_472_fu_3671_p1;
wire  signed [5:0] mul_ln1345_472_fu_3671_p2;
wire  signed [2:0] mul_ln1345_473_fu_3680_p0;
wire  signed [2:0] mul_ln1345_473_fu_3680_p1;
wire  signed [5:0] mul_ln1345_473_fu_3680_p2;
wire  signed [2:0] mul_ln1345_474_fu_3689_p0;
wire  signed [2:0] mul_ln1345_474_fu_3689_p1;
wire  signed [5:0] mul_ln1345_474_fu_3689_p2;
wire  signed [2:0] mul_ln1345_475_fu_3698_p0;
wire  signed [2:0] mul_ln1345_475_fu_3698_p1;
wire  signed [5:0] mul_ln1345_475_fu_3698_p2;
wire  signed [2:0] mul_ln1345_476_fu_3707_p0;
wire  signed [2:0] mul_ln1345_476_fu_3707_p1;
wire  signed [5:0] mul_ln1345_476_fu_3707_p2;
wire  signed [6:0] sext_ln151_169_fu_3694_p1;
wire  signed [6:0] sext_ln151_170_fu_3703_p1;
wire  signed [6:0] sext_ln151_168_fu_3685_p1;
wire  signed [6:0] sext_ln151_167_fu_3676_p1;
wire   [6:0] add_ln691_473_fu_3722_p2;
wire  signed [6:0] sext_ln691_471_fu_3657_p1;
wire  signed [6:0] sext_ln691_472_fu_3712_p1;
wire   [6:0] add_ln691_474_fu_3732_p2;
wire  signed [7:0] sext_ln691_475_fu_3738_p1;
wire  signed [7:0] sext_ln691_474_fu_3728_p1;
wire  signed [2:0] mul_ln1345_477_fu_3748_p0;
wire  signed [2:0] mul_ln1345_477_fu_3748_p1;
wire  signed [5:0] mul_ln1345_477_fu_3748_p2;
wire  signed [2:0] mul_ln1345_478_fu_3767_p0;
wire  signed [2:0] mul_ln1345_478_fu_3767_p1;
wire  signed [5:0] mul_ln1345_478_fu_3767_p2;
wire  signed [2:0] mul_ln1345_479_fu_3776_p0;
wire  signed [2:0] mul_ln1345_479_fu_3776_p1;
wire  signed [5:0] mul_ln1345_479_fu_3776_p2;
wire  signed [2:0] mul_ln1345_480_fu_3785_p0;
wire  signed [2:0] mul_ln1345_480_fu_3785_p1;
wire  signed [5:0] mul_ln1345_480_fu_3785_p2;
wire  signed [2:0] mul_ln1345_481_fu_3794_p0;
wire  signed [2:0] mul_ln1345_481_fu_3794_p1;
wire  signed [5:0] mul_ln1345_481_fu_3794_p2;
wire  signed [2:0] mul_ln1345_482_fu_3803_p0;
wire  signed [2:0] mul_ln1345_482_fu_3803_p1;
wire  signed [5:0] mul_ln1345_482_fu_3803_p2;
wire  signed [6:0] sext_ln151_173_fu_3790_p1;
wire  signed [6:0] sext_ln151_174_fu_3799_p1;
wire  signed [6:0] sext_ln151_172_fu_3781_p1;
wire  signed [6:0] sext_ln151_171_fu_3772_p1;
wire   [6:0] add_ln691_479_fu_3818_p2;
wire  signed [6:0] sext_ln691_477_fu_3753_p1;
wire  signed [6:0] sext_ln691_478_fu_3808_p1;
wire   [6:0] add_ln691_480_fu_3828_p2;
wire  signed [7:0] sext_ln691_481_fu_3834_p1;
wire  signed [7:0] sext_ln691_480_fu_3824_p1;
wire  signed [2:0] mul_ln1345_483_fu_3844_p0;
wire  signed [2:0] mul_ln1345_483_fu_3844_p1;
wire  signed [5:0] mul_ln1345_483_fu_3844_p2;
wire  signed [2:0] mul_ln1345_484_fu_3863_p0;
wire  signed [2:0] mul_ln1345_484_fu_3863_p1;
wire  signed [5:0] mul_ln1345_484_fu_3863_p2;
wire  signed [2:0] mul_ln1345_485_fu_3872_p0;
wire  signed [2:0] mul_ln1345_485_fu_3872_p1;
wire  signed [5:0] mul_ln1345_485_fu_3872_p2;
wire  signed [2:0] mul_ln1345_486_fu_3881_p0;
wire  signed [2:0] mul_ln1345_486_fu_3881_p1;
wire  signed [5:0] mul_ln1345_486_fu_3881_p2;
wire  signed [2:0] mul_ln1345_487_fu_3890_p0;
wire  signed [2:0] mul_ln1345_487_fu_3890_p1;
wire  signed [5:0] mul_ln1345_487_fu_3890_p2;
wire  signed [2:0] mul_ln1345_488_fu_3899_p0;
wire  signed [2:0] mul_ln1345_488_fu_3899_p1;
wire  signed [5:0] mul_ln1345_488_fu_3899_p2;
wire  signed [6:0] sext_ln151_177_fu_3886_p1;
wire  signed [6:0] sext_ln151_178_fu_3895_p1;
wire  signed [6:0] sext_ln151_176_fu_3877_p1;
wire  signed [6:0] sext_ln151_175_fu_3868_p1;
wire   [6:0] add_ln691_485_fu_3914_p2;
wire  signed [6:0] sext_ln691_483_fu_3849_p1;
wire  signed [6:0] sext_ln691_484_fu_3904_p1;
wire   [6:0] add_ln691_486_fu_3924_p2;
wire  signed [7:0] sext_ln691_487_fu_3930_p1;
wire  signed [7:0] sext_ln691_486_fu_3920_p1;
wire  signed [2:0] mul_ln1345_489_fu_3940_p0;
wire  signed [2:0] mul_ln1345_489_fu_3940_p1;
wire  signed [5:0] mul_ln1345_489_fu_3940_p2;
wire  signed [2:0] mul_ln1345_490_fu_3959_p0;
wire  signed [2:0] mul_ln1345_490_fu_3959_p1;
wire  signed [5:0] mul_ln1345_490_fu_3959_p2;
wire  signed [2:0] mul_ln1345_491_fu_3968_p0;
wire  signed [2:0] mul_ln1345_491_fu_3968_p1;
wire  signed [5:0] mul_ln1345_491_fu_3968_p2;
wire  signed [2:0] mul_ln1345_492_fu_3977_p0;
wire  signed [2:0] mul_ln1345_492_fu_3977_p1;
wire  signed [5:0] mul_ln1345_492_fu_3977_p2;
wire  signed [2:0] mul_ln1345_493_fu_3986_p0;
wire  signed [2:0] mul_ln1345_493_fu_3986_p1;
wire  signed [5:0] mul_ln1345_493_fu_3986_p2;
wire  signed [2:0] mul_ln1345_494_fu_3995_p0;
wire  signed [2:0] mul_ln1345_494_fu_3995_p1;
wire  signed [5:0] mul_ln1345_494_fu_3995_p2;
wire  signed [6:0] sext_ln151_181_fu_3982_p1;
wire  signed [6:0] sext_ln151_182_fu_3991_p1;
wire  signed [6:0] sext_ln151_180_fu_3973_p1;
wire  signed [6:0] sext_ln151_179_fu_3964_p1;
wire   [6:0] add_ln691_491_fu_4010_p2;
wire  signed [6:0] sext_ln691_489_fu_3945_p1;
wire  signed [6:0] sext_ln691_490_fu_4000_p1;
wire   [6:0] add_ln691_492_fu_4020_p2;
wire  signed [7:0] sext_ln691_493_fu_4026_p1;
wire  signed [7:0] sext_ln691_492_fu_4016_p1;
wire  signed [2:0] mul_ln1345_495_fu_4036_p0;
wire  signed [2:0] mul_ln1345_495_fu_4036_p1;
wire  signed [5:0] mul_ln1345_495_fu_4036_p2;
wire  signed [2:0] mul_ln1345_496_fu_4055_p0;
wire  signed [2:0] mul_ln1345_496_fu_4055_p1;
wire  signed [5:0] mul_ln1345_496_fu_4055_p2;
wire  signed [2:0] mul_ln1345_497_fu_4064_p0;
wire  signed [2:0] mul_ln1345_497_fu_4064_p1;
wire  signed [5:0] mul_ln1345_497_fu_4064_p2;
wire  signed [2:0] mul_ln1345_498_fu_4073_p0;
wire  signed [2:0] mul_ln1345_498_fu_4073_p1;
wire  signed [5:0] mul_ln1345_498_fu_4073_p2;
wire  signed [2:0] mul_ln1345_499_fu_4082_p0;
wire  signed [2:0] mul_ln1345_499_fu_4082_p1;
wire  signed [5:0] mul_ln1345_499_fu_4082_p2;
wire  signed [2:0] mul_ln1345_500_fu_4091_p0;
wire  signed [2:0] mul_ln1345_500_fu_4091_p1;
wire  signed [5:0] mul_ln1345_500_fu_4091_p2;
wire  signed [6:0] sext_ln151_185_fu_4078_p1;
wire  signed [6:0] sext_ln151_186_fu_4087_p1;
wire  signed [6:0] sext_ln151_184_fu_4069_p1;
wire  signed [6:0] sext_ln151_183_fu_4060_p1;
wire   [6:0] add_ln691_497_fu_4106_p2;
wire  signed [6:0] sext_ln691_495_fu_4041_p1;
wire  signed [6:0] sext_ln691_496_fu_4096_p1;
wire   [6:0] add_ln691_498_fu_4116_p2;
wire  signed [7:0] sext_ln691_499_fu_4122_p1;
wire  signed [7:0] sext_ln691_498_fu_4112_p1;
wire  signed [2:0] mul_ln1345_501_fu_4132_p0;
wire  signed [2:0] mul_ln1345_501_fu_4132_p1;
wire  signed [5:0] mul_ln1345_501_fu_4132_p2;
wire  signed [2:0] mul_ln1345_502_fu_4151_p0;
wire  signed [2:0] mul_ln1345_502_fu_4151_p1;
wire  signed [5:0] mul_ln1345_502_fu_4151_p2;
wire  signed [2:0] mul_ln1345_503_fu_4160_p0;
wire  signed [2:0] mul_ln1345_503_fu_4160_p1;
wire  signed [5:0] mul_ln1345_503_fu_4160_p2;
wire  signed [2:0] mul_ln1345_504_fu_4169_p0;
wire  signed [2:0] mul_ln1345_504_fu_4169_p1;
wire  signed [5:0] mul_ln1345_504_fu_4169_p2;
wire  signed [2:0] mul_ln1345_505_fu_4178_p0;
wire  signed [2:0] mul_ln1345_505_fu_4178_p1;
wire  signed [5:0] mul_ln1345_505_fu_4178_p2;
wire  signed [2:0] mul_ln1345_506_fu_4187_p0;
wire  signed [2:0] mul_ln1345_506_fu_4187_p1;
wire  signed [5:0] mul_ln1345_506_fu_4187_p2;
wire  signed [6:0] sext_ln151_189_fu_4174_p1;
wire  signed [6:0] sext_ln151_190_fu_4183_p1;
wire  signed [6:0] sext_ln151_188_fu_4165_p1;
wire  signed [6:0] sext_ln151_187_fu_4156_p1;
wire   [6:0] add_ln691_503_fu_4202_p2;
wire  signed [6:0] sext_ln691_501_fu_4137_p1;
wire  signed [6:0] sext_ln691_502_fu_4192_p1;
wire   [6:0] add_ln691_504_fu_4212_p2;
wire  signed [7:0] sext_ln691_505_fu_4218_p1;
wire  signed [7:0] sext_ln691_504_fu_4208_p1;
wire  signed [10:0] sext_ln691_365_fu_4228_p1;
wire  signed [10:0] sext_ln691_368_fu_4236_p1;
wire   [10:0] add_ln691_364_fu_4231_p2;
wire  signed [10:0] sext_ln691_371_fu_4245_p1;
wire  signed [10:0] sext_ln691_374_fu_4253_p1;
wire   [10:0] add_ln691_370_fu_4248_p2;
wire  signed [10:0] sext_ln691_377_fu_4262_p1;
wire  signed [10:0] sext_ln691_380_fu_4270_p1;
wire   [10:0] add_ln691_376_fu_4265_p2;
wire  signed [10:0] sext_ln691_383_fu_4279_p1;
wire  signed [10:0] sext_ln691_386_fu_4287_p1;
wire   [10:0] add_ln691_382_fu_4282_p2;
wire  signed [10:0] sext_ln691_389_fu_4296_p1;
wire  signed [10:0] sext_ln691_392_fu_4304_p1;
wire   [10:0] add_ln691_388_fu_4299_p2;
wire  signed [10:0] sext_ln691_395_fu_4313_p1;
wire  signed [10:0] sext_ln691_398_fu_4321_p1;
wire   [10:0] add_ln691_394_fu_4316_p2;
wire  signed [10:0] sext_ln691_401_fu_4330_p1;
wire  signed [10:0] sext_ln691_404_fu_4338_p1;
wire   [10:0] add_ln691_400_fu_4333_p2;
wire  signed [10:0] sext_ln691_407_fu_4347_p1;
wire  signed [10:0] sext_ln691_410_fu_4355_p1;
wire   [10:0] add_ln691_406_fu_4350_p2;
wire  signed [10:0] sext_ln691_413_fu_4364_p1;
wire  signed [10:0] sext_ln691_416_fu_4372_p1;
wire   [10:0] add_ln691_412_fu_4367_p2;
wire  signed [10:0] sext_ln691_419_fu_4381_p1;
wire  signed [10:0] sext_ln691_422_fu_4389_p1;
wire   [10:0] add_ln691_418_fu_4384_p2;
wire  signed [10:0] sext_ln691_425_fu_4398_p1;
wire  signed [10:0] sext_ln691_428_fu_4406_p1;
wire   [10:0] add_ln691_424_fu_4401_p2;
wire  signed [10:0] sext_ln691_431_fu_4415_p1;
wire  signed [10:0] sext_ln691_434_fu_4423_p1;
wire   [10:0] add_ln691_430_fu_4418_p2;
wire  signed [10:0] sext_ln691_437_fu_4432_p1;
wire  signed [10:0] sext_ln691_440_fu_4440_p1;
wire   [10:0] add_ln691_436_fu_4435_p2;
wire  signed [10:0] sext_ln691_443_fu_4449_p1;
wire  signed [10:0] sext_ln691_446_fu_4457_p1;
wire   [10:0] add_ln691_442_fu_4452_p2;
wire  signed [10:0] sext_ln691_449_fu_4466_p1;
wire  signed [10:0] sext_ln691_452_fu_4474_p1;
wire   [10:0] add_ln691_448_fu_4469_p2;
wire  signed [10:0] sext_ln691_455_fu_4483_p1;
wire  signed [10:0] sext_ln691_458_fu_4491_p1;
wire   [10:0] add_ln691_454_fu_4486_p2;
wire  signed [10:0] sext_ln691_461_fu_4500_p1;
wire  signed [10:0] sext_ln691_464_fu_4508_p1;
wire   [10:0] add_ln691_460_fu_4503_p2;
wire  signed [10:0] sext_ln691_467_fu_4517_p1;
wire  signed [10:0] sext_ln691_470_fu_4525_p1;
wire   [10:0] add_ln691_466_fu_4520_p2;
wire  signed [10:0] sext_ln691_473_fu_4534_p1;
wire  signed [10:0] sext_ln691_476_fu_4542_p1;
wire   [10:0] add_ln691_472_fu_4537_p2;
wire  signed [10:0] sext_ln691_479_fu_4551_p1;
wire  signed [10:0] sext_ln691_482_fu_4559_p1;
wire   [10:0] add_ln691_478_fu_4554_p2;
wire  signed [10:0] sext_ln691_485_fu_4568_p1;
wire  signed [10:0] sext_ln691_488_fu_4576_p1;
wire   [10:0] add_ln691_484_fu_4571_p2;
wire  signed [10:0] sext_ln691_491_fu_4585_p1;
wire  signed [10:0] sext_ln691_494_fu_4593_p1;
wire   [10:0] add_ln691_490_fu_4588_p2;
wire  signed [10:0] sext_ln691_497_fu_4602_p1;
wire  signed [10:0] sext_ln691_500_fu_4610_p1;
wire   [10:0] add_ln691_496_fu_4605_p2;
wire  signed [10:0] sext_ln691_503_fu_4619_p1;
wire  signed [10:0] sext_ln691_506_fu_4627_p1;
wire   [10:0] add_ln691_502_fu_4622_p2;
wire   [10:0] add_ln691_506_fu_4630_p2;
wire   [10:0] add_ln691_500_fu_4613_p2;
wire   [10:0] add_ln691_494_fu_4596_p2;
wire   [10:0] add_ln691_488_fu_4579_p2;
wire   [10:0] add_ln691_482_fu_4562_p2;
wire   [10:0] add_ln691_476_fu_4545_p2;
wire   [10:0] add_ln691_470_fu_4528_p2;
wire   [10:0] add_ln691_464_fu_4511_p2;
wire   [10:0] add_ln691_458_fu_4494_p2;
wire   [10:0] add_ln691_452_fu_4477_p2;
wire   [10:0] add_ln691_446_fu_4460_p2;
wire   [10:0] add_ln691_440_fu_4443_p2;
wire   [10:0] add_ln691_434_fu_4426_p2;
wire   [10:0] add_ln691_428_fu_4409_p2;
wire   [10:0] add_ln691_422_fu_4392_p2;
wire   [10:0] add_ln691_416_fu_4375_p2;
wire   [10:0] add_ln691_410_fu_4358_p2;
wire   [10:0] add_ln691_404_fu_4341_p2;
wire   [10:0] add_ln691_398_fu_4324_p2;
wire   [10:0] add_ln691_392_fu_4307_p2;
wire   [10:0] add_ln691_386_fu_4290_p2;
wire   [10:0] add_ln691_380_fu_4273_p2;
wire   [10:0] add_ln691_374_fu_4256_p2;
wire   [10:0] add_ln691_368_fu_4239_p2;
wire   [378:0] tmp_402_fu_4693_p48;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V #(
    .DataWidth( 132 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_q_bias_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_q_bias_arr_V_address0),
    .ce0(attn_inst_matmul_gen_q_bias_arr_V_ce0),
    .q0(attn_inst_matmul_gen_q_bias_arr_V_q0)
);

ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_q_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_q_weight_arr_V_address0),
    .ce0(attn_inst_matmul_gen_q_weight_arr_V_ce0),
    .q0(attn_inst_matmul_gen_q_weight_arr_V_q0)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U35(
    .din0(trunc_ln215_4_fu_856_p1),
    .din1(mul_ln1345_fu_868_p1),
    .dout(mul_ln1345_fu_868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U36(
    .din0(tmp_s_fu_874_p4),
    .din1(mul_ln1345_364_fu_892_p1),
    .dout(mul_ln1345_364_fu_892_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U37(
    .din0(tmp_308_fu_898_p4),
    .din1(mul_ln1345_365_fu_916_p1),
    .dout(mul_ln1345_365_fu_916_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U38(
    .din0(tmp_309_fu_922_p4),
    .din1(mul_ln1345_366_fu_940_p1),
    .dout(mul_ln1345_366_fu_940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U39(
    .din0(tmp_310_fu_946_p4),
    .din1(mul_ln1345_367_fu_964_p1),
    .dout(mul_ln1345_367_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U40(
    .din0(tmp_311_fu_970_p4),
    .din1(mul_ln1345_368_fu_988_p1),
    .dout(mul_ln1345_368_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U41(
    .din0(tmp_312_fu_994_p4),
    .din1(mul_ln1345_369_fu_1008_p1),
    .dout(mul_ln1345_369_fu_1008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U42(
    .din0(tmp_314_fu_1014_p4),
    .din1(mul_ln1345_370_fu_1028_p1),
    .dout(mul_ln1345_370_fu_1028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U43(
    .din0(tmp_315_fu_1034_p4),
    .din1(mul_ln1345_371_fu_1048_p1),
    .dout(mul_ln1345_371_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U44(
    .din0(tmp_316_fu_1054_p4),
    .din1(mul_ln1345_372_fu_1068_p1),
    .dout(mul_ln1345_372_fu_1068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U45(
    .din0(tmp_317_fu_1074_p4),
    .din1(mul_ln1345_373_fu_1088_p1),
    .dout(mul_ln1345_373_fu_1088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U46(
    .din0(tmp_318_fu_1094_p4),
    .din1(mul_ln1345_374_fu_1108_p1),
    .dout(mul_ln1345_374_fu_1108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U47(
    .din0(tmp_319_fu_1114_p4),
    .din1(mul_ln1345_375_fu_1128_p1),
    .dout(mul_ln1345_375_fu_1128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U48(
    .din0(tmp_321_fu_1134_p4),
    .din1(mul_ln1345_376_fu_1148_p1),
    .dout(mul_ln1345_376_fu_1148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U49(
    .din0(tmp_322_fu_1154_p4),
    .din1(mul_ln1345_377_fu_1168_p1),
    .dout(mul_ln1345_377_fu_1168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U50(
    .din0(tmp_323_fu_1174_p4),
    .din1(mul_ln1345_378_fu_1188_p1),
    .dout(mul_ln1345_378_fu_1188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U51(
    .din0(tmp_324_fu_1194_p4),
    .din1(mul_ln1345_379_fu_1208_p1),
    .dout(mul_ln1345_379_fu_1208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U52(
    .din0(tmp_325_fu_1214_p4),
    .din1(mul_ln1345_380_fu_1228_p1),
    .dout(mul_ln1345_380_fu_1228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U53(
    .din0(tmp_326_fu_1234_p4),
    .din1(mul_ln1345_381_fu_1248_p1),
    .dout(mul_ln1345_381_fu_1248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U54(
    .din0(tmp_328_fu_1254_p4),
    .din1(mul_ln1345_382_fu_1268_p1),
    .dout(mul_ln1345_382_fu_1268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U55(
    .din0(tmp_329_fu_1274_p4),
    .din1(mul_ln1345_383_fu_1288_p1),
    .dout(mul_ln1345_383_fu_1288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U56(
    .din0(tmp_330_fu_1294_p4),
    .din1(mul_ln1345_384_fu_1308_p1),
    .dout(mul_ln1345_384_fu_1308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U57(
    .din0(tmp_331_fu_1314_p4),
    .din1(mul_ln1345_385_fu_1328_p1),
    .dout(mul_ln1345_385_fu_1328_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U58(
    .din0(tmp_332_fu_1334_p4),
    .din1(mul_ln1345_386_fu_1348_p1),
    .dout(mul_ln1345_386_fu_1348_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U59(
    .din0(tmp_333_fu_1354_p4),
    .din1(mul_ln1345_387_fu_1368_p1),
    .dout(mul_ln1345_387_fu_1368_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U60(
    .din0(tmp_335_fu_1374_p4),
    .din1(mul_ln1345_388_fu_1388_p1),
    .dout(mul_ln1345_388_fu_1388_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U61(
    .din0(tmp_336_fu_1394_p4),
    .din1(mul_ln1345_389_fu_1408_p1),
    .dout(mul_ln1345_389_fu_1408_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U62(
    .din0(tmp_337_fu_1414_p4),
    .din1(mul_ln1345_390_fu_1428_p1),
    .dout(mul_ln1345_390_fu_1428_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U63(
    .din0(tmp_338_fu_1434_p4),
    .din1(mul_ln1345_391_fu_1448_p1),
    .dout(mul_ln1345_391_fu_1448_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U64(
    .din0(tmp_339_fu_1454_p4),
    .din1(mul_ln1345_392_fu_1468_p1),
    .dout(mul_ln1345_392_fu_1468_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U65(
    .din0(tmp_340_fu_1474_p4),
    .din1(mul_ln1345_393_fu_1488_p1),
    .dout(mul_ln1345_393_fu_1488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U66(
    .din0(tmp_342_fu_1494_p4),
    .din1(mul_ln1345_394_fu_1508_p1),
    .dout(mul_ln1345_394_fu_1508_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U67(
    .din0(tmp_343_fu_1514_p4),
    .din1(mul_ln1345_395_fu_1528_p1),
    .dout(mul_ln1345_395_fu_1528_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U68(
    .din0(tmp_344_fu_1534_p4),
    .din1(mul_ln1345_396_fu_1548_p1),
    .dout(mul_ln1345_396_fu_1548_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U69(
    .din0(tmp_345_fu_1554_p4),
    .din1(mul_ln1345_397_fu_1568_p1),
    .dout(mul_ln1345_397_fu_1568_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U70(
    .din0(tmp_346_fu_1574_p4),
    .din1(mul_ln1345_398_fu_1588_p1),
    .dout(mul_ln1345_398_fu_1588_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U71(
    .din0(tmp_347_fu_1594_p4),
    .din1(mul_ln1345_399_fu_1608_p1),
    .dout(mul_ln1345_399_fu_1608_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U72(
    .din0(tmp_349_fu_1614_p4),
    .din1(mul_ln1345_400_fu_1628_p1),
    .dout(mul_ln1345_400_fu_1628_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U73(
    .din0(tmp_350_fu_1634_p4),
    .din1(mul_ln1345_401_fu_1648_p1),
    .dout(mul_ln1345_401_fu_1648_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U74(
    .din0(tmp_351_fu_1654_p4),
    .din1(mul_ln1345_402_fu_1668_p1),
    .dout(mul_ln1345_402_fu_1668_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U75(
    .din0(tmp_352_fu_1674_p4),
    .din1(mul_ln1345_403_fu_1688_p1),
    .dout(mul_ln1345_403_fu_1688_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U76(
    .din0(tmp_353_fu_1694_p4),
    .din1(mul_ln1345_404_fu_1708_p1),
    .dout(mul_ln1345_404_fu_1708_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U77(
    .din0(tmp_354_fu_1714_p4),
    .din1(mul_ln1345_405_fu_1728_p1),
    .dout(mul_ln1345_405_fu_1728_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U78(
    .din0(tmp_356_fu_1734_p4),
    .din1(mul_ln1345_406_fu_1748_p1),
    .dout(mul_ln1345_406_fu_1748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U79(
    .din0(tmp_357_fu_1754_p4),
    .din1(mul_ln1345_407_fu_1768_p1),
    .dout(mul_ln1345_407_fu_1768_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U80(
    .din0(tmp_358_fu_1774_p4),
    .din1(mul_ln1345_408_fu_1788_p1),
    .dout(mul_ln1345_408_fu_1788_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U81(
    .din0(tmp_359_fu_1794_p4),
    .din1(mul_ln1345_409_fu_1808_p1),
    .dout(mul_ln1345_409_fu_1808_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U82(
    .din0(tmp_360_fu_1814_p4),
    .din1(mul_ln1345_410_fu_1828_p1),
    .dout(mul_ln1345_410_fu_1828_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U83(
    .din0(tmp_361_fu_1834_p4),
    .din1(mul_ln1345_411_fu_1848_p1),
    .dout(mul_ln1345_411_fu_1848_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U84(
    .din0(tmp_363_fu_1854_p4),
    .din1(mul_ln1345_412_fu_1868_p1),
    .dout(mul_ln1345_412_fu_1868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U85(
    .din0(tmp_364_fu_1874_p4),
    .din1(mul_ln1345_413_fu_1888_p1),
    .dout(mul_ln1345_413_fu_1888_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U86(
    .din0(tmp_365_fu_1894_p4),
    .din1(mul_ln1345_414_fu_1908_p1),
    .dout(mul_ln1345_414_fu_1908_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U87(
    .din0(tmp_366_fu_1914_p4),
    .din1(mul_ln1345_415_fu_1928_p1),
    .dout(mul_ln1345_415_fu_1928_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U88(
    .din0(tmp_367_fu_1934_p4),
    .din1(mul_ln1345_416_fu_1948_p1),
    .dout(mul_ln1345_416_fu_1948_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U89(
    .din0(tmp_368_fu_1954_p4),
    .din1(mul_ln1345_417_fu_1968_p1),
    .dout(mul_ln1345_417_fu_1968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U90(
    .din0(tmp_370_fu_1974_p4),
    .din1(mul_ln1345_418_fu_1988_p1),
    .dout(mul_ln1345_418_fu_1988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U91(
    .din0(tmp_371_fu_1994_p4),
    .din1(mul_ln1345_419_fu_2008_p1),
    .dout(mul_ln1345_419_fu_2008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U92(
    .din0(tmp_372_fu_2014_p4),
    .din1(mul_ln1345_420_fu_2028_p1),
    .dout(mul_ln1345_420_fu_2028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U93(
    .din0(tmp_373_fu_2034_p4),
    .din1(mul_ln1345_421_fu_2048_p1),
    .dout(mul_ln1345_421_fu_2048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U94(
    .din0(tmp_374_fu_2054_p4),
    .din1(mul_ln1345_422_fu_2068_p1),
    .dout(mul_ln1345_422_fu_2068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U95(
    .din0(tmp_375_fu_2074_p4),
    .din1(mul_ln1345_423_fu_2088_p1),
    .dout(mul_ln1345_423_fu_2088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U96(
    .din0(tmp_377_fu_2094_p4),
    .din1(mul_ln1345_424_fu_2108_p1),
    .dout(mul_ln1345_424_fu_2108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U97(
    .din0(tmp_378_fu_2114_p4),
    .din1(mul_ln1345_425_fu_2128_p1),
    .dout(mul_ln1345_425_fu_2128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U98(
    .din0(tmp_379_fu_2134_p4),
    .din1(mul_ln1345_426_fu_2148_p1),
    .dout(mul_ln1345_426_fu_2148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U99(
    .din0(tmp_380_fu_2154_p4),
    .din1(mul_ln1345_427_fu_2168_p1),
    .dout(mul_ln1345_427_fu_2168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U100(
    .din0(tmp_381_fu_2174_p4),
    .din1(mul_ln1345_428_fu_2188_p1),
    .dout(mul_ln1345_428_fu_2188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U101(
    .din0(tmp_382_fu_2194_p4),
    .din1(mul_ln1345_429_fu_2208_p1),
    .dout(mul_ln1345_429_fu_2208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U102(
    .din0(tmp_384_fu_2214_p4),
    .din1(mul_ln1345_430_fu_2228_p1),
    .dout(mul_ln1345_430_fu_2228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U103(
    .din0(tmp_385_fu_2234_p4),
    .din1(mul_ln1345_431_fu_2248_p1),
    .dout(mul_ln1345_431_fu_2248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U104(
    .din0(tmp_386_fu_2254_p4),
    .din1(mul_ln1345_432_fu_2268_p1),
    .dout(mul_ln1345_432_fu_2268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U105(
    .din0(tmp_387_fu_2274_p4),
    .din1(mul_ln1345_433_fu_2288_p1),
    .dout(mul_ln1345_433_fu_2288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U106(
    .din0(tmp_388_fu_2294_p4),
    .din1(mul_ln1345_434_fu_2308_p1),
    .dout(mul_ln1345_434_fu_2308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U107(
    .din0(mul_ln1345_435_fu_3061_p0),
    .din1(mul_ln1345_435_fu_3061_p1),
    .dout(mul_ln1345_435_fu_3061_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U108(
    .din0(mul_ln1345_436_fu_3083_p0),
    .din1(mul_ln1345_436_fu_3083_p1),
    .dout(mul_ln1345_436_fu_3083_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U109(
    .din0(mul_ln1345_437_fu_3095_p0),
    .din1(mul_ln1345_437_fu_3095_p1),
    .dout(mul_ln1345_437_fu_3095_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U110(
    .din0(mul_ln1345_438_fu_3107_p0),
    .din1(mul_ln1345_438_fu_3107_p1),
    .dout(mul_ln1345_438_fu_3107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U111(
    .din0(mul_ln1345_439_fu_3119_p0),
    .din1(mul_ln1345_439_fu_3119_p1),
    .dout(mul_ln1345_439_fu_3119_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U112(
    .din0(mul_ln1345_440_fu_3131_p0),
    .din1(mul_ln1345_440_fu_3131_p1),
    .dout(mul_ln1345_440_fu_3131_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U113(
    .din0(mul_ln1345_441_fu_3172_p0),
    .din1(mul_ln1345_441_fu_3172_p1),
    .dout(mul_ln1345_441_fu_3172_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U114(
    .din0(mul_ln1345_442_fu_3191_p0),
    .din1(mul_ln1345_442_fu_3191_p1),
    .dout(mul_ln1345_442_fu_3191_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U115(
    .din0(mul_ln1345_443_fu_3200_p0),
    .din1(mul_ln1345_443_fu_3200_p1),
    .dout(mul_ln1345_443_fu_3200_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U116(
    .din0(mul_ln1345_444_fu_3209_p0),
    .din1(mul_ln1345_444_fu_3209_p1),
    .dout(mul_ln1345_444_fu_3209_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U117(
    .din0(mul_ln1345_445_fu_3218_p0),
    .din1(mul_ln1345_445_fu_3218_p1),
    .dout(mul_ln1345_445_fu_3218_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U118(
    .din0(mul_ln1345_446_fu_3227_p0),
    .din1(mul_ln1345_446_fu_3227_p1),
    .dout(mul_ln1345_446_fu_3227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U119(
    .din0(mul_ln1345_447_fu_3268_p0),
    .din1(mul_ln1345_447_fu_3268_p1),
    .dout(mul_ln1345_447_fu_3268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U120(
    .din0(mul_ln1345_448_fu_3287_p0),
    .din1(mul_ln1345_448_fu_3287_p1),
    .dout(mul_ln1345_448_fu_3287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U121(
    .din0(mul_ln1345_449_fu_3296_p0),
    .din1(mul_ln1345_449_fu_3296_p1),
    .dout(mul_ln1345_449_fu_3296_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U122(
    .din0(mul_ln1345_450_fu_3305_p0),
    .din1(mul_ln1345_450_fu_3305_p1),
    .dout(mul_ln1345_450_fu_3305_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U123(
    .din0(mul_ln1345_451_fu_3314_p0),
    .din1(mul_ln1345_451_fu_3314_p1),
    .dout(mul_ln1345_451_fu_3314_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U124(
    .din0(mul_ln1345_452_fu_3323_p0),
    .din1(mul_ln1345_452_fu_3323_p1),
    .dout(mul_ln1345_452_fu_3323_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U125(
    .din0(mul_ln1345_453_fu_3364_p0),
    .din1(mul_ln1345_453_fu_3364_p1),
    .dout(mul_ln1345_453_fu_3364_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U126(
    .din0(mul_ln1345_454_fu_3383_p0),
    .din1(mul_ln1345_454_fu_3383_p1),
    .dout(mul_ln1345_454_fu_3383_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U127(
    .din0(mul_ln1345_455_fu_3392_p0),
    .din1(mul_ln1345_455_fu_3392_p1),
    .dout(mul_ln1345_455_fu_3392_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U128(
    .din0(mul_ln1345_456_fu_3401_p0),
    .din1(mul_ln1345_456_fu_3401_p1),
    .dout(mul_ln1345_456_fu_3401_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U129(
    .din0(mul_ln1345_457_fu_3410_p0),
    .din1(mul_ln1345_457_fu_3410_p1),
    .dout(mul_ln1345_457_fu_3410_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U130(
    .din0(mul_ln1345_458_fu_3419_p0),
    .din1(mul_ln1345_458_fu_3419_p1),
    .dout(mul_ln1345_458_fu_3419_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U131(
    .din0(mul_ln1345_459_fu_3460_p0),
    .din1(mul_ln1345_459_fu_3460_p1),
    .dout(mul_ln1345_459_fu_3460_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U132(
    .din0(mul_ln1345_460_fu_3479_p0),
    .din1(mul_ln1345_460_fu_3479_p1),
    .dout(mul_ln1345_460_fu_3479_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U133(
    .din0(mul_ln1345_461_fu_3488_p0),
    .din1(mul_ln1345_461_fu_3488_p1),
    .dout(mul_ln1345_461_fu_3488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U134(
    .din0(mul_ln1345_462_fu_3497_p0),
    .din1(mul_ln1345_462_fu_3497_p1),
    .dout(mul_ln1345_462_fu_3497_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U135(
    .din0(mul_ln1345_463_fu_3506_p0),
    .din1(mul_ln1345_463_fu_3506_p1),
    .dout(mul_ln1345_463_fu_3506_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U136(
    .din0(mul_ln1345_464_fu_3515_p0),
    .din1(mul_ln1345_464_fu_3515_p1),
    .dout(mul_ln1345_464_fu_3515_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U137(
    .din0(mul_ln1345_465_fu_3556_p0),
    .din1(mul_ln1345_465_fu_3556_p1),
    .dout(mul_ln1345_465_fu_3556_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U138(
    .din0(mul_ln1345_466_fu_3575_p0),
    .din1(mul_ln1345_466_fu_3575_p1),
    .dout(mul_ln1345_466_fu_3575_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U139(
    .din0(mul_ln1345_467_fu_3584_p0),
    .din1(mul_ln1345_467_fu_3584_p1),
    .dout(mul_ln1345_467_fu_3584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U140(
    .din0(mul_ln1345_468_fu_3593_p0),
    .din1(mul_ln1345_468_fu_3593_p1),
    .dout(mul_ln1345_468_fu_3593_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U141(
    .din0(mul_ln1345_469_fu_3602_p0),
    .din1(mul_ln1345_469_fu_3602_p1),
    .dout(mul_ln1345_469_fu_3602_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U142(
    .din0(mul_ln1345_470_fu_3611_p0),
    .din1(mul_ln1345_470_fu_3611_p1),
    .dout(mul_ln1345_470_fu_3611_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U143(
    .din0(mul_ln1345_471_fu_3652_p0),
    .din1(mul_ln1345_471_fu_3652_p1),
    .dout(mul_ln1345_471_fu_3652_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U144(
    .din0(mul_ln1345_472_fu_3671_p0),
    .din1(mul_ln1345_472_fu_3671_p1),
    .dout(mul_ln1345_472_fu_3671_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U145(
    .din0(mul_ln1345_473_fu_3680_p0),
    .din1(mul_ln1345_473_fu_3680_p1),
    .dout(mul_ln1345_473_fu_3680_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U146(
    .din0(mul_ln1345_474_fu_3689_p0),
    .din1(mul_ln1345_474_fu_3689_p1),
    .dout(mul_ln1345_474_fu_3689_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U147(
    .din0(mul_ln1345_475_fu_3698_p0),
    .din1(mul_ln1345_475_fu_3698_p1),
    .dout(mul_ln1345_475_fu_3698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U148(
    .din0(mul_ln1345_476_fu_3707_p0),
    .din1(mul_ln1345_476_fu_3707_p1),
    .dout(mul_ln1345_476_fu_3707_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U149(
    .din0(mul_ln1345_477_fu_3748_p0),
    .din1(mul_ln1345_477_fu_3748_p1),
    .dout(mul_ln1345_477_fu_3748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U150(
    .din0(mul_ln1345_478_fu_3767_p0),
    .din1(mul_ln1345_478_fu_3767_p1),
    .dout(mul_ln1345_478_fu_3767_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U151(
    .din0(mul_ln1345_479_fu_3776_p0),
    .din1(mul_ln1345_479_fu_3776_p1),
    .dout(mul_ln1345_479_fu_3776_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U152(
    .din0(mul_ln1345_480_fu_3785_p0),
    .din1(mul_ln1345_480_fu_3785_p1),
    .dout(mul_ln1345_480_fu_3785_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U153(
    .din0(mul_ln1345_481_fu_3794_p0),
    .din1(mul_ln1345_481_fu_3794_p1),
    .dout(mul_ln1345_481_fu_3794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U154(
    .din0(mul_ln1345_482_fu_3803_p0),
    .din1(mul_ln1345_482_fu_3803_p1),
    .dout(mul_ln1345_482_fu_3803_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U155(
    .din0(mul_ln1345_483_fu_3844_p0),
    .din1(mul_ln1345_483_fu_3844_p1),
    .dout(mul_ln1345_483_fu_3844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U156(
    .din0(mul_ln1345_484_fu_3863_p0),
    .din1(mul_ln1345_484_fu_3863_p1),
    .dout(mul_ln1345_484_fu_3863_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U157(
    .din0(mul_ln1345_485_fu_3872_p0),
    .din1(mul_ln1345_485_fu_3872_p1),
    .dout(mul_ln1345_485_fu_3872_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U158(
    .din0(mul_ln1345_486_fu_3881_p0),
    .din1(mul_ln1345_486_fu_3881_p1),
    .dout(mul_ln1345_486_fu_3881_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U159(
    .din0(mul_ln1345_487_fu_3890_p0),
    .din1(mul_ln1345_487_fu_3890_p1),
    .dout(mul_ln1345_487_fu_3890_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U160(
    .din0(mul_ln1345_488_fu_3899_p0),
    .din1(mul_ln1345_488_fu_3899_p1),
    .dout(mul_ln1345_488_fu_3899_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U161(
    .din0(mul_ln1345_489_fu_3940_p0),
    .din1(mul_ln1345_489_fu_3940_p1),
    .dout(mul_ln1345_489_fu_3940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U162(
    .din0(mul_ln1345_490_fu_3959_p0),
    .din1(mul_ln1345_490_fu_3959_p1),
    .dout(mul_ln1345_490_fu_3959_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U163(
    .din0(mul_ln1345_491_fu_3968_p0),
    .din1(mul_ln1345_491_fu_3968_p1),
    .dout(mul_ln1345_491_fu_3968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U164(
    .din0(mul_ln1345_492_fu_3977_p0),
    .din1(mul_ln1345_492_fu_3977_p1),
    .dout(mul_ln1345_492_fu_3977_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U165(
    .din0(mul_ln1345_493_fu_3986_p0),
    .din1(mul_ln1345_493_fu_3986_p1),
    .dout(mul_ln1345_493_fu_3986_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U166(
    .din0(mul_ln1345_494_fu_3995_p0),
    .din1(mul_ln1345_494_fu_3995_p1),
    .dout(mul_ln1345_494_fu_3995_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U167(
    .din0(mul_ln1345_495_fu_4036_p0),
    .din1(mul_ln1345_495_fu_4036_p1),
    .dout(mul_ln1345_495_fu_4036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U168(
    .din0(mul_ln1345_496_fu_4055_p0),
    .din1(mul_ln1345_496_fu_4055_p1),
    .dout(mul_ln1345_496_fu_4055_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U169(
    .din0(mul_ln1345_497_fu_4064_p0),
    .din1(mul_ln1345_497_fu_4064_p1),
    .dout(mul_ln1345_497_fu_4064_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U170(
    .din0(mul_ln1345_498_fu_4073_p0),
    .din1(mul_ln1345_498_fu_4073_p1),
    .dout(mul_ln1345_498_fu_4073_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U171(
    .din0(mul_ln1345_499_fu_4082_p0),
    .din1(mul_ln1345_499_fu_4082_p1),
    .dout(mul_ln1345_499_fu_4082_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U172(
    .din0(mul_ln1345_500_fu_4091_p0),
    .din1(mul_ln1345_500_fu_4091_p1),
    .dout(mul_ln1345_500_fu_4091_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U173(
    .din0(mul_ln1345_501_fu_4132_p0),
    .din1(mul_ln1345_501_fu_4132_p1),
    .dout(mul_ln1345_501_fu_4132_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U174(
    .din0(mul_ln1345_502_fu_4151_p0),
    .din1(mul_ln1345_502_fu_4151_p1),
    .dout(mul_ln1345_502_fu_4151_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U175(
    .din0(mul_ln1345_503_fu_4160_p0),
    .din1(mul_ln1345_503_fu_4160_p1),
    .dout(mul_ln1345_503_fu_4160_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U176(
    .din0(mul_ln1345_504_fu_4169_p0),
    .din1(mul_ln1345_504_fu_4169_p1),
    .dout(mul_ln1345_504_fu_4169_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U177(
    .din0(mul_ln1345_505_fu_4178_p0),
    .din1(mul_ln1345_505_fu_4178_p1),
    .dout(mul_ln1345_505_fu_4178_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U178(
    .din0(mul_ln1345_506_fu_4187_p0),
    .din1(mul_ln1345_506_fu_4187_p1),
    .dout(mul_ln1345_506_fu_4187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_583 <= add_ln122_reg_4873;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cit_reg_583 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_571 <= select_ln121_7_reg_4854;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cot_reg_571 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten20_reg_548 <= add_ln120_reg_4844;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten20_reg_548 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_560 <= select_ln121_8_reg_4878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_560 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln120_reg_4844 <= add_ln120_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_594_p2 == 1'd0))) begin
        add_ln121_2_reg_4839 <= add_ln121_2_fu_646_p2;
        and_ln120_reg_4824 <= and_ln120_fu_626_p2;
        icmp_ln121_reg_4811 <= icmp_ln121_fu_600_p2;
        select_ln120_reg_4818 <= select_ln120_fu_606_p3;
        select_ln121_reg_4831 <= select_ln121_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln121_reg_4849 <= add_ln121_fu_658_p2;
        add_ln215_reg_4859 <= add_ln215_fu_702_p2;
        icmp_ln126_reg_4864 <= icmp_ln126_fu_708_p2;
        icmp_ln161_reg_4869 <= icmp_ln161_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln122_reg_4873 <= add_ln122_fu_718_p2;
        select_ln121_7_reg_4854 <= select_ln121_7_fu_693_p3;
        select_ln121_8_reg_4878 <= select_ln121_8_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_367_reg_5663 <= add_ln691_367_fu_2392_p2;
        add_ln691_369_reg_5673 <= add_ln691_369_fu_2426_p2;
        add_ln691_373_reg_5678 <= add_ln691_373_fu_2452_p2;
        add_ln691_375_reg_5688 <= add_ln691_375_fu_2486_p2;
        add_ln691_379_reg_5693 <= add_ln691_379_fu_2512_p2;
        add_ln691_381_reg_5703 <= add_ln691_381_fu_2546_p2;
        add_ln691_385_reg_5708 <= add_ln691_385_fu_2572_p2;
        add_ln691_387_reg_5718 <= add_ln691_387_fu_2606_p2;
        add_ln691_391_reg_5723 <= add_ln691_391_fu_2632_p2;
        add_ln691_393_reg_5733 <= add_ln691_393_fu_2666_p2;
        add_ln691_397_reg_5738 <= add_ln691_397_fu_2692_p2;
        add_ln691_399_reg_5748 <= add_ln691_399_fu_2726_p2;
        add_ln691_403_reg_5753 <= add_ln691_403_fu_2752_p2;
        add_ln691_405_reg_5763 <= add_ln691_405_fu_2786_p2;
        add_ln691_409_reg_5768 <= add_ln691_409_fu_2812_p2;
        add_ln691_411_reg_5778 <= add_ln691_411_fu_2846_p2;
        add_ln691_415_reg_5783 <= add_ln691_415_fu_2872_p2;
        add_ln691_417_reg_5793 <= add_ln691_417_fu_2906_p2;
        add_ln691_421_reg_5798 <= add_ln691_421_fu_2932_p2;
        add_ln691_423_reg_5808 <= add_ln691_423_fu_2966_p2;
        add_ln691_427_reg_5813 <= add_ln691_427_fu_2992_p2;
        add_ln691_429_reg_5823 <= add_ln691_429_fu_3026_p2;
        add_ln691_433_reg_5828 <= add_ln691_433_fu_3052_p2;
        add_ln691_435_reg_5838 <= add_ln691_435_fu_3140_p2;
        add_ln691_439_reg_5843 <= add_ln691_439_fu_3166_p2;
        add_ln691_441_reg_5853 <= add_ln691_441_fu_3236_p2;
        add_ln691_445_reg_5858 <= add_ln691_445_fu_3262_p2;
        add_ln691_447_reg_5868 <= add_ln691_447_fu_3332_p2;
        add_ln691_451_reg_5873 <= add_ln691_451_fu_3358_p2;
        add_ln691_453_reg_5883 <= add_ln691_453_fu_3428_p2;
        add_ln691_457_reg_5888 <= add_ln691_457_fu_3454_p2;
        add_ln691_459_reg_5898 <= add_ln691_459_fu_3524_p2;
        add_ln691_463_reg_5903 <= add_ln691_463_fu_3550_p2;
        add_ln691_465_reg_5913 <= add_ln691_465_fu_3620_p2;
        add_ln691_469_reg_5918 <= add_ln691_469_fu_3646_p2;
        add_ln691_471_reg_5928 <= add_ln691_471_fu_3716_p2;
        add_ln691_475_reg_5933 <= add_ln691_475_fu_3742_p2;
        add_ln691_477_reg_5943 <= add_ln691_477_fu_3812_p2;
        add_ln691_481_reg_5948 <= add_ln691_481_fu_3838_p2;
        add_ln691_483_reg_5958 <= add_ln691_483_fu_3908_p2;
        add_ln691_487_reg_5963 <= add_ln691_487_fu_3934_p2;
        add_ln691_489_reg_5973 <= add_ln691_489_fu_4004_p2;
        add_ln691_493_reg_5978 <= add_ln691_493_fu_4030_p2;
        add_ln691_495_reg_5988 <= add_ln691_495_fu_4100_p2;
        add_ln691_499_reg_5993 <= add_ln691_499_fu_4126_p2;
        add_ln691_501_reg_6003 <= add_ln691_501_fu_4196_p2;
        add_ln691_505_reg_6008 <= add_ln691_505_fu_4222_p2;
        add_ln691_reg_5658 <= add_ln691_fu_2366_p2;
        tmp_313_reg_5668 <= {{select_ln126_fu_2337_p3[21:11]}};
        tmp_320_reg_5683 <= {{select_ln126_fu_2337_p3[32:22]}};
        tmp_327_reg_5698 <= {{select_ln126_fu_2337_p3[43:33]}};
        tmp_334_reg_5713 <= {{select_ln126_fu_2337_p3[54:44]}};
        tmp_341_reg_5728 <= {{select_ln126_fu_2337_p3[65:55]}};
        tmp_348_reg_5743 <= {{select_ln126_fu_2337_p3[76:66]}};
        tmp_355_reg_5758 <= {{select_ln126_fu_2337_p3[87:77]}};
        tmp_362_reg_5773 <= {{select_ln126_fu_2337_p3[98:88]}};
        tmp_369_reg_5788 <= {{select_ln126_fu_2337_p3[109:99]}};
        tmp_376_reg_5803 <= {{select_ln126_fu_2337_p3[120:110]}};
        tmp_383_reg_5818 <= {{select_ln126_fu_2337_p3[131:121]}};
        tmp_389_reg_5833 <= {{select_ln126_fu_2337_p3[142:132]}};
        tmp_390_reg_5848 <= {{select_ln126_fu_2337_p3[153:143]}};
        tmp_391_reg_5863 <= {{select_ln126_fu_2337_p3[164:154]}};
        tmp_392_reg_5878 <= {{select_ln126_fu_2337_p3[175:165]}};
        tmp_393_reg_5893 <= {{select_ln126_fu_2337_p3[186:176]}};
        tmp_394_reg_5908 <= {{select_ln126_fu_2337_p3[197:187]}};
        tmp_395_reg_5923 <= {{select_ln126_fu_2337_p3[208:198]}};
        tmp_396_reg_5938 <= {{select_ln126_fu_2337_p3[219:209]}};
        tmp_397_reg_5953 <= {{select_ln126_fu_2337_p3[230:220]}};
        tmp_398_reg_5968 <= {{select_ln126_fu_2337_p3[241:231]}};
        tmp_399_reg_5983 <= {{select_ln126_fu_2337_p3[252:242]}};
        tmp_400_reg_5998 <= {{select_ln126_fu_2337_p3[263:253]}};
        trunc_ln691_reg_5653 <= trunc_ln691_fu_2347_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln120_reg_4824_pp0_iter1_reg <= and_ln120_reg_4824;
        icmp_ln120_reg_4807 <= icmp_ln120_fu_594_p2;
        icmp_ln120_reg_4807_pp0_iter1_reg <= icmp_ln120_reg_4807;
        icmp_ln120_reg_4807_pp0_iter2_reg <= icmp_ln120_reg_4807_pp0_iter1_reg;
        icmp_ln121_reg_4811_pp0_iter1_reg <= icmp_ln121_reg_4811;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        attn_inst_matmul_gen_q_bias_arr_V_load_1_reg_4802 <= attn_inst_matmul_gen_q_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln120_reg_4824_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_4864 == 1'd1) & (icmp_ln121_reg_4811_pp0_iter1_reg == 1'd0))) begin
        attn_inst_matmul_gen_q_bias_arr_V_load_reg_4893 <= attn_inst_matmul_gen_q_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln126_reg_4864_pp0_iter1_reg <= icmp_ln126_reg_4864;
        icmp_ln161_reg_4869_pp0_iter1_reg <= icmp_ln161_reg_4869;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln1345_364_reg_4948 <= mul_ln1345_364_fu_892_p2;
        mul_ln1345_365_reg_4958 <= mul_ln1345_365_fu_916_p2;
        mul_ln1345_366_reg_4968 <= mul_ln1345_366_fu_940_p2;
        mul_ln1345_367_reg_4978 <= mul_ln1345_367_fu_964_p2;
        mul_ln1345_368_reg_4988 <= mul_ln1345_368_fu_988_p2;
        mul_ln1345_369_reg_4998 <= mul_ln1345_369_fu_1008_p2;
        mul_ln1345_370_reg_5008 <= mul_ln1345_370_fu_1028_p2;
        mul_ln1345_371_reg_5018 <= mul_ln1345_371_fu_1048_p2;
        mul_ln1345_372_reg_5028 <= mul_ln1345_372_fu_1068_p2;
        mul_ln1345_373_reg_5038 <= mul_ln1345_373_fu_1088_p2;
        mul_ln1345_374_reg_5048 <= mul_ln1345_374_fu_1108_p2;
        mul_ln1345_375_reg_5058 <= mul_ln1345_375_fu_1128_p2;
        mul_ln1345_376_reg_5068 <= mul_ln1345_376_fu_1148_p2;
        mul_ln1345_377_reg_5078 <= mul_ln1345_377_fu_1168_p2;
        mul_ln1345_378_reg_5088 <= mul_ln1345_378_fu_1188_p2;
        mul_ln1345_379_reg_5098 <= mul_ln1345_379_fu_1208_p2;
        mul_ln1345_380_reg_5108 <= mul_ln1345_380_fu_1228_p2;
        mul_ln1345_381_reg_5118 <= mul_ln1345_381_fu_1248_p2;
        mul_ln1345_382_reg_5128 <= mul_ln1345_382_fu_1268_p2;
        mul_ln1345_383_reg_5138 <= mul_ln1345_383_fu_1288_p2;
        mul_ln1345_384_reg_5148 <= mul_ln1345_384_fu_1308_p2;
        mul_ln1345_385_reg_5158 <= mul_ln1345_385_fu_1328_p2;
        mul_ln1345_386_reg_5168 <= mul_ln1345_386_fu_1348_p2;
        mul_ln1345_387_reg_5178 <= mul_ln1345_387_fu_1368_p2;
        mul_ln1345_388_reg_5188 <= mul_ln1345_388_fu_1388_p2;
        mul_ln1345_389_reg_5198 <= mul_ln1345_389_fu_1408_p2;
        mul_ln1345_390_reg_5208 <= mul_ln1345_390_fu_1428_p2;
        mul_ln1345_391_reg_5218 <= mul_ln1345_391_fu_1448_p2;
        mul_ln1345_392_reg_5228 <= mul_ln1345_392_fu_1468_p2;
        mul_ln1345_393_reg_5238 <= mul_ln1345_393_fu_1488_p2;
        mul_ln1345_394_reg_5248 <= mul_ln1345_394_fu_1508_p2;
        mul_ln1345_395_reg_5258 <= mul_ln1345_395_fu_1528_p2;
        mul_ln1345_396_reg_5268 <= mul_ln1345_396_fu_1548_p2;
        mul_ln1345_397_reg_5278 <= mul_ln1345_397_fu_1568_p2;
        mul_ln1345_398_reg_5288 <= mul_ln1345_398_fu_1588_p2;
        mul_ln1345_399_reg_5298 <= mul_ln1345_399_fu_1608_p2;
        mul_ln1345_400_reg_5308 <= mul_ln1345_400_fu_1628_p2;
        mul_ln1345_401_reg_5318 <= mul_ln1345_401_fu_1648_p2;
        mul_ln1345_402_reg_5328 <= mul_ln1345_402_fu_1668_p2;
        mul_ln1345_403_reg_5338 <= mul_ln1345_403_fu_1688_p2;
        mul_ln1345_404_reg_5348 <= mul_ln1345_404_fu_1708_p2;
        mul_ln1345_405_reg_5358 <= mul_ln1345_405_fu_1728_p2;
        mul_ln1345_406_reg_5368 <= mul_ln1345_406_fu_1748_p2;
        mul_ln1345_407_reg_5378 <= mul_ln1345_407_fu_1768_p2;
        mul_ln1345_408_reg_5388 <= mul_ln1345_408_fu_1788_p2;
        mul_ln1345_409_reg_5398 <= mul_ln1345_409_fu_1808_p2;
        mul_ln1345_410_reg_5408 <= mul_ln1345_410_fu_1828_p2;
        mul_ln1345_411_reg_5418 <= mul_ln1345_411_fu_1848_p2;
        mul_ln1345_412_reg_5428 <= mul_ln1345_412_fu_1868_p2;
        mul_ln1345_413_reg_5438 <= mul_ln1345_413_fu_1888_p2;
        mul_ln1345_414_reg_5448 <= mul_ln1345_414_fu_1908_p2;
        mul_ln1345_415_reg_5458 <= mul_ln1345_415_fu_1928_p2;
        mul_ln1345_416_reg_5468 <= mul_ln1345_416_fu_1948_p2;
        mul_ln1345_417_reg_5478 <= mul_ln1345_417_fu_1968_p2;
        mul_ln1345_418_reg_5488 <= mul_ln1345_418_fu_1988_p2;
        mul_ln1345_419_reg_5498 <= mul_ln1345_419_fu_2008_p2;
        mul_ln1345_420_reg_5508 <= mul_ln1345_420_fu_2028_p2;
        mul_ln1345_421_reg_5518 <= mul_ln1345_421_fu_2048_p2;
        mul_ln1345_422_reg_5528 <= mul_ln1345_422_fu_2068_p2;
        mul_ln1345_423_reg_5538 <= mul_ln1345_423_fu_2088_p2;
        mul_ln1345_424_reg_5548 <= mul_ln1345_424_fu_2108_p2;
        mul_ln1345_425_reg_5558 <= mul_ln1345_425_fu_2128_p2;
        mul_ln1345_426_reg_5568 <= mul_ln1345_426_fu_2148_p2;
        mul_ln1345_427_reg_5578 <= mul_ln1345_427_fu_2168_p2;
        mul_ln1345_428_reg_5588 <= mul_ln1345_428_fu_2188_p2;
        mul_ln1345_429_reg_5598 <= mul_ln1345_429_fu_2208_p2;
        mul_ln1345_430_reg_5608 <= mul_ln1345_430_fu_2228_p2;
        mul_ln1345_431_reg_5618 <= mul_ln1345_431_fu_2248_p2;
        mul_ln1345_432_reg_5628 <= mul_ln1345_432_fu_2268_p2;
        mul_ln1345_433_reg_5638 <= mul_ln1345_433_fu_2288_p2;
        mul_ln1345_434_reg_5648 <= mul_ln1345_434_fu_2308_p2;
        mul_ln1345_reg_4938 <= mul_ln1345_fu_868_p2;
        sext_ln1345_208_reg_4933 <= sext_ln1345_208_fu_864_p1;
        sext_ln1345_210_reg_4943 <= sext_ln1345_210_fu_888_p1;
        sext_ln1345_212_reg_4953 <= sext_ln1345_212_fu_912_p1;
        sext_ln1345_214_reg_4963 <= sext_ln1345_214_fu_936_p1;
        sext_ln1345_216_reg_4973 <= sext_ln1345_216_fu_960_p1;
        sext_ln1345_218_reg_4983 <= sext_ln1345_218_fu_984_p1;
        sext_ln1345_219_reg_4993 <= sext_ln1345_219_fu_1004_p1;
        sext_ln1345_220_reg_5003 <= sext_ln1345_220_fu_1024_p1;
        sext_ln1345_221_reg_5013 <= sext_ln1345_221_fu_1044_p1;
        sext_ln1345_222_reg_5023 <= sext_ln1345_222_fu_1064_p1;
        sext_ln1345_223_reg_5033 <= sext_ln1345_223_fu_1084_p1;
        sext_ln1345_224_reg_5043 <= sext_ln1345_224_fu_1104_p1;
        sext_ln1345_225_reg_5053 <= sext_ln1345_225_fu_1124_p1;
        sext_ln1345_226_reg_5063 <= sext_ln1345_226_fu_1144_p1;
        sext_ln1345_227_reg_5073 <= sext_ln1345_227_fu_1164_p1;
        sext_ln1345_228_reg_5083 <= sext_ln1345_228_fu_1184_p1;
        sext_ln1345_229_reg_5093 <= sext_ln1345_229_fu_1204_p1;
        sext_ln1345_230_reg_5103 <= sext_ln1345_230_fu_1224_p1;
        sext_ln1345_231_reg_5113 <= sext_ln1345_231_fu_1244_p1;
        sext_ln1345_232_reg_5123 <= sext_ln1345_232_fu_1264_p1;
        sext_ln1345_233_reg_5133 <= sext_ln1345_233_fu_1284_p1;
        sext_ln1345_234_reg_5143 <= sext_ln1345_234_fu_1304_p1;
        sext_ln1345_235_reg_5153 <= sext_ln1345_235_fu_1324_p1;
        sext_ln1345_236_reg_5163 <= sext_ln1345_236_fu_1344_p1;
        sext_ln1345_237_reg_5173 <= sext_ln1345_237_fu_1364_p1;
        sext_ln1345_238_reg_5183 <= sext_ln1345_238_fu_1384_p1;
        sext_ln1345_239_reg_5193 <= sext_ln1345_239_fu_1404_p1;
        sext_ln1345_240_reg_5203 <= sext_ln1345_240_fu_1424_p1;
        sext_ln1345_241_reg_5213 <= sext_ln1345_241_fu_1444_p1;
        sext_ln1345_242_reg_5223 <= sext_ln1345_242_fu_1464_p1;
        sext_ln1345_243_reg_5233 <= sext_ln1345_243_fu_1484_p1;
        sext_ln1345_244_reg_5243 <= sext_ln1345_244_fu_1504_p1;
        sext_ln1345_245_reg_5253 <= sext_ln1345_245_fu_1524_p1;
        sext_ln1345_246_reg_5263 <= sext_ln1345_246_fu_1544_p1;
        sext_ln1345_247_reg_5273 <= sext_ln1345_247_fu_1564_p1;
        sext_ln1345_248_reg_5283 <= sext_ln1345_248_fu_1584_p1;
        sext_ln1345_249_reg_5293 <= sext_ln1345_249_fu_1604_p1;
        sext_ln1345_250_reg_5303 <= sext_ln1345_250_fu_1624_p1;
        sext_ln1345_251_reg_5313 <= sext_ln1345_251_fu_1644_p1;
        sext_ln1345_252_reg_5323 <= sext_ln1345_252_fu_1664_p1;
        sext_ln1345_253_reg_5333 <= sext_ln1345_253_fu_1684_p1;
        sext_ln1345_254_reg_5343 <= sext_ln1345_254_fu_1704_p1;
        sext_ln1345_255_reg_5353 <= sext_ln1345_255_fu_1724_p1;
        sext_ln1345_256_reg_5363 <= sext_ln1345_256_fu_1744_p1;
        sext_ln1345_257_reg_5373 <= sext_ln1345_257_fu_1764_p1;
        sext_ln1345_258_reg_5383 <= sext_ln1345_258_fu_1784_p1;
        sext_ln1345_259_reg_5393 <= sext_ln1345_259_fu_1804_p1;
        sext_ln1345_260_reg_5403 <= sext_ln1345_260_fu_1824_p1;
        sext_ln1345_261_reg_5413 <= sext_ln1345_261_fu_1844_p1;
        sext_ln1345_262_reg_5423 <= sext_ln1345_262_fu_1864_p1;
        sext_ln1345_263_reg_5433 <= sext_ln1345_263_fu_1884_p1;
        sext_ln1345_264_reg_5443 <= sext_ln1345_264_fu_1904_p1;
        sext_ln1345_265_reg_5453 <= sext_ln1345_265_fu_1924_p1;
        sext_ln1345_266_reg_5463 <= sext_ln1345_266_fu_1944_p1;
        sext_ln1345_267_reg_5473 <= sext_ln1345_267_fu_1964_p1;
        sext_ln1345_268_reg_5483 <= sext_ln1345_268_fu_1984_p1;
        sext_ln1345_269_reg_5493 <= sext_ln1345_269_fu_2004_p1;
        sext_ln1345_270_reg_5503 <= sext_ln1345_270_fu_2024_p1;
        sext_ln1345_271_reg_5513 <= sext_ln1345_271_fu_2044_p1;
        sext_ln1345_272_reg_5523 <= sext_ln1345_272_fu_2064_p1;
        sext_ln1345_273_reg_5533 <= sext_ln1345_273_fu_2084_p1;
        sext_ln1345_274_reg_5543 <= sext_ln1345_274_fu_2104_p1;
        sext_ln1345_275_reg_5553 <= sext_ln1345_275_fu_2124_p1;
        sext_ln1345_276_reg_5563 <= sext_ln1345_276_fu_2144_p1;
        sext_ln1345_277_reg_5573 <= sext_ln1345_277_fu_2164_p1;
        sext_ln1345_278_reg_5583 <= sext_ln1345_278_fu_2184_p1;
        sext_ln1345_279_reg_5593 <= sext_ln1345_279_fu_2204_p1;
        sext_ln1345_280_reg_5603 <= sext_ln1345_280_fu_2224_p1;
        sext_ln1345_281_reg_5613 <= sext_ln1345_281_fu_2244_p1;
        sext_ln1345_282_reg_5623 <= sext_ln1345_282_fu_2264_p1;
        sext_ln1345_283_reg_5633 <= sext_ln1345_283_fu_2284_p1;
        sext_ln1345_284_reg_5643 <= sext_ln1345_284_fu_2304_p1;
        trunc_ln145_119_reg_4903 <= {{cache_window_sm_dout[50:48]}};
        trunc_ln145_120_reg_4908 <= {{cache_window_sm_dout[58:56]}};
        trunc_ln145_121_reg_4913 <= {{cache_window_sm_dout[66:64]}};
        trunc_ln145_122_reg_4918 <= {{cache_window_sm_dout[74:72]}};
        trunc_ln145_123_reg_4923 <= {{cache_window_sm_dout[82:80]}};
        trunc_ln145_124_reg_4928 <= {{cache_window_sm_dout[90:88]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_4807_pp0_iter2_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_496 <= tmp_401_fu_4636_p25;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_587_p4 = add_ln122_reg_4873;
    end else begin
        ap_phi_mux_cit_phi_fu_587_p4 = cit_reg_583;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_575_p4 = select_ln121_7_reg_4854;
    end else begin
        ap_phi_mux_cot_phi_fu_575_p4 = cot_reg_571;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = add_ln120_reg_4844;
    end else begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = indvar_flatten20_reg_548;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = select_ln121_8_reg_4878;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = indvar_flatten_reg_560;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        attn_inst_matmul_gen_q_bias_arr_V_address0 = zext_ln121_2_fu_738_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_q_bias_arr_V_address0 = zext_ln121_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        attn_inst_matmul_gen_q_bias_arr_V_address0 = 4'd0;
    end else begin
        attn_inst_matmul_gen_q_bias_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        attn_inst_matmul_gen_q_bias_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_q_bias_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_q_weight_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_q_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_652_p2 = (indvar_flatten20_reg_548 + 16'd1);

assign add_ln121_2_fu_646_p2 = (ap_phi_mux_indvar_flatten_phi_fu_564_p4 + 11'd1);

assign add_ln121_fu_658_p2 = (select_ln120_reg_4818 + 5'd1);

assign add_ln122_fu_718_p2 = (select_ln121_reg_4831 + 6'd1);

assign add_ln215_fu_702_p2 = (tmp_cast_fu_685_p3 + zext_ln215_fu_699_p1);

assign add_ln691_364_fu_4231_p2 = ($signed(sext_ln691_365_fu_4228_p1) + $signed(trunc_ln691_reg_5653));

assign add_ln691_365_fu_2372_p2 = ($signed(sext_ln151_96_fu_2354_p1) + $signed(sext_ln151_fu_2351_p1));

assign add_ln691_366_fu_2382_p2 = ($signed(sext_ln691_fu_2344_p1) + $signed(sext_ln691_364_fu_2363_p1));

assign add_ln691_367_fu_2392_p2 = ($signed(sext_ln691_367_fu_2388_p1) + $signed(sext_ln691_366_fu_2378_p1));

assign add_ln691_368_fu_4239_p2 = ($signed(sext_ln691_368_fu_4236_p1) + $signed(add_ln691_364_fu_4231_p2));

assign add_ln691_369_fu_2426_p2 = ($signed(sext_ln151_101_fu_2417_p1) + $signed(sext_ln151_102_fu_2420_p1));

assign add_ln691_370_fu_4248_p2 = ($signed(sext_ln691_371_fu_4245_p1) + $signed(tmp_313_reg_5668));

assign add_ln691_371_fu_2432_p2 = ($signed(sext_ln151_100_fu_2414_p1) + $signed(sext_ln151_99_fu_2411_p1));

assign add_ln691_372_fu_2442_p2 = ($signed(sext_ln691_369_fu_2398_p1) + $signed(sext_ln691_370_fu_2423_p1));

assign add_ln691_373_fu_2452_p2 = ($signed(sext_ln691_373_fu_2448_p1) + $signed(sext_ln691_372_fu_2438_p1));

assign add_ln691_374_fu_4256_p2 = ($signed(sext_ln691_374_fu_4253_p1) + $signed(add_ln691_370_fu_4248_p2));

assign add_ln691_375_fu_2486_p2 = ($signed(sext_ln151_105_fu_2477_p1) + $signed(sext_ln151_106_fu_2480_p1));

assign add_ln691_376_fu_4265_p2 = ($signed(sext_ln691_377_fu_4262_p1) + $signed(tmp_320_reg_5683));

assign add_ln691_377_fu_2492_p2 = ($signed(sext_ln151_104_fu_2474_p1) + $signed(sext_ln151_103_fu_2471_p1));

assign add_ln691_378_fu_2502_p2 = ($signed(sext_ln691_375_fu_2458_p1) + $signed(sext_ln691_376_fu_2483_p1));

assign add_ln691_379_fu_2512_p2 = ($signed(sext_ln691_379_fu_2508_p1) + $signed(sext_ln691_378_fu_2498_p1));

assign add_ln691_380_fu_4273_p2 = ($signed(sext_ln691_380_fu_4270_p1) + $signed(add_ln691_376_fu_4265_p2));

assign add_ln691_381_fu_2546_p2 = ($signed(sext_ln151_109_fu_2537_p1) + $signed(sext_ln151_110_fu_2540_p1));

assign add_ln691_382_fu_4282_p2 = ($signed(sext_ln691_383_fu_4279_p1) + $signed(tmp_327_reg_5698));

assign add_ln691_383_fu_2552_p2 = ($signed(sext_ln151_108_fu_2534_p1) + $signed(sext_ln151_107_fu_2531_p1));

assign add_ln691_384_fu_2562_p2 = ($signed(sext_ln691_381_fu_2518_p1) + $signed(sext_ln691_382_fu_2543_p1));

assign add_ln691_385_fu_2572_p2 = ($signed(sext_ln691_385_fu_2568_p1) + $signed(sext_ln691_384_fu_2558_p1));

assign add_ln691_386_fu_4290_p2 = ($signed(sext_ln691_386_fu_4287_p1) + $signed(add_ln691_382_fu_4282_p2));

assign add_ln691_387_fu_2606_p2 = ($signed(sext_ln151_113_fu_2597_p1) + $signed(sext_ln151_114_fu_2600_p1));

assign add_ln691_388_fu_4299_p2 = ($signed(sext_ln691_389_fu_4296_p1) + $signed(tmp_334_reg_5713));

assign add_ln691_389_fu_2612_p2 = ($signed(sext_ln151_112_fu_2594_p1) + $signed(sext_ln151_111_fu_2591_p1));

assign add_ln691_390_fu_2622_p2 = ($signed(sext_ln691_387_fu_2578_p1) + $signed(sext_ln691_388_fu_2603_p1));

assign add_ln691_391_fu_2632_p2 = ($signed(sext_ln691_391_fu_2628_p1) + $signed(sext_ln691_390_fu_2618_p1));

assign add_ln691_392_fu_4307_p2 = ($signed(sext_ln691_392_fu_4304_p1) + $signed(add_ln691_388_fu_4299_p2));

assign add_ln691_393_fu_2666_p2 = ($signed(sext_ln151_117_fu_2657_p1) + $signed(sext_ln151_118_fu_2660_p1));

assign add_ln691_394_fu_4316_p2 = ($signed(sext_ln691_395_fu_4313_p1) + $signed(tmp_341_reg_5728));

assign add_ln691_395_fu_2672_p2 = ($signed(sext_ln151_116_fu_2654_p1) + $signed(sext_ln151_115_fu_2651_p1));

assign add_ln691_396_fu_2682_p2 = ($signed(sext_ln691_393_fu_2638_p1) + $signed(sext_ln691_394_fu_2663_p1));

assign add_ln691_397_fu_2692_p2 = ($signed(sext_ln691_397_fu_2688_p1) + $signed(sext_ln691_396_fu_2678_p1));

assign add_ln691_398_fu_4324_p2 = ($signed(sext_ln691_398_fu_4321_p1) + $signed(add_ln691_394_fu_4316_p2));

assign add_ln691_399_fu_2726_p2 = ($signed(sext_ln151_121_fu_2717_p1) + $signed(sext_ln151_122_fu_2720_p1));

assign add_ln691_400_fu_4333_p2 = ($signed(sext_ln691_401_fu_4330_p1) + $signed(tmp_348_reg_5743));

assign add_ln691_401_fu_2732_p2 = ($signed(sext_ln151_120_fu_2714_p1) + $signed(sext_ln151_119_fu_2711_p1));

assign add_ln691_402_fu_2742_p2 = ($signed(sext_ln691_399_fu_2698_p1) + $signed(sext_ln691_400_fu_2723_p1));

assign add_ln691_403_fu_2752_p2 = ($signed(sext_ln691_403_fu_2748_p1) + $signed(sext_ln691_402_fu_2738_p1));

assign add_ln691_404_fu_4341_p2 = ($signed(sext_ln691_404_fu_4338_p1) + $signed(add_ln691_400_fu_4333_p2));

assign add_ln691_405_fu_2786_p2 = ($signed(sext_ln151_125_fu_2777_p1) + $signed(sext_ln151_126_fu_2780_p1));

assign add_ln691_406_fu_4350_p2 = ($signed(sext_ln691_407_fu_4347_p1) + $signed(tmp_355_reg_5758));

assign add_ln691_407_fu_2792_p2 = ($signed(sext_ln151_124_fu_2774_p1) + $signed(sext_ln151_123_fu_2771_p1));

assign add_ln691_408_fu_2802_p2 = ($signed(sext_ln691_405_fu_2758_p1) + $signed(sext_ln691_406_fu_2783_p1));

assign add_ln691_409_fu_2812_p2 = ($signed(sext_ln691_409_fu_2808_p1) + $signed(sext_ln691_408_fu_2798_p1));

assign add_ln691_410_fu_4358_p2 = ($signed(sext_ln691_410_fu_4355_p1) + $signed(add_ln691_406_fu_4350_p2));

assign add_ln691_411_fu_2846_p2 = ($signed(sext_ln151_129_fu_2837_p1) + $signed(sext_ln151_130_fu_2840_p1));

assign add_ln691_412_fu_4367_p2 = ($signed(sext_ln691_413_fu_4364_p1) + $signed(tmp_362_reg_5773));

assign add_ln691_413_fu_2852_p2 = ($signed(sext_ln151_128_fu_2834_p1) + $signed(sext_ln151_127_fu_2831_p1));

assign add_ln691_414_fu_2862_p2 = ($signed(sext_ln691_411_fu_2818_p1) + $signed(sext_ln691_412_fu_2843_p1));

assign add_ln691_415_fu_2872_p2 = ($signed(sext_ln691_415_fu_2868_p1) + $signed(sext_ln691_414_fu_2858_p1));

assign add_ln691_416_fu_4375_p2 = ($signed(sext_ln691_416_fu_4372_p1) + $signed(add_ln691_412_fu_4367_p2));

assign add_ln691_417_fu_2906_p2 = ($signed(sext_ln151_133_fu_2897_p1) + $signed(sext_ln151_134_fu_2900_p1));

assign add_ln691_418_fu_4384_p2 = ($signed(sext_ln691_419_fu_4381_p1) + $signed(tmp_369_reg_5788));

assign add_ln691_419_fu_2912_p2 = ($signed(sext_ln151_132_fu_2894_p1) + $signed(sext_ln151_131_fu_2891_p1));

assign add_ln691_420_fu_2922_p2 = ($signed(sext_ln691_417_fu_2878_p1) + $signed(sext_ln691_418_fu_2903_p1));

assign add_ln691_421_fu_2932_p2 = ($signed(sext_ln691_421_fu_2928_p1) + $signed(sext_ln691_420_fu_2918_p1));

assign add_ln691_422_fu_4392_p2 = ($signed(sext_ln691_422_fu_4389_p1) + $signed(add_ln691_418_fu_4384_p2));

assign add_ln691_423_fu_2966_p2 = ($signed(sext_ln151_137_fu_2957_p1) + $signed(sext_ln151_138_fu_2960_p1));

assign add_ln691_424_fu_4401_p2 = ($signed(sext_ln691_425_fu_4398_p1) + $signed(tmp_376_reg_5803));

assign add_ln691_425_fu_2972_p2 = ($signed(sext_ln151_136_fu_2954_p1) + $signed(sext_ln151_135_fu_2951_p1));

assign add_ln691_426_fu_2982_p2 = ($signed(sext_ln691_423_fu_2938_p1) + $signed(sext_ln691_424_fu_2963_p1));

assign add_ln691_427_fu_2992_p2 = ($signed(sext_ln691_427_fu_2988_p1) + $signed(sext_ln691_426_fu_2978_p1));

assign add_ln691_428_fu_4409_p2 = ($signed(sext_ln691_428_fu_4406_p1) + $signed(add_ln691_424_fu_4401_p2));

assign add_ln691_429_fu_3026_p2 = ($signed(sext_ln151_141_fu_3017_p1) + $signed(sext_ln151_142_fu_3020_p1));

assign add_ln691_430_fu_4418_p2 = ($signed(sext_ln691_431_fu_4415_p1) + $signed(tmp_383_reg_5818));

assign add_ln691_431_fu_3032_p2 = ($signed(sext_ln151_140_fu_3014_p1) + $signed(sext_ln151_139_fu_3011_p1));

assign add_ln691_432_fu_3042_p2 = ($signed(sext_ln691_429_fu_2998_p1) + $signed(sext_ln691_430_fu_3023_p1));

assign add_ln691_433_fu_3052_p2 = ($signed(sext_ln691_433_fu_3048_p1) + $signed(sext_ln691_432_fu_3038_p1));

assign add_ln691_434_fu_4426_p2 = ($signed(sext_ln691_434_fu_4423_p1) + $signed(add_ln691_430_fu_4418_p2));

assign add_ln691_435_fu_3140_p2 = ($signed(sext_ln151_145_fu_3112_p1) + $signed(sext_ln151_146_fu_3124_p1));

assign add_ln691_436_fu_4435_p2 = ($signed(sext_ln691_437_fu_4432_p1) + $signed(tmp_389_reg_5833));

assign add_ln691_437_fu_3146_p2 = ($signed(sext_ln151_144_fu_3100_p1) + $signed(sext_ln151_143_fu_3088_p1));

assign add_ln691_438_fu_3156_p2 = ($signed(sext_ln691_435_fu_3066_p1) + $signed(sext_ln691_436_fu_3136_p1));

assign add_ln691_439_fu_3166_p2 = ($signed(sext_ln691_439_fu_3162_p1) + $signed(sext_ln691_438_fu_3152_p1));

assign add_ln691_440_fu_4443_p2 = ($signed(sext_ln691_440_fu_4440_p1) + $signed(add_ln691_436_fu_4435_p2));

assign add_ln691_441_fu_3236_p2 = ($signed(sext_ln151_149_fu_3214_p1) + $signed(sext_ln151_150_fu_3223_p1));

assign add_ln691_442_fu_4452_p2 = ($signed(sext_ln691_443_fu_4449_p1) + $signed(tmp_390_reg_5848));

assign add_ln691_443_fu_3242_p2 = ($signed(sext_ln151_148_fu_3205_p1) + $signed(sext_ln151_147_fu_3196_p1));

assign add_ln691_444_fu_3252_p2 = ($signed(sext_ln691_441_fu_3177_p1) + $signed(sext_ln691_442_fu_3232_p1));

assign add_ln691_445_fu_3262_p2 = ($signed(sext_ln691_445_fu_3258_p1) + $signed(sext_ln691_444_fu_3248_p1));

assign add_ln691_446_fu_4460_p2 = ($signed(sext_ln691_446_fu_4457_p1) + $signed(add_ln691_442_fu_4452_p2));

assign add_ln691_447_fu_3332_p2 = ($signed(sext_ln151_153_fu_3310_p1) + $signed(sext_ln151_154_fu_3319_p1));

assign add_ln691_448_fu_4469_p2 = ($signed(sext_ln691_449_fu_4466_p1) + $signed(tmp_391_reg_5863));

assign add_ln691_449_fu_3338_p2 = ($signed(sext_ln151_152_fu_3301_p1) + $signed(sext_ln151_151_fu_3292_p1));

assign add_ln691_450_fu_3348_p2 = ($signed(sext_ln691_447_fu_3273_p1) + $signed(sext_ln691_448_fu_3328_p1));

assign add_ln691_451_fu_3358_p2 = ($signed(sext_ln691_451_fu_3354_p1) + $signed(sext_ln691_450_fu_3344_p1));

assign add_ln691_452_fu_4477_p2 = ($signed(sext_ln691_452_fu_4474_p1) + $signed(add_ln691_448_fu_4469_p2));

assign add_ln691_453_fu_3428_p2 = ($signed(sext_ln151_157_fu_3406_p1) + $signed(sext_ln151_158_fu_3415_p1));

assign add_ln691_454_fu_4486_p2 = ($signed(sext_ln691_455_fu_4483_p1) + $signed(tmp_392_reg_5878));

assign add_ln691_455_fu_3434_p2 = ($signed(sext_ln151_156_fu_3397_p1) + $signed(sext_ln151_155_fu_3388_p1));

assign add_ln691_456_fu_3444_p2 = ($signed(sext_ln691_453_fu_3369_p1) + $signed(sext_ln691_454_fu_3424_p1));

assign add_ln691_457_fu_3454_p2 = ($signed(sext_ln691_457_fu_3450_p1) + $signed(sext_ln691_456_fu_3440_p1));

assign add_ln691_458_fu_4494_p2 = ($signed(sext_ln691_458_fu_4491_p1) + $signed(add_ln691_454_fu_4486_p2));

assign add_ln691_459_fu_3524_p2 = ($signed(sext_ln151_161_fu_3502_p1) + $signed(sext_ln151_162_fu_3511_p1));

assign add_ln691_460_fu_4503_p2 = ($signed(sext_ln691_461_fu_4500_p1) + $signed(tmp_393_reg_5893));

assign add_ln691_461_fu_3530_p2 = ($signed(sext_ln151_160_fu_3493_p1) + $signed(sext_ln151_159_fu_3484_p1));

assign add_ln691_462_fu_3540_p2 = ($signed(sext_ln691_459_fu_3465_p1) + $signed(sext_ln691_460_fu_3520_p1));

assign add_ln691_463_fu_3550_p2 = ($signed(sext_ln691_463_fu_3546_p1) + $signed(sext_ln691_462_fu_3536_p1));

assign add_ln691_464_fu_4511_p2 = ($signed(sext_ln691_464_fu_4508_p1) + $signed(add_ln691_460_fu_4503_p2));

assign add_ln691_465_fu_3620_p2 = ($signed(sext_ln151_165_fu_3598_p1) + $signed(sext_ln151_166_fu_3607_p1));

assign add_ln691_466_fu_4520_p2 = ($signed(sext_ln691_467_fu_4517_p1) + $signed(tmp_394_reg_5908));

assign add_ln691_467_fu_3626_p2 = ($signed(sext_ln151_164_fu_3589_p1) + $signed(sext_ln151_163_fu_3580_p1));

assign add_ln691_468_fu_3636_p2 = ($signed(sext_ln691_465_fu_3561_p1) + $signed(sext_ln691_466_fu_3616_p1));

assign add_ln691_469_fu_3646_p2 = ($signed(sext_ln691_469_fu_3642_p1) + $signed(sext_ln691_468_fu_3632_p1));

assign add_ln691_470_fu_4528_p2 = ($signed(sext_ln691_470_fu_4525_p1) + $signed(add_ln691_466_fu_4520_p2));

assign add_ln691_471_fu_3716_p2 = ($signed(sext_ln151_169_fu_3694_p1) + $signed(sext_ln151_170_fu_3703_p1));

assign add_ln691_472_fu_4537_p2 = ($signed(sext_ln691_473_fu_4534_p1) + $signed(tmp_395_reg_5923));

assign add_ln691_473_fu_3722_p2 = ($signed(sext_ln151_168_fu_3685_p1) + $signed(sext_ln151_167_fu_3676_p1));

assign add_ln691_474_fu_3732_p2 = ($signed(sext_ln691_471_fu_3657_p1) + $signed(sext_ln691_472_fu_3712_p1));

assign add_ln691_475_fu_3742_p2 = ($signed(sext_ln691_475_fu_3738_p1) + $signed(sext_ln691_474_fu_3728_p1));

assign add_ln691_476_fu_4545_p2 = ($signed(sext_ln691_476_fu_4542_p1) + $signed(add_ln691_472_fu_4537_p2));

assign add_ln691_477_fu_3812_p2 = ($signed(sext_ln151_173_fu_3790_p1) + $signed(sext_ln151_174_fu_3799_p1));

assign add_ln691_478_fu_4554_p2 = ($signed(sext_ln691_479_fu_4551_p1) + $signed(tmp_396_reg_5938));

assign add_ln691_479_fu_3818_p2 = ($signed(sext_ln151_172_fu_3781_p1) + $signed(sext_ln151_171_fu_3772_p1));

assign add_ln691_480_fu_3828_p2 = ($signed(sext_ln691_477_fu_3753_p1) + $signed(sext_ln691_478_fu_3808_p1));

assign add_ln691_481_fu_3838_p2 = ($signed(sext_ln691_481_fu_3834_p1) + $signed(sext_ln691_480_fu_3824_p1));

assign add_ln691_482_fu_4562_p2 = ($signed(sext_ln691_482_fu_4559_p1) + $signed(add_ln691_478_fu_4554_p2));

assign add_ln691_483_fu_3908_p2 = ($signed(sext_ln151_177_fu_3886_p1) + $signed(sext_ln151_178_fu_3895_p1));

assign add_ln691_484_fu_4571_p2 = ($signed(sext_ln691_485_fu_4568_p1) + $signed(tmp_397_reg_5953));

assign add_ln691_485_fu_3914_p2 = ($signed(sext_ln151_176_fu_3877_p1) + $signed(sext_ln151_175_fu_3868_p1));

assign add_ln691_486_fu_3924_p2 = ($signed(sext_ln691_483_fu_3849_p1) + $signed(sext_ln691_484_fu_3904_p1));

assign add_ln691_487_fu_3934_p2 = ($signed(sext_ln691_487_fu_3930_p1) + $signed(sext_ln691_486_fu_3920_p1));

assign add_ln691_488_fu_4579_p2 = ($signed(sext_ln691_488_fu_4576_p1) + $signed(add_ln691_484_fu_4571_p2));

assign add_ln691_489_fu_4004_p2 = ($signed(sext_ln151_181_fu_3982_p1) + $signed(sext_ln151_182_fu_3991_p1));

assign add_ln691_490_fu_4588_p2 = ($signed(sext_ln691_491_fu_4585_p1) + $signed(tmp_398_reg_5968));

assign add_ln691_491_fu_4010_p2 = ($signed(sext_ln151_180_fu_3973_p1) + $signed(sext_ln151_179_fu_3964_p1));

assign add_ln691_492_fu_4020_p2 = ($signed(sext_ln691_489_fu_3945_p1) + $signed(sext_ln691_490_fu_4000_p1));

assign add_ln691_493_fu_4030_p2 = ($signed(sext_ln691_493_fu_4026_p1) + $signed(sext_ln691_492_fu_4016_p1));

assign add_ln691_494_fu_4596_p2 = ($signed(sext_ln691_494_fu_4593_p1) + $signed(add_ln691_490_fu_4588_p2));

assign add_ln691_495_fu_4100_p2 = ($signed(sext_ln151_185_fu_4078_p1) + $signed(sext_ln151_186_fu_4087_p1));

assign add_ln691_496_fu_4605_p2 = ($signed(sext_ln691_497_fu_4602_p1) + $signed(tmp_399_reg_5983));

assign add_ln691_497_fu_4106_p2 = ($signed(sext_ln151_184_fu_4069_p1) + $signed(sext_ln151_183_fu_4060_p1));

assign add_ln691_498_fu_4116_p2 = ($signed(sext_ln691_495_fu_4041_p1) + $signed(sext_ln691_496_fu_4096_p1));

assign add_ln691_499_fu_4126_p2 = ($signed(sext_ln691_499_fu_4122_p1) + $signed(sext_ln691_498_fu_4112_p1));

assign add_ln691_500_fu_4613_p2 = ($signed(sext_ln691_500_fu_4610_p1) + $signed(add_ln691_496_fu_4605_p2));

assign add_ln691_501_fu_4196_p2 = ($signed(sext_ln151_189_fu_4174_p1) + $signed(sext_ln151_190_fu_4183_p1));

assign add_ln691_502_fu_4622_p2 = ($signed(sext_ln691_503_fu_4619_p1) + $signed(tmp_400_reg_5998));

assign add_ln691_503_fu_4202_p2 = ($signed(sext_ln151_188_fu_4165_p1) + $signed(sext_ln151_187_fu_4156_p1));

assign add_ln691_504_fu_4212_p2 = ($signed(sext_ln691_501_fu_4137_p1) + $signed(sext_ln691_502_fu_4192_p1));

assign add_ln691_505_fu_4222_p2 = ($signed(sext_ln691_505_fu_4218_p1) + $signed(sext_ln691_504_fu_4208_p1));

assign add_ln691_506_fu_4630_p2 = ($signed(sext_ln691_506_fu_4627_p1) + $signed(add_ln691_502_fu_4622_p2));

assign add_ln691_fu_2366_p2 = ($signed(sext_ln151_97_fu_2357_p1) + $signed(sext_ln151_98_fu_2360_p1));

assign and_ln120_fu_626_p2 = (xor_ln120_fu_614_p2 & icmp_ln122_fu_620_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (cache_window_sm_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2 = ((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_q_weight_arr_V_address0 = zext_ln215_2_fu_734_p1;

assign icmp_ln120_fu_594_p2 = ((ap_phi_mux_indvar_flatten20_phi_fu_552_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_600_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_564_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_620_p2 = ((ap_phi_mux_cit_phi_fu_587_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_708_p2 = ((select_ln121_reg_4831 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_713_p2 = ((select_ln121_reg_4831 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_402_fu_4693_p48;

assign mul_ln1345_364_fu_892_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_365_fu_916_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_366_fu_940_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_367_fu_964_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_368_fu_988_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_369_fu_1008_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_370_fu_1028_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_371_fu_1048_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_372_fu_1068_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_373_fu_1088_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_374_fu_1108_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_375_fu_1128_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_376_fu_1148_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_377_fu_1168_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_378_fu_1188_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_379_fu_1208_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_380_fu_1228_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_381_fu_1248_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_382_fu_1268_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_383_fu_1288_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_384_fu_1308_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_385_fu_1328_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_386_fu_1348_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_387_fu_1368_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_388_fu_1388_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_389_fu_1408_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_390_fu_1428_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_391_fu_1448_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_392_fu_1468_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_393_fu_1488_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_394_fu_1508_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_395_fu_1528_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_396_fu_1548_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_397_fu_1568_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_398_fu_1588_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_399_fu_1608_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_400_fu_1628_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_401_fu_1648_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_402_fu_1668_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_403_fu_1688_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_404_fu_1708_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_405_fu_1728_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_406_fu_1748_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_407_fu_1768_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_408_fu_1788_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_409_fu_1808_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_410_fu_1828_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_411_fu_1848_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_412_fu_1868_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_413_fu_1888_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_414_fu_1908_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_415_fu_1928_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_416_fu_1948_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_417_fu_1968_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_418_fu_1988_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_419_fu_2008_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_420_fu_2028_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_421_fu_2048_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_422_fu_2068_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_423_fu_2088_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_424_fu_2108_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_425_fu_2128_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_426_fu_2148_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_427_fu_2168_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_428_fu_2188_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_429_fu_2208_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_430_fu_2228_p1 = sext_ln1345_209_fu_884_p1;

assign mul_ln1345_431_fu_2248_p1 = sext_ln1345_211_fu_908_p1;

assign mul_ln1345_432_fu_2268_p1 = sext_ln1345_213_fu_932_p1;

assign mul_ln1345_433_fu_2288_p1 = sext_ln1345_215_fu_956_p1;

assign mul_ln1345_434_fu_2308_p1 = sext_ln1345_217_fu_980_p1;

assign mul_ln1345_435_fu_3061_p0 = sext_ln1345_208_reg_4933;

assign mul_ln1345_435_fu_3061_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_436_fu_3083_p0 = sext_ln1345_210_reg_4943;

assign mul_ln1345_436_fu_3083_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_437_fu_3095_p0 = sext_ln1345_212_reg_4953;

assign mul_ln1345_437_fu_3095_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_438_fu_3107_p0 = sext_ln1345_214_reg_4963;

assign mul_ln1345_438_fu_3107_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_439_fu_3119_p0 = sext_ln1345_216_reg_4973;

assign mul_ln1345_439_fu_3119_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_440_fu_3131_p0 = sext_ln1345_218_reg_4983;

assign mul_ln1345_440_fu_3131_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_441_fu_3172_p0 = sext_ln1345_219_reg_4993;

assign mul_ln1345_441_fu_3172_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_442_fu_3191_p0 = sext_ln1345_220_reg_5003;

assign mul_ln1345_442_fu_3191_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_443_fu_3200_p0 = sext_ln1345_221_reg_5013;

assign mul_ln1345_443_fu_3200_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_444_fu_3209_p0 = sext_ln1345_222_reg_5023;

assign mul_ln1345_444_fu_3209_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_445_fu_3218_p0 = sext_ln1345_223_reg_5033;

assign mul_ln1345_445_fu_3218_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_446_fu_3227_p0 = sext_ln1345_224_reg_5043;

assign mul_ln1345_446_fu_3227_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_447_fu_3268_p0 = sext_ln1345_225_reg_5053;

assign mul_ln1345_447_fu_3268_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_448_fu_3287_p0 = sext_ln1345_226_reg_5063;

assign mul_ln1345_448_fu_3287_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_449_fu_3296_p0 = sext_ln1345_227_reg_5073;

assign mul_ln1345_449_fu_3296_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_450_fu_3305_p0 = sext_ln1345_228_reg_5083;

assign mul_ln1345_450_fu_3305_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_451_fu_3314_p0 = sext_ln1345_229_reg_5093;

assign mul_ln1345_451_fu_3314_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_452_fu_3323_p0 = sext_ln1345_230_reg_5103;

assign mul_ln1345_452_fu_3323_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_453_fu_3364_p0 = sext_ln1345_231_reg_5113;

assign mul_ln1345_453_fu_3364_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_454_fu_3383_p0 = sext_ln1345_232_reg_5123;

assign mul_ln1345_454_fu_3383_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_455_fu_3392_p0 = sext_ln1345_233_reg_5133;

assign mul_ln1345_455_fu_3392_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_456_fu_3401_p0 = sext_ln1345_234_reg_5143;

assign mul_ln1345_456_fu_3401_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_457_fu_3410_p0 = sext_ln1345_235_reg_5153;

assign mul_ln1345_457_fu_3410_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_458_fu_3419_p0 = sext_ln1345_236_reg_5163;

assign mul_ln1345_458_fu_3419_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_459_fu_3460_p0 = sext_ln1345_237_reg_5173;

assign mul_ln1345_459_fu_3460_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_460_fu_3479_p0 = sext_ln1345_238_reg_5183;

assign mul_ln1345_460_fu_3479_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_461_fu_3488_p0 = sext_ln1345_239_reg_5193;

assign mul_ln1345_461_fu_3488_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_462_fu_3497_p0 = sext_ln1345_240_reg_5203;

assign mul_ln1345_462_fu_3497_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_463_fu_3506_p0 = sext_ln1345_241_reg_5213;

assign mul_ln1345_463_fu_3506_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_464_fu_3515_p0 = sext_ln1345_242_reg_5223;

assign mul_ln1345_464_fu_3515_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_465_fu_3556_p0 = sext_ln1345_243_reg_5233;

assign mul_ln1345_465_fu_3556_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_466_fu_3575_p0 = sext_ln1345_244_reg_5243;

assign mul_ln1345_466_fu_3575_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_467_fu_3584_p0 = sext_ln1345_245_reg_5253;

assign mul_ln1345_467_fu_3584_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_468_fu_3593_p0 = sext_ln1345_246_reg_5263;

assign mul_ln1345_468_fu_3593_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_469_fu_3602_p0 = sext_ln1345_247_reg_5273;

assign mul_ln1345_469_fu_3602_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_470_fu_3611_p0 = sext_ln1345_248_reg_5283;

assign mul_ln1345_470_fu_3611_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_471_fu_3652_p0 = sext_ln1345_249_reg_5293;

assign mul_ln1345_471_fu_3652_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_472_fu_3671_p0 = sext_ln1345_250_reg_5303;

assign mul_ln1345_472_fu_3671_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_473_fu_3680_p0 = sext_ln1345_251_reg_5313;

assign mul_ln1345_473_fu_3680_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_474_fu_3689_p0 = sext_ln1345_252_reg_5323;

assign mul_ln1345_474_fu_3689_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_475_fu_3698_p0 = sext_ln1345_253_reg_5333;

assign mul_ln1345_475_fu_3698_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_476_fu_3707_p0 = sext_ln1345_254_reg_5343;

assign mul_ln1345_476_fu_3707_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_477_fu_3748_p0 = sext_ln1345_255_reg_5353;

assign mul_ln1345_477_fu_3748_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_478_fu_3767_p0 = sext_ln1345_256_reg_5363;

assign mul_ln1345_478_fu_3767_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_479_fu_3776_p0 = sext_ln1345_257_reg_5373;

assign mul_ln1345_479_fu_3776_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_480_fu_3785_p0 = sext_ln1345_258_reg_5383;

assign mul_ln1345_480_fu_3785_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_481_fu_3794_p0 = sext_ln1345_259_reg_5393;

assign mul_ln1345_481_fu_3794_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_482_fu_3803_p0 = sext_ln1345_260_reg_5403;

assign mul_ln1345_482_fu_3803_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_483_fu_3844_p0 = sext_ln1345_261_reg_5413;

assign mul_ln1345_483_fu_3844_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_484_fu_3863_p0 = sext_ln1345_262_reg_5423;

assign mul_ln1345_484_fu_3863_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_485_fu_3872_p0 = sext_ln1345_263_reg_5433;

assign mul_ln1345_485_fu_3872_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_486_fu_3881_p0 = sext_ln1345_264_reg_5443;

assign mul_ln1345_486_fu_3881_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_487_fu_3890_p0 = sext_ln1345_265_reg_5453;

assign mul_ln1345_487_fu_3890_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_488_fu_3899_p0 = sext_ln1345_266_reg_5463;

assign mul_ln1345_488_fu_3899_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_489_fu_3940_p0 = sext_ln1345_267_reg_5473;

assign mul_ln1345_489_fu_3940_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_490_fu_3959_p0 = sext_ln1345_268_reg_5483;

assign mul_ln1345_490_fu_3959_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_491_fu_3968_p0 = sext_ln1345_269_reg_5493;

assign mul_ln1345_491_fu_3968_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_492_fu_3977_p0 = sext_ln1345_270_reg_5503;

assign mul_ln1345_492_fu_3977_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_493_fu_3986_p0 = sext_ln1345_271_reg_5513;

assign mul_ln1345_493_fu_3986_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_494_fu_3995_p0 = sext_ln1345_272_reg_5523;

assign mul_ln1345_494_fu_3995_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_495_fu_4036_p0 = sext_ln1345_273_reg_5533;

assign mul_ln1345_495_fu_4036_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_496_fu_4055_p0 = sext_ln1345_274_reg_5543;

assign mul_ln1345_496_fu_4055_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_497_fu_4064_p0 = sext_ln1345_275_reg_5553;

assign mul_ln1345_497_fu_4064_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_498_fu_4073_p0 = sext_ln1345_276_reg_5563;

assign mul_ln1345_498_fu_4073_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_499_fu_4082_p0 = sext_ln1345_277_reg_5573;

assign mul_ln1345_499_fu_4082_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_500_fu_4091_p0 = sext_ln1345_278_reg_5583;

assign mul_ln1345_500_fu_4091_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_501_fu_4132_p0 = sext_ln1345_279_reg_5593;

assign mul_ln1345_501_fu_4132_p1 = sext_ln1345_285_fu_3058_p1;

assign mul_ln1345_502_fu_4151_p0 = sext_ln1345_280_reg_5603;

assign mul_ln1345_502_fu_4151_p1 = sext_ln1345_286_fu_3080_p1;

assign mul_ln1345_503_fu_4160_p0 = sext_ln1345_281_reg_5613;

assign mul_ln1345_503_fu_4160_p1 = sext_ln1345_287_fu_3092_p1;

assign mul_ln1345_504_fu_4169_p0 = sext_ln1345_282_reg_5623;

assign mul_ln1345_504_fu_4169_p1 = sext_ln1345_288_fu_3104_p1;

assign mul_ln1345_505_fu_4178_p0 = sext_ln1345_283_reg_5633;

assign mul_ln1345_505_fu_4178_p1 = sext_ln1345_289_fu_3116_p1;

assign mul_ln1345_506_fu_4187_p0 = sext_ln1345_284_reg_5643;

assign mul_ln1345_506_fu_4187_p1 = sext_ln1345_290_fu_3128_p1;

assign mul_ln1345_fu_868_p1 = sext_ln1345_fu_860_p1;

assign or_ln121_fu_632_p2 = (icmp_ln121_fu_600_p2 | and_ln120_fu_626_p2);

assign select_ln120_3_fu_2317_p3 = ((icmp_ln121_reg_4811_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_q_bias_arr_V_load_1_reg_4802 : attn_inst_matmul_gen_q_bias_arr_V_load_reg_4893);

assign select_ln120_4_fu_671_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 4'd0 : trunc_ln215_3_fu_667_p1);

assign select_ln120_fu_606_p3 = ((icmp_ln121_fu_600_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_575_p4);

assign select_ln121_5_fu_678_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? trunc_ln215_fu_663_p1 : select_ln120_4_fu_671_p3);

assign select_ln121_6_fu_2322_p3 = ((and_ln120_reg_4824_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_q_bias_arr_V_q0 : select_ln120_3_fu_2317_p3);

assign select_ln121_7_fu_693_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? add_ln121_fu_658_p2 : select_ln120_reg_4818);

assign select_ln121_8_fu_723_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 11'd1 : add_ln121_2_reg_4839);

assign select_ln121_fu_638_p3 = ((or_ln121_fu_632_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_587_p4);

assign select_ln126_fu_2337_p3 = ((icmp_ln126_reg_4864_pp0_iter1_reg[0:0] == 1'b1) ? vec_o_data_M_elems_V_fu_2329_p3 : vec_o_data_M_elems_V_2_fu_496);

assign sext_ln1345_208_fu_864_p1 = trunc_ln215_4_fu_856_p1;

assign sext_ln1345_209_fu_884_p1 = $signed(trunc_ln145_s_fu_746_p4);

assign sext_ln1345_210_fu_888_p1 = tmp_s_fu_874_p4;

assign sext_ln1345_211_fu_908_p1 = $signed(trunc_ln145_115_fu_756_p4);

assign sext_ln1345_212_fu_912_p1 = tmp_308_fu_898_p4;

assign sext_ln1345_213_fu_932_p1 = $signed(trunc_ln145_116_fu_766_p4);

assign sext_ln1345_214_fu_936_p1 = tmp_309_fu_922_p4;

assign sext_ln1345_215_fu_956_p1 = $signed(trunc_ln145_117_fu_776_p4);

assign sext_ln1345_216_fu_960_p1 = tmp_310_fu_946_p4;

assign sext_ln1345_217_fu_980_p1 = $signed(trunc_ln145_118_fu_786_p4);

assign sext_ln1345_218_fu_984_p1 = tmp_311_fu_970_p4;

assign sext_ln1345_219_fu_1004_p1 = tmp_312_fu_994_p4;

assign sext_ln1345_220_fu_1024_p1 = tmp_314_fu_1014_p4;

assign sext_ln1345_221_fu_1044_p1 = tmp_315_fu_1034_p4;

assign sext_ln1345_222_fu_1064_p1 = tmp_316_fu_1054_p4;

assign sext_ln1345_223_fu_1084_p1 = tmp_317_fu_1074_p4;

assign sext_ln1345_224_fu_1104_p1 = tmp_318_fu_1094_p4;

assign sext_ln1345_225_fu_1124_p1 = tmp_319_fu_1114_p4;

assign sext_ln1345_226_fu_1144_p1 = tmp_321_fu_1134_p4;

assign sext_ln1345_227_fu_1164_p1 = tmp_322_fu_1154_p4;

assign sext_ln1345_228_fu_1184_p1 = tmp_323_fu_1174_p4;

assign sext_ln1345_229_fu_1204_p1 = tmp_324_fu_1194_p4;

assign sext_ln1345_230_fu_1224_p1 = tmp_325_fu_1214_p4;

assign sext_ln1345_231_fu_1244_p1 = tmp_326_fu_1234_p4;

assign sext_ln1345_232_fu_1264_p1 = tmp_328_fu_1254_p4;

assign sext_ln1345_233_fu_1284_p1 = tmp_329_fu_1274_p4;

assign sext_ln1345_234_fu_1304_p1 = tmp_330_fu_1294_p4;

assign sext_ln1345_235_fu_1324_p1 = tmp_331_fu_1314_p4;

assign sext_ln1345_236_fu_1344_p1 = tmp_332_fu_1334_p4;

assign sext_ln1345_237_fu_1364_p1 = tmp_333_fu_1354_p4;

assign sext_ln1345_238_fu_1384_p1 = tmp_335_fu_1374_p4;

assign sext_ln1345_239_fu_1404_p1 = tmp_336_fu_1394_p4;

assign sext_ln1345_240_fu_1424_p1 = tmp_337_fu_1414_p4;

assign sext_ln1345_241_fu_1444_p1 = tmp_338_fu_1434_p4;

assign sext_ln1345_242_fu_1464_p1 = tmp_339_fu_1454_p4;

assign sext_ln1345_243_fu_1484_p1 = tmp_340_fu_1474_p4;

assign sext_ln1345_244_fu_1504_p1 = tmp_342_fu_1494_p4;

assign sext_ln1345_245_fu_1524_p1 = tmp_343_fu_1514_p4;

assign sext_ln1345_246_fu_1544_p1 = tmp_344_fu_1534_p4;

assign sext_ln1345_247_fu_1564_p1 = tmp_345_fu_1554_p4;

assign sext_ln1345_248_fu_1584_p1 = tmp_346_fu_1574_p4;

assign sext_ln1345_249_fu_1604_p1 = tmp_347_fu_1594_p4;

assign sext_ln1345_250_fu_1624_p1 = tmp_349_fu_1614_p4;

assign sext_ln1345_251_fu_1644_p1 = tmp_350_fu_1634_p4;

assign sext_ln1345_252_fu_1664_p1 = tmp_351_fu_1654_p4;

assign sext_ln1345_253_fu_1684_p1 = tmp_352_fu_1674_p4;

assign sext_ln1345_254_fu_1704_p1 = tmp_353_fu_1694_p4;

assign sext_ln1345_255_fu_1724_p1 = tmp_354_fu_1714_p4;

assign sext_ln1345_256_fu_1744_p1 = tmp_356_fu_1734_p4;

assign sext_ln1345_257_fu_1764_p1 = tmp_357_fu_1754_p4;

assign sext_ln1345_258_fu_1784_p1 = tmp_358_fu_1774_p4;

assign sext_ln1345_259_fu_1804_p1 = tmp_359_fu_1794_p4;

assign sext_ln1345_260_fu_1824_p1 = tmp_360_fu_1814_p4;

assign sext_ln1345_261_fu_1844_p1 = tmp_361_fu_1834_p4;

assign sext_ln1345_262_fu_1864_p1 = tmp_363_fu_1854_p4;

assign sext_ln1345_263_fu_1884_p1 = tmp_364_fu_1874_p4;

assign sext_ln1345_264_fu_1904_p1 = tmp_365_fu_1894_p4;

assign sext_ln1345_265_fu_1924_p1 = tmp_366_fu_1914_p4;

assign sext_ln1345_266_fu_1944_p1 = tmp_367_fu_1934_p4;

assign sext_ln1345_267_fu_1964_p1 = tmp_368_fu_1954_p4;

assign sext_ln1345_268_fu_1984_p1 = tmp_370_fu_1974_p4;

assign sext_ln1345_269_fu_2004_p1 = tmp_371_fu_1994_p4;

assign sext_ln1345_270_fu_2024_p1 = tmp_372_fu_2014_p4;

assign sext_ln1345_271_fu_2044_p1 = tmp_373_fu_2034_p4;

assign sext_ln1345_272_fu_2064_p1 = tmp_374_fu_2054_p4;

assign sext_ln1345_273_fu_2084_p1 = tmp_375_fu_2074_p4;

assign sext_ln1345_274_fu_2104_p1 = tmp_377_fu_2094_p4;

assign sext_ln1345_275_fu_2124_p1 = tmp_378_fu_2114_p4;

assign sext_ln1345_276_fu_2144_p1 = tmp_379_fu_2134_p4;

assign sext_ln1345_277_fu_2164_p1 = tmp_380_fu_2154_p4;

assign sext_ln1345_278_fu_2184_p1 = tmp_381_fu_2174_p4;

assign sext_ln1345_279_fu_2204_p1 = tmp_382_fu_2194_p4;

assign sext_ln1345_280_fu_2224_p1 = tmp_384_fu_2214_p4;

assign sext_ln1345_281_fu_2244_p1 = tmp_385_fu_2234_p4;

assign sext_ln1345_282_fu_2264_p1 = tmp_386_fu_2254_p4;

assign sext_ln1345_283_fu_2284_p1 = tmp_387_fu_2274_p4;

assign sext_ln1345_284_fu_2304_p1 = tmp_388_fu_2294_p4;

assign sext_ln1345_285_fu_3058_p1 = $signed(trunc_ln145_119_reg_4903);

assign sext_ln1345_286_fu_3080_p1 = $signed(trunc_ln145_120_reg_4908);

assign sext_ln1345_287_fu_3092_p1 = $signed(trunc_ln145_121_reg_4913);

assign sext_ln1345_288_fu_3104_p1 = $signed(trunc_ln145_122_reg_4918);

assign sext_ln1345_289_fu_3116_p1 = $signed(trunc_ln145_123_reg_4923);

assign sext_ln1345_290_fu_3128_p1 = $signed(trunc_ln145_124_reg_4928);

assign sext_ln1345_fu_860_p1 = $signed(trunc_ln145_fu_742_p1);

assign sext_ln151_100_fu_2414_p1 = mul_ln1345_371_reg_5018;

assign sext_ln151_101_fu_2417_p1 = mul_ln1345_372_reg_5028;

assign sext_ln151_102_fu_2420_p1 = mul_ln1345_373_reg_5038;

assign sext_ln151_103_fu_2471_p1 = mul_ln1345_376_reg_5068;

assign sext_ln151_104_fu_2474_p1 = mul_ln1345_377_reg_5078;

assign sext_ln151_105_fu_2477_p1 = mul_ln1345_378_reg_5088;

assign sext_ln151_106_fu_2480_p1 = mul_ln1345_379_reg_5098;

assign sext_ln151_107_fu_2531_p1 = mul_ln1345_382_reg_5128;

assign sext_ln151_108_fu_2534_p1 = mul_ln1345_383_reg_5138;

assign sext_ln151_109_fu_2537_p1 = mul_ln1345_384_reg_5148;

assign sext_ln151_110_fu_2540_p1 = mul_ln1345_385_reg_5158;

assign sext_ln151_111_fu_2591_p1 = mul_ln1345_388_reg_5188;

assign sext_ln151_112_fu_2594_p1 = mul_ln1345_389_reg_5198;

assign sext_ln151_113_fu_2597_p1 = mul_ln1345_390_reg_5208;

assign sext_ln151_114_fu_2600_p1 = mul_ln1345_391_reg_5218;

assign sext_ln151_115_fu_2651_p1 = mul_ln1345_394_reg_5248;

assign sext_ln151_116_fu_2654_p1 = mul_ln1345_395_reg_5258;

assign sext_ln151_117_fu_2657_p1 = mul_ln1345_396_reg_5268;

assign sext_ln151_118_fu_2660_p1 = mul_ln1345_397_reg_5278;

assign sext_ln151_119_fu_2711_p1 = mul_ln1345_400_reg_5308;

assign sext_ln151_120_fu_2714_p1 = mul_ln1345_401_reg_5318;

assign sext_ln151_121_fu_2717_p1 = mul_ln1345_402_reg_5328;

assign sext_ln151_122_fu_2720_p1 = mul_ln1345_403_reg_5338;

assign sext_ln151_123_fu_2771_p1 = mul_ln1345_406_reg_5368;

assign sext_ln151_124_fu_2774_p1 = mul_ln1345_407_reg_5378;

assign sext_ln151_125_fu_2777_p1 = mul_ln1345_408_reg_5388;

assign sext_ln151_126_fu_2780_p1 = mul_ln1345_409_reg_5398;

assign sext_ln151_127_fu_2831_p1 = mul_ln1345_412_reg_5428;

assign sext_ln151_128_fu_2834_p1 = mul_ln1345_413_reg_5438;

assign sext_ln151_129_fu_2837_p1 = mul_ln1345_414_reg_5448;

assign sext_ln151_130_fu_2840_p1 = mul_ln1345_415_reg_5458;

assign sext_ln151_131_fu_2891_p1 = mul_ln1345_418_reg_5488;

assign sext_ln151_132_fu_2894_p1 = mul_ln1345_419_reg_5498;

assign sext_ln151_133_fu_2897_p1 = mul_ln1345_420_reg_5508;

assign sext_ln151_134_fu_2900_p1 = mul_ln1345_421_reg_5518;

assign sext_ln151_135_fu_2951_p1 = mul_ln1345_424_reg_5548;

assign sext_ln151_136_fu_2954_p1 = mul_ln1345_425_reg_5558;

assign sext_ln151_137_fu_2957_p1 = mul_ln1345_426_reg_5568;

assign sext_ln151_138_fu_2960_p1 = mul_ln1345_427_reg_5578;

assign sext_ln151_139_fu_3011_p1 = mul_ln1345_430_reg_5608;

assign sext_ln151_140_fu_3014_p1 = mul_ln1345_431_reg_5618;

assign sext_ln151_141_fu_3017_p1 = mul_ln1345_432_reg_5628;

assign sext_ln151_142_fu_3020_p1 = mul_ln1345_433_reg_5638;

assign sext_ln151_143_fu_3088_p1 = mul_ln1345_436_fu_3083_p2;

assign sext_ln151_144_fu_3100_p1 = mul_ln1345_437_fu_3095_p2;

assign sext_ln151_145_fu_3112_p1 = mul_ln1345_438_fu_3107_p2;

assign sext_ln151_146_fu_3124_p1 = mul_ln1345_439_fu_3119_p2;

assign sext_ln151_147_fu_3196_p1 = mul_ln1345_442_fu_3191_p2;

assign sext_ln151_148_fu_3205_p1 = mul_ln1345_443_fu_3200_p2;

assign sext_ln151_149_fu_3214_p1 = mul_ln1345_444_fu_3209_p2;

assign sext_ln151_150_fu_3223_p1 = mul_ln1345_445_fu_3218_p2;

assign sext_ln151_151_fu_3292_p1 = mul_ln1345_448_fu_3287_p2;

assign sext_ln151_152_fu_3301_p1 = mul_ln1345_449_fu_3296_p2;

assign sext_ln151_153_fu_3310_p1 = mul_ln1345_450_fu_3305_p2;

assign sext_ln151_154_fu_3319_p1 = mul_ln1345_451_fu_3314_p2;

assign sext_ln151_155_fu_3388_p1 = mul_ln1345_454_fu_3383_p2;

assign sext_ln151_156_fu_3397_p1 = mul_ln1345_455_fu_3392_p2;

assign sext_ln151_157_fu_3406_p1 = mul_ln1345_456_fu_3401_p2;

assign sext_ln151_158_fu_3415_p1 = mul_ln1345_457_fu_3410_p2;

assign sext_ln151_159_fu_3484_p1 = mul_ln1345_460_fu_3479_p2;

assign sext_ln151_160_fu_3493_p1 = mul_ln1345_461_fu_3488_p2;

assign sext_ln151_161_fu_3502_p1 = mul_ln1345_462_fu_3497_p2;

assign sext_ln151_162_fu_3511_p1 = mul_ln1345_463_fu_3506_p2;

assign sext_ln151_163_fu_3580_p1 = mul_ln1345_466_fu_3575_p2;

assign sext_ln151_164_fu_3589_p1 = mul_ln1345_467_fu_3584_p2;

assign sext_ln151_165_fu_3598_p1 = mul_ln1345_468_fu_3593_p2;

assign sext_ln151_166_fu_3607_p1 = mul_ln1345_469_fu_3602_p2;

assign sext_ln151_167_fu_3676_p1 = mul_ln1345_472_fu_3671_p2;

assign sext_ln151_168_fu_3685_p1 = mul_ln1345_473_fu_3680_p2;

assign sext_ln151_169_fu_3694_p1 = mul_ln1345_474_fu_3689_p2;

assign sext_ln151_170_fu_3703_p1 = mul_ln1345_475_fu_3698_p2;

assign sext_ln151_171_fu_3772_p1 = mul_ln1345_478_fu_3767_p2;

assign sext_ln151_172_fu_3781_p1 = mul_ln1345_479_fu_3776_p2;

assign sext_ln151_173_fu_3790_p1 = mul_ln1345_480_fu_3785_p2;

assign sext_ln151_174_fu_3799_p1 = mul_ln1345_481_fu_3794_p2;

assign sext_ln151_175_fu_3868_p1 = mul_ln1345_484_fu_3863_p2;

assign sext_ln151_176_fu_3877_p1 = mul_ln1345_485_fu_3872_p2;

assign sext_ln151_177_fu_3886_p1 = mul_ln1345_486_fu_3881_p2;

assign sext_ln151_178_fu_3895_p1 = mul_ln1345_487_fu_3890_p2;

assign sext_ln151_179_fu_3964_p1 = mul_ln1345_490_fu_3959_p2;

assign sext_ln151_180_fu_3973_p1 = mul_ln1345_491_fu_3968_p2;

assign sext_ln151_181_fu_3982_p1 = mul_ln1345_492_fu_3977_p2;

assign sext_ln151_182_fu_3991_p1 = mul_ln1345_493_fu_3986_p2;

assign sext_ln151_183_fu_4060_p1 = mul_ln1345_496_fu_4055_p2;

assign sext_ln151_184_fu_4069_p1 = mul_ln1345_497_fu_4064_p2;

assign sext_ln151_185_fu_4078_p1 = mul_ln1345_498_fu_4073_p2;

assign sext_ln151_186_fu_4087_p1 = mul_ln1345_499_fu_4082_p2;

assign sext_ln151_187_fu_4156_p1 = mul_ln1345_502_fu_4151_p2;

assign sext_ln151_188_fu_4165_p1 = mul_ln1345_503_fu_4160_p2;

assign sext_ln151_189_fu_4174_p1 = mul_ln1345_504_fu_4169_p2;

assign sext_ln151_190_fu_4183_p1 = mul_ln1345_505_fu_4178_p2;

assign sext_ln151_96_fu_2354_p1 = mul_ln1345_365_reg_4958;

assign sext_ln151_97_fu_2357_p1 = mul_ln1345_366_reg_4968;

assign sext_ln151_98_fu_2360_p1 = mul_ln1345_367_reg_4978;

assign sext_ln151_99_fu_2411_p1 = mul_ln1345_370_reg_5008;

assign sext_ln151_fu_2351_p1 = mul_ln1345_364_reg_4948;

assign sext_ln691_364_fu_2363_p1 = mul_ln1345_368_reg_4988;

assign sext_ln691_365_fu_4228_p1 = $signed(add_ln691_reg_5658);

assign sext_ln691_366_fu_2378_p1 = $signed(add_ln691_365_fu_2372_p2);

assign sext_ln691_367_fu_2388_p1 = $signed(add_ln691_366_fu_2382_p2);

assign sext_ln691_368_fu_4236_p1 = $signed(add_ln691_367_reg_5663);

assign sext_ln691_369_fu_2398_p1 = mul_ln1345_369_reg_4998;

assign sext_ln691_370_fu_2423_p1 = mul_ln1345_374_reg_5048;

assign sext_ln691_371_fu_4245_p1 = $signed(add_ln691_369_reg_5673);

assign sext_ln691_372_fu_2438_p1 = $signed(add_ln691_371_fu_2432_p2);

assign sext_ln691_373_fu_2448_p1 = $signed(add_ln691_372_fu_2442_p2);

assign sext_ln691_374_fu_4253_p1 = $signed(add_ln691_373_reg_5678);

assign sext_ln691_375_fu_2458_p1 = mul_ln1345_375_reg_5058;

assign sext_ln691_376_fu_2483_p1 = mul_ln1345_380_reg_5108;

assign sext_ln691_377_fu_4262_p1 = $signed(add_ln691_375_reg_5688);

assign sext_ln691_378_fu_2498_p1 = $signed(add_ln691_377_fu_2492_p2);

assign sext_ln691_379_fu_2508_p1 = $signed(add_ln691_378_fu_2502_p2);

assign sext_ln691_380_fu_4270_p1 = $signed(add_ln691_379_reg_5693);

assign sext_ln691_381_fu_2518_p1 = mul_ln1345_381_reg_5118;

assign sext_ln691_382_fu_2543_p1 = mul_ln1345_386_reg_5168;

assign sext_ln691_383_fu_4279_p1 = $signed(add_ln691_381_reg_5703);

assign sext_ln691_384_fu_2558_p1 = $signed(add_ln691_383_fu_2552_p2);

assign sext_ln691_385_fu_2568_p1 = $signed(add_ln691_384_fu_2562_p2);

assign sext_ln691_386_fu_4287_p1 = $signed(add_ln691_385_reg_5708);

assign sext_ln691_387_fu_2578_p1 = mul_ln1345_387_reg_5178;

assign sext_ln691_388_fu_2603_p1 = mul_ln1345_392_reg_5228;

assign sext_ln691_389_fu_4296_p1 = $signed(add_ln691_387_reg_5718);

assign sext_ln691_390_fu_2618_p1 = $signed(add_ln691_389_fu_2612_p2);

assign sext_ln691_391_fu_2628_p1 = $signed(add_ln691_390_fu_2622_p2);

assign sext_ln691_392_fu_4304_p1 = $signed(add_ln691_391_reg_5723);

assign sext_ln691_393_fu_2638_p1 = mul_ln1345_393_reg_5238;

assign sext_ln691_394_fu_2663_p1 = mul_ln1345_398_reg_5288;

assign sext_ln691_395_fu_4313_p1 = $signed(add_ln691_393_reg_5733);

assign sext_ln691_396_fu_2678_p1 = $signed(add_ln691_395_fu_2672_p2);

assign sext_ln691_397_fu_2688_p1 = $signed(add_ln691_396_fu_2682_p2);

assign sext_ln691_398_fu_4321_p1 = $signed(add_ln691_397_reg_5738);

assign sext_ln691_399_fu_2698_p1 = mul_ln1345_399_reg_5298;

assign sext_ln691_400_fu_2723_p1 = mul_ln1345_404_reg_5348;

assign sext_ln691_401_fu_4330_p1 = $signed(add_ln691_399_reg_5748);

assign sext_ln691_402_fu_2738_p1 = $signed(add_ln691_401_fu_2732_p2);

assign sext_ln691_403_fu_2748_p1 = $signed(add_ln691_402_fu_2742_p2);

assign sext_ln691_404_fu_4338_p1 = $signed(add_ln691_403_reg_5753);

assign sext_ln691_405_fu_2758_p1 = mul_ln1345_405_reg_5358;

assign sext_ln691_406_fu_2783_p1 = mul_ln1345_410_reg_5408;

assign sext_ln691_407_fu_4347_p1 = $signed(add_ln691_405_reg_5763);

assign sext_ln691_408_fu_2798_p1 = $signed(add_ln691_407_fu_2792_p2);

assign sext_ln691_409_fu_2808_p1 = $signed(add_ln691_408_fu_2802_p2);

assign sext_ln691_410_fu_4355_p1 = $signed(add_ln691_409_reg_5768);

assign sext_ln691_411_fu_2818_p1 = mul_ln1345_411_reg_5418;

assign sext_ln691_412_fu_2843_p1 = mul_ln1345_416_reg_5468;

assign sext_ln691_413_fu_4364_p1 = $signed(add_ln691_411_reg_5778);

assign sext_ln691_414_fu_2858_p1 = $signed(add_ln691_413_fu_2852_p2);

assign sext_ln691_415_fu_2868_p1 = $signed(add_ln691_414_fu_2862_p2);

assign sext_ln691_416_fu_4372_p1 = $signed(add_ln691_415_reg_5783);

assign sext_ln691_417_fu_2878_p1 = mul_ln1345_417_reg_5478;

assign sext_ln691_418_fu_2903_p1 = mul_ln1345_422_reg_5528;

assign sext_ln691_419_fu_4381_p1 = $signed(add_ln691_417_reg_5793);

assign sext_ln691_420_fu_2918_p1 = $signed(add_ln691_419_fu_2912_p2);

assign sext_ln691_421_fu_2928_p1 = $signed(add_ln691_420_fu_2922_p2);

assign sext_ln691_422_fu_4389_p1 = $signed(add_ln691_421_reg_5798);

assign sext_ln691_423_fu_2938_p1 = mul_ln1345_423_reg_5538;

assign sext_ln691_424_fu_2963_p1 = mul_ln1345_428_reg_5588;

assign sext_ln691_425_fu_4398_p1 = $signed(add_ln691_423_reg_5808);

assign sext_ln691_426_fu_2978_p1 = $signed(add_ln691_425_fu_2972_p2);

assign sext_ln691_427_fu_2988_p1 = $signed(add_ln691_426_fu_2982_p2);

assign sext_ln691_428_fu_4406_p1 = $signed(add_ln691_427_reg_5813);

assign sext_ln691_429_fu_2998_p1 = mul_ln1345_429_reg_5598;

assign sext_ln691_430_fu_3023_p1 = mul_ln1345_434_reg_5648;

assign sext_ln691_431_fu_4415_p1 = $signed(add_ln691_429_reg_5823);

assign sext_ln691_432_fu_3038_p1 = $signed(add_ln691_431_fu_3032_p2);

assign sext_ln691_433_fu_3048_p1 = $signed(add_ln691_432_fu_3042_p2);

assign sext_ln691_434_fu_4423_p1 = $signed(add_ln691_433_reg_5828);

assign sext_ln691_435_fu_3066_p1 = mul_ln1345_435_fu_3061_p2;

assign sext_ln691_436_fu_3136_p1 = mul_ln1345_440_fu_3131_p2;

assign sext_ln691_437_fu_4432_p1 = $signed(add_ln691_435_reg_5838);

assign sext_ln691_438_fu_3152_p1 = $signed(add_ln691_437_fu_3146_p2);

assign sext_ln691_439_fu_3162_p1 = $signed(add_ln691_438_fu_3156_p2);

assign sext_ln691_440_fu_4440_p1 = $signed(add_ln691_439_reg_5843);

assign sext_ln691_441_fu_3177_p1 = mul_ln1345_441_fu_3172_p2;

assign sext_ln691_442_fu_3232_p1 = mul_ln1345_446_fu_3227_p2;

assign sext_ln691_443_fu_4449_p1 = $signed(add_ln691_441_reg_5853);

assign sext_ln691_444_fu_3248_p1 = $signed(add_ln691_443_fu_3242_p2);

assign sext_ln691_445_fu_3258_p1 = $signed(add_ln691_444_fu_3252_p2);

assign sext_ln691_446_fu_4457_p1 = $signed(add_ln691_445_reg_5858);

assign sext_ln691_447_fu_3273_p1 = mul_ln1345_447_fu_3268_p2;

assign sext_ln691_448_fu_3328_p1 = mul_ln1345_452_fu_3323_p2;

assign sext_ln691_449_fu_4466_p1 = $signed(add_ln691_447_reg_5868);

assign sext_ln691_450_fu_3344_p1 = $signed(add_ln691_449_fu_3338_p2);

assign sext_ln691_451_fu_3354_p1 = $signed(add_ln691_450_fu_3348_p2);

assign sext_ln691_452_fu_4474_p1 = $signed(add_ln691_451_reg_5873);

assign sext_ln691_453_fu_3369_p1 = mul_ln1345_453_fu_3364_p2;

assign sext_ln691_454_fu_3424_p1 = mul_ln1345_458_fu_3419_p2;

assign sext_ln691_455_fu_4483_p1 = $signed(add_ln691_453_reg_5883);

assign sext_ln691_456_fu_3440_p1 = $signed(add_ln691_455_fu_3434_p2);

assign sext_ln691_457_fu_3450_p1 = $signed(add_ln691_456_fu_3444_p2);

assign sext_ln691_458_fu_4491_p1 = $signed(add_ln691_457_reg_5888);

assign sext_ln691_459_fu_3465_p1 = mul_ln1345_459_fu_3460_p2;

assign sext_ln691_460_fu_3520_p1 = mul_ln1345_464_fu_3515_p2;

assign sext_ln691_461_fu_4500_p1 = $signed(add_ln691_459_reg_5898);

assign sext_ln691_462_fu_3536_p1 = $signed(add_ln691_461_fu_3530_p2);

assign sext_ln691_463_fu_3546_p1 = $signed(add_ln691_462_fu_3540_p2);

assign sext_ln691_464_fu_4508_p1 = $signed(add_ln691_463_reg_5903);

assign sext_ln691_465_fu_3561_p1 = mul_ln1345_465_fu_3556_p2;

assign sext_ln691_466_fu_3616_p1 = mul_ln1345_470_fu_3611_p2;

assign sext_ln691_467_fu_4517_p1 = $signed(add_ln691_465_reg_5913);

assign sext_ln691_468_fu_3632_p1 = $signed(add_ln691_467_fu_3626_p2);

assign sext_ln691_469_fu_3642_p1 = $signed(add_ln691_468_fu_3636_p2);

assign sext_ln691_470_fu_4525_p1 = $signed(add_ln691_469_reg_5918);

assign sext_ln691_471_fu_3657_p1 = mul_ln1345_471_fu_3652_p2;

assign sext_ln691_472_fu_3712_p1 = mul_ln1345_476_fu_3707_p2;

assign sext_ln691_473_fu_4534_p1 = $signed(add_ln691_471_reg_5928);

assign sext_ln691_474_fu_3728_p1 = $signed(add_ln691_473_fu_3722_p2);

assign sext_ln691_475_fu_3738_p1 = $signed(add_ln691_474_fu_3732_p2);

assign sext_ln691_476_fu_4542_p1 = $signed(add_ln691_475_reg_5933);

assign sext_ln691_477_fu_3753_p1 = mul_ln1345_477_fu_3748_p2;

assign sext_ln691_478_fu_3808_p1 = mul_ln1345_482_fu_3803_p2;

assign sext_ln691_479_fu_4551_p1 = $signed(add_ln691_477_reg_5943);

assign sext_ln691_480_fu_3824_p1 = $signed(add_ln691_479_fu_3818_p2);

assign sext_ln691_481_fu_3834_p1 = $signed(add_ln691_480_fu_3828_p2);

assign sext_ln691_482_fu_4559_p1 = $signed(add_ln691_481_reg_5948);

assign sext_ln691_483_fu_3849_p1 = mul_ln1345_483_fu_3844_p2;

assign sext_ln691_484_fu_3904_p1 = mul_ln1345_488_fu_3899_p2;

assign sext_ln691_485_fu_4568_p1 = $signed(add_ln691_483_reg_5958);

assign sext_ln691_486_fu_3920_p1 = $signed(add_ln691_485_fu_3914_p2);

assign sext_ln691_487_fu_3930_p1 = $signed(add_ln691_486_fu_3924_p2);

assign sext_ln691_488_fu_4576_p1 = $signed(add_ln691_487_reg_5963);

assign sext_ln691_489_fu_3945_p1 = mul_ln1345_489_fu_3940_p2;

assign sext_ln691_490_fu_4000_p1 = mul_ln1345_494_fu_3995_p2;

assign sext_ln691_491_fu_4585_p1 = $signed(add_ln691_489_reg_5973);

assign sext_ln691_492_fu_4016_p1 = $signed(add_ln691_491_fu_4010_p2);

assign sext_ln691_493_fu_4026_p1 = $signed(add_ln691_492_fu_4020_p2);

assign sext_ln691_494_fu_4593_p1 = $signed(add_ln691_493_reg_5978);

assign sext_ln691_495_fu_4041_p1 = mul_ln1345_495_fu_4036_p2;

assign sext_ln691_496_fu_4096_p1 = mul_ln1345_500_fu_4091_p2;

assign sext_ln691_497_fu_4602_p1 = $signed(add_ln691_495_reg_5988);

assign sext_ln691_498_fu_4112_p1 = $signed(add_ln691_497_fu_4106_p2);

assign sext_ln691_499_fu_4122_p1 = $signed(add_ln691_498_fu_4116_p2);

assign sext_ln691_500_fu_4610_p1 = $signed(add_ln691_499_reg_5993);

assign sext_ln691_501_fu_4137_p1 = mul_ln1345_501_fu_4132_p2;

assign sext_ln691_502_fu_4192_p1 = mul_ln1345_506_fu_4187_p2;

assign sext_ln691_503_fu_4619_p1 = $signed(add_ln691_501_reg_6003);

assign sext_ln691_504_fu_4208_p1 = $signed(add_ln691_503_fu_4202_p2);

assign sext_ln691_505_fu_4218_p1 = $signed(add_ln691_504_fu_4212_p2);

assign sext_ln691_506_fu_4627_p1 = $signed(add_ln691_505_reg_6008);

assign sext_ln691_fu_2344_p1 = mul_ln1345_reg_4938;

assign start_out = real_start;

assign tmp_308_fu_898_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[74:72]}};

assign tmp_309_fu_922_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[110:108]}};

assign tmp_310_fu_946_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[146:144]}};

assign tmp_311_fu_970_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[182:180]}};

assign tmp_312_fu_994_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[5:3]}};

assign tmp_314_fu_1014_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[41:39]}};

assign tmp_315_fu_1034_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[77:75]}};

assign tmp_316_fu_1054_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[113:111]}};

assign tmp_317_fu_1074_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[149:147]}};

assign tmp_318_fu_1094_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[185:183]}};

assign tmp_319_fu_1114_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[8:6]}};

assign tmp_321_fu_1134_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[44:42]}};

assign tmp_322_fu_1154_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[80:78]}};

assign tmp_323_fu_1174_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[116:114]}};

assign tmp_324_fu_1194_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[152:150]}};

assign tmp_325_fu_1214_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[188:186]}};

assign tmp_326_fu_1234_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[11:9]}};

assign tmp_328_fu_1254_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[47:45]}};

assign tmp_329_fu_1274_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[83:81]}};

assign tmp_330_fu_1294_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[119:117]}};

assign tmp_331_fu_1314_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[155:153]}};

assign tmp_332_fu_1334_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[191:189]}};

assign tmp_333_fu_1354_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[14:12]}};

assign tmp_335_fu_1374_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[50:48]}};

assign tmp_336_fu_1394_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[86:84]}};

assign tmp_337_fu_1414_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[122:120]}};

assign tmp_338_fu_1434_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[158:156]}};

assign tmp_339_fu_1454_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[194:192]}};

assign tmp_340_fu_1474_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[17:15]}};

assign tmp_342_fu_1494_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[53:51]}};

assign tmp_343_fu_1514_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[89:87]}};

assign tmp_344_fu_1534_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[125:123]}};

assign tmp_345_fu_1554_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[161:159]}};

assign tmp_346_fu_1574_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[197:195]}};

assign tmp_347_fu_1594_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[20:18]}};

assign tmp_349_fu_1614_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[56:54]}};

assign tmp_350_fu_1634_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[92:90]}};

assign tmp_351_fu_1654_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[128:126]}};

assign tmp_352_fu_1674_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[164:162]}};

assign tmp_353_fu_1694_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[200:198]}};

assign tmp_354_fu_1714_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[23:21]}};

assign tmp_356_fu_1734_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[59:57]}};

assign tmp_357_fu_1754_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[95:93]}};

assign tmp_358_fu_1774_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[131:129]}};

assign tmp_359_fu_1794_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[167:165]}};

assign tmp_360_fu_1814_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[203:201]}};

assign tmp_361_fu_1834_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[26:24]}};

assign tmp_363_fu_1854_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[62:60]}};

assign tmp_364_fu_1874_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[98:96]}};

assign tmp_365_fu_1894_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[134:132]}};

assign tmp_366_fu_1914_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[170:168]}};

assign tmp_367_fu_1934_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[206:204]}};

assign tmp_368_fu_1954_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[29:27]}};

assign tmp_370_fu_1974_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[65:63]}};

assign tmp_371_fu_1994_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[101:99]}};

assign tmp_372_fu_2014_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[137:135]}};

assign tmp_373_fu_2034_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[173:171]}};

assign tmp_374_fu_2054_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[209:207]}};

assign tmp_375_fu_2074_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[32:30]}};

assign tmp_377_fu_2094_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[68:66]}};

assign tmp_378_fu_2114_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[104:102]}};

assign tmp_379_fu_2134_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[140:138]}};

assign tmp_380_fu_2154_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[176:174]}};

assign tmp_381_fu_2174_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[212:210]}};

assign tmp_382_fu_2194_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[35:33]}};

assign tmp_384_fu_2214_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[71:69]}};

assign tmp_385_fu_2234_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[107:105]}};

assign tmp_386_fu_2254_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[143:141]}};

assign tmp_387_fu_2274_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[179:177]}};

assign tmp_388_fu_2294_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[215:213]}};

assign tmp_401_fu_4636_p25 = {{{{{{{{{{{{{{{{{{{{{{{{add_ln691_506_fu_4630_p2}, {add_ln691_500_fu_4613_p2}}, {add_ln691_494_fu_4596_p2}}, {add_ln691_488_fu_4579_p2}}, {add_ln691_482_fu_4562_p2}}, {add_ln691_476_fu_4545_p2}}, {add_ln691_470_fu_4528_p2}}, {add_ln691_464_fu_4511_p2}}, {add_ln691_458_fu_4494_p2}}, {add_ln691_452_fu_4477_p2}}, {add_ln691_446_fu_4460_p2}}, {add_ln691_440_fu_4443_p2}}, {add_ln691_434_fu_4426_p2}}, {add_ln691_428_fu_4409_p2}}, {add_ln691_422_fu_4392_p2}}, {add_ln691_416_fu_4375_p2}}, {add_ln691_410_fu_4358_p2}}, {add_ln691_404_fu_4341_p2}}, {add_ln691_398_fu_4324_p2}}, {add_ln691_392_fu_4307_p2}}, {add_ln691_386_fu_4290_p2}}, {add_ln691_380_fu_4273_p2}}, {add_ln691_374_fu_4256_p2}}, {add_ln691_368_fu_4239_p2}};

assign tmp_402_fu_4693_p48 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_506_fu_4630_p2}, {5'd0}}, {add_ln691_500_fu_4613_p2}}, {5'd0}}, {add_ln691_494_fu_4596_p2}}, {5'd0}}, {add_ln691_488_fu_4579_p2}}, {5'd0}}, {add_ln691_482_fu_4562_p2}}, {5'd0}}, {add_ln691_476_fu_4545_p2}}, {5'd0}}, {add_ln691_470_fu_4528_p2}}, {5'd0}}, {add_ln691_464_fu_4511_p2}}, {5'd0}}, {add_ln691_458_fu_4494_p2}}, {5'd0}}, {add_ln691_452_fu_4477_p2}}, {5'd0}}, {add_ln691_446_fu_4460_p2}}, {5'd0}}, {add_ln691_440_fu_4443_p2}}, {5'd0}}, {add_ln691_434_fu_4426_p2}}, {5'd0}}, {add_ln691_428_fu_4409_p2}}, {5'd0}}, {add_ln691_422_fu_4392_p2}}, {5'd0}}, {add_ln691_416_fu_4375_p2}}, {5'd0}}, {add_ln691_410_fu_4358_p2}}, {5'd0}}, {add_ln691_404_fu_4341_p2}}, {5'd0}}, {add_ln691_398_fu_4324_p2}}, {5'd0}}, {add_ln691_392_fu_4307_p2}}, {5'd0}}, {add_ln691_386_fu_4290_p2}}, {5'd0}}, {add_ln691_380_fu_4273_p2}}, {5'd0}}, {add_ln691_374_fu_4256_p2}}, {5'd0}}, {add_ln691_368_fu_4239_p2}};

assign tmp_cast_fu_685_p3 = {{select_ln121_5_fu_678_p3}, {5'd0}};

assign tmp_s_fu_874_p4 = {{attn_inst_matmul_gen_q_weight_arr_V_q0[38:36]}};

assign trunc_ln145_115_fu_756_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_116_fu_766_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_117_fu_776_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_118_fu_786_p4 = {{cache_window_sm_dout[42:40]}};

assign trunc_ln145_fu_742_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_746_p4 = {{cache_window_sm_dout[10:8]}};

assign trunc_ln215_3_fu_667_p1 = cot_reg_571[3:0];

assign trunc_ln215_4_fu_856_p1 = attn_inst_matmul_gen_q_weight_arr_V_q0[2:0];

assign trunc_ln215_fu_663_p1 = add_ln121_fu_658_p2[3:0];

assign trunc_ln691_fu_2347_p1 = select_ln126_fu_2337_p3[10:0];

assign vec_o_data_M_elems_V_fu_2329_p3 = {{select_ln121_6_fu_2322_p3}, {select_ln121_6_fu_2322_p3}};

assign xor_ln120_fu_614_p2 = (icmp_ln121_fu_600_p2 ^ 1'd1);

assign zext_ln121_2_fu_738_p1 = add_ln121_reg_4849;

assign zext_ln121_fu_729_p1 = cot_reg_571;

assign zext_ln215_2_fu_734_p1 = add_ln215_reg_4859;

assign zext_ln215_fu_699_p1 = select_ln121_reg_4831;

endmodule //ATTN0_matmul_step2_mac137
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 132;
parameter AWIDTH = 4;
parameter MEM_SIZE = 16;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd132;
parameter AddressRange = 32'd16;
parameter AddressWidth = 32'd4;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V_rom ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_bias_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "block" *) module ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 216;
parameter AWIDTH = 9;
parameter MEM_SIZE = 512;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd216;
parameter AddressRange = 32'd512;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V_rom ATTN0_matmul_step2_mac137_attn_inst_matmul_gen_q_weight_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac141 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [383:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [3:0] attn_inst_matmul_gen_k_bias_arr_V_address0;
reg    attn_inst_matmul_gen_k_bias_arr_V_ce0;
wire   [131:0] attn_inst_matmul_gen_k_bias_arr_V_q0;
wire   [8:0] attn_inst_matmul_gen_k_weight_arr_V_address0;
reg    attn_inst_matmul_gen_k_weight_arr_V_ce0;
wire   [215:0] attn_inst_matmul_gen_k_weight_arr_V_q0;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln120_reg_4807;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter1_reg;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln161_reg_4869;
reg   [0:0] icmp_ln161_reg_4869_pp0_iter1_reg;
reg   [15:0] indvar_flatten20_reg_548;
reg   [10:0] indvar_flatten_reg_560;
reg   [4:0] cot_reg_571;
reg   [5:0] cit_reg_583;
reg   [131:0] attn_inst_matmul_gen_k_bias_arr_V_load_1_reg_4802;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln120_fu_594_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter2_reg;
wire   [0:0] icmp_ln121_fu_600_p2;
reg   [0:0] icmp_ln121_reg_4811;
reg   [0:0] icmp_ln121_reg_4811_pp0_iter1_reg;
wire   [4:0] select_ln120_fu_606_p3;
reg   [4:0] select_ln120_reg_4818;
wire   [0:0] and_ln120_fu_626_p2;
reg   [0:0] and_ln120_reg_4824;
reg   [0:0] and_ln120_reg_4824_pp0_iter1_reg;
wire   [5:0] select_ln121_fu_638_p3;
reg   [5:0] select_ln121_reg_4831;
wire   [10:0] add_ln121_1_fu_646_p2;
reg   [10:0] add_ln121_1_reg_4839;
wire   [15:0] add_ln120_fu_652_p2;
reg   [15:0] add_ln120_reg_4844;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] add_ln121_fu_658_p2;
reg   [4:0] add_ln121_reg_4849;
wire   [4:0] select_ln121_3_fu_693_p3;
reg   [4:0] select_ln121_3_reg_4854;
wire   [8:0] add_ln215_fu_702_p2;
reg   [8:0] add_ln215_reg_4859;
wire   [0:0] icmp_ln126_fu_708_p2;
reg   [0:0] icmp_ln126_reg_4864;
reg   [0:0] icmp_ln126_reg_4864_pp0_iter1_reg;
wire   [0:0] icmp_ln161_fu_713_p2;
wire   [5:0] add_ln122_fu_718_p2;
reg   [5:0] add_ln122_reg_4873;
wire   [10:0] select_ln121_4_fu_723_p3;
reg   [10:0] select_ln121_4_reg_4878;
reg   [131:0] attn_inst_matmul_gen_k_bias_arr_V_load_reg_4893;
reg   [2:0] trunc_ln145_109_reg_4903;
reg   [2:0] trunc_ln145_110_reg_4908;
reg   [2:0] trunc_ln145_111_reg_4913;
reg   [2:0] trunc_ln145_112_reg_4918;
reg   [2:0] trunc_ln145_113_reg_4923;
reg   [2:0] trunc_ln145_114_reg_4928;
wire  signed [5:0] sext_ln1345_125_fu_864_p1;
reg  signed [5:0] sext_ln1345_125_reg_4933;
wire  signed [5:0] mul_ln1345_fu_868_p2;
reg  signed [5:0] mul_ln1345_reg_4938;
wire  signed [5:0] sext_ln1345_127_fu_888_p1;
reg  signed [5:0] sext_ln1345_127_reg_4943;
wire  signed [5:0] mul_ln1345_221_fu_892_p2;
reg  signed [5:0] mul_ln1345_221_reg_4948;
wire  signed [5:0] sext_ln1345_129_fu_912_p1;
reg  signed [5:0] sext_ln1345_129_reg_4953;
wire  signed [5:0] mul_ln1345_222_fu_916_p2;
reg  signed [5:0] mul_ln1345_222_reg_4958;
wire  signed [5:0] sext_ln1345_131_fu_936_p1;
reg  signed [5:0] sext_ln1345_131_reg_4963;
wire  signed [5:0] mul_ln1345_223_fu_940_p2;
reg  signed [5:0] mul_ln1345_223_reg_4968;
wire  signed [5:0] sext_ln1345_133_fu_960_p1;
reg  signed [5:0] sext_ln1345_133_reg_4973;
wire  signed [5:0] mul_ln1345_224_fu_964_p2;
reg  signed [5:0] mul_ln1345_224_reg_4978;
wire  signed [5:0] sext_ln1345_135_fu_984_p1;
reg  signed [5:0] sext_ln1345_135_reg_4983;
wire  signed [5:0] mul_ln1345_225_fu_988_p2;
reg  signed [5:0] mul_ln1345_225_reg_4988;
wire  signed [5:0] sext_ln1345_136_fu_1004_p1;
reg  signed [5:0] sext_ln1345_136_reg_4993;
wire  signed [5:0] mul_ln1345_226_fu_1008_p2;
reg  signed [5:0] mul_ln1345_226_reg_4998;
wire  signed [5:0] sext_ln1345_137_fu_1024_p1;
reg  signed [5:0] sext_ln1345_137_reg_5003;
wire  signed [5:0] mul_ln1345_227_fu_1028_p2;
reg  signed [5:0] mul_ln1345_227_reg_5008;
wire  signed [5:0] sext_ln1345_138_fu_1044_p1;
reg  signed [5:0] sext_ln1345_138_reg_5013;
wire  signed [5:0] mul_ln1345_228_fu_1048_p2;
reg  signed [5:0] mul_ln1345_228_reg_5018;
wire  signed [5:0] sext_ln1345_139_fu_1064_p1;
reg  signed [5:0] sext_ln1345_139_reg_5023;
wire  signed [5:0] mul_ln1345_229_fu_1068_p2;
reg  signed [5:0] mul_ln1345_229_reg_5028;
wire  signed [5:0] sext_ln1345_140_fu_1084_p1;
reg  signed [5:0] sext_ln1345_140_reg_5033;
wire  signed [5:0] mul_ln1345_230_fu_1088_p2;
reg  signed [5:0] mul_ln1345_230_reg_5038;
wire  signed [5:0] sext_ln1345_141_fu_1104_p1;
reg  signed [5:0] sext_ln1345_141_reg_5043;
wire  signed [5:0] mul_ln1345_231_fu_1108_p2;
reg  signed [5:0] mul_ln1345_231_reg_5048;
wire  signed [5:0] sext_ln1345_142_fu_1124_p1;
reg  signed [5:0] sext_ln1345_142_reg_5053;
wire  signed [5:0] mul_ln1345_232_fu_1128_p2;
reg  signed [5:0] mul_ln1345_232_reg_5058;
wire  signed [5:0] sext_ln1345_143_fu_1144_p1;
reg  signed [5:0] sext_ln1345_143_reg_5063;
wire  signed [5:0] mul_ln1345_233_fu_1148_p2;
reg  signed [5:0] mul_ln1345_233_reg_5068;
wire  signed [5:0] sext_ln1345_144_fu_1164_p1;
reg  signed [5:0] sext_ln1345_144_reg_5073;
wire  signed [5:0] mul_ln1345_234_fu_1168_p2;
reg  signed [5:0] mul_ln1345_234_reg_5078;
wire  signed [5:0] sext_ln1345_145_fu_1184_p1;
reg  signed [5:0] sext_ln1345_145_reg_5083;
wire  signed [5:0] mul_ln1345_235_fu_1188_p2;
reg  signed [5:0] mul_ln1345_235_reg_5088;
wire  signed [5:0] sext_ln1345_146_fu_1204_p1;
reg  signed [5:0] sext_ln1345_146_reg_5093;
wire  signed [5:0] mul_ln1345_236_fu_1208_p2;
reg  signed [5:0] mul_ln1345_236_reg_5098;
wire  signed [5:0] sext_ln1345_147_fu_1224_p1;
reg  signed [5:0] sext_ln1345_147_reg_5103;
wire  signed [5:0] mul_ln1345_237_fu_1228_p2;
reg  signed [5:0] mul_ln1345_237_reg_5108;
wire  signed [5:0] sext_ln1345_148_fu_1244_p1;
reg  signed [5:0] sext_ln1345_148_reg_5113;
wire  signed [5:0] mul_ln1345_238_fu_1248_p2;
reg  signed [5:0] mul_ln1345_238_reg_5118;
wire  signed [5:0] sext_ln1345_149_fu_1264_p1;
reg  signed [5:0] sext_ln1345_149_reg_5123;
wire  signed [5:0] mul_ln1345_239_fu_1268_p2;
reg  signed [5:0] mul_ln1345_239_reg_5128;
wire  signed [5:0] sext_ln1345_150_fu_1284_p1;
reg  signed [5:0] sext_ln1345_150_reg_5133;
wire  signed [5:0] mul_ln1345_240_fu_1288_p2;
reg  signed [5:0] mul_ln1345_240_reg_5138;
wire  signed [5:0] sext_ln1345_151_fu_1304_p1;
reg  signed [5:0] sext_ln1345_151_reg_5143;
wire  signed [5:0] mul_ln1345_241_fu_1308_p2;
reg  signed [5:0] mul_ln1345_241_reg_5148;
wire  signed [5:0] sext_ln1345_152_fu_1324_p1;
reg  signed [5:0] sext_ln1345_152_reg_5153;
wire  signed [5:0] mul_ln1345_242_fu_1328_p2;
reg  signed [5:0] mul_ln1345_242_reg_5158;
wire  signed [5:0] sext_ln1345_153_fu_1344_p1;
reg  signed [5:0] sext_ln1345_153_reg_5163;
wire  signed [5:0] mul_ln1345_243_fu_1348_p2;
reg  signed [5:0] mul_ln1345_243_reg_5168;
wire  signed [5:0] sext_ln1345_154_fu_1364_p1;
reg  signed [5:0] sext_ln1345_154_reg_5173;
wire  signed [5:0] mul_ln1345_244_fu_1368_p2;
reg  signed [5:0] mul_ln1345_244_reg_5178;
wire  signed [5:0] sext_ln1345_155_fu_1384_p1;
reg  signed [5:0] sext_ln1345_155_reg_5183;
wire  signed [5:0] mul_ln1345_245_fu_1388_p2;
reg  signed [5:0] mul_ln1345_245_reg_5188;
wire  signed [5:0] sext_ln1345_156_fu_1404_p1;
reg  signed [5:0] sext_ln1345_156_reg_5193;
wire  signed [5:0] mul_ln1345_246_fu_1408_p2;
reg  signed [5:0] mul_ln1345_246_reg_5198;
wire  signed [5:0] sext_ln1345_157_fu_1424_p1;
reg  signed [5:0] sext_ln1345_157_reg_5203;
wire  signed [5:0] mul_ln1345_247_fu_1428_p2;
reg  signed [5:0] mul_ln1345_247_reg_5208;
wire  signed [5:0] sext_ln1345_158_fu_1444_p1;
reg  signed [5:0] sext_ln1345_158_reg_5213;
wire  signed [5:0] mul_ln1345_248_fu_1448_p2;
reg  signed [5:0] mul_ln1345_248_reg_5218;
wire  signed [5:0] sext_ln1345_159_fu_1464_p1;
reg  signed [5:0] sext_ln1345_159_reg_5223;
wire  signed [5:0] mul_ln1345_249_fu_1468_p2;
reg  signed [5:0] mul_ln1345_249_reg_5228;
wire  signed [5:0] sext_ln1345_160_fu_1484_p1;
reg  signed [5:0] sext_ln1345_160_reg_5233;
wire  signed [5:0] mul_ln1345_250_fu_1488_p2;
reg  signed [5:0] mul_ln1345_250_reg_5238;
wire  signed [5:0] sext_ln1345_161_fu_1504_p1;
reg  signed [5:0] sext_ln1345_161_reg_5243;
wire  signed [5:0] mul_ln1345_251_fu_1508_p2;
reg  signed [5:0] mul_ln1345_251_reg_5248;
wire  signed [5:0] sext_ln1345_162_fu_1524_p1;
reg  signed [5:0] sext_ln1345_162_reg_5253;
wire  signed [5:0] mul_ln1345_252_fu_1528_p2;
reg  signed [5:0] mul_ln1345_252_reg_5258;
wire  signed [5:0] sext_ln1345_163_fu_1544_p1;
reg  signed [5:0] sext_ln1345_163_reg_5263;
wire  signed [5:0] mul_ln1345_253_fu_1548_p2;
reg  signed [5:0] mul_ln1345_253_reg_5268;
wire  signed [5:0] sext_ln1345_164_fu_1564_p1;
reg  signed [5:0] sext_ln1345_164_reg_5273;
wire  signed [5:0] mul_ln1345_254_fu_1568_p2;
reg  signed [5:0] mul_ln1345_254_reg_5278;
wire  signed [5:0] sext_ln1345_165_fu_1584_p1;
reg  signed [5:0] sext_ln1345_165_reg_5283;
wire  signed [5:0] mul_ln1345_255_fu_1588_p2;
reg  signed [5:0] mul_ln1345_255_reg_5288;
wire  signed [5:0] sext_ln1345_166_fu_1604_p1;
reg  signed [5:0] sext_ln1345_166_reg_5293;
wire  signed [5:0] mul_ln1345_256_fu_1608_p2;
reg  signed [5:0] mul_ln1345_256_reg_5298;
wire  signed [5:0] sext_ln1345_167_fu_1624_p1;
reg  signed [5:0] sext_ln1345_167_reg_5303;
wire  signed [5:0] mul_ln1345_257_fu_1628_p2;
reg  signed [5:0] mul_ln1345_257_reg_5308;
wire  signed [5:0] sext_ln1345_168_fu_1644_p1;
reg  signed [5:0] sext_ln1345_168_reg_5313;
wire  signed [5:0] mul_ln1345_258_fu_1648_p2;
reg  signed [5:0] mul_ln1345_258_reg_5318;
wire  signed [5:0] sext_ln1345_169_fu_1664_p1;
reg  signed [5:0] sext_ln1345_169_reg_5323;
wire  signed [5:0] mul_ln1345_259_fu_1668_p2;
reg  signed [5:0] mul_ln1345_259_reg_5328;
wire  signed [5:0] sext_ln1345_170_fu_1684_p1;
reg  signed [5:0] sext_ln1345_170_reg_5333;
wire  signed [5:0] mul_ln1345_260_fu_1688_p2;
reg  signed [5:0] mul_ln1345_260_reg_5338;
wire  signed [5:0] sext_ln1345_171_fu_1704_p1;
reg  signed [5:0] sext_ln1345_171_reg_5343;
wire  signed [5:0] mul_ln1345_261_fu_1708_p2;
reg  signed [5:0] mul_ln1345_261_reg_5348;
wire  signed [5:0] sext_ln1345_172_fu_1724_p1;
reg  signed [5:0] sext_ln1345_172_reg_5353;
wire  signed [5:0] mul_ln1345_262_fu_1728_p2;
reg  signed [5:0] mul_ln1345_262_reg_5358;
wire  signed [5:0] sext_ln1345_173_fu_1744_p1;
reg  signed [5:0] sext_ln1345_173_reg_5363;
wire  signed [5:0] mul_ln1345_263_fu_1748_p2;
reg  signed [5:0] mul_ln1345_263_reg_5368;
wire  signed [5:0] sext_ln1345_174_fu_1764_p1;
reg  signed [5:0] sext_ln1345_174_reg_5373;
wire  signed [5:0] mul_ln1345_264_fu_1768_p2;
reg  signed [5:0] mul_ln1345_264_reg_5378;
wire  signed [5:0] sext_ln1345_175_fu_1784_p1;
reg  signed [5:0] sext_ln1345_175_reg_5383;
wire  signed [5:0] mul_ln1345_265_fu_1788_p2;
reg  signed [5:0] mul_ln1345_265_reg_5388;
wire  signed [5:0] sext_ln1345_176_fu_1804_p1;
reg  signed [5:0] sext_ln1345_176_reg_5393;
wire  signed [5:0] mul_ln1345_266_fu_1808_p2;
reg  signed [5:0] mul_ln1345_266_reg_5398;
wire  signed [5:0] sext_ln1345_177_fu_1824_p1;
reg  signed [5:0] sext_ln1345_177_reg_5403;
wire  signed [5:0] mul_ln1345_267_fu_1828_p2;
reg  signed [5:0] mul_ln1345_267_reg_5408;
wire  signed [5:0] sext_ln1345_178_fu_1844_p1;
reg  signed [5:0] sext_ln1345_178_reg_5413;
wire  signed [5:0] mul_ln1345_268_fu_1848_p2;
reg  signed [5:0] mul_ln1345_268_reg_5418;
wire  signed [5:0] sext_ln1345_179_fu_1864_p1;
reg  signed [5:0] sext_ln1345_179_reg_5423;
wire  signed [5:0] mul_ln1345_269_fu_1868_p2;
reg  signed [5:0] mul_ln1345_269_reg_5428;
wire  signed [5:0] sext_ln1345_180_fu_1884_p1;
reg  signed [5:0] sext_ln1345_180_reg_5433;
wire  signed [5:0] mul_ln1345_270_fu_1888_p2;
reg  signed [5:0] mul_ln1345_270_reg_5438;
wire  signed [5:0] sext_ln1345_181_fu_1904_p1;
reg  signed [5:0] sext_ln1345_181_reg_5443;
wire  signed [5:0] mul_ln1345_271_fu_1908_p2;
reg  signed [5:0] mul_ln1345_271_reg_5448;
wire  signed [5:0] sext_ln1345_182_fu_1924_p1;
reg  signed [5:0] sext_ln1345_182_reg_5453;
wire  signed [5:0] mul_ln1345_272_fu_1928_p2;
reg  signed [5:0] mul_ln1345_272_reg_5458;
wire  signed [5:0] sext_ln1345_183_fu_1944_p1;
reg  signed [5:0] sext_ln1345_183_reg_5463;
wire  signed [5:0] mul_ln1345_273_fu_1948_p2;
reg  signed [5:0] mul_ln1345_273_reg_5468;
wire  signed [5:0] sext_ln1345_184_fu_1964_p1;
reg  signed [5:0] sext_ln1345_184_reg_5473;
wire  signed [5:0] mul_ln1345_274_fu_1968_p2;
reg  signed [5:0] mul_ln1345_274_reg_5478;
wire  signed [5:0] sext_ln1345_185_fu_1984_p1;
reg  signed [5:0] sext_ln1345_185_reg_5483;
wire  signed [5:0] mul_ln1345_275_fu_1988_p2;
reg  signed [5:0] mul_ln1345_275_reg_5488;
wire  signed [5:0] sext_ln1345_186_fu_2004_p1;
reg  signed [5:0] sext_ln1345_186_reg_5493;
wire  signed [5:0] mul_ln1345_276_fu_2008_p2;
reg  signed [5:0] mul_ln1345_276_reg_5498;
wire  signed [5:0] sext_ln1345_187_fu_2024_p1;
reg  signed [5:0] sext_ln1345_187_reg_5503;
wire  signed [5:0] mul_ln1345_277_fu_2028_p2;
reg  signed [5:0] mul_ln1345_277_reg_5508;
wire  signed [5:0] sext_ln1345_188_fu_2044_p1;
reg  signed [5:0] sext_ln1345_188_reg_5513;
wire  signed [5:0] mul_ln1345_278_fu_2048_p2;
reg  signed [5:0] mul_ln1345_278_reg_5518;
wire  signed [5:0] sext_ln1345_189_fu_2064_p1;
reg  signed [5:0] sext_ln1345_189_reg_5523;
wire  signed [5:0] mul_ln1345_279_fu_2068_p2;
reg  signed [5:0] mul_ln1345_279_reg_5528;
wire  signed [5:0] sext_ln1345_190_fu_2084_p1;
reg  signed [5:0] sext_ln1345_190_reg_5533;
wire  signed [5:0] mul_ln1345_280_fu_2088_p2;
reg  signed [5:0] mul_ln1345_280_reg_5538;
wire  signed [5:0] sext_ln1345_191_fu_2104_p1;
reg  signed [5:0] sext_ln1345_191_reg_5543;
wire  signed [5:0] mul_ln1345_281_fu_2108_p2;
reg  signed [5:0] mul_ln1345_281_reg_5548;
wire  signed [5:0] sext_ln1345_192_fu_2124_p1;
reg  signed [5:0] sext_ln1345_192_reg_5553;
wire  signed [5:0] mul_ln1345_282_fu_2128_p2;
reg  signed [5:0] mul_ln1345_282_reg_5558;
wire  signed [5:0] sext_ln1345_193_fu_2144_p1;
reg  signed [5:0] sext_ln1345_193_reg_5563;
wire  signed [5:0] mul_ln1345_283_fu_2148_p2;
reg  signed [5:0] mul_ln1345_283_reg_5568;
wire  signed [5:0] sext_ln1345_194_fu_2164_p1;
reg  signed [5:0] sext_ln1345_194_reg_5573;
wire  signed [5:0] mul_ln1345_284_fu_2168_p2;
reg  signed [5:0] mul_ln1345_284_reg_5578;
wire  signed [5:0] sext_ln1345_195_fu_2184_p1;
reg  signed [5:0] sext_ln1345_195_reg_5583;
wire  signed [5:0] mul_ln1345_285_fu_2188_p2;
reg  signed [5:0] mul_ln1345_285_reg_5588;
wire  signed [5:0] sext_ln1345_196_fu_2204_p1;
reg  signed [5:0] sext_ln1345_196_reg_5593;
wire  signed [5:0] mul_ln1345_286_fu_2208_p2;
reg  signed [5:0] mul_ln1345_286_reg_5598;
wire  signed [5:0] sext_ln1345_197_fu_2224_p1;
reg  signed [5:0] sext_ln1345_197_reg_5603;
wire  signed [5:0] mul_ln1345_287_fu_2228_p2;
reg  signed [5:0] mul_ln1345_287_reg_5608;
wire  signed [5:0] sext_ln1345_198_fu_2244_p1;
reg  signed [5:0] sext_ln1345_198_reg_5613;
wire  signed [5:0] mul_ln1345_288_fu_2248_p2;
reg  signed [5:0] mul_ln1345_288_reg_5618;
wire  signed [5:0] sext_ln1345_199_fu_2264_p1;
reg  signed [5:0] sext_ln1345_199_reg_5623;
wire  signed [5:0] mul_ln1345_289_fu_2268_p2;
reg  signed [5:0] mul_ln1345_289_reg_5628;
wire  signed [5:0] sext_ln1345_200_fu_2284_p1;
reg  signed [5:0] sext_ln1345_200_reg_5633;
wire  signed [5:0] mul_ln1345_290_fu_2288_p2;
reg  signed [5:0] mul_ln1345_290_reg_5638;
wire  signed [5:0] sext_ln1345_201_fu_2304_p1;
reg  signed [5:0] sext_ln1345_201_reg_5643;
wire  signed [5:0] mul_ln1345_291_fu_2308_p2;
reg  signed [5:0] mul_ln1345_291_reg_5648;
wire   [10:0] trunc_ln691_fu_2347_p1;
reg   [10:0] trunc_ln691_reg_5653;
wire   [6:0] add_ln691_fu_2366_p2;
reg   [6:0] add_ln691_reg_5658;
wire   [7:0] add_ln691_224_fu_2392_p2;
reg   [7:0] add_ln691_224_reg_5663;
reg   [10:0] tmp_218_reg_5668;
wire   [6:0] add_ln691_226_fu_2426_p2;
reg   [6:0] add_ln691_226_reg_5673;
wire   [7:0] add_ln691_230_fu_2452_p2;
reg   [7:0] add_ln691_230_reg_5678;
reg   [10:0] tmp_225_reg_5683;
wire   [6:0] add_ln691_232_fu_2486_p2;
reg   [6:0] add_ln691_232_reg_5688;
wire   [7:0] add_ln691_236_fu_2512_p2;
reg   [7:0] add_ln691_236_reg_5693;
reg   [10:0] tmp_232_reg_5698;
wire   [6:0] add_ln691_238_fu_2546_p2;
reg   [6:0] add_ln691_238_reg_5703;
wire   [7:0] add_ln691_242_fu_2572_p2;
reg   [7:0] add_ln691_242_reg_5708;
reg   [10:0] tmp_239_reg_5713;
wire   [6:0] add_ln691_244_fu_2606_p2;
reg   [6:0] add_ln691_244_reg_5718;
wire   [7:0] add_ln691_248_fu_2632_p2;
reg   [7:0] add_ln691_248_reg_5723;
reg   [10:0] tmp_246_reg_5728;
wire   [6:0] add_ln691_250_fu_2666_p2;
reg   [6:0] add_ln691_250_reg_5733;
wire   [7:0] add_ln691_254_fu_2692_p2;
reg   [7:0] add_ln691_254_reg_5738;
reg   [10:0] tmp_253_reg_5743;
wire   [6:0] add_ln691_256_fu_2726_p2;
reg   [6:0] add_ln691_256_reg_5748;
wire   [7:0] add_ln691_260_fu_2752_p2;
reg   [7:0] add_ln691_260_reg_5753;
reg   [10:0] tmp_260_reg_5758;
wire   [6:0] add_ln691_262_fu_2786_p2;
reg   [6:0] add_ln691_262_reg_5763;
wire   [7:0] add_ln691_266_fu_2812_p2;
reg   [7:0] add_ln691_266_reg_5768;
reg   [10:0] tmp_267_reg_5773;
wire   [6:0] add_ln691_268_fu_2846_p2;
reg   [6:0] add_ln691_268_reg_5778;
wire   [7:0] add_ln691_272_fu_2872_p2;
reg   [7:0] add_ln691_272_reg_5783;
reg   [10:0] tmp_274_reg_5788;
wire   [6:0] add_ln691_274_fu_2906_p2;
reg   [6:0] add_ln691_274_reg_5793;
wire   [7:0] add_ln691_278_fu_2932_p2;
reg   [7:0] add_ln691_278_reg_5798;
reg   [10:0] tmp_281_reg_5803;
wire   [6:0] add_ln691_280_fu_2966_p2;
reg   [6:0] add_ln691_280_reg_5808;
wire   [7:0] add_ln691_284_fu_2992_p2;
reg   [7:0] add_ln691_284_reg_5813;
reg   [10:0] tmp_288_reg_5818;
wire   [6:0] add_ln691_286_fu_3026_p2;
reg   [6:0] add_ln691_286_reg_5823;
wire   [7:0] add_ln691_290_fu_3052_p2;
reg   [7:0] add_ln691_290_reg_5828;
reg   [10:0] tmp_294_reg_5833;
wire   [6:0] add_ln691_292_fu_3140_p2;
reg   [6:0] add_ln691_292_reg_5838;
wire   [7:0] add_ln691_296_fu_3166_p2;
reg   [7:0] add_ln691_296_reg_5843;
reg   [10:0] tmp_295_reg_5848;
wire   [6:0] add_ln691_298_fu_3236_p2;
reg   [6:0] add_ln691_298_reg_5853;
wire   [7:0] add_ln691_302_fu_3262_p2;
reg   [7:0] add_ln691_302_reg_5858;
reg   [10:0] tmp_296_reg_5863;
wire   [6:0] add_ln691_304_fu_3332_p2;
reg   [6:0] add_ln691_304_reg_5868;
wire   [7:0] add_ln691_308_fu_3358_p2;
reg   [7:0] add_ln691_308_reg_5873;
reg   [10:0] tmp_297_reg_5878;
wire   [6:0] add_ln691_310_fu_3428_p2;
reg   [6:0] add_ln691_310_reg_5883;
wire   [7:0] add_ln691_314_fu_3454_p2;
reg   [7:0] add_ln691_314_reg_5888;
reg   [10:0] tmp_298_reg_5893;
wire   [6:0] add_ln691_316_fu_3524_p2;
reg   [6:0] add_ln691_316_reg_5898;
wire   [7:0] add_ln691_320_fu_3550_p2;
reg   [7:0] add_ln691_320_reg_5903;
reg   [10:0] tmp_299_reg_5908;
wire   [6:0] add_ln691_322_fu_3620_p2;
reg   [6:0] add_ln691_322_reg_5913;
wire   [7:0] add_ln691_326_fu_3646_p2;
reg   [7:0] add_ln691_326_reg_5918;
reg   [10:0] tmp_300_reg_5923;
wire   [6:0] add_ln691_328_fu_3716_p2;
reg   [6:0] add_ln691_328_reg_5928;
wire   [7:0] add_ln691_332_fu_3742_p2;
reg   [7:0] add_ln691_332_reg_5933;
reg   [10:0] tmp_301_reg_5938;
wire   [6:0] add_ln691_334_fu_3812_p2;
reg   [6:0] add_ln691_334_reg_5943;
wire   [7:0] add_ln691_338_fu_3838_p2;
reg   [7:0] add_ln691_338_reg_5948;
reg   [10:0] tmp_302_reg_5953;
wire   [6:0] add_ln691_340_fu_3908_p2;
reg   [6:0] add_ln691_340_reg_5958;
wire   [7:0] add_ln691_344_fu_3934_p2;
reg   [7:0] add_ln691_344_reg_5963;
reg   [10:0] tmp_303_reg_5968;
wire   [6:0] add_ln691_346_fu_4004_p2;
reg   [6:0] add_ln691_346_reg_5973;
wire   [7:0] add_ln691_350_fu_4030_p2;
reg   [7:0] add_ln691_350_reg_5978;
reg   [10:0] tmp_304_reg_5983;
wire   [6:0] add_ln691_352_fu_4100_p2;
reg   [6:0] add_ln691_352_reg_5988;
wire   [7:0] add_ln691_356_fu_4126_p2;
reg   [7:0] add_ln691_356_reg_5993;
reg   [10:0] tmp_305_reg_5998;
wire   [6:0] add_ln691_358_fu_4196_p2;
reg   [6:0] add_ln691_358_reg_6003;
wire   [7:0] add_ln691_362_fu_4222_p2;
reg   [7:0] add_ln691_362_reg_6008;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state6;
reg   [15:0] ap_phi_mux_indvar_flatten20_phi_fu_552_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_564_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_575_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_587_p4;
wire   [63:0] zext_ln121_fu_729_p1;
wire   [63:0] zext_ln215_1_fu_734_p1;
wire   [63:0] zext_ln121_1_fu_738_p1;
reg   [263:0] vec_o_data_M_elems_V_2_fu_496;
wire   [263:0] tmp_306_fu_4636_p25;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state1;
wire   [0:0] icmp_ln122_fu_620_p2;
wire   [0:0] xor_ln120_fu_614_p2;
wire   [0:0] or_ln121_fu_632_p2;
wire   [3:0] trunc_ln215_1_fu_667_p1;
wire   [3:0] trunc_ln215_fu_663_p1;
wire   [3:0] select_ln120_2_fu_671_p3;
wire   [3:0] select_ln121_1_fu_678_p3;
wire   [8:0] tmp_cast_fu_685_p3;
wire   [8:0] zext_ln215_fu_699_p1;
wire   [2:0] trunc_ln145_fu_742_p1;
wire  signed [2:0] trunc_ln215_2_fu_856_p1;
wire  signed [2:0] mul_ln1345_fu_868_p1;
wire  signed [5:0] sext_ln1345_fu_860_p1;
wire   [2:0] trunc_ln145_s_fu_746_p4;
wire  signed [2:0] tmp_s_fu_874_p4;
wire  signed [2:0] mul_ln1345_221_fu_892_p1;
wire  signed [5:0] sext_ln1345_126_fu_884_p1;
wire   [2:0] trunc_ln145_105_fu_756_p4;
wire  signed [2:0] tmp_213_fu_898_p4;
wire  signed [2:0] mul_ln1345_222_fu_916_p1;
wire  signed [5:0] sext_ln1345_128_fu_908_p1;
wire   [2:0] trunc_ln145_106_fu_766_p4;
wire  signed [2:0] tmp_214_fu_922_p4;
wire  signed [2:0] mul_ln1345_223_fu_940_p1;
wire  signed [5:0] sext_ln1345_130_fu_932_p1;
wire   [2:0] trunc_ln145_107_fu_776_p4;
wire  signed [2:0] tmp_215_fu_946_p4;
wire  signed [2:0] mul_ln1345_224_fu_964_p1;
wire  signed [5:0] sext_ln1345_132_fu_956_p1;
wire   [2:0] trunc_ln145_108_fu_786_p4;
wire  signed [2:0] tmp_216_fu_970_p4;
wire  signed [2:0] mul_ln1345_225_fu_988_p1;
wire  signed [5:0] sext_ln1345_134_fu_980_p1;
wire  signed [2:0] tmp_217_fu_994_p4;
wire  signed [2:0] mul_ln1345_226_fu_1008_p1;
wire  signed [2:0] tmp_219_fu_1014_p4;
wire  signed [2:0] mul_ln1345_227_fu_1028_p1;
wire  signed [2:0] tmp_220_fu_1034_p4;
wire  signed [2:0] mul_ln1345_228_fu_1048_p1;
wire  signed [2:0] tmp_221_fu_1054_p4;
wire  signed [2:0] mul_ln1345_229_fu_1068_p1;
wire  signed [2:0] tmp_222_fu_1074_p4;
wire  signed [2:0] mul_ln1345_230_fu_1088_p1;
wire  signed [2:0] tmp_223_fu_1094_p4;
wire  signed [2:0] mul_ln1345_231_fu_1108_p1;
wire  signed [2:0] tmp_224_fu_1114_p4;
wire  signed [2:0] mul_ln1345_232_fu_1128_p1;
wire  signed [2:0] tmp_226_fu_1134_p4;
wire  signed [2:0] mul_ln1345_233_fu_1148_p1;
wire  signed [2:0] tmp_227_fu_1154_p4;
wire  signed [2:0] mul_ln1345_234_fu_1168_p1;
wire  signed [2:0] tmp_228_fu_1174_p4;
wire  signed [2:0] mul_ln1345_235_fu_1188_p1;
wire  signed [2:0] tmp_229_fu_1194_p4;
wire  signed [2:0] mul_ln1345_236_fu_1208_p1;
wire  signed [2:0] tmp_230_fu_1214_p4;
wire  signed [2:0] mul_ln1345_237_fu_1228_p1;
wire  signed [2:0] tmp_231_fu_1234_p4;
wire  signed [2:0] mul_ln1345_238_fu_1248_p1;
wire  signed [2:0] tmp_233_fu_1254_p4;
wire  signed [2:0] mul_ln1345_239_fu_1268_p1;
wire  signed [2:0] tmp_234_fu_1274_p4;
wire  signed [2:0] mul_ln1345_240_fu_1288_p1;
wire  signed [2:0] tmp_235_fu_1294_p4;
wire  signed [2:0] mul_ln1345_241_fu_1308_p1;
wire  signed [2:0] tmp_236_fu_1314_p4;
wire  signed [2:0] mul_ln1345_242_fu_1328_p1;
wire  signed [2:0] tmp_237_fu_1334_p4;
wire  signed [2:0] mul_ln1345_243_fu_1348_p1;
wire  signed [2:0] tmp_238_fu_1354_p4;
wire  signed [2:0] mul_ln1345_244_fu_1368_p1;
wire  signed [2:0] tmp_240_fu_1374_p4;
wire  signed [2:0] mul_ln1345_245_fu_1388_p1;
wire  signed [2:0] tmp_241_fu_1394_p4;
wire  signed [2:0] mul_ln1345_246_fu_1408_p1;
wire  signed [2:0] tmp_242_fu_1414_p4;
wire  signed [2:0] mul_ln1345_247_fu_1428_p1;
wire  signed [2:0] tmp_243_fu_1434_p4;
wire  signed [2:0] mul_ln1345_248_fu_1448_p1;
wire  signed [2:0] tmp_244_fu_1454_p4;
wire  signed [2:0] mul_ln1345_249_fu_1468_p1;
wire  signed [2:0] tmp_245_fu_1474_p4;
wire  signed [2:0] mul_ln1345_250_fu_1488_p1;
wire  signed [2:0] tmp_247_fu_1494_p4;
wire  signed [2:0] mul_ln1345_251_fu_1508_p1;
wire  signed [2:0] tmp_248_fu_1514_p4;
wire  signed [2:0] mul_ln1345_252_fu_1528_p1;
wire  signed [2:0] tmp_249_fu_1534_p4;
wire  signed [2:0] mul_ln1345_253_fu_1548_p1;
wire  signed [2:0] tmp_250_fu_1554_p4;
wire  signed [2:0] mul_ln1345_254_fu_1568_p1;
wire  signed [2:0] tmp_251_fu_1574_p4;
wire  signed [2:0] mul_ln1345_255_fu_1588_p1;
wire  signed [2:0] tmp_252_fu_1594_p4;
wire  signed [2:0] mul_ln1345_256_fu_1608_p1;
wire  signed [2:0] tmp_254_fu_1614_p4;
wire  signed [2:0] mul_ln1345_257_fu_1628_p1;
wire  signed [2:0] tmp_255_fu_1634_p4;
wire  signed [2:0] mul_ln1345_258_fu_1648_p1;
wire  signed [2:0] tmp_256_fu_1654_p4;
wire  signed [2:0] mul_ln1345_259_fu_1668_p1;
wire  signed [2:0] tmp_257_fu_1674_p4;
wire  signed [2:0] mul_ln1345_260_fu_1688_p1;
wire  signed [2:0] tmp_258_fu_1694_p4;
wire  signed [2:0] mul_ln1345_261_fu_1708_p1;
wire  signed [2:0] tmp_259_fu_1714_p4;
wire  signed [2:0] mul_ln1345_262_fu_1728_p1;
wire  signed [2:0] tmp_261_fu_1734_p4;
wire  signed [2:0] mul_ln1345_263_fu_1748_p1;
wire  signed [2:0] tmp_262_fu_1754_p4;
wire  signed [2:0] mul_ln1345_264_fu_1768_p1;
wire  signed [2:0] tmp_263_fu_1774_p4;
wire  signed [2:0] mul_ln1345_265_fu_1788_p1;
wire  signed [2:0] tmp_264_fu_1794_p4;
wire  signed [2:0] mul_ln1345_266_fu_1808_p1;
wire  signed [2:0] tmp_265_fu_1814_p4;
wire  signed [2:0] mul_ln1345_267_fu_1828_p1;
wire  signed [2:0] tmp_266_fu_1834_p4;
wire  signed [2:0] mul_ln1345_268_fu_1848_p1;
wire  signed [2:0] tmp_268_fu_1854_p4;
wire  signed [2:0] mul_ln1345_269_fu_1868_p1;
wire  signed [2:0] tmp_269_fu_1874_p4;
wire  signed [2:0] mul_ln1345_270_fu_1888_p1;
wire  signed [2:0] tmp_270_fu_1894_p4;
wire  signed [2:0] mul_ln1345_271_fu_1908_p1;
wire  signed [2:0] tmp_271_fu_1914_p4;
wire  signed [2:0] mul_ln1345_272_fu_1928_p1;
wire  signed [2:0] tmp_272_fu_1934_p4;
wire  signed [2:0] mul_ln1345_273_fu_1948_p1;
wire  signed [2:0] tmp_273_fu_1954_p4;
wire  signed [2:0] mul_ln1345_274_fu_1968_p1;
wire  signed [2:0] tmp_275_fu_1974_p4;
wire  signed [2:0] mul_ln1345_275_fu_1988_p1;
wire  signed [2:0] tmp_276_fu_1994_p4;
wire  signed [2:0] mul_ln1345_276_fu_2008_p1;
wire  signed [2:0] tmp_277_fu_2014_p4;
wire  signed [2:0] mul_ln1345_277_fu_2028_p1;
wire  signed [2:0] tmp_278_fu_2034_p4;
wire  signed [2:0] mul_ln1345_278_fu_2048_p1;
wire  signed [2:0] tmp_279_fu_2054_p4;
wire  signed [2:0] mul_ln1345_279_fu_2068_p1;
wire  signed [2:0] tmp_280_fu_2074_p4;
wire  signed [2:0] mul_ln1345_280_fu_2088_p1;
wire  signed [2:0] tmp_282_fu_2094_p4;
wire  signed [2:0] mul_ln1345_281_fu_2108_p1;
wire  signed [2:0] tmp_283_fu_2114_p4;
wire  signed [2:0] mul_ln1345_282_fu_2128_p1;
wire  signed [2:0] tmp_284_fu_2134_p4;
wire  signed [2:0] mul_ln1345_283_fu_2148_p1;
wire  signed [2:0] tmp_285_fu_2154_p4;
wire  signed [2:0] mul_ln1345_284_fu_2168_p1;
wire  signed [2:0] tmp_286_fu_2174_p4;
wire  signed [2:0] mul_ln1345_285_fu_2188_p1;
wire  signed [2:0] tmp_287_fu_2194_p4;
wire  signed [2:0] mul_ln1345_286_fu_2208_p1;
wire  signed [2:0] tmp_289_fu_2214_p4;
wire  signed [2:0] mul_ln1345_287_fu_2228_p1;
wire  signed [2:0] tmp_290_fu_2234_p4;
wire  signed [2:0] mul_ln1345_288_fu_2248_p1;
wire  signed [2:0] tmp_291_fu_2254_p4;
wire  signed [2:0] mul_ln1345_289_fu_2268_p1;
wire  signed [2:0] tmp_292_fu_2274_p4;
wire  signed [2:0] mul_ln1345_290_fu_2288_p1;
wire  signed [2:0] tmp_293_fu_2294_p4;
wire  signed [2:0] mul_ln1345_291_fu_2308_p1;
wire   [131:0] select_ln120_1_fu_2317_p3;
wire   [131:0] select_ln121_2_fu_2322_p3;
wire   [263:0] vec_o_data_M_elems_V_fu_2329_p3;
wire   [263:0] select_ln126_fu_2337_p3;
wire  signed [6:0] sext_ln151_2_fu_2357_p1;
wire  signed [6:0] sext_ln151_3_fu_2360_p1;
wire  signed [6:0] sext_ln151_1_fu_2354_p1;
wire  signed [6:0] sext_ln151_fu_2351_p1;
wire   [6:0] add_ln691_222_fu_2372_p2;
wire  signed [6:0] sext_ln691_fu_2344_p1;
wire  signed [6:0] sext_ln691_221_fu_2363_p1;
wire   [6:0] add_ln691_223_fu_2382_p2;
wire  signed [7:0] sext_ln691_224_fu_2388_p1;
wire  signed [7:0] sext_ln691_223_fu_2378_p1;
wire  signed [6:0] sext_ln151_6_fu_2417_p1;
wire  signed [6:0] sext_ln151_7_fu_2420_p1;
wire  signed [6:0] sext_ln151_5_fu_2414_p1;
wire  signed [6:0] sext_ln151_4_fu_2411_p1;
wire   [6:0] add_ln691_228_fu_2432_p2;
wire  signed [6:0] sext_ln691_226_fu_2398_p1;
wire  signed [6:0] sext_ln691_227_fu_2423_p1;
wire   [6:0] add_ln691_229_fu_2442_p2;
wire  signed [7:0] sext_ln691_230_fu_2448_p1;
wire  signed [7:0] sext_ln691_229_fu_2438_p1;
wire  signed [6:0] sext_ln151_10_fu_2477_p1;
wire  signed [6:0] sext_ln151_11_fu_2480_p1;
wire  signed [6:0] sext_ln151_9_fu_2474_p1;
wire  signed [6:0] sext_ln151_8_fu_2471_p1;
wire   [6:0] add_ln691_234_fu_2492_p2;
wire  signed [6:0] sext_ln691_232_fu_2458_p1;
wire  signed [6:0] sext_ln691_233_fu_2483_p1;
wire   [6:0] add_ln691_235_fu_2502_p2;
wire  signed [7:0] sext_ln691_236_fu_2508_p1;
wire  signed [7:0] sext_ln691_235_fu_2498_p1;
wire  signed [6:0] sext_ln151_14_fu_2537_p1;
wire  signed [6:0] sext_ln151_15_fu_2540_p1;
wire  signed [6:0] sext_ln151_13_fu_2534_p1;
wire  signed [6:0] sext_ln151_12_fu_2531_p1;
wire   [6:0] add_ln691_240_fu_2552_p2;
wire  signed [6:0] sext_ln691_238_fu_2518_p1;
wire  signed [6:0] sext_ln691_239_fu_2543_p1;
wire   [6:0] add_ln691_241_fu_2562_p2;
wire  signed [7:0] sext_ln691_242_fu_2568_p1;
wire  signed [7:0] sext_ln691_241_fu_2558_p1;
wire  signed [6:0] sext_ln151_18_fu_2597_p1;
wire  signed [6:0] sext_ln151_19_fu_2600_p1;
wire  signed [6:0] sext_ln151_17_fu_2594_p1;
wire  signed [6:0] sext_ln151_16_fu_2591_p1;
wire   [6:0] add_ln691_246_fu_2612_p2;
wire  signed [6:0] sext_ln691_244_fu_2578_p1;
wire  signed [6:0] sext_ln691_245_fu_2603_p1;
wire   [6:0] add_ln691_247_fu_2622_p2;
wire  signed [7:0] sext_ln691_248_fu_2628_p1;
wire  signed [7:0] sext_ln691_247_fu_2618_p1;
wire  signed [6:0] sext_ln151_22_fu_2657_p1;
wire  signed [6:0] sext_ln151_23_fu_2660_p1;
wire  signed [6:0] sext_ln151_21_fu_2654_p1;
wire  signed [6:0] sext_ln151_20_fu_2651_p1;
wire   [6:0] add_ln691_252_fu_2672_p2;
wire  signed [6:0] sext_ln691_250_fu_2638_p1;
wire  signed [6:0] sext_ln691_251_fu_2663_p1;
wire   [6:0] add_ln691_253_fu_2682_p2;
wire  signed [7:0] sext_ln691_254_fu_2688_p1;
wire  signed [7:0] sext_ln691_253_fu_2678_p1;
wire  signed [6:0] sext_ln151_26_fu_2717_p1;
wire  signed [6:0] sext_ln151_27_fu_2720_p1;
wire  signed [6:0] sext_ln151_25_fu_2714_p1;
wire  signed [6:0] sext_ln151_24_fu_2711_p1;
wire   [6:0] add_ln691_258_fu_2732_p2;
wire  signed [6:0] sext_ln691_256_fu_2698_p1;
wire  signed [6:0] sext_ln691_257_fu_2723_p1;
wire   [6:0] add_ln691_259_fu_2742_p2;
wire  signed [7:0] sext_ln691_260_fu_2748_p1;
wire  signed [7:0] sext_ln691_259_fu_2738_p1;
wire  signed [6:0] sext_ln151_30_fu_2777_p1;
wire  signed [6:0] sext_ln151_31_fu_2780_p1;
wire  signed [6:0] sext_ln151_29_fu_2774_p1;
wire  signed [6:0] sext_ln151_28_fu_2771_p1;
wire   [6:0] add_ln691_264_fu_2792_p2;
wire  signed [6:0] sext_ln691_262_fu_2758_p1;
wire  signed [6:0] sext_ln691_263_fu_2783_p1;
wire   [6:0] add_ln691_265_fu_2802_p2;
wire  signed [7:0] sext_ln691_266_fu_2808_p1;
wire  signed [7:0] sext_ln691_265_fu_2798_p1;
wire  signed [6:0] sext_ln151_34_fu_2837_p1;
wire  signed [6:0] sext_ln151_35_fu_2840_p1;
wire  signed [6:0] sext_ln151_33_fu_2834_p1;
wire  signed [6:0] sext_ln151_32_fu_2831_p1;
wire   [6:0] add_ln691_270_fu_2852_p2;
wire  signed [6:0] sext_ln691_268_fu_2818_p1;
wire  signed [6:0] sext_ln691_269_fu_2843_p1;
wire   [6:0] add_ln691_271_fu_2862_p2;
wire  signed [7:0] sext_ln691_272_fu_2868_p1;
wire  signed [7:0] sext_ln691_271_fu_2858_p1;
wire  signed [6:0] sext_ln151_38_fu_2897_p1;
wire  signed [6:0] sext_ln151_39_fu_2900_p1;
wire  signed [6:0] sext_ln151_37_fu_2894_p1;
wire  signed [6:0] sext_ln151_36_fu_2891_p1;
wire   [6:0] add_ln691_276_fu_2912_p2;
wire  signed [6:0] sext_ln691_274_fu_2878_p1;
wire  signed [6:0] sext_ln691_275_fu_2903_p1;
wire   [6:0] add_ln691_277_fu_2922_p2;
wire  signed [7:0] sext_ln691_278_fu_2928_p1;
wire  signed [7:0] sext_ln691_277_fu_2918_p1;
wire  signed [6:0] sext_ln151_42_fu_2957_p1;
wire  signed [6:0] sext_ln151_43_fu_2960_p1;
wire  signed [6:0] sext_ln151_41_fu_2954_p1;
wire  signed [6:0] sext_ln151_40_fu_2951_p1;
wire   [6:0] add_ln691_282_fu_2972_p2;
wire  signed [6:0] sext_ln691_280_fu_2938_p1;
wire  signed [6:0] sext_ln691_281_fu_2963_p1;
wire   [6:0] add_ln691_283_fu_2982_p2;
wire  signed [7:0] sext_ln691_284_fu_2988_p1;
wire  signed [7:0] sext_ln691_283_fu_2978_p1;
wire  signed [6:0] sext_ln151_46_fu_3017_p1;
wire  signed [6:0] sext_ln151_47_fu_3020_p1;
wire  signed [6:0] sext_ln151_45_fu_3014_p1;
wire  signed [6:0] sext_ln151_44_fu_3011_p1;
wire   [6:0] add_ln691_288_fu_3032_p2;
wire  signed [6:0] sext_ln691_286_fu_2998_p1;
wire  signed [6:0] sext_ln691_287_fu_3023_p1;
wire   [6:0] add_ln691_289_fu_3042_p2;
wire  signed [7:0] sext_ln691_290_fu_3048_p1;
wire  signed [7:0] sext_ln691_289_fu_3038_p1;
wire  signed [2:0] mul_ln1345_292_fu_3061_p0;
wire  signed [2:0] mul_ln1345_292_fu_3061_p1;
wire  signed [5:0] sext_ln1345_202_fu_3058_p1;
wire  signed [5:0] mul_ln1345_292_fu_3061_p2;
wire  signed [2:0] mul_ln1345_293_fu_3083_p0;
wire  signed [2:0] mul_ln1345_293_fu_3083_p1;
wire  signed [5:0] sext_ln1345_203_fu_3080_p1;
wire  signed [5:0] mul_ln1345_293_fu_3083_p2;
wire  signed [2:0] mul_ln1345_294_fu_3095_p0;
wire  signed [2:0] mul_ln1345_294_fu_3095_p1;
wire  signed [5:0] sext_ln1345_204_fu_3092_p1;
wire  signed [5:0] mul_ln1345_294_fu_3095_p2;
wire  signed [2:0] mul_ln1345_295_fu_3107_p0;
wire  signed [2:0] mul_ln1345_295_fu_3107_p1;
wire  signed [5:0] sext_ln1345_205_fu_3104_p1;
wire  signed [5:0] mul_ln1345_295_fu_3107_p2;
wire  signed [2:0] mul_ln1345_296_fu_3119_p0;
wire  signed [2:0] mul_ln1345_296_fu_3119_p1;
wire  signed [5:0] sext_ln1345_206_fu_3116_p1;
wire  signed [5:0] mul_ln1345_296_fu_3119_p2;
wire  signed [2:0] mul_ln1345_297_fu_3131_p0;
wire  signed [2:0] mul_ln1345_297_fu_3131_p1;
wire  signed [5:0] sext_ln1345_207_fu_3128_p1;
wire  signed [5:0] mul_ln1345_297_fu_3131_p2;
wire  signed [6:0] sext_ln151_50_fu_3112_p1;
wire  signed [6:0] sext_ln151_51_fu_3124_p1;
wire  signed [6:0] sext_ln151_49_fu_3100_p1;
wire  signed [6:0] sext_ln151_48_fu_3088_p1;
wire   [6:0] add_ln691_294_fu_3146_p2;
wire  signed [6:0] sext_ln691_292_fu_3066_p1;
wire  signed [6:0] sext_ln691_293_fu_3136_p1;
wire   [6:0] add_ln691_295_fu_3156_p2;
wire  signed [7:0] sext_ln691_296_fu_3162_p1;
wire  signed [7:0] sext_ln691_295_fu_3152_p1;
wire  signed [2:0] mul_ln1345_298_fu_3172_p0;
wire  signed [2:0] mul_ln1345_298_fu_3172_p1;
wire  signed [5:0] mul_ln1345_298_fu_3172_p2;
wire  signed [2:0] mul_ln1345_299_fu_3191_p0;
wire  signed [2:0] mul_ln1345_299_fu_3191_p1;
wire  signed [5:0] mul_ln1345_299_fu_3191_p2;
wire  signed [2:0] mul_ln1345_300_fu_3200_p0;
wire  signed [2:0] mul_ln1345_300_fu_3200_p1;
wire  signed [5:0] mul_ln1345_300_fu_3200_p2;
wire  signed [2:0] mul_ln1345_301_fu_3209_p0;
wire  signed [2:0] mul_ln1345_301_fu_3209_p1;
wire  signed [5:0] mul_ln1345_301_fu_3209_p2;
wire  signed [2:0] mul_ln1345_302_fu_3218_p0;
wire  signed [2:0] mul_ln1345_302_fu_3218_p1;
wire  signed [5:0] mul_ln1345_302_fu_3218_p2;
wire  signed [2:0] mul_ln1345_303_fu_3227_p0;
wire  signed [2:0] mul_ln1345_303_fu_3227_p1;
wire  signed [5:0] mul_ln1345_303_fu_3227_p2;
wire  signed [6:0] sext_ln151_54_fu_3214_p1;
wire  signed [6:0] sext_ln151_55_fu_3223_p1;
wire  signed [6:0] sext_ln151_53_fu_3205_p1;
wire  signed [6:0] sext_ln151_52_fu_3196_p1;
wire   [6:0] add_ln691_300_fu_3242_p2;
wire  signed [6:0] sext_ln691_298_fu_3177_p1;
wire  signed [6:0] sext_ln691_299_fu_3232_p1;
wire   [6:0] add_ln691_301_fu_3252_p2;
wire  signed [7:0] sext_ln691_302_fu_3258_p1;
wire  signed [7:0] sext_ln691_301_fu_3248_p1;
wire  signed [2:0] mul_ln1345_304_fu_3268_p0;
wire  signed [2:0] mul_ln1345_304_fu_3268_p1;
wire  signed [5:0] mul_ln1345_304_fu_3268_p2;
wire  signed [2:0] mul_ln1345_305_fu_3287_p0;
wire  signed [2:0] mul_ln1345_305_fu_3287_p1;
wire  signed [5:0] mul_ln1345_305_fu_3287_p2;
wire  signed [2:0] mul_ln1345_306_fu_3296_p0;
wire  signed [2:0] mul_ln1345_306_fu_3296_p1;
wire  signed [5:0] mul_ln1345_306_fu_3296_p2;
wire  signed [2:0] mul_ln1345_307_fu_3305_p0;
wire  signed [2:0] mul_ln1345_307_fu_3305_p1;
wire  signed [5:0] mul_ln1345_307_fu_3305_p2;
wire  signed [2:0] mul_ln1345_308_fu_3314_p0;
wire  signed [2:0] mul_ln1345_308_fu_3314_p1;
wire  signed [5:0] mul_ln1345_308_fu_3314_p2;
wire  signed [2:0] mul_ln1345_309_fu_3323_p0;
wire  signed [2:0] mul_ln1345_309_fu_3323_p1;
wire  signed [5:0] mul_ln1345_309_fu_3323_p2;
wire  signed [6:0] sext_ln151_58_fu_3310_p1;
wire  signed [6:0] sext_ln151_59_fu_3319_p1;
wire  signed [6:0] sext_ln151_57_fu_3301_p1;
wire  signed [6:0] sext_ln151_56_fu_3292_p1;
wire   [6:0] add_ln691_306_fu_3338_p2;
wire  signed [6:0] sext_ln691_304_fu_3273_p1;
wire  signed [6:0] sext_ln691_305_fu_3328_p1;
wire   [6:0] add_ln691_307_fu_3348_p2;
wire  signed [7:0] sext_ln691_308_fu_3354_p1;
wire  signed [7:0] sext_ln691_307_fu_3344_p1;
wire  signed [2:0] mul_ln1345_310_fu_3364_p0;
wire  signed [2:0] mul_ln1345_310_fu_3364_p1;
wire  signed [5:0] mul_ln1345_310_fu_3364_p2;
wire  signed [2:0] mul_ln1345_311_fu_3383_p0;
wire  signed [2:0] mul_ln1345_311_fu_3383_p1;
wire  signed [5:0] mul_ln1345_311_fu_3383_p2;
wire  signed [2:0] mul_ln1345_312_fu_3392_p0;
wire  signed [2:0] mul_ln1345_312_fu_3392_p1;
wire  signed [5:0] mul_ln1345_312_fu_3392_p2;
wire  signed [2:0] mul_ln1345_313_fu_3401_p0;
wire  signed [2:0] mul_ln1345_313_fu_3401_p1;
wire  signed [5:0] mul_ln1345_313_fu_3401_p2;
wire  signed [2:0] mul_ln1345_314_fu_3410_p0;
wire  signed [2:0] mul_ln1345_314_fu_3410_p1;
wire  signed [5:0] mul_ln1345_314_fu_3410_p2;
wire  signed [2:0] mul_ln1345_315_fu_3419_p0;
wire  signed [2:0] mul_ln1345_315_fu_3419_p1;
wire  signed [5:0] mul_ln1345_315_fu_3419_p2;
wire  signed [6:0] sext_ln151_62_fu_3406_p1;
wire  signed [6:0] sext_ln151_63_fu_3415_p1;
wire  signed [6:0] sext_ln151_61_fu_3397_p1;
wire  signed [6:0] sext_ln151_60_fu_3388_p1;
wire   [6:0] add_ln691_312_fu_3434_p2;
wire  signed [6:0] sext_ln691_310_fu_3369_p1;
wire  signed [6:0] sext_ln691_311_fu_3424_p1;
wire   [6:0] add_ln691_313_fu_3444_p2;
wire  signed [7:0] sext_ln691_314_fu_3450_p1;
wire  signed [7:0] sext_ln691_313_fu_3440_p1;
wire  signed [2:0] mul_ln1345_316_fu_3460_p0;
wire  signed [2:0] mul_ln1345_316_fu_3460_p1;
wire  signed [5:0] mul_ln1345_316_fu_3460_p2;
wire  signed [2:0] mul_ln1345_317_fu_3479_p0;
wire  signed [2:0] mul_ln1345_317_fu_3479_p1;
wire  signed [5:0] mul_ln1345_317_fu_3479_p2;
wire  signed [2:0] mul_ln1345_318_fu_3488_p0;
wire  signed [2:0] mul_ln1345_318_fu_3488_p1;
wire  signed [5:0] mul_ln1345_318_fu_3488_p2;
wire  signed [2:0] mul_ln1345_319_fu_3497_p0;
wire  signed [2:0] mul_ln1345_319_fu_3497_p1;
wire  signed [5:0] mul_ln1345_319_fu_3497_p2;
wire  signed [2:0] mul_ln1345_320_fu_3506_p0;
wire  signed [2:0] mul_ln1345_320_fu_3506_p1;
wire  signed [5:0] mul_ln1345_320_fu_3506_p2;
wire  signed [2:0] mul_ln1345_321_fu_3515_p0;
wire  signed [2:0] mul_ln1345_321_fu_3515_p1;
wire  signed [5:0] mul_ln1345_321_fu_3515_p2;
wire  signed [6:0] sext_ln151_66_fu_3502_p1;
wire  signed [6:0] sext_ln151_67_fu_3511_p1;
wire  signed [6:0] sext_ln151_65_fu_3493_p1;
wire  signed [6:0] sext_ln151_64_fu_3484_p1;
wire   [6:0] add_ln691_318_fu_3530_p2;
wire  signed [6:0] sext_ln691_316_fu_3465_p1;
wire  signed [6:0] sext_ln691_317_fu_3520_p1;
wire   [6:0] add_ln691_319_fu_3540_p2;
wire  signed [7:0] sext_ln691_320_fu_3546_p1;
wire  signed [7:0] sext_ln691_319_fu_3536_p1;
wire  signed [2:0] mul_ln1345_322_fu_3556_p0;
wire  signed [2:0] mul_ln1345_322_fu_3556_p1;
wire  signed [5:0] mul_ln1345_322_fu_3556_p2;
wire  signed [2:0] mul_ln1345_323_fu_3575_p0;
wire  signed [2:0] mul_ln1345_323_fu_3575_p1;
wire  signed [5:0] mul_ln1345_323_fu_3575_p2;
wire  signed [2:0] mul_ln1345_324_fu_3584_p0;
wire  signed [2:0] mul_ln1345_324_fu_3584_p1;
wire  signed [5:0] mul_ln1345_324_fu_3584_p2;
wire  signed [2:0] mul_ln1345_325_fu_3593_p0;
wire  signed [2:0] mul_ln1345_325_fu_3593_p1;
wire  signed [5:0] mul_ln1345_325_fu_3593_p2;
wire  signed [2:0] mul_ln1345_326_fu_3602_p0;
wire  signed [2:0] mul_ln1345_326_fu_3602_p1;
wire  signed [5:0] mul_ln1345_326_fu_3602_p2;
wire  signed [2:0] mul_ln1345_327_fu_3611_p0;
wire  signed [2:0] mul_ln1345_327_fu_3611_p1;
wire  signed [5:0] mul_ln1345_327_fu_3611_p2;
wire  signed [6:0] sext_ln151_70_fu_3598_p1;
wire  signed [6:0] sext_ln151_71_fu_3607_p1;
wire  signed [6:0] sext_ln151_69_fu_3589_p1;
wire  signed [6:0] sext_ln151_68_fu_3580_p1;
wire   [6:0] add_ln691_324_fu_3626_p2;
wire  signed [6:0] sext_ln691_322_fu_3561_p1;
wire  signed [6:0] sext_ln691_323_fu_3616_p1;
wire   [6:0] add_ln691_325_fu_3636_p2;
wire  signed [7:0] sext_ln691_326_fu_3642_p1;
wire  signed [7:0] sext_ln691_325_fu_3632_p1;
wire  signed [2:0] mul_ln1345_328_fu_3652_p0;
wire  signed [2:0] mul_ln1345_328_fu_3652_p1;
wire  signed [5:0] mul_ln1345_328_fu_3652_p2;
wire  signed [2:0] mul_ln1345_329_fu_3671_p0;
wire  signed [2:0] mul_ln1345_329_fu_3671_p1;
wire  signed [5:0] mul_ln1345_329_fu_3671_p2;
wire  signed [2:0] mul_ln1345_330_fu_3680_p0;
wire  signed [2:0] mul_ln1345_330_fu_3680_p1;
wire  signed [5:0] mul_ln1345_330_fu_3680_p2;
wire  signed [2:0] mul_ln1345_331_fu_3689_p0;
wire  signed [2:0] mul_ln1345_331_fu_3689_p1;
wire  signed [5:0] mul_ln1345_331_fu_3689_p2;
wire  signed [2:0] mul_ln1345_332_fu_3698_p0;
wire  signed [2:0] mul_ln1345_332_fu_3698_p1;
wire  signed [5:0] mul_ln1345_332_fu_3698_p2;
wire  signed [2:0] mul_ln1345_333_fu_3707_p0;
wire  signed [2:0] mul_ln1345_333_fu_3707_p1;
wire  signed [5:0] mul_ln1345_333_fu_3707_p2;
wire  signed [6:0] sext_ln151_74_fu_3694_p1;
wire  signed [6:0] sext_ln151_75_fu_3703_p1;
wire  signed [6:0] sext_ln151_73_fu_3685_p1;
wire  signed [6:0] sext_ln151_72_fu_3676_p1;
wire   [6:0] add_ln691_330_fu_3722_p2;
wire  signed [6:0] sext_ln691_328_fu_3657_p1;
wire  signed [6:0] sext_ln691_329_fu_3712_p1;
wire   [6:0] add_ln691_331_fu_3732_p2;
wire  signed [7:0] sext_ln691_332_fu_3738_p1;
wire  signed [7:0] sext_ln691_331_fu_3728_p1;
wire  signed [2:0] mul_ln1345_334_fu_3748_p0;
wire  signed [2:0] mul_ln1345_334_fu_3748_p1;
wire  signed [5:0] mul_ln1345_334_fu_3748_p2;
wire  signed [2:0] mul_ln1345_335_fu_3767_p0;
wire  signed [2:0] mul_ln1345_335_fu_3767_p1;
wire  signed [5:0] mul_ln1345_335_fu_3767_p2;
wire  signed [2:0] mul_ln1345_336_fu_3776_p0;
wire  signed [2:0] mul_ln1345_336_fu_3776_p1;
wire  signed [5:0] mul_ln1345_336_fu_3776_p2;
wire  signed [2:0] mul_ln1345_337_fu_3785_p0;
wire  signed [2:0] mul_ln1345_337_fu_3785_p1;
wire  signed [5:0] mul_ln1345_337_fu_3785_p2;
wire  signed [2:0] mul_ln1345_338_fu_3794_p0;
wire  signed [2:0] mul_ln1345_338_fu_3794_p1;
wire  signed [5:0] mul_ln1345_338_fu_3794_p2;
wire  signed [2:0] mul_ln1345_339_fu_3803_p0;
wire  signed [2:0] mul_ln1345_339_fu_3803_p1;
wire  signed [5:0] mul_ln1345_339_fu_3803_p2;
wire  signed [6:0] sext_ln151_78_fu_3790_p1;
wire  signed [6:0] sext_ln151_79_fu_3799_p1;
wire  signed [6:0] sext_ln151_77_fu_3781_p1;
wire  signed [6:0] sext_ln151_76_fu_3772_p1;
wire   [6:0] add_ln691_336_fu_3818_p2;
wire  signed [6:0] sext_ln691_334_fu_3753_p1;
wire  signed [6:0] sext_ln691_335_fu_3808_p1;
wire   [6:0] add_ln691_337_fu_3828_p2;
wire  signed [7:0] sext_ln691_338_fu_3834_p1;
wire  signed [7:0] sext_ln691_337_fu_3824_p1;
wire  signed [2:0] mul_ln1345_340_fu_3844_p0;
wire  signed [2:0] mul_ln1345_340_fu_3844_p1;
wire  signed [5:0] mul_ln1345_340_fu_3844_p2;
wire  signed [2:0] mul_ln1345_341_fu_3863_p0;
wire  signed [2:0] mul_ln1345_341_fu_3863_p1;
wire  signed [5:0] mul_ln1345_341_fu_3863_p2;
wire  signed [2:0] mul_ln1345_342_fu_3872_p0;
wire  signed [2:0] mul_ln1345_342_fu_3872_p1;
wire  signed [5:0] mul_ln1345_342_fu_3872_p2;
wire  signed [2:0] mul_ln1345_343_fu_3881_p0;
wire  signed [2:0] mul_ln1345_343_fu_3881_p1;
wire  signed [5:0] mul_ln1345_343_fu_3881_p2;
wire  signed [2:0] mul_ln1345_344_fu_3890_p0;
wire  signed [2:0] mul_ln1345_344_fu_3890_p1;
wire  signed [5:0] mul_ln1345_344_fu_3890_p2;
wire  signed [2:0] mul_ln1345_345_fu_3899_p0;
wire  signed [2:0] mul_ln1345_345_fu_3899_p1;
wire  signed [5:0] mul_ln1345_345_fu_3899_p2;
wire  signed [6:0] sext_ln151_82_fu_3886_p1;
wire  signed [6:0] sext_ln151_83_fu_3895_p1;
wire  signed [6:0] sext_ln151_81_fu_3877_p1;
wire  signed [6:0] sext_ln151_80_fu_3868_p1;
wire   [6:0] add_ln691_342_fu_3914_p2;
wire  signed [6:0] sext_ln691_340_fu_3849_p1;
wire  signed [6:0] sext_ln691_341_fu_3904_p1;
wire   [6:0] add_ln691_343_fu_3924_p2;
wire  signed [7:0] sext_ln691_344_fu_3930_p1;
wire  signed [7:0] sext_ln691_343_fu_3920_p1;
wire  signed [2:0] mul_ln1345_346_fu_3940_p0;
wire  signed [2:0] mul_ln1345_346_fu_3940_p1;
wire  signed [5:0] mul_ln1345_346_fu_3940_p2;
wire  signed [2:0] mul_ln1345_347_fu_3959_p0;
wire  signed [2:0] mul_ln1345_347_fu_3959_p1;
wire  signed [5:0] mul_ln1345_347_fu_3959_p2;
wire  signed [2:0] mul_ln1345_348_fu_3968_p0;
wire  signed [2:0] mul_ln1345_348_fu_3968_p1;
wire  signed [5:0] mul_ln1345_348_fu_3968_p2;
wire  signed [2:0] mul_ln1345_349_fu_3977_p0;
wire  signed [2:0] mul_ln1345_349_fu_3977_p1;
wire  signed [5:0] mul_ln1345_349_fu_3977_p2;
wire  signed [2:0] mul_ln1345_350_fu_3986_p0;
wire  signed [2:0] mul_ln1345_350_fu_3986_p1;
wire  signed [5:0] mul_ln1345_350_fu_3986_p2;
wire  signed [2:0] mul_ln1345_351_fu_3995_p0;
wire  signed [2:0] mul_ln1345_351_fu_3995_p1;
wire  signed [5:0] mul_ln1345_351_fu_3995_p2;
wire  signed [6:0] sext_ln151_86_fu_3982_p1;
wire  signed [6:0] sext_ln151_87_fu_3991_p1;
wire  signed [6:0] sext_ln151_85_fu_3973_p1;
wire  signed [6:0] sext_ln151_84_fu_3964_p1;
wire   [6:0] add_ln691_348_fu_4010_p2;
wire  signed [6:0] sext_ln691_346_fu_3945_p1;
wire  signed [6:0] sext_ln691_347_fu_4000_p1;
wire   [6:0] add_ln691_349_fu_4020_p2;
wire  signed [7:0] sext_ln691_350_fu_4026_p1;
wire  signed [7:0] sext_ln691_349_fu_4016_p1;
wire  signed [2:0] mul_ln1345_352_fu_4036_p0;
wire  signed [2:0] mul_ln1345_352_fu_4036_p1;
wire  signed [5:0] mul_ln1345_352_fu_4036_p2;
wire  signed [2:0] mul_ln1345_353_fu_4055_p0;
wire  signed [2:0] mul_ln1345_353_fu_4055_p1;
wire  signed [5:0] mul_ln1345_353_fu_4055_p2;
wire  signed [2:0] mul_ln1345_354_fu_4064_p0;
wire  signed [2:0] mul_ln1345_354_fu_4064_p1;
wire  signed [5:0] mul_ln1345_354_fu_4064_p2;
wire  signed [2:0] mul_ln1345_355_fu_4073_p0;
wire  signed [2:0] mul_ln1345_355_fu_4073_p1;
wire  signed [5:0] mul_ln1345_355_fu_4073_p2;
wire  signed [2:0] mul_ln1345_356_fu_4082_p0;
wire  signed [2:0] mul_ln1345_356_fu_4082_p1;
wire  signed [5:0] mul_ln1345_356_fu_4082_p2;
wire  signed [2:0] mul_ln1345_357_fu_4091_p0;
wire  signed [2:0] mul_ln1345_357_fu_4091_p1;
wire  signed [5:0] mul_ln1345_357_fu_4091_p2;
wire  signed [6:0] sext_ln151_90_fu_4078_p1;
wire  signed [6:0] sext_ln151_91_fu_4087_p1;
wire  signed [6:0] sext_ln151_89_fu_4069_p1;
wire  signed [6:0] sext_ln151_88_fu_4060_p1;
wire   [6:0] add_ln691_354_fu_4106_p2;
wire  signed [6:0] sext_ln691_352_fu_4041_p1;
wire  signed [6:0] sext_ln691_353_fu_4096_p1;
wire   [6:0] add_ln691_355_fu_4116_p2;
wire  signed [7:0] sext_ln691_356_fu_4122_p1;
wire  signed [7:0] sext_ln691_355_fu_4112_p1;
wire  signed [2:0] mul_ln1345_358_fu_4132_p0;
wire  signed [2:0] mul_ln1345_358_fu_4132_p1;
wire  signed [5:0] mul_ln1345_358_fu_4132_p2;
wire  signed [2:0] mul_ln1345_359_fu_4151_p0;
wire  signed [2:0] mul_ln1345_359_fu_4151_p1;
wire  signed [5:0] mul_ln1345_359_fu_4151_p2;
wire  signed [2:0] mul_ln1345_360_fu_4160_p0;
wire  signed [2:0] mul_ln1345_360_fu_4160_p1;
wire  signed [5:0] mul_ln1345_360_fu_4160_p2;
wire  signed [2:0] mul_ln1345_361_fu_4169_p0;
wire  signed [2:0] mul_ln1345_361_fu_4169_p1;
wire  signed [5:0] mul_ln1345_361_fu_4169_p2;
wire  signed [2:0] mul_ln1345_362_fu_4178_p0;
wire  signed [2:0] mul_ln1345_362_fu_4178_p1;
wire  signed [5:0] mul_ln1345_362_fu_4178_p2;
wire  signed [2:0] mul_ln1345_363_fu_4187_p0;
wire  signed [2:0] mul_ln1345_363_fu_4187_p1;
wire  signed [5:0] mul_ln1345_363_fu_4187_p2;
wire  signed [6:0] sext_ln151_94_fu_4174_p1;
wire  signed [6:0] sext_ln151_95_fu_4183_p1;
wire  signed [6:0] sext_ln151_93_fu_4165_p1;
wire  signed [6:0] sext_ln151_92_fu_4156_p1;
wire   [6:0] add_ln691_360_fu_4202_p2;
wire  signed [6:0] sext_ln691_358_fu_4137_p1;
wire  signed [6:0] sext_ln691_359_fu_4192_p1;
wire   [6:0] add_ln691_361_fu_4212_p2;
wire  signed [7:0] sext_ln691_362_fu_4218_p1;
wire  signed [7:0] sext_ln691_361_fu_4208_p1;
wire  signed [10:0] sext_ln691_222_fu_4228_p1;
wire  signed [10:0] sext_ln691_225_fu_4236_p1;
wire   [10:0] add_ln691_221_fu_4231_p2;
wire  signed [10:0] sext_ln691_228_fu_4245_p1;
wire  signed [10:0] sext_ln691_231_fu_4253_p1;
wire   [10:0] add_ln691_227_fu_4248_p2;
wire  signed [10:0] sext_ln691_234_fu_4262_p1;
wire  signed [10:0] sext_ln691_237_fu_4270_p1;
wire   [10:0] add_ln691_233_fu_4265_p2;
wire  signed [10:0] sext_ln691_240_fu_4279_p1;
wire  signed [10:0] sext_ln691_243_fu_4287_p1;
wire   [10:0] add_ln691_239_fu_4282_p2;
wire  signed [10:0] sext_ln691_246_fu_4296_p1;
wire  signed [10:0] sext_ln691_249_fu_4304_p1;
wire   [10:0] add_ln691_245_fu_4299_p2;
wire  signed [10:0] sext_ln691_252_fu_4313_p1;
wire  signed [10:0] sext_ln691_255_fu_4321_p1;
wire   [10:0] add_ln691_251_fu_4316_p2;
wire  signed [10:0] sext_ln691_258_fu_4330_p1;
wire  signed [10:0] sext_ln691_261_fu_4338_p1;
wire   [10:0] add_ln691_257_fu_4333_p2;
wire  signed [10:0] sext_ln691_264_fu_4347_p1;
wire  signed [10:0] sext_ln691_267_fu_4355_p1;
wire   [10:0] add_ln691_263_fu_4350_p2;
wire  signed [10:0] sext_ln691_270_fu_4364_p1;
wire  signed [10:0] sext_ln691_273_fu_4372_p1;
wire   [10:0] add_ln691_269_fu_4367_p2;
wire  signed [10:0] sext_ln691_276_fu_4381_p1;
wire  signed [10:0] sext_ln691_279_fu_4389_p1;
wire   [10:0] add_ln691_275_fu_4384_p2;
wire  signed [10:0] sext_ln691_282_fu_4398_p1;
wire  signed [10:0] sext_ln691_285_fu_4406_p1;
wire   [10:0] add_ln691_281_fu_4401_p2;
wire  signed [10:0] sext_ln691_288_fu_4415_p1;
wire  signed [10:0] sext_ln691_291_fu_4423_p1;
wire   [10:0] add_ln691_287_fu_4418_p2;
wire  signed [10:0] sext_ln691_294_fu_4432_p1;
wire  signed [10:0] sext_ln691_297_fu_4440_p1;
wire   [10:0] add_ln691_293_fu_4435_p2;
wire  signed [10:0] sext_ln691_300_fu_4449_p1;
wire  signed [10:0] sext_ln691_303_fu_4457_p1;
wire   [10:0] add_ln691_299_fu_4452_p2;
wire  signed [10:0] sext_ln691_306_fu_4466_p1;
wire  signed [10:0] sext_ln691_309_fu_4474_p1;
wire   [10:0] add_ln691_305_fu_4469_p2;
wire  signed [10:0] sext_ln691_312_fu_4483_p1;
wire  signed [10:0] sext_ln691_315_fu_4491_p1;
wire   [10:0] add_ln691_311_fu_4486_p2;
wire  signed [10:0] sext_ln691_318_fu_4500_p1;
wire  signed [10:0] sext_ln691_321_fu_4508_p1;
wire   [10:0] add_ln691_317_fu_4503_p2;
wire  signed [10:0] sext_ln691_324_fu_4517_p1;
wire  signed [10:0] sext_ln691_327_fu_4525_p1;
wire   [10:0] add_ln691_323_fu_4520_p2;
wire  signed [10:0] sext_ln691_330_fu_4534_p1;
wire  signed [10:0] sext_ln691_333_fu_4542_p1;
wire   [10:0] add_ln691_329_fu_4537_p2;
wire  signed [10:0] sext_ln691_336_fu_4551_p1;
wire  signed [10:0] sext_ln691_339_fu_4559_p1;
wire   [10:0] add_ln691_335_fu_4554_p2;
wire  signed [10:0] sext_ln691_342_fu_4568_p1;
wire  signed [10:0] sext_ln691_345_fu_4576_p1;
wire   [10:0] add_ln691_341_fu_4571_p2;
wire  signed [10:0] sext_ln691_348_fu_4585_p1;
wire  signed [10:0] sext_ln691_351_fu_4593_p1;
wire   [10:0] add_ln691_347_fu_4588_p2;
wire  signed [10:0] sext_ln691_354_fu_4602_p1;
wire  signed [10:0] sext_ln691_357_fu_4610_p1;
wire   [10:0] add_ln691_353_fu_4605_p2;
wire  signed [10:0] sext_ln691_360_fu_4619_p1;
wire  signed [10:0] sext_ln691_363_fu_4627_p1;
wire   [10:0] add_ln691_359_fu_4622_p2;
wire   [10:0] add_ln691_363_fu_4630_p2;
wire   [10:0] add_ln691_357_fu_4613_p2;
wire   [10:0] add_ln691_351_fu_4596_p2;
wire   [10:0] add_ln691_345_fu_4579_p2;
wire   [10:0] add_ln691_339_fu_4562_p2;
wire   [10:0] add_ln691_333_fu_4545_p2;
wire   [10:0] add_ln691_327_fu_4528_p2;
wire   [10:0] add_ln691_321_fu_4511_p2;
wire   [10:0] add_ln691_315_fu_4494_p2;
wire   [10:0] add_ln691_309_fu_4477_p2;
wire   [10:0] add_ln691_303_fu_4460_p2;
wire   [10:0] add_ln691_297_fu_4443_p2;
wire   [10:0] add_ln691_291_fu_4426_p2;
wire   [10:0] add_ln691_285_fu_4409_p2;
wire   [10:0] add_ln691_279_fu_4392_p2;
wire   [10:0] add_ln691_273_fu_4375_p2;
wire   [10:0] add_ln691_267_fu_4358_p2;
wire   [10:0] add_ln691_261_fu_4341_p2;
wire   [10:0] add_ln691_255_fu_4324_p2;
wire   [10:0] add_ln691_249_fu_4307_p2;
wire   [10:0] add_ln691_243_fu_4290_p2;
wire   [10:0] add_ln691_237_fu_4273_p2;
wire   [10:0] add_ln691_231_fu_4256_p2;
wire   [10:0] add_ln691_225_fu_4239_p2;
wire   [378:0] tmp_307_fu_4693_p48;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V #(
    .DataWidth( 132 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_k_bias_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_k_bias_arr_V_address0),
    .ce0(attn_inst_matmul_gen_k_bias_arr_V_ce0),
    .q0(attn_inst_matmul_gen_k_bias_arr_V_q0)
);

ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_k_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_k_weight_arr_V_address0),
    .ce0(attn_inst_matmul_gen_k_weight_arr_V_ce0),
    .q0(attn_inst_matmul_gen_k_weight_arr_V_q0)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U198(
    .din0(trunc_ln215_2_fu_856_p1),
    .din1(mul_ln1345_fu_868_p1),
    .dout(mul_ln1345_fu_868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U199(
    .din0(tmp_s_fu_874_p4),
    .din1(mul_ln1345_221_fu_892_p1),
    .dout(mul_ln1345_221_fu_892_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U200(
    .din0(tmp_213_fu_898_p4),
    .din1(mul_ln1345_222_fu_916_p1),
    .dout(mul_ln1345_222_fu_916_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U201(
    .din0(tmp_214_fu_922_p4),
    .din1(mul_ln1345_223_fu_940_p1),
    .dout(mul_ln1345_223_fu_940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U202(
    .din0(tmp_215_fu_946_p4),
    .din1(mul_ln1345_224_fu_964_p1),
    .dout(mul_ln1345_224_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U203(
    .din0(tmp_216_fu_970_p4),
    .din1(mul_ln1345_225_fu_988_p1),
    .dout(mul_ln1345_225_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U204(
    .din0(tmp_217_fu_994_p4),
    .din1(mul_ln1345_226_fu_1008_p1),
    .dout(mul_ln1345_226_fu_1008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U205(
    .din0(tmp_219_fu_1014_p4),
    .din1(mul_ln1345_227_fu_1028_p1),
    .dout(mul_ln1345_227_fu_1028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U206(
    .din0(tmp_220_fu_1034_p4),
    .din1(mul_ln1345_228_fu_1048_p1),
    .dout(mul_ln1345_228_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U207(
    .din0(tmp_221_fu_1054_p4),
    .din1(mul_ln1345_229_fu_1068_p1),
    .dout(mul_ln1345_229_fu_1068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U208(
    .din0(tmp_222_fu_1074_p4),
    .din1(mul_ln1345_230_fu_1088_p1),
    .dout(mul_ln1345_230_fu_1088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U209(
    .din0(tmp_223_fu_1094_p4),
    .din1(mul_ln1345_231_fu_1108_p1),
    .dout(mul_ln1345_231_fu_1108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U210(
    .din0(tmp_224_fu_1114_p4),
    .din1(mul_ln1345_232_fu_1128_p1),
    .dout(mul_ln1345_232_fu_1128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U211(
    .din0(tmp_226_fu_1134_p4),
    .din1(mul_ln1345_233_fu_1148_p1),
    .dout(mul_ln1345_233_fu_1148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U212(
    .din0(tmp_227_fu_1154_p4),
    .din1(mul_ln1345_234_fu_1168_p1),
    .dout(mul_ln1345_234_fu_1168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U213(
    .din0(tmp_228_fu_1174_p4),
    .din1(mul_ln1345_235_fu_1188_p1),
    .dout(mul_ln1345_235_fu_1188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U214(
    .din0(tmp_229_fu_1194_p4),
    .din1(mul_ln1345_236_fu_1208_p1),
    .dout(mul_ln1345_236_fu_1208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U215(
    .din0(tmp_230_fu_1214_p4),
    .din1(mul_ln1345_237_fu_1228_p1),
    .dout(mul_ln1345_237_fu_1228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U216(
    .din0(tmp_231_fu_1234_p4),
    .din1(mul_ln1345_238_fu_1248_p1),
    .dout(mul_ln1345_238_fu_1248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U217(
    .din0(tmp_233_fu_1254_p4),
    .din1(mul_ln1345_239_fu_1268_p1),
    .dout(mul_ln1345_239_fu_1268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U218(
    .din0(tmp_234_fu_1274_p4),
    .din1(mul_ln1345_240_fu_1288_p1),
    .dout(mul_ln1345_240_fu_1288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U219(
    .din0(tmp_235_fu_1294_p4),
    .din1(mul_ln1345_241_fu_1308_p1),
    .dout(mul_ln1345_241_fu_1308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U220(
    .din0(tmp_236_fu_1314_p4),
    .din1(mul_ln1345_242_fu_1328_p1),
    .dout(mul_ln1345_242_fu_1328_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U221(
    .din0(tmp_237_fu_1334_p4),
    .din1(mul_ln1345_243_fu_1348_p1),
    .dout(mul_ln1345_243_fu_1348_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U222(
    .din0(tmp_238_fu_1354_p4),
    .din1(mul_ln1345_244_fu_1368_p1),
    .dout(mul_ln1345_244_fu_1368_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U223(
    .din0(tmp_240_fu_1374_p4),
    .din1(mul_ln1345_245_fu_1388_p1),
    .dout(mul_ln1345_245_fu_1388_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U224(
    .din0(tmp_241_fu_1394_p4),
    .din1(mul_ln1345_246_fu_1408_p1),
    .dout(mul_ln1345_246_fu_1408_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U225(
    .din0(tmp_242_fu_1414_p4),
    .din1(mul_ln1345_247_fu_1428_p1),
    .dout(mul_ln1345_247_fu_1428_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U226(
    .din0(tmp_243_fu_1434_p4),
    .din1(mul_ln1345_248_fu_1448_p1),
    .dout(mul_ln1345_248_fu_1448_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U227(
    .din0(tmp_244_fu_1454_p4),
    .din1(mul_ln1345_249_fu_1468_p1),
    .dout(mul_ln1345_249_fu_1468_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U228(
    .din0(tmp_245_fu_1474_p4),
    .din1(mul_ln1345_250_fu_1488_p1),
    .dout(mul_ln1345_250_fu_1488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U229(
    .din0(tmp_247_fu_1494_p4),
    .din1(mul_ln1345_251_fu_1508_p1),
    .dout(mul_ln1345_251_fu_1508_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U230(
    .din0(tmp_248_fu_1514_p4),
    .din1(mul_ln1345_252_fu_1528_p1),
    .dout(mul_ln1345_252_fu_1528_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U231(
    .din0(tmp_249_fu_1534_p4),
    .din1(mul_ln1345_253_fu_1548_p1),
    .dout(mul_ln1345_253_fu_1548_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U232(
    .din0(tmp_250_fu_1554_p4),
    .din1(mul_ln1345_254_fu_1568_p1),
    .dout(mul_ln1345_254_fu_1568_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U233(
    .din0(tmp_251_fu_1574_p4),
    .din1(mul_ln1345_255_fu_1588_p1),
    .dout(mul_ln1345_255_fu_1588_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U234(
    .din0(tmp_252_fu_1594_p4),
    .din1(mul_ln1345_256_fu_1608_p1),
    .dout(mul_ln1345_256_fu_1608_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U235(
    .din0(tmp_254_fu_1614_p4),
    .din1(mul_ln1345_257_fu_1628_p1),
    .dout(mul_ln1345_257_fu_1628_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U236(
    .din0(tmp_255_fu_1634_p4),
    .din1(mul_ln1345_258_fu_1648_p1),
    .dout(mul_ln1345_258_fu_1648_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U237(
    .din0(tmp_256_fu_1654_p4),
    .din1(mul_ln1345_259_fu_1668_p1),
    .dout(mul_ln1345_259_fu_1668_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U238(
    .din0(tmp_257_fu_1674_p4),
    .din1(mul_ln1345_260_fu_1688_p1),
    .dout(mul_ln1345_260_fu_1688_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U239(
    .din0(tmp_258_fu_1694_p4),
    .din1(mul_ln1345_261_fu_1708_p1),
    .dout(mul_ln1345_261_fu_1708_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U240(
    .din0(tmp_259_fu_1714_p4),
    .din1(mul_ln1345_262_fu_1728_p1),
    .dout(mul_ln1345_262_fu_1728_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U241(
    .din0(tmp_261_fu_1734_p4),
    .din1(mul_ln1345_263_fu_1748_p1),
    .dout(mul_ln1345_263_fu_1748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U242(
    .din0(tmp_262_fu_1754_p4),
    .din1(mul_ln1345_264_fu_1768_p1),
    .dout(mul_ln1345_264_fu_1768_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U243(
    .din0(tmp_263_fu_1774_p4),
    .din1(mul_ln1345_265_fu_1788_p1),
    .dout(mul_ln1345_265_fu_1788_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U244(
    .din0(tmp_264_fu_1794_p4),
    .din1(mul_ln1345_266_fu_1808_p1),
    .dout(mul_ln1345_266_fu_1808_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U245(
    .din0(tmp_265_fu_1814_p4),
    .din1(mul_ln1345_267_fu_1828_p1),
    .dout(mul_ln1345_267_fu_1828_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U246(
    .din0(tmp_266_fu_1834_p4),
    .din1(mul_ln1345_268_fu_1848_p1),
    .dout(mul_ln1345_268_fu_1848_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U247(
    .din0(tmp_268_fu_1854_p4),
    .din1(mul_ln1345_269_fu_1868_p1),
    .dout(mul_ln1345_269_fu_1868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U248(
    .din0(tmp_269_fu_1874_p4),
    .din1(mul_ln1345_270_fu_1888_p1),
    .dout(mul_ln1345_270_fu_1888_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U249(
    .din0(tmp_270_fu_1894_p4),
    .din1(mul_ln1345_271_fu_1908_p1),
    .dout(mul_ln1345_271_fu_1908_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U250(
    .din0(tmp_271_fu_1914_p4),
    .din1(mul_ln1345_272_fu_1928_p1),
    .dout(mul_ln1345_272_fu_1928_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U251(
    .din0(tmp_272_fu_1934_p4),
    .din1(mul_ln1345_273_fu_1948_p1),
    .dout(mul_ln1345_273_fu_1948_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U252(
    .din0(tmp_273_fu_1954_p4),
    .din1(mul_ln1345_274_fu_1968_p1),
    .dout(mul_ln1345_274_fu_1968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U253(
    .din0(tmp_275_fu_1974_p4),
    .din1(mul_ln1345_275_fu_1988_p1),
    .dout(mul_ln1345_275_fu_1988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U254(
    .din0(tmp_276_fu_1994_p4),
    .din1(mul_ln1345_276_fu_2008_p1),
    .dout(mul_ln1345_276_fu_2008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U255(
    .din0(tmp_277_fu_2014_p4),
    .din1(mul_ln1345_277_fu_2028_p1),
    .dout(mul_ln1345_277_fu_2028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U256(
    .din0(tmp_278_fu_2034_p4),
    .din1(mul_ln1345_278_fu_2048_p1),
    .dout(mul_ln1345_278_fu_2048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U257(
    .din0(tmp_279_fu_2054_p4),
    .din1(mul_ln1345_279_fu_2068_p1),
    .dout(mul_ln1345_279_fu_2068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U258(
    .din0(tmp_280_fu_2074_p4),
    .din1(mul_ln1345_280_fu_2088_p1),
    .dout(mul_ln1345_280_fu_2088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U259(
    .din0(tmp_282_fu_2094_p4),
    .din1(mul_ln1345_281_fu_2108_p1),
    .dout(mul_ln1345_281_fu_2108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U260(
    .din0(tmp_283_fu_2114_p4),
    .din1(mul_ln1345_282_fu_2128_p1),
    .dout(mul_ln1345_282_fu_2128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U261(
    .din0(tmp_284_fu_2134_p4),
    .din1(mul_ln1345_283_fu_2148_p1),
    .dout(mul_ln1345_283_fu_2148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U262(
    .din0(tmp_285_fu_2154_p4),
    .din1(mul_ln1345_284_fu_2168_p1),
    .dout(mul_ln1345_284_fu_2168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U263(
    .din0(tmp_286_fu_2174_p4),
    .din1(mul_ln1345_285_fu_2188_p1),
    .dout(mul_ln1345_285_fu_2188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U264(
    .din0(tmp_287_fu_2194_p4),
    .din1(mul_ln1345_286_fu_2208_p1),
    .dout(mul_ln1345_286_fu_2208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U265(
    .din0(tmp_289_fu_2214_p4),
    .din1(mul_ln1345_287_fu_2228_p1),
    .dout(mul_ln1345_287_fu_2228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U266(
    .din0(tmp_290_fu_2234_p4),
    .din1(mul_ln1345_288_fu_2248_p1),
    .dout(mul_ln1345_288_fu_2248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U267(
    .din0(tmp_291_fu_2254_p4),
    .din1(mul_ln1345_289_fu_2268_p1),
    .dout(mul_ln1345_289_fu_2268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U268(
    .din0(tmp_292_fu_2274_p4),
    .din1(mul_ln1345_290_fu_2288_p1),
    .dout(mul_ln1345_290_fu_2288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U269(
    .din0(tmp_293_fu_2294_p4),
    .din1(mul_ln1345_291_fu_2308_p1),
    .dout(mul_ln1345_291_fu_2308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U270(
    .din0(mul_ln1345_292_fu_3061_p0),
    .din1(mul_ln1345_292_fu_3061_p1),
    .dout(mul_ln1345_292_fu_3061_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U271(
    .din0(mul_ln1345_293_fu_3083_p0),
    .din1(mul_ln1345_293_fu_3083_p1),
    .dout(mul_ln1345_293_fu_3083_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U272(
    .din0(mul_ln1345_294_fu_3095_p0),
    .din1(mul_ln1345_294_fu_3095_p1),
    .dout(mul_ln1345_294_fu_3095_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U273(
    .din0(mul_ln1345_295_fu_3107_p0),
    .din1(mul_ln1345_295_fu_3107_p1),
    .dout(mul_ln1345_295_fu_3107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U274(
    .din0(mul_ln1345_296_fu_3119_p0),
    .din1(mul_ln1345_296_fu_3119_p1),
    .dout(mul_ln1345_296_fu_3119_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U275(
    .din0(mul_ln1345_297_fu_3131_p0),
    .din1(mul_ln1345_297_fu_3131_p1),
    .dout(mul_ln1345_297_fu_3131_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U276(
    .din0(mul_ln1345_298_fu_3172_p0),
    .din1(mul_ln1345_298_fu_3172_p1),
    .dout(mul_ln1345_298_fu_3172_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U277(
    .din0(mul_ln1345_299_fu_3191_p0),
    .din1(mul_ln1345_299_fu_3191_p1),
    .dout(mul_ln1345_299_fu_3191_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U278(
    .din0(mul_ln1345_300_fu_3200_p0),
    .din1(mul_ln1345_300_fu_3200_p1),
    .dout(mul_ln1345_300_fu_3200_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U279(
    .din0(mul_ln1345_301_fu_3209_p0),
    .din1(mul_ln1345_301_fu_3209_p1),
    .dout(mul_ln1345_301_fu_3209_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U280(
    .din0(mul_ln1345_302_fu_3218_p0),
    .din1(mul_ln1345_302_fu_3218_p1),
    .dout(mul_ln1345_302_fu_3218_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U281(
    .din0(mul_ln1345_303_fu_3227_p0),
    .din1(mul_ln1345_303_fu_3227_p1),
    .dout(mul_ln1345_303_fu_3227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U282(
    .din0(mul_ln1345_304_fu_3268_p0),
    .din1(mul_ln1345_304_fu_3268_p1),
    .dout(mul_ln1345_304_fu_3268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U283(
    .din0(mul_ln1345_305_fu_3287_p0),
    .din1(mul_ln1345_305_fu_3287_p1),
    .dout(mul_ln1345_305_fu_3287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U284(
    .din0(mul_ln1345_306_fu_3296_p0),
    .din1(mul_ln1345_306_fu_3296_p1),
    .dout(mul_ln1345_306_fu_3296_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U285(
    .din0(mul_ln1345_307_fu_3305_p0),
    .din1(mul_ln1345_307_fu_3305_p1),
    .dout(mul_ln1345_307_fu_3305_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U286(
    .din0(mul_ln1345_308_fu_3314_p0),
    .din1(mul_ln1345_308_fu_3314_p1),
    .dout(mul_ln1345_308_fu_3314_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U287(
    .din0(mul_ln1345_309_fu_3323_p0),
    .din1(mul_ln1345_309_fu_3323_p1),
    .dout(mul_ln1345_309_fu_3323_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U288(
    .din0(mul_ln1345_310_fu_3364_p0),
    .din1(mul_ln1345_310_fu_3364_p1),
    .dout(mul_ln1345_310_fu_3364_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U289(
    .din0(mul_ln1345_311_fu_3383_p0),
    .din1(mul_ln1345_311_fu_3383_p1),
    .dout(mul_ln1345_311_fu_3383_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U290(
    .din0(mul_ln1345_312_fu_3392_p0),
    .din1(mul_ln1345_312_fu_3392_p1),
    .dout(mul_ln1345_312_fu_3392_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U291(
    .din0(mul_ln1345_313_fu_3401_p0),
    .din1(mul_ln1345_313_fu_3401_p1),
    .dout(mul_ln1345_313_fu_3401_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U292(
    .din0(mul_ln1345_314_fu_3410_p0),
    .din1(mul_ln1345_314_fu_3410_p1),
    .dout(mul_ln1345_314_fu_3410_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U293(
    .din0(mul_ln1345_315_fu_3419_p0),
    .din1(mul_ln1345_315_fu_3419_p1),
    .dout(mul_ln1345_315_fu_3419_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U294(
    .din0(mul_ln1345_316_fu_3460_p0),
    .din1(mul_ln1345_316_fu_3460_p1),
    .dout(mul_ln1345_316_fu_3460_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U295(
    .din0(mul_ln1345_317_fu_3479_p0),
    .din1(mul_ln1345_317_fu_3479_p1),
    .dout(mul_ln1345_317_fu_3479_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U296(
    .din0(mul_ln1345_318_fu_3488_p0),
    .din1(mul_ln1345_318_fu_3488_p1),
    .dout(mul_ln1345_318_fu_3488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U297(
    .din0(mul_ln1345_319_fu_3497_p0),
    .din1(mul_ln1345_319_fu_3497_p1),
    .dout(mul_ln1345_319_fu_3497_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U298(
    .din0(mul_ln1345_320_fu_3506_p0),
    .din1(mul_ln1345_320_fu_3506_p1),
    .dout(mul_ln1345_320_fu_3506_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U299(
    .din0(mul_ln1345_321_fu_3515_p0),
    .din1(mul_ln1345_321_fu_3515_p1),
    .dout(mul_ln1345_321_fu_3515_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U300(
    .din0(mul_ln1345_322_fu_3556_p0),
    .din1(mul_ln1345_322_fu_3556_p1),
    .dout(mul_ln1345_322_fu_3556_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U301(
    .din0(mul_ln1345_323_fu_3575_p0),
    .din1(mul_ln1345_323_fu_3575_p1),
    .dout(mul_ln1345_323_fu_3575_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U302(
    .din0(mul_ln1345_324_fu_3584_p0),
    .din1(mul_ln1345_324_fu_3584_p1),
    .dout(mul_ln1345_324_fu_3584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U303(
    .din0(mul_ln1345_325_fu_3593_p0),
    .din1(mul_ln1345_325_fu_3593_p1),
    .dout(mul_ln1345_325_fu_3593_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U304(
    .din0(mul_ln1345_326_fu_3602_p0),
    .din1(mul_ln1345_326_fu_3602_p1),
    .dout(mul_ln1345_326_fu_3602_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U305(
    .din0(mul_ln1345_327_fu_3611_p0),
    .din1(mul_ln1345_327_fu_3611_p1),
    .dout(mul_ln1345_327_fu_3611_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U306(
    .din0(mul_ln1345_328_fu_3652_p0),
    .din1(mul_ln1345_328_fu_3652_p1),
    .dout(mul_ln1345_328_fu_3652_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U307(
    .din0(mul_ln1345_329_fu_3671_p0),
    .din1(mul_ln1345_329_fu_3671_p1),
    .dout(mul_ln1345_329_fu_3671_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U308(
    .din0(mul_ln1345_330_fu_3680_p0),
    .din1(mul_ln1345_330_fu_3680_p1),
    .dout(mul_ln1345_330_fu_3680_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U309(
    .din0(mul_ln1345_331_fu_3689_p0),
    .din1(mul_ln1345_331_fu_3689_p1),
    .dout(mul_ln1345_331_fu_3689_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U310(
    .din0(mul_ln1345_332_fu_3698_p0),
    .din1(mul_ln1345_332_fu_3698_p1),
    .dout(mul_ln1345_332_fu_3698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U311(
    .din0(mul_ln1345_333_fu_3707_p0),
    .din1(mul_ln1345_333_fu_3707_p1),
    .dout(mul_ln1345_333_fu_3707_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U312(
    .din0(mul_ln1345_334_fu_3748_p0),
    .din1(mul_ln1345_334_fu_3748_p1),
    .dout(mul_ln1345_334_fu_3748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U313(
    .din0(mul_ln1345_335_fu_3767_p0),
    .din1(mul_ln1345_335_fu_3767_p1),
    .dout(mul_ln1345_335_fu_3767_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U314(
    .din0(mul_ln1345_336_fu_3776_p0),
    .din1(mul_ln1345_336_fu_3776_p1),
    .dout(mul_ln1345_336_fu_3776_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U315(
    .din0(mul_ln1345_337_fu_3785_p0),
    .din1(mul_ln1345_337_fu_3785_p1),
    .dout(mul_ln1345_337_fu_3785_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U316(
    .din0(mul_ln1345_338_fu_3794_p0),
    .din1(mul_ln1345_338_fu_3794_p1),
    .dout(mul_ln1345_338_fu_3794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U317(
    .din0(mul_ln1345_339_fu_3803_p0),
    .din1(mul_ln1345_339_fu_3803_p1),
    .dout(mul_ln1345_339_fu_3803_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U318(
    .din0(mul_ln1345_340_fu_3844_p0),
    .din1(mul_ln1345_340_fu_3844_p1),
    .dout(mul_ln1345_340_fu_3844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U319(
    .din0(mul_ln1345_341_fu_3863_p0),
    .din1(mul_ln1345_341_fu_3863_p1),
    .dout(mul_ln1345_341_fu_3863_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U320(
    .din0(mul_ln1345_342_fu_3872_p0),
    .din1(mul_ln1345_342_fu_3872_p1),
    .dout(mul_ln1345_342_fu_3872_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U321(
    .din0(mul_ln1345_343_fu_3881_p0),
    .din1(mul_ln1345_343_fu_3881_p1),
    .dout(mul_ln1345_343_fu_3881_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U322(
    .din0(mul_ln1345_344_fu_3890_p0),
    .din1(mul_ln1345_344_fu_3890_p1),
    .dout(mul_ln1345_344_fu_3890_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U323(
    .din0(mul_ln1345_345_fu_3899_p0),
    .din1(mul_ln1345_345_fu_3899_p1),
    .dout(mul_ln1345_345_fu_3899_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U324(
    .din0(mul_ln1345_346_fu_3940_p0),
    .din1(mul_ln1345_346_fu_3940_p1),
    .dout(mul_ln1345_346_fu_3940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U325(
    .din0(mul_ln1345_347_fu_3959_p0),
    .din1(mul_ln1345_347_fu_3959_p1),
    .dout(mul_ln1345_347_fu_3959_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U326(
    .din0(mul_ln1345_348_fu_3968_p0),
    .din1(mul_ln1345_348_fu_3968_p1),
    .dout(mul_ln1345_348_fu_3968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U327(
    .din0(mul_ln1345_349_fu_3977_p0),
    .din1(mul_ln1345_349_fu_3977_p1),
    .dout(mul_ln1345_349_fu_3977_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U328(
    .din0(mul_ln1345_350_fu_3986_p0),
    .din1(mul_ln1345_350_fu_3986_p1),
    .dout(mul_ln1345_350_fu_3986_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U329(
    .din0(mul_ln1345_351_fu_3995_p0),
    .din1(mul_ln1345_351_fu_3995_p1),
    .dout(mul_ln1345_351_fu_3995_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U330(
    .din0(mul_ln1345_352_fu_4036_p0),
    .din1(mul_ln1345_352_fu_4036_p1),
    .dout(mul_ln1345_352_fu_4036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U331(
    .din0(mul_ln1345_353_fu_4055_p0),
    .din1(mul_ln1345_353_fu_4055_p1),
    .dout(mul_ln1345_353_fu_4055_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U332(
    .din0(mul_ln1345_354_fu_4064_p0),
    .din1(mul_ln1345_354_fu_4064_p1),
    .dout(mul_ln1345_354_fu_4064_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U333(
    .din0(mul_ln1345_355_fu_4073_p0),
    .din1(mul_ln1345_355_fu_4073_p1),
    .dout(mul_ln1345_355_fu_4073_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U334(
    .din0(mul_ln1345_356_fu_4082_p0),
    .din1(mul_ln1345_356_fu_4082_p1),
    .dout(mul_ln1345_356_fu_4082_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U335(
    .din0(mul_ln1345_357_fu_4091_p0),
    .din1(mul_ln1345_357_fu_4091_p1),
    .dout(mul_ln1345_357_fu_4091_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U336(
    .din0(mul_ln1345_358_fu_4132_p0),
    .din1(mul_ln1345_358_fu_4132_p1),
    .dout(mul_ln1345_358_fu_4132_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U337(
    .din0(mul_ln1345_359_fu_4151_p0),
    .din1(mul_ln1345_359_fu_4151_p1),
    .dout(mul_ln1345_359_fu_4151_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U338(
    .din0(mul_ln1345_360_fu_4160_p0),
    .din1(mul_ln1345_360_fu_4160_p1),
    .dout(mul_ln1345_360_fu_4160_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U339(
    .din0(mul_ln1345_361_fu_4169_p0),
    .din1(mul_ln1345_361_fu_4169_p1),
    .dout(mul_ln1345_361_fu_4169_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U340(
    .din0(mul_ln1345_362_fu_4178_p0),
    .din1(mul_ln1345_362_fu_4178_p1),
    .dout(mul_ln1345_362_fu_4178_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U341(
    .din0(mul_ln1345_363_fu_4187_p0),
    .din1(mul_ln1345_363_fu_4187_p1),
    .dout(mul_ln1345_363_fu_4187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_583 <= add_ln122_reg_4873;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cit_reg_583 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_571 <= select_ln121_3_reg_4854;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cot_reg_571 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten20_reg_548 <= add_ln120_reg_4844;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten20_reg_548 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_560 <= select_ln121_4_reg_4878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_560 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln120_reg_4844 <= add_ln120_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_594_p2 == 1'd0))) begin
        add_ln121_1_reg_4839 <= add_ln121_1_fu_646_p2;
        and_ln120_reg_4824 <= and_ln120_fu_626_p2;
        icmp_ln121_reg_4811 <= icmp_ln121_fu_600_p2;
        select_ln120_reg_4818 <= select_ln120_fu_606_p3;
        select_ln121_reg_4831 <= select_ln121_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln121_reg_4849 <= add_ln121_fu_658_p2;
        add_ln215_reg_4859 <= add_ln215_fu_702_p2;
        icmp_ln126_reg_4864 <= icmp_ln126_fu_708_p2;
        icmp_ln161_reg_4869 <= icmp_ln161_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln122_reg_4873 <= add_ln122_fu_718_p2;
        select_ln121_3_reg_4854 <= select_ln121_3_fu_693_p3;
        select_ln121_4_reg_4878 <= select_ln121_4_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_224_reg_5663 <= add_ln691_224_fu_2392_p2;
        add_ln691_226_reg_5673 <= add_ln691_226_fu_2426_p2;
        add_ln691_230_reg_5678 <= add_ln691_230_fu_2452_p2;
        add_ln691_232_reg_5688 <= add_ln691_232_fu_2486_p2;
        add_ln691_236_reg_5693 <= add_ln691_236_fu_2512_p2;
        add_ln691_238_reg_5703 <= add_ln691_238_fu_2546_p2;
        add_ln691_242_reg_5708 <= add_ln691_242_fu_2572_p2;
        add_ln691_244_reg_5718 <= add_ln691_244_fu_2606_p2;
        add_ln691_248_reg_5723 <= add_ln691_248_fu_2632_p2;
        add_ln691_250_reg_5733 <= add_ln691_250_fu_2666_p2;
        add_ln691_254_reg_5738 <= add_ln691_254_fu_2692_p2;
        add_ln691_256_reg_5748 <= add_ln691_256_fu_2726_p2;
        add_ln691_260_reg_5753 <= add_ln691_260_fu_2752_p2;
        add_ln691_262_reg_5763 <= add_ln691_262_fu_2786_p2;
        add_ln691_266_reg_5768 <= add_ln691_266_fu_2812_p2;
        add_ln691_268_reg_5778 <= add_ln691_268_fu_2846_p2;
        add_ln691_272_reg_5783 <= add_ln691_272_fu_2872_p2;
        add_ln691_274_reg_5793 <= add_ln691_274_fu_2906_p2;
        add_ln691_278_reg_5798 <= add_ln691_278_fu_2932_p2;
        add_ln691_280_reg_5808 <= add_ln691_280_fu_2966_p2;
        add_ln691_284_reg_5813 <= add_ln691_284_fu_2992_p2;
        add_ln691_286_reg_5823 <= add_ln691_286_fu_3026_p2;
        add_ln691_290_reg_5828 <= add_ln691_290_fu_3052_p2;
        add_ln691_292_reg_5838 <= add_ln691_292_fu_3140_p2;
        add_ln691_296_reg_5843 <= add_ln691_296_fu_3166_p2;
        add_ln691_298_reg_5853 <= add_ln691_298_fu_3236_p2;
        add_ln691_302_reg_5858 <= add_ln691_302_fu_3262_p2;
        add_ln691_304_reg_5868 <= add_ln691_304_fu_3332_p2;
        add_ln691_308_reg_5873 <= add_ln691_308_fu_3358_p2;
        add_ln691_310_reg_5883 <= add_ln691_310_fu_3428_p2;
        add_ln691_314_reg_5888 <= add_ln691_314_fu_3454_p2;
        add_ln691_316_reg_5898 <= add_ln691_316_fu_3524_p2;
        add_ln691_320_reg_5903 <= add_ln691_320_fu_3550_p2;
        add_ln691_322_reg_5913 <= add_ln691_322_fu_3620_p2;
        add_ln691_326_reg_5918 <= add_ln691_326_fu_3646_p2;
        add_ln691_328_reg_5928 <= add_ln691_328_fu_3716_p2;
        add_ln691_332_reg_5933 <= add_ln691_332_fu_3742_p2;
        add_ln691_334_reg_5943 <= add_ln691_334_fu_3812_p2;
        add_ln691_338_reg_5948 <= add_ln691_338_fu_3838_p2;
        add_ln691_340_reg_5958 <= add_ln691_340_fu_3908_p2;
        add_ln691_344_reg_5963 <= add_ln691_344_fu_3934_p2;
        add_ln691_346_reg_5973 <= add_ln691_346_fu_4004_p2;
        add_ln691_350_reg_5978 <= add_ln691_350_fu_4030_p2;
        add_ln691_352_reg_5988 <= add_ln691_352_fu_4100_p2;
        add_ln691_356_reg_5993 <= add_ln691_356_fu_4126_p2;
        add_ln691_358_reg_6003 <= add_ln691_358_fu_4196_p2;
        add_ln691_362_reg_6008 <= add_ln691_362_fu_4222_p2;
        add_ln691_reg_5658 <= add_ln691_fu_2366_p2;
        tmp_218_reg_5668 <= {{select_ln126_fu_2337_p3[21:11]}};
        tmp_225_reg_5683 <= {{select_ln126_fu_2337_p3[32:22]}};
        tmp_232_reg_5698 <= {{select_ln126_fu_2337_p3[43:33]}};
        tmp_239_reg_5713 <= {{select_ln126_fu_2337_p3[54:44]}};
        tmp_246_reg_5728 <= {{select_ln126_fu_2337_p3[65:55]}};
        tmp_253_reg_5743 <= {{select_ln126_fu_2337_p3[76:66]}};
        tmp_260_reg_5758 <= {{select_ln126_fu_2337_p3[87:77]}};
        tmp_267_reg_5773 <= {{select_ln126_fu_2337_p3[98:88]}};
        tmp_274_reg_5788 <= {{select_ln126_fu_2337_p3[109:99]}};
        tmp_281_reg_5803 <= {{select_ln126_fu_2337_p3[120:110]}};
        tmp_288_reg_5818 <= {{select_ln126_fu_2337_p3[131:121]}};
        tmp_294_reg_5833 <= {{select_ln126_fu_2337_p3[142:132]}};
        tmp_295_reg_5848 <= {{select_ln126_fu_2337_p3[153:143]}};
        tmp_296_reg_5863 <= {{select_ln126_fu_2337_p3[164:154]}};
        tmp_297_reg_5878 <= {{select_ln126_fu_2337_p3[175:165]}};
        tmp_298_reg_5893 <= {{select_ln126_fu_2337_p3[186:176]}};
        tmp_299_reg_5908 <= {{select_ln126_fu_2337_p3[197:187]}};
        tmp_300_reg_5923 <= {{select_ln126_fu_2337_p3[208:198]}};
        tmp_301_reg_5938 <= {{select_ln126_fu_2337_p3[219:209]}};
        tmp_302_reg_5953 <= {{select_ln126_fu_2337_p3[230:220]}};
        tmp_303_reg_5968 <= {{select_ln126_fu_2337_p3[241:231]}};
        tmp_304_reg_5983 <= {{select_ln126_fu_2337_p3[252:242]}};
        tmp_305_reg_5998 <= {{select_ln126_fu_2337_p3[263:253]}};
        trunc_ln691_reg_5653 <= trunc_ln691_fu_2347_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln120_reg_4824_pp0_iter1_reg <= and_ln120_reg_4824;
        icmp_ln120_reg_4807 <= icmp_ln120_fu_594_p2;
        icmp_ln120_reg_4807_pp0_iter1_reg <= icmp_ln120_reg_4807;
        icmp_ln120_reg_4807_pp0_iter2_reg <= icmp_ln120_reg_4807_pp0_iter1_reg;
        icmp_ln121_reg_4811_pp0_iter1_reg <= icmp_ln121_reg_4811;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        attn_inst_matmul_gen_k_bias_arr_V_load_1_reg_4802 <= attn_inst_matmul_gen_k_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln120_reg_4824_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_4864 == 1'd1) & (icmp_ln121_reg_4811_pp0_iter1_reg == 1'd0))) begin
        attn_inst_matmul_gen_k_bias_arr_V_load_reg_4893 <= attn_inst_matmul_gen_k_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln126_reg_4864_pp0_iter1_reg <= icmp_ln126_reg_4864;
        icmp_ln161_reg_4869_pp0_iter1_reg <= icmp_ln161_reg_4869;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln1345_221_reg_4948 <= mul_ln1345_221_fu_892_p2;
        mul_ln1345_222_reg_4958 <= mul_ln1345_222_fu_916_p2;
        mul_ln1345_223_reg_4968 <= mul_ln1345_223_fu_940_p2;
        mul_ln1345_224_reg_4978 <= mul_ln1345_224_fu_964_p2;
        mul_ln1345_225_reg_4988 <= mul_ln1345_225_fu_988_p2;
        mul_ln1345_226_reg_4998 <= mul_ln1345_226_fu_1008_p2;
        mul_ln1345_227_reg_5008 <= mul_ln1345_227_fu_1028_p2;
        mul_ln1345_228_reg_5018 <= mul_ln1345_228_fu_1048_p2;
        mul_ln1345_229_reg_5028 <= mul_ln1345_229_fu_1068_p2;
        mul_ln1345_230_reg_5038 <= mul_ln1345_230_fu_1088_p2;
        mul_ln1345_231_reg_5048 <= mul_ln1345_231_fu_1108_p2;
        mul_ln1345_232_reg_5058 <= mul_ln1345_232_fu_1128_p2;
        mul_ln1345_233_reg_5068 <= mul_ln1345_233_fu_1148_p2;
        mul_ln1345_234_reg_5078 <= mul_ln1345_234_fu_1168_p2;
        mul_ln1345_235_reg_5088 <= mul_ln1345_235_fu_1188_p2;
        mul_ln1345_236_reg_5098 <= mul_ln1345_236_fu_1208_p2;
        mul_ln1345_237_reg_5108 <= mul_ln1345_237_fu_1228_p2;
        mul_ln1345_238_reg_5118 <= mul_ln1345_238_fu_1248_p2;
        mul_ln1345_239_reg_5128 <= mul_ln1345_239_fu_1268_p2;
        mul_ln1345_240_reg_5138 <= mul_ln1345_240_fu_1288_p2;
        mul_ln1345_241_reg_5148 <= mul_ln1345_241_fu_1308_p2;
        mul_ln1345_242_reg_5158 <= mul_ln1345_242_fu_1328_p2;
        mul_ln1345_243_reg_5168 <= mul_ln1345_243_fu_1348_p2;
        mul_ln1345_244_reg_5178 <= mul_ln1345_244_fu_1368_p2;
        mul_ln1345_245_reg_5188 <= mul_ln1345_245_fu_1388_p2;
        mul_ln1345_246_reg_5198 <= mul_ln1345_246_fu_1408_p2;
        mul_ln1345_247_reg_5208 <= mul_ln1345_247_fu_1428_p2;
        mul_ln1345_248_reg_5218 <= mul_ln1345_248_fu_1448_p2;
        mul_ln1345_249_reg_5228 <= mul_ln1345_249_fu_1468_p2;
        mul_ln1345_250_reg_5238 <= mul_ln1345_250_fu_1488_p2;
        mul_ln1345_251_reg_5248 <= mul_ln1345_251_fu_1508_p2;
        mul_ln1345_252_reg_5258 <= mul_ln1345_252_fu_1528_p2;
        mul_ln1345_253_reg_5268 <= mul_ln1345_253_fu_1548_p2;
        mul_ln1345_254_reg_5278 <= mul_ln1345_254_fu_1568_p2;
        mul_ln1345_255_reg_5288 <= mul_ln1345_255_fu_1588_p2;
        mul_ln1345_256_reg_5298 <= mul_ln1345_256_fu_1608_p2;
        mul_ln1345_257_reg_5308 <= mul_ln1345_257_fu_1628_p2;
        mul_ln1345_258_reg_5318 <= mul_ln1345_258_fu_1648_p2;
        mul_ln1345_259_reg_5328 <= mul_ln1345_259_fu_1668_p2;
        mul_ln1345_260_reg_5338 <= mul_ln1345_260_fu_1688_p2;
        mul_ln1345_261_reg_5348 <= mul_ln1345_261_fu_1708_p2;
        mul_ln1345_262_reg_5358 <= mul_ln1345_262_fu_1728_p2;
        mul_ln1345_263_reg_5368 <= mul_ln1345_263_fu_1748_p2;
        mul_ln1345_264_reg_5378 <= mul_ln1345_264_fu_1768_p2;
        mul_ln1345_265_reg_5388 <= mul_ln1345_265_fu_1788_p2;
        mul_ln1345_266_reg_5398 <= mul_ln1345_266_fu_1808_p2;
        mul_ln1345_267_reg_5408 <= mul_ln1345_267_fu_1828_p2;
        mul_ln1345_268_reg_5418 <= mul_ln1345_268_fu_1848_p2;
        mul_ln1345_269_reg_5428 <= mul_ln1345_269_fu_1868_p2;
        mul_ln1345_270_reg_5438 <= mul_ln1345_270_fu_1888_p2;
        mul_ln1345_271_reg_5448 <= mul_ln1345_271_fu_1908_p2;
        mul_ln1345_272_reg_5458 <= mul_ln1345_272_fu_1928_p2;
        mul_ln1345_273_reg_5468 <= mul_ln1345_273_fu_1948_p2;
        mul_ln1345_274_reg_5478 <= mul_ln1345_274_fu_1968_p2;
        mul_ln1345_275_reg_5488 <= mul_ln1345_275_fu_1988_p2;
        mul_ln1345_276_reg_5498 <= mul_ln1345_276_fu_2008_p2;
        mul_ln1345_277_reg_5508 <= mul_ln1345_277_fu_2028_p2;
        mul_ln1345_278_reg_5518 <= mul_ln1345_278_fu_2048_p2;
        mul_ln1345_279_reg_5528 <= mul_ln1345_279_fu_2068_p2;
        mul_ln1345_280_reg_5538 <= mul_ln1345_280_fu_2088_p2;
        mul_ln1345_281_reg_5548 <= mul_ln1345_281_fu_2108_p2;
        mul_ln1345_282_reg_5558 <= mul_ln1345_282_fu_2128_p2;
        mul_ln1345_283_reg_5568 <= mul_ln1345_283_fu_2148_p2;
        mul_ln1345_284_reg_5578 <= mul_ln1345_284_fu_2168_p2;
        mul_ln1345_285_reg_5588 <= mul_ln1345_285_fu_2188_p2;
        mul_ln1345_286_reg_5598 <= mul_ln1345_286_fu_2208_p2;
        mul_ln1345_287_reg_5608 <= mul_ln1345_287_fu_2228_p2;
        mul_ln1345_288_reg_5618 <= mul_ln1345_288_fu_2248_p2;
        mul_ln1345_289_reg_5628 <= mul_ln1345_289_fu_2268_p2;
        mul_ln1345_290_reg_5638 <= mul_ln1345_290_fu_2288_p2;
        mul_ln1345_291_reg_5648 <= mul_ln1345_291_fu_2308_p2;
        mul_ln1345_reg_4938 <= mul_ln1345_fu_868_p2;
        sext_ln1345_125_reg_4933 <= sext_ln1345_125_fu_864_p1;
        sext_ln1345_127_reg_4943 <= sext_ln1345_127_fu_888_p1;
        sext_ln1345_129_reg_4953 <= sext_ln1345_129_fu_912_p1;
        sext_ln1345_131_reg_4963 <= sext_ln1345_131_fu_936_p1;
        sext_ln1345_133_reg_4973 <= sext_ln1345_133_fu_960_p1;
        sext_ln1345_135_reg_4983 <= sext_ln1345_135_fu_984_p1;
        sext_ln1345_136_reg_4993 <= sext_ln1345_136_fu_1004_p1;
        sext_ln1345_137_reg_5003 <= sext_ln1345_137_fu_1024_p1;
        sext_ln1345_138_reg_5013 <= sext_ln1345_138_fu_1044_p1;
        sext_ln1345_139_reg_5023 <= sext_ln1345_139_fu_1064_p1;
        sext_ln1345_140_reg_5033 <= sext_ln1345_140_fu_1084_p1;
        sext_ln1345_141_reg_5043 <= sext_ln1345_141_fu_1104_p1;
        sext_ln1345_142_reg_5053 <= sext_ln1345_142_fu_1124_p1;
        sext_ln1345_143_reg_5063 <= sext_ln1345_143_fu_1144_p1;
        sext_ln1345_144_reg_5073 <= sext_ln1345_144_fu_1164_p1;
        sext_ln1345_145_reg_5083 <= sext_ln1345_145_fu_1184_p1;
        sext_ln1345_146_reg_5093 <= sext_ln1345_146_fu_1204_p1;
        sext_ln1345_147_reg_5103 <= sext_ln1345_147_fu_1224_p1;
        sext_ln1345_148_reg_5113 <= sext_ln1345_148_fu_1244_p1;
        sext_ln1345_149_reg_5123 <= sext_ln1345_149_fu_1264_p1;
        sext_ln1345_150_reg_5133 <= sext_ln1345_150_fu_1284_p1;
        sext_ln1345_151_reg_5143 <= sext_ln1345_151_fu_1304_p1;
        sext_ln1345_152_reg_5153 <= sext_ln1345_152_fu_1324_p1;
        sext_ln1345_153_reg_5163 <= sext_ln1345_153_fu_1344_p1;
        sext_ln1345_154_reg_5173 <= sext_ln1345_154_fu_1364_p1;
        sext_ln1345_155_reg_5183 <= sext_ln1345_155_fu_1384_p1;
        sext_ln1345_156_reg_5193 <= sext_ln1345_156_fu_1404_p1;
        sext_ln1345_157_reg_5203 <= sext_ln1345_157_fu_1424_p1;
        sext_ln1345_158_reg_5213 <= sext_ln1345_158_fu_1444_p1;
        sext_ln1345_159_reg_5223 <= sext_ln1345_159_fu_1464_p1;
        sext_ln1345_160_reg_5233 <= sext_ln1345_160_fu_1484_p1;
        sext_ln1345_161_reg_5243 <= sext_ln1345_161_fu_1504_p1;
        sext_ln1345_162_reg_5253 <= sext_ln1345_162_fu_1524_p1;
        sext_ln1345_163_reg_5263 <= sext_ln1345_163_fu_1544_p1;
        sext_ln1345_164_reg_5273 <= sext_ln1345_164_fu_1564_p1;
        sext_ln1345_165_reg_5283 <= sext_ln1345_165_fu_1584_p1;
        sext_ln1345_166_reg_5293 <= sext_ln1345_166_fu_1604_p1;
        sext_ln1345_167_reg_5303 <= sext_ln1345_167_fu_1624_p1;
        sext_ln1345_168_reg_5313 <= sext_ln1345_168_fu_1644_p1;
        sext_ln1345_169_reg_5323 <= sext_ln1345_169_fu_1664_p1;
        sext_ln1345_170_reg_5333 <= sext_ln1345_170_fu_1684_p1;
        sext_ln1345_171_reg_5343 <= sext_ln1345_171_fu_1704_p1;
        sext_ln1345_172_reg_5353 <= sext_ln1345_172_fu_1724_p1;
        sext_ln1345_173_reg_5363 <= sext_ln1345_173_fu_1744_p1;
        sext_ln1345_174_reg_5373 <= sext_ln1345_174_fu_1764_p1;
        sext_ln1345_175_reg_5383 <= sext_ln1345_175_fu_1784_p1;
        sext_ln1345_176_reg_5393 <= sext_ln1345_176_fu_1804_p1;
        sext_ln1345_177_reg_5403 <= sext_ln1345_177_fu_1824_p1;
        sext_ln1345_178_reg_5413 <= sext_ln1345_178_fu_1844_p1;
        sext_ln1345_179_reg_5423 <= sext_ln1345_179_fu_1864_p1;
        sext_ln1345_180_reg_5433 <= sext_ln1345_180_fu_1884_p1;
        sext_ln1345_181_reg_5443 <= sext_ln1345_181_fu_1904_p1;
        sext_ln1345_182_reg_5453 <= sext_ln1345_182_fu_1924_p1;
        sext_ln1345_183_reg_5463 <= sext_ln1345_183_fu_1944_p1;
        sext_ln1345_184_reg_5473 <= sext_ln1345_184_fu_1964_p1;
        sext_ln1345_185_reg_5483 <= sext_ln1345_185_fu_1984_p1;
        sext_ln1345_186_reg_5493 <= sext_ln1345_186_fu_2004_p1;
        sext_ln1345_187_reg_5503 <= sext_ln1345_187_fu_2024_p1;
        sext_ln1345_188_reg_5513 <= sext_ln1345_188_fu_2044_p1;
        sext_ln1345_189_reg_5523 <= sext_ln1345_189_fu_2064_p1;
        sext_ln1345_190_reg_5533 <= sext_ln1345_190_fu_2084_p1;
        sext_ln1345_191_reg_5543 <= sext_ln1345_191_fu_2104_p1;
        sext_ln1345_192_reg_5553 <= sext_ln1345_192_fu_2124_p1;
        sext_ln1345_193_reg_5563 <= sext_ln1345_193_fu_2144_p1;
        sext_ln1345_194_reg_5573 <= sext_ln1345_194_fu_2164_p1;
        sext_ln1345_195_reg_5583 <= sext_ln1345_195_fu_2184_p1;
        sext_ln1345_196_reg_5593 <= sext_ln1345_196_fu_2204_p1;
        sext_ln1345_197_reg_5603 <= sext_ln1345_197_fu_2224_p1;
        sext_ln1345_198_reg_5613 <= sext_ln1345_198_fu_2244_p1;
        sext_ln1345_199_reg_5623 <= sext_ln1345_199_fu_2264_p1;
        sext_ln1345_200_reg_5633 <= sext_ln1345_200_fu_2284_p1;
        sext_ln1345_201_reg_5643 <= sext_ln1345_201_fu_2304_p1;
        trunc_ln145_109_reg_4903 <= {{cache_window_sm_dout[50:48]}};
        trunc_ln145_110_reg_4908 <= {{cache_window_sm_dout[58:56]}};
        trunc_ln145_111_reg_4913 <= {{cache_window_sm_dout[66:64]}};
        trunc_ln145_112_reg_4918 <= {{cache_window_sm_dout[74:72]}};
        trunc_ln145_113_reg_4923 <= {{cache_window_sm_dout[82:80]}};
        trunc_ln145_114_reg_4928 <= {{cache_window_sm_dout[90:88]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_4807_pp0_iter2_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_496 <= tmp_306_fu_4636_p25;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_587_p4 = add_ln122_reg_4873;
    end else begin
        ap_phi_mux_cit_phi_fu_587_p4 = cit_reg_583;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_575_p4 = select_ln121_3_reg_4854;
    end else begin
        ap_phi_mux_cot_phi_fu_575_p4 = cot_reg_571;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = add_ln120_reg_4844;
    end else begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = indvar_flatten20_reg_548;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = select_ln121_4_reg_4878;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = indvar_flatten_reg_560;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        attn_inst_matmul_gen_k_bias_arr_V_address0 = zext_ln121_1_fu_738_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_k_bias_arr_V_address0 = zext_ln121_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        attn_inst_matmul_gen_k_bias_arr_V_address0 = 4'd0;
    end else begin
        attn_inst_matmul_gen_k_bias_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        attn_inst_matmul_gen_k_bias_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_k_bias_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_k_weight_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_k_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_652_p2 = (indvar_flatten20_reg_548 + 16'd1);

assign add_ln121_1_fu_646_p2 = (ap_phi_mux_indvar_flatten_phi_fu_564_p4 + 11'd1);

assign add_ln121_fu_658_p2 = (select_ln120_reg_4818 + 5'd1);

assign add_ln122_fu_718_p2 = (select_ln121_reg_4831 + 6'd1);

assign add_ln215_fu_702_p2 = (tmp_cast_fu_685_p3 + zext_ln215_fu_699_p1);

assign add_ln691_221_fu_4231_p2 = ($signed(sext_ln691_222_fu_4228_p1) + $signed(trunc_ln691_reg_5653));

assign add_ln691_222_fu_2372_p2 = ($signed(sext_ln151_1_fu_2354_p1) + $signed(sext_ln151_fu_2351_p1));

assign add_ln691_223_fu_2382_p2 = ($signed(sext_ln691_fu_2344_p1) + $signed(sext_ln691_221_fu_2363_p1));

assign add_ln691_224_fu_2392_p2 = ($signed(sext_ln691_224_fu_2388_p1) + $signed(sext_ln691_223_fu_2378_p1));

assign add_ln691_225_fu_4239_p2 = ($signed(sext_ln691_225_fu_4236_p1) + $signed(add_ln691_221_fu_4231_p2));

assign add_ln691_226_fu_2426_p2 = ($signed(sext_ln151_6_fu_2417_p1) + $signed(sext_ln151_7_fu_2420_p1));

assign add_ln691_227_fu_4248_p2 = ($signed(sext_ln691_228_fu_4245_p1) + $signed(tmp_218_reg_5668));

assign add_ln691_228_fu_2432_p2 = ($signed(sext_ln151_5_fu_2414_p1) + $signed(sext_ln151_4_fu_2411_p1));

assign add_ln691_229_fu_2442_p2 = ($signed(sext_ln691_226_fu_2398_p1) + $signed(sext_ln691_227_fu_2423_p1));

assign add_ln691_230_fu_2452_p2 = ($signed(sext_ln691_230_fu_2448_p1) + $signed(sext_ln691_229_fu_2438_p1));

assign add_ln691_231_fu_4256_p2 = ($signed(sext_ln691_231_fu_4253_p1) + $signed(add_ln691_227_fu_4248_p2));

assign add_ln691_232_fu_2486_p2 = ($signed(sext_ln151_10_fu_2477_p1) + $signed(sext_ln151_11_fu_2480_p1));

assign add_ln691_233_fu_4265_p2 = ($signed(sext_ln691_234_fu_4262_p1) + $signed(tmp_225_reg_5683));

assign add_ln691_234_fu_2492_p2 = ($signed(sext_ln151_9_fu_2474_p1) + $signed(sext_ln151_8_fu_2471_p1));

assign add_ln691_235_fu_2502_p2 = ($signed(sext_ln691_232_fu_2458_p1) + $signed(sext_ln691_233_fu_2483_p1));

assign add_ln691_236_fu_2512_p2 = ($signed(sext_ln691_236_fu_2508_p1) + $signed(sext_ln691_235_fu_2498_p1));

assign add_ln691_237_fu_4273_p2 = ($signed(sext_ln691_237_fu_4270_p1) + $signed(add_ln691_233_fu_4265_p2));

assign add_ln691_238_fu_2546_p2 = ($signed(sext_ln151_14_fu_2537_p1) + $signed(sext_ln151_15_fu_2540_p1));

assign add_ln691_239_fu_4282_p2 = ($signed(sext_ln691_240_fu_4279_p1) + $signed(tmp_232_reg_5698));

assign add_ln691_240_fu_2552_p2 = ($signed(sext_ln151_13_fu_2534_p1) + $signed(sext_ln151_12_fu_2531_p1));

assign add_ln691_241_fu_2562_p2 = ($signed(sext_ln691_238_fu_2518_p1) + $signed(sext_ln691_239_fu_2543_p1));

assign add_ln691_242_fu_2572_p2 = ($signed(sext_ln691_242_fu_2568_p1) + $signed(sext_ln691_241_fu_2558_p1));

assign add_ln691_243_fu_4290_p2 = ($signed(sext_ln691_243_fu_4287_p1) + $signed(add_ln691_239_fu_4282_p2));

assign add_ln691_244_fu_2606_p2 = ($signed(sext_ln151_18_fu_2597_p1) + $signed(sext_ln151_19_fu_2600_p1));

assign add_ln691_245_fu_4299_p2 = ($signed(sext_ln691_246_fu_4296_p1) + $signed(tmp_239_reg_5713));

assign add_ln691_246_fu_2612_p2 = ($signed(sext_ln151_17_fu_2594_p1) + $signed(sext_ln151_16_fu_2591_p1));

assign add_ln691_247_fu_2622_p2 = ($signed(sext_ln691_244_fu_2578_p1) + $signed(sext_ln691_245_fu_2603_p1));

assign add_ln691_248_fu_2632_p2 = ($signed(sext_ln691_248_fu_2628_p1) + $signed(sext_ln691_247_fu_2618_p1));

assign add_ln691_249_fu_4307_p2 = ($signed(sext_ln691_249_fu_4304_p1) + $signed(add_ln691_245_fu_4299_p2));

assign add_ln691_250_fu_2666_p2 = ($signed(sext_ln151_22_fu_2657_p1) + $signed(sext_ln151_23_fu_2660_p1));

assign add_ln691_251_fu_4316_p2 = ($signed(sext_ln691_252_fu_4313_p1) + $signed(tmp_246_reg_5728));

assign add_ln691_252_fu_2672_p2 = ($signed(sext_ln151_21_fu_2654_p1) + $signed(sext_ln151_20_fu_2651_p1));

assign add_ln691_253_fu_2682_p2 = ($signed(sext_ln691_250_fu_2638_p1) + $signed(sext_ln691_251_fu_2663_p1));

assign add_ln691_254_fu_2692_p2 = ($signed(sext_ln691_254_fu_2688_p1) + $signed(sext_ln691_253_fu_2678_p1));

assign add_ln691_255_fu_4324_p2 = ($signed(sext_ln691_255_fu_4321_p1) + $signed(add_ln691_251_fu_4316_p2));

assign add_ln691_256_fu_2726_p2 = ($signed(sext_ln151_26_fu_2717_p1) + $signed(sext_ln151_27_fu_2720_p1));

assign add_ln691_257_fu_4333_p2 = ($signed(sext_ln691_258_fu_4330_p1) + $signed(tmp_253_reg_5743));

assign add_ln691_258_fu_2732_p2 = ($signed(sext_ln151_25_fu_2714_p1) + $signed(sext_ln151_24_fu_2711_p1));

assign add_ln691_259_fu_2742_p2 = ($signed(sext_ln691_256_fu_2698_p1) + $signed(sext_ln691_257_fu_2723_p1));

assign add_ln691_260_fu_2752_p2 = ($signed(sext_ln691_260_fu_2748_p1) + $signed(sext_ln691_259_fu_2738_p1));

assign add_ln691_261_fu_4341_p2 = ($signed(sext_ln691_261_fu_4338_p1) + $signed(add_ln691_257_fu_4333_p2));

assign add_ln691_262_fu_2786_p2 = ($signed(sext_ln151_30_fu_2777_p1) + $signed(sext_ln151_31_fu_2780_p1));

assign add_ln691_263_fu_4350_p2 = ($signed(sext_ln691_264_fu_4347_p1) + $signed(tmp_260_reg_5758));

assign add_ln691_264_fu_2792_p2 = ($signed(sext_ln151_29_fu_2774_p1) + $signed(sext_ln151_28_fu_2771_p1));

assign add_ln691_265_fu_2802_p2 = ($signed(sext_ln691_262_fu_2758_p1) + $signed(sext_ln691_263_fu_2783_p1));

assign add_ln691_266_fu_2812_p2 = ($signed(sext_ln691_266_fu_2808_p1) + $signed(sext_ln691_265_fu_2798_p1));

assign add_ln691_267_fu_4358_p2 = ($signed(sext_ln691_267_fu_4355_p1) + $signed(add_ln691_263_fu_4350_p2));

assign add_ln691_268_fu_2846_p2 = ($signed(sext_ln151_34_fu_2837_p1) + $signed(sext_ln151_35_fu_2840_p1));

assign add_ln691_269_fu_4367_p2 = ($signed(sext_ln691_270_fu_4364_p1) + $signed(tmp_267_reg_5773));

assign add_ln691_270_fu_2852_p2 = ($signed(sext_ln151_33_fu_2834_p1) + $signed(sext_ln151_32_fu_2831_p1));

assign add_ln691_271_fu_2862_p2 = ($signed(sext_ln691_268_fu_2818_p1) + $signed(sext_ln691_269_fu_2843_p1));

assign add_ln691_272_fu_2872_p2 = ($signed(sext_ln691_272_fu_2868_p1) + $signed(sext_ln691_271_fu_2858_p1));

assign add_ln691_273_fu_4375_p2 = ($signed(sext_ln691_273_fu_4372_p1) + $signed(add_ln691_269_fu_4367_p2));

assign add_ln691_274_fu_2906_p2 = ($signed(sext_ln151_38_fu_2897_p1) + $signed(sext_ln151_39_fu_2900_p1));

assign add_ln691_275_fu_4384_p2 = ($signed(sext_ln691_276_fu_4381_p1) + $signed(tmp_274_reg_5788));

assign add_ln691_276_fu_2912_p2 = ($signed(sext_ln151_37_fu_2894_p1) + $signed(sext_ln151_36_fu_2891_p1));

assign add_ln691_277_fu_2922_p2 = ($signed(sext_ln691_274_fu_2878_p1) + $signed(sext_ln691_275_fu_2903_p1));

assign add_ln691_278_fu_2932_p2 = ($signed(sext_ln691_278_fu_2928_p1) + $signed(sext_ln691_277_fu_2918_p1));

assign add_ln691_279_fu_4392_p2 = ($signed(sext_ln691_279_fu_4389_p1) + $signed(add_ln691_275_fu_4384_p2));

assign add_ln691_280_fu_2966_p2 = ($signed(sext_ln151_42_fu_2957_p1) + $signed(sext_ln151_43_fu_2960_p1));

assign add_ln691_281_fu_4401_p2 = ($signed(sext_ln691_282_fu_4398_p1) + $signed(tmp_281_reg_5803));

assign add_ln691_282_fu_2972_p2 = ($signed(sext_ln151_41_fu_2954_p1) + $signed(sext_ln151_40_fu_2951_p1));

assign add_ln691_283_fu_2982_p2 = ($signed(sext_ln691_280_fu_2938_p1) + $signed(sext_ln691_281_fu_2963_p1));

assign add_ln691_284_fu_2992_p2 = ($signed(sext_ln691_284_fu_2988_p1) + $signed(sext_ln691_283_fu_2978_p1));

assign add_ln691_285_fu_4409_p2 = ($signed(sext_ln691_285_fu_4406_p1) + $signed(add_ln691_281_fu_4401_p2));

assign add_ln691_286_fu_3026_p2 = ($signed(sext_ln151_46_fu_3017_p1) + $signed(sext_ln151_47_fu_3020_p1));

assign add_ln691_287_fu_4418_p2 = ($signed(sext_ln691_288_fu_4415_p1) + $signed(tmp_288_reg_5818));

assign add_ln691_288_fu_3032_p2 = ($signed(sext_ln151_45_fu_3014_p1) + $signed(sext_ln151_44_fu_3011_p1));

assign add_ln691_289_fu_3042_p2 = ($signed(sext_ln691_286_fu_2998_p1) + $signed(sext_ln691_287_fu_3023_p1));

assign add_ln691_290_fu_3052_p2 = ($signed(sext_ln691_290_fu_3048_p1) + $signed(sext_ln691_289_fu_3038_p1));

assign add_ln691_291_fu_4426_p2 = ($signed(sext_ln691_291_fu_4423_p1) + $signed(add_ln691_287_fu_4418_p2));

assign add_ln691_292_fu_3140_p2 = ($signed(sext_ln151_50_fu_3112_p1) + $signed(sext_ln151_51_fu_3124_p1));

assign add_ln691_293_fu_4435_p2 = ($signed(sext_ln691_294_fu_4432_p1) + $signed(tmp_294_reg_5833));

assign add_ln691_294_fu_3146_p2 = ($signed(sext_ln151_49_fu_3100_p1) + $signed(sext_ln151_48_fu_3088_p1));

assign add_ln691_295_fu_3156_p2 = ($signed(sext_ln691_292_fu_3066_p1) + $signed(sext_ln691_293_fu_3136_p1));

assign add_ln691_296_fu_3166_p2 = ($signed(sext_ln691_296_fu_3162_p1) + $signed(sext_ln691_295_fu_3152_p1));

assign add_ln691_297_fu_4443_p2 = ($signed(sext_ln691_297_fu_4440_p1) + $signed(add_ln691_293_fu_4435_p2));

assign add_ln691_298_fu_3236_p2 = ($signed(sext_ln151_54_fu_3214_p1) + $signed(sext_ln151_55_fu_3223_p1));

assign add_ln691_299_fu_4452_p2 = ($signed(sext_ln691_300_fu_4449_p1) + $signed(tmp_295_reg_5848));

assign add_ln691_300_fu_3242_p2 = ($signed(sext_ln151_53_fu_3205_p1) + $signed(sext_ln151_52_fu_3196_p1));

assign add_ln691_301_fu_3252_p2 = ($signed(sext_ln691_298_fu_3177_p1) + $signed(sext_ln691_299_fu_3232_p1));

assign add_ln691_302_fu_3262_p2 = ($signed(sext_ln691_302_fu_3258_p1) + $signed(sext_ln691_301_fu_3248_p1));

assign add_ln691_303_fu_4460_p2 = ($signed(sext_ln691_303_fu_4457_p1) + $signed(add_ln691_299_fu_4452_p2));

assign add_ln691_304_fu_3332_p2 = ($signed(sext_ln151_58_fu_3310_p1) + $signed(sext_ln151_59_fu_3319_p1));

assign add_ln691_305_fu_4469_p2 = ($signed(sext_ln691_306_fu_4466_p1) + $signed(tmp_296_reg_5863));

assign add_ln691_306_fu_3338_p2 = ($signed(sext_ln151_57_fu_3301_p1) + $signed(sext_ln151_56_fu_3292_p1));

assign add_ln691_307_fu_3348_p2 = ($signed(sext_ln691_304_fu_3273_p1) + $signed(sext_ln691_305_fu_3328_p1));

assign add_ln691_308_fu_3358_p2 = ($signed(sext_ln691_308_fu_3354_p1) + $signed(sext_ln691_307_fu_3344_p1));

assign add_ln691_309_fu_4477_p2 = ($signed(sext_ln691_309_fu_4474_p1) + $signed(add_ln691_305_fu_4469_p2));

assign add_ln691_310_fu_3428_p2 = ($signed(sext_ln151_62_fu_3406_p1) + $signed(sext_ln151_63_fu_3415_p1));

assign add_ln691_311_fu_4486_p2 = ($signed(sext_ln691_312_fu_4483_p1) + $signed(tmp_297_reg_5878));

assign add_ln691_312_fu_3434_p2 = ($signed(sext_ln151_61_fu_3397_p1) + $signed(sext_ln151_60_fu_3388_p1));

assign add_ln691_313_fu_3444_p2 = ($signed(sext_ln691_310_fu_3369_p1) + $signed(sext_ln691_311_fu_3424_p1));

assign add_ln691_314_fu_3454_p2 = ($signed(sext_ln691_314_fu_3450_p1) + $signed(sext_ln691_313_fu_3440_p1));

assign add_ln691_315_fu_4494_p2 = ($signed(sext_ln691_315_fu_4491_p1) + $signed(add_ln691_311_fu_4486_p2));

assign add_ln691_316_fu_3524_p2 = ($signed(sext_ln151_66_fu_3502_p1) + $signed(sext_ln151_67_fu_3511_p1));

assign add_ln691_317_fu_4503_p2 = ($signed(sext_ln691_318_fu_4500_p1) + $signed(tmp_298_reg_5893));

assign add_ln691_318_fu_3530_p2 = ($signed(sext_ln151_65_fu_3493_p1) + $signed(sext_ln151_64_fu_3484_p1));

assign add_ln691_319_fu_3540_p2 = ($signed(sext_ln691_316_fu_3465_p1) + $signed(sext_ln691_317_fu_3520_p1));

assign add_ln691_320_fu_3550_p2 = ($signed(sext_ln691_320_fu_3546_p1) + $signed(sext_ln691_319_fu_3536_p1));

assign add_ln691_321_fu_4511_p2 = ($signed(sext_ln691_321_fu_4508_p1) + $signed(add_ln691_317_fu_4503_p2));

assign add_ln691_322_fu_3620_p2 = ($signed(sext_ln151_70_fu_3598_p1) + $signed(sext_ln151_71_fu_3607_p1));

assign add_ln691_323_fu_4520_p2 = ($signed(sext_ln691_324_fu_4517_p1) + $signed(tmp_299_reg_5908));

assign add_ln691_324_fu_3626_p2 = ($signed(sext_ln151_69_fu_3589_p1) + $signed(sext_ln151_68_fu_3580_p1));

assign add_ln691_325_fu_3636_p2 = ($signed(sext_ln691_322_fu_3561_p1) + $signed(sext_ln691_323_fu_3616_p1));

assign add_ln691_326_fu_3646_p2 = ($signed(sext_ln691_326_fu_3642_p1) + $signed(sext_ln691_325_fu_3632_p1));

assign add_ln691_327_fu_4528_p2 = ($signed(sext_ln691_327_fu_4525_p1) + $signed(add_ln691_323_fu_4520_p2));

assign add_ln691_328_fu_3716_p2 = ($signed(sext_ln151_74_fu_3694_p1) + $signed(sext_ln151_75_fu_3703_p1));

assign add_ln691_329_fu_4537_p2 = ($signed(sext_ln691_330_fu_4534_p1) + $signed(tmp_300_reg_5923));

assign add_ln691_330_fu_3722_p2 = ($signed(sext_ln151_73_fu_3685_p1) + $signed(sext_ln151_72_fu_3676_p1));

assign add_ln691_331_fu_3732_p2 = ($signed(sext_ln691_328_fu_3657_p1) + $signed(sext_ln691_329_fu_3712_p1));

assign add_ln691_332_fu_3742_p2 = ($signed(sext_ln691_332_fu_3738_p1) + $signed(sext_ln691_331_fu_3728_p1));

assign add_ln691_333_fu_4545_p2 = ($signed(sext_ln691_333_fu_4542_p1) + $signed(add_ln691_329_fu_4537_p2));

assign add_ln691_334_fu_3812_p2 = ($signed(sext_ln151_78_fu_3790_p1) + $signed(sext_ln151_79_fu_3799_p1));

assign add_ln691_335_fu_4554_p2 = ($signed(sext_ln691_336_fu_4551_p1) + $signed(tmp_301_reg_5938));

assign add_ln691_336_fu_3818_p2 = ($signed(sext_ln151_77_fu_3781_p1) + $signed(sext_ln151_76_fu_3772_p1));

assign add_ln691_337_fu_3828_p2 = ($signed(sext_ln691_334_fu_3753_p1) + $signed(sext_ln691_335_fu_3808_p1));

assign add_ln691_338_fu_3838_p2 = ($signed(sext_ln691_338_fu_3834_p1) + $signed(sext_ln691_337_fu_3824_p1));

assign add_ln691_339_fu_4562_p2 = ($signed(sext_ln691_339_fu_4559_p1) + $signed(add_ln691_335_fu_4554_p2));

assign add_ln691_340_fu_3908_p2 = ($signed(sext_ln151_82_fu_3886_p1) + $signed(sext_ln151_83_fu_3895_p1));

assign add_ln691_341_fu_4571_p2 = ($signed(sext_ln691_342_fu_4568_p1) + $signed(tmp_302_reg_5953));

assign add_ln691_342_fu_3914_p2 = ($signed(sext_ln151_81_fu_3877_p1) + $signed(sext_ln151_80_fu_3868_p1));

assign add_ln691_343_fu_3924_p2 = ($signed(sext_ln691_340_fu_3849_p1) + $signed(sext_ln691_341_fu_3904_p1));

assign add_ln691_344_fu_3934_p2 = ($signed(sext_ln691_344_fu_3930_p1) + $signed(sext_ln691_343_fu_3920_p1));

assign add_ln691_345_fu_4579_p2 = ($signed(sext_ln691_345_fu_4576_p1) + $signed(add_ln691_341_fu_4571_p2));

assign add_ln691_346_fu_4004_p2 = ($signed(sext_ln151_86_fu_3982_p1) + $signed(sext_ln151_87_fu_3991_p1));

assign add_ln691_347_fu_4588_p2 = ($signed(sext_ln691_348_fu_4585_p1) + $signed(tmp_303_reg_5968));

assign add_ln691_348_fu_4010_p2 = ($signed(sext_ln151_85_fu_3973_p1) + $signed(sext_ln151_84_fu_3964_p1));

assign add_ln691_349_fu_4020_p2 = ($signed(sext_ln691_346_fu_3945_p1) + $signed(sext_ln691_347_fu_4000_p1));

assign add_ln691_350_fu_4030_p2 = ($signed(sext_ln691_350_fu_4026_p1) + $signed(sext_ln691_349_fu_4016_p1));

assign add_ln691_351_fu_4596_p2 = ($signed(sext_ln691_351_fu_4593_p1) + $signed(add_ln691_347_fu_4588_p2));

assign add_ln691_352_fu_4100_p2 = ($signed(sext_ln151_90_fu_4078_p1) + $signed(sext_ln151_91_fu_4087_p1));

assign add_ln691_353_fu_4605_p2 = ($signed(sext_ln691_354_fu_4602_p1) + $signed(tmp_304_reg_5983));

assign add_ln691_354_fu_4106_p2 = ($signed(sext_ln151_89_fu_4069_p1) + $signed(sext_ln151_88_fu_4060_p1));

assign add_ln691_355_fu_4116_p2 = ($signed(sext_ln691_352_fu_4041_p1) + $signed(sext_ln691_353_fu_4096_p1));

assign add_ln691_356_fu_4126_p2 = ($signed(sext_ln691_356_fu_4122_p1) + $signed(sext_ln691_355_fu_4112_p1));

assign add_ln691_357_fu_4613_p2 = ($signed(sext_ln691_357_fu_4610_p1) + $signed(add_ln691_353_fu_4605_p2));

assign add_ln691_358_fu_4196_p2 = ($signed(sext_ln151_94_fu_4174_p1) + $signed(sext_ln151_95_fu_4183_p1));

assign add_ln691_359_fu_4622_p2 = ($signed(sext_ln691_360_fu_4619_p1) + $signed(tmp_305_reg_5998));

assign add_ln691_360_fu_4202_p2 = ($signed(sext_ln151_93_fu_4165_p1) + $signed(sext_ln151_92_fu_4156_p1));

assign add_ln691_361_fu_4212_p2 = ($signed(sext_ln691_358_fu_4137_p1) + $signed(sext_ln691_359_fu_4192_p1));

assign add_ln691_362_fu_4222_p2 = ($signed(sext_ln691_362_fu_4218_p1) + $signed(sext_ln691_361_fu_4208_p1));

assign add_ln691_363_fu_4630_p2 = ($signed(sext_ln691_363_fu_4627_p1) + $signed(add_ln691_359_fu_4622_p2));

assign add_ln691_fu_2366_p2 = ($signed(sext_ln151_2_fu_2357_p1) + $signed(sext_ln151_3_fu_2360_p1));

assign and_ln120_fu_626_p2 = (xor_ln120_fu_614_p2 & icmp_ln122_fu_620_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (cache_window_sm_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2 = ((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_k_weight_arr_V_address0 = zext_ln215_1_fu_734_p1;

assign icmp_ln120_fu_594_p2 = ((ap_phi_mux_indvar_flatten20_phi_fu_552_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_600_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_564_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_620_p2 = ((ap_phi_mux_cit_phi_fu_587_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_708_p2 = ((select_ln121_reg_4831 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_713_p2 = ((select_ln121_reg_4831 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_307_fu_4693_p48;

assign mul_ln1345_221_fu_892_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_222_fu_916_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_223_fu_940_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_224_fu_964_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_225_fu_988_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_226_fu_1008_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_227_fu_1028_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_228_fu_1048_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_229_fu_1068_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_230_fu_1088_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_231_fu_1108_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_232_fu_1128_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_233_fu_1148_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_234_fu_1168_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_235_fu_1188_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_236_fu_1208_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_237_fu_1228_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_238_fu_1248_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_239_fu_1268_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_240_fu_1288_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_241_fu_1308_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_242_fu_1328_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_243_fu_1348_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_244_fu_1368_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_245_fu_1388_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_246_fu_1408_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_247_fu_1428_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_248_fu_1448_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_249_fu_1468_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_250_fu_1488_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_251_fu_1508_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_252_fu_1528_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_253_fu_1548_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_254_fu_1568_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_255_fu_1588_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_256_fu_1608_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_257_fu_1628_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_258_fu_1648_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_259_fu_1668_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_260_fu_1688_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_261_fu_1708_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_262_fu_1728_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_263_fu_1748_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_264_fu_1768_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_265_fu_1788_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_266_fu_1808_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_267_fu_1828_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_268_fu_1848_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_269_fu_1868_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_270_fu_1888_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_271_fu_1908_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_272_fu_1928_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_273_fu_1948_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_274_fu_1968_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_275_fu_1988_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_276_fu_2008_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_277_fu_2028_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_278_fu_2048_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_279_fu_2068_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_280_fu_2088_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_281_fu_2108_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_282_fu_2128_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_283_fu_2148_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_284_fu_2168_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_285_fu_2188_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_286_fu_2208_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_287_fu_2228_p1 = sext_ln1345_126_fu_884_p1;

assign mul_ln1345_288_fu_2248_p1 = sext_ln1345_128_fu_908_p1;

assign mul_ln1345_289_fu_2268_p1 = sext_ln1345_130_fu_932_p1;

assign mul_ln1345_290_fu_2288_p1 = sext_ln1345_132_fu_956_p1;

assign mul_ln1345_291_fu_2308_p1 = sext_ln1345_134_fu_980_p1;

assign mul_ln1345_292_fu_3061_p0 = sext_ln1345_125_reg_4933;

assign mul_ln1345_292_fu_3061_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_293_fu_3083_p0 = sext_ln1345_127_reg_4943;

assign mul_ln1345_293_fu_3083_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_294_fu_3095_p0 = sext_ln1345_129_reg_4953;

assign mul_ln1345_294_fu_3095_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_295_fu_3107_p0 = sext_ln1345_131_reg_4963;

assign mul_ln1345_295_fu_3107_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_296_fu_3119_p0 = sext_ln1345_133_reg_4973;

assign mul_ln1345_296_fu_3119_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_297_fu_3131_p0 = sext_ln1345_135_reg_4983;

assign mul_ln1345_297_fu_3131_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_298_fu_3172_p0 = sext_ln1345_136_reg_4993;

assign mul_ln1345_298_fu_3172_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_299_fu_3191_p0 = sext_ln1345_137_reg_5003;

assign mul_ln1345_299_fu_3191_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_300_fu_3200_p0 = sext_ln1345_138_reg_5013;

assign mul_ln1345_300_fu_3200_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_301_fu_3209_p0 = sext_ln1345_139_reg_5023;

assign mul_ln1345_301_fu_3209_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_302_fu_3218_p0 = sext_ln1345_140_reg_5033;

assign mul_ln1345_302_fu_3218_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_303_fu_3227_p0 = sext_ln1345_141_reg_5043;

assign mul_ln1345_303_fu_3227_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_304_fu_3268_p0 = sext_ln1345_142_reg_5053;

assign mul_ln1345_304_fu_3268_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_305_fu_3287_p0 = sext_ln1345_143_reg_5063;

assign mul_ln1345_305_fu_3287_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_306_fu_3296_p0 = sext_ln1345_144_reg_5073;

assign mul_ln1345_306_fu_3296_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_307_fu_3305_p0 = sext_ln1345_145_reg_5083;

assign mul_ln1345_307_fu_3305_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_308_fu_3314_p0 = sext_ln1345_146_reg_5093;

assign mul_ln1345_308_fu_3314_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_309_fu_3323_p0 = sext_ln1345_147_reg_5103;

assign mul_ln1345_309_fu_3323_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_310_fu_3364_p0 = sext_ln1345_148_reg_5113;

assign mul_ln1345_310_fu_3364_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_311_fu_3383_p0 = sext_ln1345_149_reg_5123;

assign mul_ln1345_311_fu_3383_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_312_fu_3392_p0 = sext_ln1345_150_reg_5133;

assign mul_ln1345_312_fu_3392_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_313_fu_3401_p0 = sext_ln1345_151_reg_5143;

assign mul_ln1345_313_fu_3401_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_314_fu_3410_p0 = sext_ln1345_152_reg_5153;

assign mul_ln1345_314_fu_3410_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_315_fu_3419_p0 = sext_ln1345_153_reg_5163;

assign mul_ln1345_315_fu_3419_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_316_fu_3460_p0 = sext_ln1345_154_reg_5173;

assign mul_ln1345_316_fu_3460_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_317_fu_3479_p0 = sext_ln1345_155_reg_5183;

assign mul_ln1345_317_fu_3479_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_318_fu_3488_p0 = sext_ln1345_156_reg_5193;

assign mul_ln1345_318_fu_3488_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_319_fu_3497_p0 = sext_ln1345_157_reg_5203;

assign mul_ln1345_319_fu_3497_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_320_fu_3506_p0 = sext_ln1345_158_reg_5213;

assign mul_ln1345_320_fu_3506_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_321_fu_3515_p0 = sext_ln1345_159_reg_5223;

assign mul_ln1345_321_fu_3515_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_322_fu_3556_p0 = sext_ln1345_160_reg_5233;

assign mul_ln1345_322_fu_3556_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_323_fu_3575_p0 = sext_ln1345_161_reg_5243;

assign mul_ln1345_323_fu_3575_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_324_fu_3584_p0 = sext_ln1345_162_reg_5253;

assign mul_ln1345_324_fu_3584_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_325_fu_3593_p0 = sext_ln1345_163_reg_5263;

assign mul_ln1345_325_fu_3593_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_326_fu_3602_p0 = sext_ln1345_164_reg_5273;

assign mul_ln1345_326_fu_3602_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_327_fu_3611_p0 = sext_ln1345_165_reg_5283;

assign mul_ln1345_327_fu_3611_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_328_fu_3652_p0 = sext_ln1345_166_reg_5293;

assign mul_ln1345_328_fu_3652_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_329_fu_3671_p0 = sext_ln1345_167_reg_5303;

assign mul_ln1345_329_fu_3671_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_330_fu_3680_p0 = sext_ln1345_168_reg_5313;

assign mul_ln1345_330_fu_3680_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_331_fu_3689_p0 = sext_ln1345_169_reg_5323;

assign mul_ln1345_331_fu_3689_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_332_fu_3698_p0 = sext_ln1345_170_reg_5333;

assign mul_ln1345_332_fu_3698_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_333_fu_3707_p0 = sext_ln1345_171_reg_5343;

assign mul_ln1345_333_fu_3707_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_334_fu_3748_p0 = sext_ln1345_172_reg_5353;

assign mul_ln1345_334_fu_3748_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_335_fu_3767_p0 = sext_ln1345_173_reg_5363;

assign mul_ln1345_335_fu_3767_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_336_fu_3776_p0 = sext_ln1345_174_reg_5373;

assign mul_ln1345_336_fu_3776_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_337_fu_3785_p0 = sext_ln1345_175_reg_5383;

assign mul_ln1345_337_fu_3785_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_338_fu_3794_p0 = sext_ln1345_176_reg_5393;

assign mul_ln1345_338_fu_3794_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_339_fu_3803_p0 = sext_ln1345_177_reg_5403;

assign mul_ln1345_339_fu_3803_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_340_fu_3844_p0 = sext_ln1345_178_reg_5413;

assign mul_ln1345_340_fu_3844_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_341_fu_3863_p0 = sext_ln1345_179_reg_5423;

assign mul_ln1345_341_fu_3863_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_342_fu_3872_p0 = sext_ln1345_180_reg_5433;

assign mul_ln1345_342_fu_3872_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_343_fu_3881_p0 = sext_ln1345_181_reg_5443;

assign mul_ln1345_343_fu_3881_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_344_fu_3890_p0 = sext_ln1345_182_reg_5453;

assign mul_ln1345_344_fu_3890_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_345_fu_3899_p0 = sext_ln1345_183_reg_5463;

assign mul_ln1345_345_fu_3899_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_346_fu_3940_p0 = sext_ln1345_184_reg_5473;

assign mul_ln1345_346_fu_3940_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_347_fu_3959_p0 = sext_ln1345_185_reg_5483;

assign mul_ln1345_347_fu_3959_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_348_fu_3968_p0 = sext_ln1345_186_reg_5493;

assign mul_ln1345_348_fu_3968_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_349_fu_3977_p0 = sext_ln1345_187_reg_5503;

assign mul_ln1345_349_fu_3977_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_350_fu_3986_p0 = sext_ln1345_188_reg_5513;

assign mul_ln1345_350_fu_3986_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_351_fu_3995_p0 = sext_ln1345_189_reg_5523;

assign mul_ln1345_351_fu_3995_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_352_fu_4036_p0 = sext_ln1345_190_reg_5533;

assign mul_ln1345_352_fu_4036_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_353_fu_4055_p0 = sext_ln1345_191_reg_5543;

assign mul_ln1345_353_fu_4055_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_354_fu_4064_p0 = sext_ln1345_192_reg_5553;

assign mul_ln1345_354_fu_4064_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_355_fu_4073_p0 = sext_ln1345_193_reg_5563;

assign mul_ln1345_355_fu_4073_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_356_fu_4082_p0 = sext_ln1345_194_reg_5573;

assign mul_ln1345_356_fu_4082_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_357_fu_4091_p0 = sext_ln1345_195_reg_5583;

assign mul_ln1345_357_fu_4091_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_358_fu_4132_p0 = sext_ln1345_196_reg_5593;

assign mul_ln1345_358_fu_4132_p1 = sext_ln1345_202_fu_3058_p1;

assign mul_ln1345_359_fu_4151_p0 = sext_ln1345_197_reg_5603;

assign mul_ln1345_359_fu_4151_p1 = sext_ln1345_203_fu_3080_p1;

assign mul_ln1345_360_fu_4160_p0 = sext_ln1345_198_reg_5613;

assign mul_ln1345_360_fu_4160_p1 = sext_ln1345_204_fu_3092_p1;

assign mul_ln1345_361_fu_4169_p0 = sext_ln1345_199_reg_5623;

assign mul_ln1345_361_fu_4169_p1 = sext_ln1345_205_fu_3104_p1;

assign mul_ln1345_362_fu_4178_p0 = sext_ln1345_200_reg_5633;

assign mul_ln1345_362_fu_4178_p1 = sext_ln1345_206_fu_3116_p1;

assign mul_ln1345_363_fu_4187_p0 = sext_ln1345_201_reg_5643;

assign mul_ln1345_363_fu_4187_p1 = sext_ln1345_207_fu_3128_p1;

assign mul_ln1345_fu_868_p1 = sext_ln1345_fu_860_p1;

assign or_ln121_fu_632_p2 = (icmp_ln121_fu_600_p2 | and_ln120_fu_626_p2);

assign select_ln120_1_fu_2317_p3 = ((icmp_ln121_reg_4811_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_k_bias_arr_V_load_1_reg_4802 : attn_inst_matmul_gen_k_bias_arr_V_load_reg_4893);

assign select_ln120_2_fu_671_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 4'd0 : trunc_ln215_1_fu_667_p1);

assign select_ln120_fu_606_p3 = ((icmp_ln121_fu_600_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_575_p4);

assign select_ln121_1_fu_678_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? trunc_ln215_fu_663_p1 : select_ln120_2_fu_671_p3);

assign select_ln121_2_fu_2322_p3 = ((and_ln120_reg_4824_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_k_bias_arr_V_q0 : select_ln120_1_fu_2317_p3);

assign select_ln121_3_fu_693_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? add_ln121_fu_658_p2 : select_ln120_reg_4818);

assign select_ln121_4_fu_723_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 11'd1 : add_ln121_1_reg_4839);

assign select_ln121_fu_638_p3 = ((or_ln121_fu_632_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_587_p4);

assign select_ln126_fu_2337_p3 = ((icmp_ln126_reg_4864_pp0_iter1_reg[0:0] == 1'b1) ? vec_o_data_M_elems_V_fu_2329_p3 : vec_o_data_M_elems_V_2_fu_496);

assign sext_ln1345_125_fu_864_p1 = trunc_ln215_2_fu_856_p1;

assign sext_ln1345_126_fu_884_p1 = $signed(trunc_ln145_s_fu_746_p4);

assign sext_ln1345_127_fu_888_p1 = tmp_s_fu_874_p4;

assign sext_ln1345_128_fu_908_p1 = $signed(trunc_ln145_105_fu_756_p4);

assign sext_ln1345_129_fu_912_p1 = tmp_213_fu_898_p4;

assign sext_ln1345_130_fu_932_p1 = $signed(trunc_ln145_106_fu_766_p4);

assign sext_ln1345_131_fu_936_p1 = tmp_214_fu_922_p4;

assign sext_ln1345_132_fu_956_p1 = $signed(trunc_ln145_107_fu_776_p4);

assign sext_ln1345_133_fu_960_p1 = tmp_215_fu_946_p4;

assign sext_ln1345_134_fu_980_p1 = $signed(trunc_ln145_108_fu_786_p4);

assign sext_ln1345_135_fu_984_p1 = tmp_216_fu_970_p4;

assign sext_ln1345_136_fu_1004_p1 = tmp_217_fu_994_p4;

assign sext_ln1345_137_fu_1024_p1 = tmp_219_fu_1014_p4;

assign sext_ln1345_138_fu_1044_p1 = tmp_220_fu_1034_p4;

assign sext_ln1345_139_fu_1064_p1 = tmp_221_fu_1054_p4;

assign sext_ln1345_140_fu_1084_p1 = tmp_222_fu_1074_p4;

assign sext_ln1345_141_fu_1104_p1 = tmp_223_fu_1094_p4;

assign sext_ln1345_142_fu_1124_p1 = tmp_224_fu_1114_p4;

assign sext_ln1345_143_fu_1144_p1 = tmp_226_fu_1134_p4;

assign sext_ln1345_144_fu_1164_p1 = tmp_227_fu_1154_p4;

assign sext_ln1345_145_fu_1184_p1 = tmp_228_fu_1174_p4;

assign sext_ln1345_146_fu_1204_p1 = tmp_229_fu_1194_p4;

assign sext_ln1345_147_fu_1224_p1 = tmp_230_fu_1214_p4;

assign sext_ln1345_148_fu_1244_p1 = tmp_231_fu_1234_p4;

assign sext_ln1345_149_fu_1264_p1 = tmp_233_fu_1254_p4;

assign sext_ln1345_150_fu_1284_p1 = tmp_234_fu_1274_p4;

assign sext_ln1345_151_fu_1304_p1 = tmp_235_fu_1294_p4;

assign sext_ln1345_152_fu_1324_p1 = tmp_236_fu_1314_p4;

assign sext_ln1345_153_fu_1344_p1 = tmp_237_fu_1334_p4;

assign sext_ln1345_154_fu_1364_p1 = tmp_238_fu_1354_p4;

assign sext_ln1345_155_fu_1384_p1 = tmp_240_fu_1374_p4;

assign sext_ln1345_156_fu_1404_p1 = tmp_241_fu_1394_p4;

assign sext_ln1345_157_fu_1424_p1 = tmp_242_fu_1414_p4;

assign sext_ln1345_158_fu_1444_p1 = tmp_243_fu_1434_p4;

assign sext_ln1345_159_fu_1464_p1 = tmp_244_fu_1454_p4;

assign sext_ln1345_160_fu_1484_p1 = tmp_245_fu_1474_p4;

assign sext_ln1345_161_fu_1504_p1 = tmp_247_fu_1494_p4;

assign sext_ln1345_162_fu_1524_p1 = tmp_248_fu_1514_p4;

assign sext_ln1345_163_fu_1544_p1 = tmp_249_fu_1534_p4;

assign sext_ln1345_164_fu_1564_p1 = tmp_250_fu_1554_p4;

assign sext_ln1345_165_fu_1584_p1 = tmp_251_fu_1574_p4;

assign sext_ln1345_166_fu_1604_p1 = tmp_252_fu_1594_p4;

assign sext_ln1345_167_fu_1624_p1 = tmp_254_fu_1614_p4;

assign sext_ln1345_168_fu_1644_p1 = tmp_255_fu_1634_p4;

assign sext_ln1345_169_fu_1664_p1 = tmp_256_fu_1654_p4;

assign sext_ln1345_170_fu_1684_p1 = tmp_257_fu_1674_p4;

assign sext_ln1345_171_fu_1704_p1 = tmp_258_fu_1694_p4;

assign sext_ln1345_172_fu_1724_p1 = tmp_259_fu_1714_p4;

assign sext_ln1345_173_fu_1744_p1 = tmp_261_fu_1734_p4;

assign sext_ln1345_174_fu_1764_p1 = tmp_262_fu_1754_p4;

assign sext_ln1345_175_fu_1784_p1 = tmp_263_fu_1774_p4;

assign sext_ln1345_176_fu_1804_p1 = tmp_264_fu_1794_p4;

assign sext_ln1345_177_fu_1824_p1 = tmp_265_fu_1814_p4;

assign sext_ln1345_178_fu_1844_p1 = tmp_266_fu_1834_p4;

assign sext_ln1345_179_fu_1864_p1 = tmp_268_fu_1854_p4;

assign sext_ln1345_180_fu_1884_p1 = tmp_269_fu_1874_p4;

assign sext_ln1345_181_fu_1904_p1 = tmp_270_fu_1894_p4;

assign sext_ln1345_182_fu_1924_p1 = tmp_271_fu_1914_p4;

assign sext_ln1345_183_fu_1944_p1 = tmp_272_fu_1934_p4;

assign sext_ln1345_184_fu_1964_p1 = tmp_273_fu_1954_p4;

assign sext_ln1345_185_fu_1984_p1 = tmp_275_fu_1974_p4;

assign sext_ln1345_186_fu_2004_p1 = tmp_276_fu_1994_p4;

assign sext_ln1345_187_fu_2024_p1 = tmp_277_fu_2014_p4;

assign sext_ln1345_188_fu_2044_p1 = tmp_278_fu_2034_p4;

assign sext_ln1345_189_fu_2064_p1 = tmp_279_fu_2054_p4;

assign sext_ln1345_190_fu_2084_p1 = tmp_280_fu_2074_p4;

assign sext_ln1345_191_fu_2104_p1 = tmp_282_fu_2094_p4;

assign sext_ln1345_192_fu_2124_p1 = tmp_283_fu_2114_p4;

assign sext_ln1345_193_fu_2144_p1 = tmp_284_fu_2134_p4;

assign sext_ln1345_194_fu_2164_p1 = tmp_285_fu_2154_p4;

assign sext_ln1345_195_fu_2184_p1 = tmp_286_fu_2174_p4;

assign sext_ln1345_196_fu_2204_p1 = tmp_287_fu_2194_p4;

assign sext_ln1345_197_fu_2224_p1 = tmp_289_fu_2214_p4;

assign sext_ln1345_198_fu_2244_p1 = tmp_290_fu_2234_p4;

assign sext_ln1345_199_fu_2264_p1 = tmp_291_fu_2254_p4;

assign sext_ln1345_200_fu_2284_p1 = tmp_292_fu_2274_p4;

assign sext_ln1345_201_fu_2304_p1 = tmp_293_fu_2294_p4;

assign sext_ln1345_202_fu_3058_p1 = $signed(trunc_ln145_109_reg_4903);

assign sext_ln1345_203_fu_3080_p1 = $signed(trunc_ln145_110_reg_4908);

assign sext_ln1345_204_fu_3092_p1 = $signed(trunc_ln145_111_reg_4913);

assign sext_ln1345_205_fu_3104_p1 = $signed(trunc_ln145_112_reg_4918);

assign sext_ln1345_206_fu_3116_p1 = $signed(trunc_ln145_113_reg_4923);

assign sext_ln1345_207_fu_3128_p1 = $signed(trunc_ln145_114_reg_4928);

assign sext_ln1345_fu_860_p1 = $signed(trunc_ln145_fu_742_p1);

assign sext_ln151_10_fu_2477_p1 = mul_ln1345_235_reg_5088;

assign sext_ln151_11_fu_2480_p1 = mul_ln1345_236_reg_5098;

assign sext_ln151_12_fu_2531_p1 = mul_ln1345_239_reg_5128;

assign sext_ln151_13_fu_2534_p1 = mul_ln1345_240_reg_5138;

assign sext_ln151_14_fu_2537_p1 = mul_ln1345_241_reg_5148;

assign sext_ln151_15_fu_2540_p1 = mul_ln1345_242_reg_5158;

assign sext_ln151_16_fu_2591_p1 = mul_ln1345_245_reg_5188;

assign sext_ln151_17_fu_2594_p1 = mul_ln1345_246_reg_5198;

assign sext_ln151_18_fu_2597_p1 = mul_ln1345_247_reg_5208;

assign sext_ln151_19_fu_2600_p1 = mul_ln1345_248_reg_5218;

assign sext_ln151_1_fu_2354_p1 = mul_ln1345_222_reg_4958;

assign sext_ln151_20_fu_2651_p1 = mul_ln1345_251_reg_5248;

assign sext_ln151_21_fu_2654_p1 = mul_ln1345_252_reg_5258;

assign sext_ln151_22_fu_2657_p1 = mul_ln1345_253_reg_5268;

assign sext_ln151_23_fu_2660_p1 = mul_ln1345_254_reg_5278;

assign sext_ln151_24_fu_2711_p1 = mul_ln1345_257_reg_5308;

assign sext_ln151_25_fu_2714_p1 = mul_ln1345_258_reg_5318;

assign sext_ln151_26_fu_2717_p1 = mul_ln1345_259_reg_5328;

assign sext_ln151_27_fu_2720_p1 = mul_ln1345_260_reg_5338;

assign sext_ln151_28_fu_2771_p1 = mul_ln1345_263_reg_5368;

assign sext_ln151_29_fu_2774_p1 = mul_ln1345_264_reg_5378;

assign sext_ln151_2_fu_2357_p1 = mul_ln1345_223_reg_4968;

assign sext_ln151_30_fu_2777_p1 = mul_ln1345_265_reg_5388;

assign sext_ln151_31_fu_2780_p1 = mul_ln1345_266_reg_5398;

assign sext_ln151_32_fu_2831_p1 = mul_ln1345_269_reg_5428;

assign sext_ln151_33_fu_2834_p1 = mul_ln1345_270_reg_5438;

assign sext_ln151_34_fu_2837_p1 = mul_ln1345_271_reg_5448;

assign sext_ln151_35_fu_2840_p1 = mul_ln1345_272_reg_5458;

assign sext_ln151_36_fu_2891_p1 = mul_ln1345_275_reg_5488;

assign sext_ln151_37_fu_2894_p1 = mul_ln1345_276_reg_5498;

assign sext_ln151_38_fu_2897_p1 = mul_ln1345_277_reg_5508;

assign sext_ln151_39_fu_2900_p1 = mul_ln1345_278_reg_5518;

assign sext_ln151_3_fu_2360_p1 = mul_ln1345_224_reg_4978;

assign sext_ln151_40_fu_2951_p1 = mul_ln1345_281_reg_5548;

assign sext_ln151_41_fu_2954_p1 = mul_ln1345_282_reg_5558;

assign sext_ln151_42_fu_2957_p1 = mul_ln1345_283_reg_5568;

assign sext_ln151_43_fu_2960_p1 = mul_ln1345_284_reg_5578;

assign sext_ln151_44_fu_3011_p1 = mul_ln1345_287_reg_5608;

assign sext_ln151_45_fu_3014_p1 = mul_ln1345_288_reg_5618;

assign sext_ln151_46_fu_3017_p1 = mul_ln1345_289_reg_5628;

assign sext_ln151_47_fu_3020_p1 = mul_ln1345_290_reg_5638;

assign sext_ln151_48_fu_3088_p1 = mul_ln1345_293_fu_3083_p2;

assign sext_ln151_49_fu_3100_p1 = mul_ln1345_294_fu_3095_p2;

assign sext_ln151_4_fu_2411_p1 = mul_ln1345_227_reg_5008;

assign sext_ln151_50_fu_3112_p1 = mul_ln1345_295_fu_3107_p2;

assign sext_ln151_51_fu_3124_p1 = mul_ln1345_296_fu_3119_p2;

assign sext_ln151_52_fu_3196_p1 = mul_ln1345_299_fu_3191_p2;

assign sext_ln151_53_fu_3205_p1 = mul_ln1345_300_fu_3200_p2;

assign sext_ln151_54_fu_3214_p1 = mul_ln1345_301_fu_3209_p2;

assign sext_ln151_55_fu_3223_p1 = mul_ln1345_302_fu_3218_p2;

assign sext_ln151_56_fu_3292_p1 = mul_ln1345_305_fu_3287_p2;

assign sext_ln151_57_fu_3301_p1 = mul_ln1345_306_fu_3296_p2;

assign sext_ln151_58_fu_3310_p1 = mul_ln1345_307_fu_3305_p2;

assign sext_ln151_59_fu_3319_p1 = mul_ln1345_308_fu_3314_p2;

assign sext_ln151_5_fu_2414_p1 = mul_ln1345_228_reg_5018;

assign sext_ln151_60_fu_3388_p1 = mul_ln1345_311_fu_3383_p2;

assign sext_ln151_61_fu_3397_p1 = mul_ln1345_312_fu_3392_p2;

assign sext_ln151_62_fu_3406_p1 = mul_ln1345_313_fu_3401_p2;

assign sext_ln151_63_fu_3415_p1 = mul_ln1345_314_fu_3410_p2;

assign sext_ln151_64_fu_3484_p1 = mul_ln1345_317_fu_3479_p2;

assign sext_ln151_65_fu_3493_p1 = mul_ln1345_318_fu_3488_p2;

assign sext_ln151_66_fu_3502_p1 = mul_ln1345_319_fu_3497_p2;

assign sext_ln151_67_fu_3511_p1 = mul_ln1345_320_fu_3506_p2;

assign sext_ln151_68_fu_3580_p1 = mul_ln1345_323_fu_3575_p2;

assign sext_ln151_69_fu_3589_p1 = mul_ln1345_324_fu_3584_p2;

assign sext_ln151_6_fu_2417_p1 = mul_ln1345_229_reg_5028;

assign sext_ln151_70_fu_3598_p1 = mul_ln1345_325_fu_3593_p2;

assign sext_ln151_71_fu_3607_p1 = mul_ln1345_326_fu_3602_p2;

assign sext_ln151_72_fu_3676_p1 = mul_ln1345_329_fu_3671_p2;

assign sext_ln151_73_fu_3685_p1 = mul_ln1345_330_fu_3680_p2;

assign sext_ln151_74_fu_3694_p1 = mul_ln1345_331_fu_3689_p2;

assign sext_ln151_75_fu_3703_p1 = mul_ln1345_332_fu_3698_p2;

assign sext_ln151_76_fu_3772_p1 = mul_ln1345_335_fu_3767_p2;

assign sext_ln151_77_fu_3781_p1 = mul_ln1345_336_fu_3776_p2;

assign sext_ln151_78_fu_3790_p1 = mul_ln1345_337_fu_3785_p2;

assign sext_ln151_79_fu_3799_p1 = mul_ln1345_338_fu_3794_p2;

assign sext_ln151_7_fu_2420_p1 = mul_ln1345_230_reg_5038;

assign sext_ln151_80_fu_3868_p1 = mul_ln1345_341_fu_3863_p2;

assign sext_ln151_81_fu_3877_p1 = mul_ln1345_342_fu_3872_p2;

assign sext_ln151_82_fu_3886_p1 = mul_ln1345_343_fu_3881_p2;

assign sext_ln151_83_fu_3895_p1 = mul_ln1345_344_fu_3890_p2;

assign sext_ln151_84_fu_3964_p1 = mul_ln1345_347_fu_3959_p2;

assign sext_ln151_85_fu_3973_p1 = mul_ln1345_348_fu_3968_p2;

assign sext_ln151_86_fu_3982_p1 = mul_ln1345_349_fu_3977_p2;

assign sext_ln151_87_fu_3991_p1 = mul_ln1345_350_fu_3986_p2;

assign sext_ln151_88_fu_4060_p1 = mul_ln1345_353_fu_4055_p2;

assign sext_ln151_89_fu_4069_p1 = mul_ln1345_354_fu_4064_p2;

assign sext_ln151_8_fu_2471_p1 = mul_ln1345_233_reg_5068;

assign sext_ln151_90_fu_4078_p1 = mul_ln1345_355_fu_4073_p2;

assign sext_ln151_91_fu_4087_p1 = mul_ln1345_356_fu_4082_p2;

assign sext_ln151_92_fu_4156_p1 = mul_ln1345_359_fu_4151_p2;

assign sext_ln151_93_fu_4165_p1 = mul_ln1345_360_fu_4160_p2;

assign sext_ln151_94_fu_4174_p1 = mul_ln1345_361_fu_4169_p2;

assign sext_ln151_95_fu_4183_p1 = mul_ln1345_362_fu_4178_p2;

assign sext_ln151_9_fu_2474_p1 = mul_ln1345_234_reg_5078;

assign sext_ln151_fu_2351_p1 = mul_ln1345_221_reg_4948;

assign sext_ln691_221_fu_2363_p1 = mul_ln1345_225_reg_4988;

assign sext_ln691_222_fu_4228_p1 = $signed(add_ln691_reg_5658);

assign sext_ln691_223_fu_2378_p1 = $signed(add_ln691_222_fu_2372_p2);

assign sext_ln691_224_fu_2388_p1 = $signed(add_ln691_223_fu_2382_p2);

assign sext_ln691_225_fu_4236_p1 = $signed(add_ln691_224_reg_5663);

assign sext_ln691_226_fu_2398_p1 = mul_ln1345_226_reg_4998;

assign sext_ln691_227_fu_2423_p1 = mul_ln1345_231_reg_5048;

assign sext_ln691_228_fu_4245_p1 = $signed(add_ln691_226_reg_5673);

assign sext_ln691_229_fu_2438_p1 = $signed(add_ln691_228_fu_2432_p2);

assign sext_ln691_230_fu_2448_p1 = $signed(add_ln691_229_fu_2442_p2);

assign sext_ln691_231_fu_4253_p1 = $signed(add_ln691_230_reg_5678);

assign sext_ln691_232_fu_2458_p1 = mul_ln1345_232_reg_5058;

assign sext_ln691_233_fu_2483_p1 = mul_ln1345_237_reg_5108;

assign sext_ln691_234_fu_4262_p1 = $signed(add_ln691_232_reg_5688);

assign sext_ln691_235_fu_2498_p1 = $signed(add_ln691_234_fu_2492_p2);

assign sext_ln691_236_fu_2508_p1 = $signed(add_ln691_235_fu_2502_p2);

assign sext_ln691_237_fu_4270_p1 = $signed(add_ln691_236_reg_5693);

assign sext_ln691_238_fu_2518_p1 = mul_ln1345_238_reg_5118;

assign sext_ln691_239_fu_2543_p1 = mul_ln1345_243_reg_5168;

assign sext_ln691_240_fu_4279_p1 = $signed(add_ln691_238_reg_5703);

assign sext_ln691_241_fu_2558_p1 = $signed(add_ln691_240_fu_2552_p2);

assign sext_ln691_242_fu_2568_p1 = $signed(add_ln691_241_fu_2562_p2);

assign sext_ln691_243_fu_4287_p1 = $signed(add_ln691_242_reg_5708);

assign sext_ln691_244_fu_2578_p1 = mul_ln1345_244_reg_5178;

assign sext_ln691_245_fu_2603_p1 = mul_ln1345_249_reg_5228;

assign sext_ln691_246_fu_4296_p1 = $signed(add_ln691_244_reg_5718);

assign sext_ln691_247_fu_2618_p1 = $signed(add_ln691_246_fu_2612_p2);

assign sext_ln691_248_fu_2628_p1 = $signed(add_ln691_247_fu_2622_p2);

assign sext_ln691_249_fu_4304_p1 = $signed(add_ln691_248_reg_5723);

assign sext_ln691_250_fu_2638_p1 = mul_ln1345_250_reg_5238;

assign sext_ln691_251_fu_2663_p1 = mul_ln1345_255_reg_5288;

assign sext_ln691_252_fu_4313_p1 = $signed(add_ln691_250_reg_5733);

assign sext_ln691_253_fu_2678_p1 = $signed(add_ln691_252_fu_2672_p2);

assign sext_ln691_254_fu_2688_p1 = $signed(add_ln691_253_fu_2682_p2);

assign sext_ln691_255_fu_4321_p1 = $signed(add_ln691_254_reg_5738);

assign sext_ln691_256_fu_2698_p1 = mul_ln1345_256_reg_5298;

assign sext_ln691_257_fu_2723_p1 = mul_ln1345_261_reg_5348;

assign sext_ln691_258_fu_4330_p1 = $signed(add_ln691_256_reg_5748);

assign sext_ln691_259_fu_2738_p1 = $signed(add_ln691_258_fu_2732_p2);

assign sext_ln691_260_fu_2748_p1 = $signed(add_ln691_259_fu_2742_p2);

assign sext_ln691_261_fu_4338_p1 = $signed(add_ln691_260_reg_5753);

assign sext_ln691_262_fu_2758_p1 = mul_ln1345_262_reg_5358;

assign sext_ln691_263_fu_2783_p1 = mul_ln1345_267_reg_5408;

assign sext_ln691_264_fu_4347_p1 = $signed(add_ln691_262_reg_5763);

assign sext_ln691_265_fu_2798_p1 = $signed(add_ln691_264_fu_2792_p2);

assign sext_ln691_266_fu_2808_p1 = $signed(add_ln691_265_fu_2802_p2);

assign sext_ln691_267_fu_4355_p1 = $signed(add_ln691_266_reg_5768);

assign sext_ln691_268_fu_2818_p1 = mul_ln1345_268_reg_5418;

assign sext_ln691_269_fu_2843_p1 = mul_ln1345_273_reg_5468;

assign sext_ln691_270_fu_4364_p1 = $signed(add_ln691_268_reg_5778);

assign sext_ln691_271_fu_2858_p1 = $signed(add_ln691_270_fu_2852_p2);

assign sext_ln691_272_fu_2868_p1 = $signed(add_ln691_271_fu_2862_p2);

assign sext_ln691_273_fu_4372_p1 = $signed(add_ln691_272_reg_5783);

assign sext_ln691_274_fu_2878_p1 = mul_ln1345_274_reg_5478;

assign sext_ln691_275_fu_2903_p1 = mul_ln1345_279_reg_5528;

assign sext_ln691_276_fu_4381_p1 = $signed(add_ln691_274_reg_5793);

assign sext_ln691_277_fu_2918_p1 = $signed(add_ln691_276_fu_2912_p2);

assign sext_ln691_278_fu_2928_p1 = $signed(add_ln691_277_fu_2922_p2);

assign sext_ln691_279_fu_4389_p1 = $signed(add_ln691_278_reg_5798);

assign sext_ln691_280_fu_2938_p1 = mul_ln1345_280_reg_5538;

assign sext_ln691_281_fu_2963_p1 = mul_ln1345_285_reg_5588;

assign sext_ln691_282_fu_4398_p1 = $signed(add_ln691_280_reg_5808);

assign sext_ln691_283_fu_2978_p1 = $signed(add_ln691_282_fu_2972_p2);

assign sext_ln691_284_fu_2988_p1 = $signed(add_ln691_283_fu_2982_p2);

assign sext_ln691_285_fu_4406_p1 = $signed(add_ln691_284_reg_5813);

assign sext_ln691_286_fu_2998_p1 = mul_ln1345_286_reg_5598;

assign sext_ln691_287_fu_3023_p1 = mul_ln1345_291_reg_5648;

assign sext_ln691_288_fu_4415_p1 = $signed(add_ln691_286_reg_5823);

assign sext_ln691_289_fu_3038_p1 = $signed(add_ln691_288_fu_3032_p2);

assign sext_ln691_290_fu_3048_p1 = $signed(add_ln691_289_fu_3042_p2);

assign sext_ln691_291_fu_4423_p1 = $signed(add_ln691_290_reg_5828);

assign sext_ln691_292_fu_3066_p1 = mul_ln1345_292_fu_3061_p2;

assign sext_ln691_293_fu_3136_p1 = mul_ln1345_297_fu_3131_p2;

assign sext_ln691_294_fu_4432_p1 = $signed(add_ln691_292_reg_5838);

assign sext_ln691_295_fu_3152_p1 = $signed(add_ln691_294_fu_3146_p2);

assign sext_ln691_296_fu_3162_p1 = $signed(add_ln691_295_fu_3156_p2);

assign sext_ln691_297_fu_4440_p1 = $signed(add_ln691_296_reg_5843);

assign sext_ln691_298_fu_3177_p1 = mul_ln1345_298_fu_3172_p2;

assign sext_ln691_299_fu_3232_p1 = mul_ln1345_303_fu_3227_p2;

assign sext_ln691_300_fu_4449_p1 = $signed(add_ln691_298_reg_5853);

assign sext_ln691_301_fu_3248_p1 = $signed(add_ln691_300_fu_3242_p2);

assign sext_ln691_302_fu_3258_p1 = $signed(add_ln691_301_fu_3252_p2);

assign sext_ln691_303_fu_4457_p1 = $signed(add_ln691_302_reg_5858);

assign sext_ln691_304_fu_3273_p1 = mul_ln1345_304_fu_3268_p2;

assign sext_ln691_305_fu_3328_p1 = mul_ln1345_309_fu_3323_p2;

assign sext_ln691_306_fu_4466_p1 = $signed(add_ln691_304_reg_5868);

assign sext_ln691_307_fu_3344_p1 = $signed(add_ln691_306_fu_3338_p2);

assign sext_ln691_308_fu_3354_p1 = $signed(add_ln691_307_fu_3348_p2);

assign sext_ln691_309_fu_4474_p1 = $signed(add_ln691_308_reg_5873);

assign sext_ln691_310_fu_3369_p1 = mul_ln1345_310_fu_3364_p2;

assign sext_ln691_311_fu_3424_p1 = mul_ln1345_315_fu_3419_p2;

assign sext_ln691_312_fu_4483_p1 = $signed(add_ln691_310_reg_5883);

assign sext_ln691_313_fu_3440_p1 = $signed(add_ln691_312_fu_3434_p2);

assign sext_ln691_314_fu_3450_p1 = $signed(add_ln691_313_fu_3444_p2);

assign sext_ln691_315_fu_4491_p1 = $signed(add_ln691_314_reg_5888);

assign sext_ln691_316_fu_3465_p1 = mul_ln1345_316_fu_3460_p2;

assign sext_ln691_317_fu_3520_p1 = mul_ln1345_321_fu_3515_p2;

assign sext_ln691_318_fu_4500_p1 = $signed(add_ln691_316_reg_5898);

assign sext_ln691_319_fu_3536_p1 = $signed(add_ln691_318_fu_3530_p2);

assign sext_ln691_320_fu_3546_p1 = $signed(add_ln691_319_fu_3540_p2);

assign sext_ln691_321_fu_4508_p1 = $signed(add_ln691_320_reg_5903);

assign sext_ln691_322_fu_3561_p1 = mul_ln1345_322_fu_3556_p2;

assign sext_ln691_323_fu_3616_p1 = mul_ln1345_327_fu_3611_p2;

assign sext_ln691_324_fu_4517_p1 = $signed(add_ln691_322_reg_5913);

assign sext_ln691_325_fu_3632_p1 = $signed(add_ln691_324_fu_3626_p2);

assign sext_ln691_326_fu_3642_p1 = $signed(add_ln691_325_fu_3636_p2);

assign sext_ln691_327_fu_4525_p1 = $signed(add_ln691_326_reg_5918);

assign sext_ln691_328_fu_3657_p1 = mul_ln1345_328_fu_3652_p2;

assign sext_ln691_329_fu_3712_p1 = mul_ln1345_333_fu_3707_p2;

assign sext_ln691_330_fu_4534_p1 = $signed(add_ln691_328_reg_5928);

assign sext_ln691_331_fu_3728_p1 = $signed(add_ln691_330_fu_3722_p2);

assign sext_ln691_332_fu_3738_p1 = $signed(add_ln691_331_fu_3732_p2);

assign sext_ln691_333_fu_4542_p1 = $signed(add_ln691_332_reg_5933);

assign sext_ln691_334_fu_3753_p1 = mul_ln1345_334_fu_3748_p2;

assign sext_ln691_335_fu_3808_p1 = mul_ln1345_339_fu_3803_p2;

assign sext_ln691_336_fu_4551_p1 = $signed(add_ln691_334_reg_5943);

assign sext_ln691_337_fu_3824_p1 = $signed(add_ln691_336_fu_3818_p2);

assign sext_ln691_338_fu_3834_p1 = $signed(add_ln691_337_fu_3828_p2);

assign sext_ln691_339_fu_4559_p1 = $signed(add_ln691_338_reg_5948);

assign sext_ln691_340_fu_3849_p1 = mul_ln1345_340_fu_3844_p2;

assign sext_ln691_341_fu_3904_p1 = mul_ln1345_345_fu_3899_p2;

assign sext_ln691_342_fu_4568_p1 = $signed(add_ln691_340_reg_5958);

assign sext_ln691_343_fu_3920_p1 = $signed(add_ln691_342_fu_3914_p2);

assign sext_ln691_344_fu_3930_p1 = $signed(add_ln691_343_fu_3924_p2);

assign sext_ln691_345_fu_4576_p1 = $signed(add_ln691_344_reg_5963);

assign sext_ln691_346_fu_3945_p1 = mul_ln1345_346_fu_3940_p2;

assign sext_ln691_347_fu_4000_p1 = mul_ln1345_351_fu_3995_p2;

assign sext_ln691_348_fu_4585_p1 = $signed(add_ln691_346_reg_5973);

assign sext_ln691_349_fu_4016_p1 = $signed(add_ln691_348_fu_4010_p2);

assign sext_ln691_350_fu_4026_p1 = $signed(add_ln691_349_fu_4020_p2);

assign sext_ln691_351_fu_4593_p1 = $signed(add_ln691_350_reg_5978);

assign sext_ln691_352_fu_4041_p1 = mul_ln1345_352_fu_4036_p2;

assign sext_ln691_353_fu_4096_p1 = mul_ln1345_357_fu_4091_p2;

assign sext_ln691_354_fu_4602_p1 = $signed(add_ln691_352_reg_5988);

assign sext_ln691_355_fu_4112_p1 = $signed(add_ln691_354_fu_4106_p2);

assign sext_ln691_356_fu_4122_p1 = $signed(add_ln691_355_fu_4116_p2);

assign sext_ln691_357_fu_4610_p1 = $signed(add_ln691_356_reg_5993);

assign sext_ln691_358_fu_4137_p1 = mul_ln1345_358_fu_4132_p2;

assign sext_ln691_359_fu_4192_p1 = mul_ln1345_363_fu_4187_p2;

assign sext_ln691_360_fu_4619_p1 = $signed(add_ln691_358_reg_6003);

assign sext_ln691_361_fu_4208_p1 = $signed(add_ln691_360_fu_4202_p2);

assign sext_ln691_362_fu_4218_p1 = $signed(add_ln691_361_fu_4212_p2);

assign sext_ln691_363_fu_4627_p1 = $signed(add_ln691_362_reg_6008);

assign sext_ln691_fu_2344_p1 = mul_ln1345_reg_4938;

assign start_out = real_start;

assign tmp_213_fu_898_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[74:72]}};

assign tmp_214_fu_922_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[110:108]}};

assign tmp_215_fu_946_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[146:144]}};

assign tmp_216_fu_970_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[182:180]}};

assign tmp_217_fu_994_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[5:3]}};

assign tmp_219_fu_1014_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[41:39]}};

assign tmp_220_fu_1034_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[77:75]}};

assign tmp_221_fu_1054_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[113:111]}};

assign tmp_222_fu_1074_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[149:147]}};

assign tmp_223_fu_1094_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[185:183]}};

assign tmp_224_fu_1114_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[8:6]}};

assign tmp_226_fu_1134_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[44:42]}};

assign tmp_227_fu_1154_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[80:78]}};

assign tmp_228_fu_1174_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[116:114]}};

assign tmp_229_fu_1194_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[152:150]}};

assign tmp_230_fu_1214_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[188:186]}};

assign tmp_231_fu_1234_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[11:9]}};

assign tmp_233_fu_1254_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[47:45]}};

assign tmp_234_fu_1274_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[83:81]}};

assign tmp_235_fu_1294_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[119:117]}};

assign tmp_236_fu_1314_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[155:153]}};

assign tmp_237_fu_1334_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[191:189]}};

assign tmp_238_fu_1354_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[14:12]}};

assign tmp_240_fu_1374_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[50:48]}};

assign tmp_241_fu_1394_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[86:84]}};

assign tmp_242_fu_1414_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[122:120]}};

assign tmp_243_fu_1434_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[158:156]}};

assign tmp_244_fu_1454_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[194:192]}};

assign tmp_245_fu_1474_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[17:15]}};

assign tmp_247_fu_1494_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[53:51]}};

assign tmp_248_fu_1514_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[89:87]}};

assign tmp_249_fu_1534_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[125:123]}};

assign tmp_250_fu_1554_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[161:159]}};

assign tmp_251_fu_1574_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[197:195]}};

assign tmp_252_fu_1594_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[20:18]}};

assign tmp_254_fu_1614_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[56:54]}};

assign tmp_255_fu_1634_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[92:90]}};

assign tmp_256_fu_1654_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[128:126]}};

assign tmp_257_fu_1674_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[164:162]}};

assign tmp_258_fu_1694_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[200:198]}};

assign tmp_259_fu_1714_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[23:21]}};

assign tmp_261_fu_1734_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[59:57]}};

assign tmp_262_fu_1754_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[95:93]}};

assign tmp_263_fu_1774_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[131:129]}};

assign tmp_264_fu_1794_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[167:165]}};

assign tmp_265_fu_1814_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[203:201]}};

assign tmp_266_fu_1834_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[26:24]}};

assign tmp_268_fu_1854_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[62:60]}};

assign tmp_269_fu_1874_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[98:96]}};

assign tmp_270_fu_1894_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[134:132]}};

assign tmp_271_fu_1914_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[170:168]}};

assign tmp_272_fu_1934_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[206:204]}};

assign tmp_273_fu_1954_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[29:27]}};

assign tmp_275_fu_1974_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[65:63]}};

assign tmp_276_fu_1994_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[101:99]}};

assign tmp_277_fu_2014_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[137:135]}};

assign tmp_278_fu_2034_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[173:171]}};

assign tmp_279_fu_2054_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[209:207]}};

assign tmp_280_fu_2074_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[32:30]}};

assign tmp_282_fu_2094_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[68:66]}};

assign tmp_283_fu_2114_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[104:102]}};

assign tmp_284_fu_2134_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[140:138]}};

assign tmp_285_fu_2154_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[176:174]}};

assign tmp_286_fu_2174_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[212:210]}};

assign tmp_287_fu_2194_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[35:33]}};

assign tmp_289_fu_2214_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[71:69]}};

assign tmp_290_fu_2234_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[107:105]}};

assign tmp_291_fu_2254_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[143:141]}};

assign tmp_292_fu_2274_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[179:177]}};

assign tmp_293_fu_2294_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[215:213]}};

assign tmp_306_fu_4636_p25 = {{{{{{{{{{{{{{{{{{{{{{{{add_ln691_363_fu_4630_p2}, {add_ln691_357_fu_4613_p2}}, {add_ln691_351_fu_4596_p2}}, {add_ln691_345_fu_4579_p2}}, {add_ln691_339_fu_4562_p2}}, {add_ln691_333_fu_4545_p2}}, {add_ln691_327_fu_4528_p2}}, {add_ln691_321_fu_4511_p2}}, {add_ln691_315_fu_4494_p2}}, {add_ln691_309_fu_4477_p2}}, {add_ln691_303_fu_4460_p2}}, {add_ln691_297_fu_4443_p2}}, {add_ln691_291_fu_4426_p2}}, {add_ln691_285_fu_4409_p2}}, {add_ln691_279_fu_4392_p2}}, {add_ln691_273_fu_4375_p2}}, {add_ln691_267_fu_4358_p2}}, {add_ln691_261_fu_4341_p2}}, {add_ln691_255_fu_4324_p2}}, {add_ln691_249_fu_4307_p2}}, {add_ln691_243_fu_4290_p2}}, {add_ln691_237_fu_4273_p2}}, {add_ln691_231_fu_4256_p2}}, {add_ln691_225_fu_4239_p2}};

assign tmp_307_fu_4693_p48 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_363_fu_4630_p2}, {5'd0}}, {add_ln691_357_fu_4613_p2}}, {5'd0}}, {add_ln691_351_fu_4596_p2}}, {5'd0}}, {add_ln691_345_fu_4579_p2}}, {5'd0}}, {add_ln691_339_fu_4562_p2}}, {5'd0}}, {add_ln691_333_fu_4545_p2}}, {5'd0}}, {add_ln691_327_fu_4528_p2}}, {5'd0}}, {add_ln691_321_fu_4511_p2}}, {5'd0}}, {add_ln691_315_fu_4494_p2}}, {5'd0}}, {add_ln691_309_fu_4477_p2}}, {5'd0}}, {add_ln691_303_fu_4460_p2}}, {5'd0}}, {add_ln691_297_fu_4443_p2}}, {5'd0}}, {add_ln691_291_fu_4426_p2}}, {5'd0}}, {add_ln691_285_fu_4409_p2}}, {5'd0}}, {add_ln691_279_fu_4392_p2}}, {5'd0}}, {add_ln691_273_fu_4375_p2}}, {5'd0}}, {add_ln691_267_fu_4358_p2}}, {5'd0}}, {add_ln691_261_fu_4341_p2}}, {5'd0}}, {add_ln691_255_fu_4324_p2}}, {5'd0}}, {add_ln691_249_fu_4307_p2}}, {5'd0}}, {add_ln691_243_fu_4290_p2}}, {5'd0}}, {add_ln691_237_fu_4273_p2}}, {5'd0}}, {add_ln691_231_fu_4256_p2}}, {5'd0}}, {add_ln691_225_fu_4239_p2}};

assign tmp_cast_fu_685_p3 = {{select_ln121_1_fu_678_p3}, {5'd0}};

assign tmp_s_fu_874_p4 = {{attn_inst_matmul_gen_k_weight_arr_V_q0[38:36]}};

assign trunc_ln145_105_fu_756_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_106_fu_766_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_107_fu_776_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_108_fu_786_p4 = {{cache_window_sm_dout[42:40]}};

assign trunc_ln145_fu_742_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_746_p4 = {{cache_window_sm_dout[10:8]}};

assign trunc_ln215_1_fu_667_p1 = cot_reg_571[3:0];

assign trunc_ln215_2_fu_856_p1 = attn_inst_matmul_gen_k_weight_arr_V_q0[2:0];

assign trunc_ln215_fu_663_p1 = add_ln121_fu_658_p2[3:0];

assign trunc_ln691_fu_2347_p1 = select_ln126_fu_2337_p3[10:0];

assign vec_o_data_M_elems_V_fu_2329_p3 = {{select_ln121_2_fu_2322_p3}, {select_ln121_2_fu_2322_p3}};

assign xor_ln120_fu_614_p2 = (icmp_ln121_fu_600_p2 ^ 1'd1);

assign zext_ln121_1_fu_738_p1 = add_ln121_reg_4849;

assign zext_ln121_fu_729_p1 = cot_reg_571;

assign zext_ln215_1_fu_734_p1 = add_ln215_reg_4859;

assign zext_ln215_fu_699_p1 = select_ln121_reg_4831;

endmodule //ATTN0_matmul_step2_mac141
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 132;
parameter AWIDTH = 4;
parameter MEM_SIZE = 16;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd132;
parameter AddressRange = 32'd16;
parameter AddressWidth = 32'd4;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V_rom ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_bias_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "block" *) module ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 216;
parameter AWIDTH = 9;
parameter MEM_SIZE = 512;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd216;
parameter AddressRange = 32'd512;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V_rom ATTN0_matmul_step2_mac141_attn_inst_matmul_gen_k_weight_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac152 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [223:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2015;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2370;
reg   [15:0] indvar_flatten13_reg_269;
reg   [9:0] indvar_flatten_reg_280;
reg   [4:0] cit_reg_291;
wire   [15:0] add_ln336_fu_302_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_308_p2;
reg   [0:0] icmp_ln336_reg_2015_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_314_p2;
reg   [0:0] icmp_ln337_reg_2019;
wire   [9:0] select_ln337_4_fu_326_p3;
wire   [4:0] select_ln337_fu_356_p3;
reg   [4:0] select_ln337_reg_2030;
wire   [0:0] icmp_ln342_fu_364_p2;
reg   [0:0] icmp_ln342_reg_2035;
reg   [2:0] trunc_ln145_72_reg_2040;
reg   [2:0] trunc_ln145_76_reg_2045;
reg   [2:0] trunc_ln145_78_reg_2050;
reg   [2:0] trunc_ln145_82_reg_2055;
reg   [2:0] trunc_ln145_86_reg_2060;
reg   [2:0] trunc_ln145_90_reg_2065;
reg   [2:0] trunc_ln145_94_reg_2070;
reg   [2:0] trunc_ln145_98_reg_2075;
reg   [2:0] trunc_ln145_102_reg_2080;
wire  signed [5:0] mul_ln1345_fu_726_p2;
reg  signed [5:0] mul_ln1345_reg_2085;
wire  signed [5:0] mul_ln1345_167_fu_740_p2;
reg  signed [5:0] mul_ln1345_167_reg_2090;
wire  signed [5:0] mul_ln1345_168_fu_754_p2;
reg  signed [5:0] mul_ln1345_168_reg_2095;
wire  signed [5:0] mul_ln1345_169_fu_764_p2;
reg  signed [5:0] mul_ln1345_169_reg_2100;
wire  signed [5:0] mul_ln1345_171_fu_774_p2;
reg  signed [5:0] mul_ln1345_171_reg_2105;
wire  signed [5:0] mul_ln1345_172_fu_784_p2;
reg  signed [5:0] mul_ln1345_172_reg_2110;
wire  signed [5:0] mul_ln1345_173_fu_794_p2;
reg  signed [5:0] mul_ln1345_173_reg_2115;
wire  signed [5:0] mul_ln1345_175_fu_804_p2;
reg  signed [5:0] mul_ln1345_175_reg_2120;
wire  signed [5:0] mul_ln1345_176_fu_814_p2;
reg  signed [5:0] mul_ln1345_176_reg_2125;
wire  signed [5:0] mul_ln1345_177_fu_824_p2;
reg  signed [5:0] mul_ln1345_177_reg_2130;
wire  signed [5:0] mul_ln1345_179_fu_834_p2;
reg  signed [5:0] mul_ln1345_179_reg_2135;
wire  signed [5:0] mul_ln1345_180_fu_844_p2;
reg  signed [5:0] mul_ln1345_180_reg_2140;
wire  signed [5:0] mul_ln1345_181_fu_854_p2;
reg  signed [5:0] mul_ln1345_181_reg_2145;
wire  signed [5:0] mul_ln1345_183_fu_864_p2;
reg  signed [5:0] mul_ln1345_183_reg_2150;
wire  signed [5:0] mul_ln1345_184_fu_874_p2;
reg  signed [5:0] mul_ln1345_184_reg_2155;
wire  signed [5:0] mul_ln1345_185_fu_884_p2;
reg  signed [5:0] mul_ln1345_185_reg_2160;
wire  signed [5:0] mul_ln1345_187_fu_894_p2;
reg  signed [5:0] mul_ln1345_187_reg_2165;
wire  signed [5:0] mul_ln1345_188_fu_904_p2;
reg  signed [5:0] mul_ln1345_188_reg_2170;
wire  signed [5:0] mul_ln1345_189_fu_914_p2;
reg  signed [5:0] mul_ln1345_189_reg_2175;
wire  signed [5:0] mul_ln1345_191_fu_924_p2;
reg  signed [5:0] mul_ln1345_191_reg_2180;
wire  signed [5:0] mul_ln1345_192_fu_934_p2;
reg  signed [5:0] mul_ln1345_192_reg_2185;
wire  signed [5:0] mul_ln1345_193_fu_944_p2;
reg  signed [5:0] mul_ln1345_193_reg_2190;
wire  signed [5:0] mul_ln1345_195_fu_954_p2;
reg  signed [5:0] mul_ln1345_195_reg_2195;
wire  signed [5:0] mul_ln1345_196_fu_964_p2;
reg  signed [5:0] mul_ln1345_196_reg_2200;
wire  signed [5:0] mul_ln1345_197_fu_970_p2;
reg  signed [5:0] mul_ln1345_197_reg_2205;
wire  signed [5:0] mul_ln1345_199_fu_976_p2;
reg  signed [5:0] mul_ln1345_199_reg_2210;
wire  signed [5:0] mul_ln1345_200_fu_982_p2;
reg  signed [5:0] mul_ln1345_200_reg_2215;
wire  signed [5:0] mul_ln1345_201_fu_988_p2;
reg  signed [5:0] mul_ln1345_201_reg_2220;
wire  signed [5:0] mul_ln1345_203_fu_994_p2;
reg  signed [5:0] mul_ln1345_203_reg_2225;
wire  signed [5:0] mul_ln1345_204_fu_1000_p2;
reg  signed [5:0] mul_ln1345_204_reg_2230;
wire  signed [5:0] mul_ln1345_205_fu_1006_p2;
reg  signed [5:0] mul_ln1345_205_reg_2235;
wire  signed [5:0] mul_ln1345_207_fu_1012_p2;
reg  signed [5:0] mul_ln1345_207_reg_2240;
wire  signed [5:0] mul_ln1345_208_fu_1018_p2;
reg  signed [5:0] mul_ln1345_208_reg_2245;
wire  signed [5:0] mul_ln1345_209_fu_1024_p2;
reg  signed [5:0] mul_ln1345_209_reg_2250;
wire  signed [5:0] mul_ln1345_211_fu_1030_p2;
reg  signed [5:0] mul_ln1345_211_reg_2255;
wire  signed [5:0] mul_ln1345_212_fu_1036_p2;
reg  signed [5:0] mul_ln1345_212_reg_2260;
wire  signed [5:0] mul_ln1345_213_fu_1042_p2;
reg  signed [5:0] mul_ln1345_213_reg_2265;
wire  signed [5:0] mul_ln1345_215_fu_1048_p2;
reg  signed [5:0] mul_ln1345_215_reg_2270;
wire  signed [5:0] mul_ln1345_216_fu_1054_p2;
reg  signed [5:0] mul_ln1345_216_reg_2275;
wire  signed [5:0] mul_ln1345_217_fu_1060_p2;
reg  signed [5:0] mul_ln1345_217_reg_2280;
wire  signed [5:0] mul_ln1345_219_fu_1066_p2;
reg  signed [5:0] mul_ln1345_219_reg_2285;
wire  signed [5:0] mul_ln1345_220_fu_1072_p2;
reg  signed [5:0] mul_ln1345_220_reg_2290;
wire   [4:0] cit_4_fu_1078_p2;
wire   [9:0] add_ln691_168_fu_1145_p2;
reg   [9:0] add_ln691_168_reg_2300;
wire   [9:0] add_ln691_172_fu_1205_p2;
reg   [9:0] add_ln691_172_reg_2305;
wire   [9:0] add_ln691_176_fu_1265_p2;
reg   [9:0] add_ln691_176_reg_2310;
wire   [9:0] add_ln691_180_fu_1325_p2;
reg   [9:0] add_ln691_180_reg_2315;
wire   [9:0] add_ln691_184_fu_1385_p2;
reg   [9:0] add_ln691_184_reg_2320;
wire   [9:0] add_ln691_188_fu_1445_p2;
reg   [9:0] add_ln691_188_reg_2325;
wire   [9:0] add_ln691_192_fu_1505_p2;
reg   [9:0] add_ln691_192_reg_2330;
wire   [9:0] add_ln691_196_fu_1565_p2;
reg   [9:0] add_ln691_196_reg_2335;
wire   [9:0] add_ln691_200_fu_1622_p2;
reg   [9:0] add_ln691_200_reg_2340;
wire   [9:0] add_ln691_204_fu_1679_p2;
reg   [9:0] add_ln691_204_reg_2345;
wire   [9:0] add_ln691_208_fu_1736_p2;
reg   [9:0] add_ln691_208_reg_2350;
wire   [9:0] add_ln691_212_fu_1793_p2;
reg   [9:0] add_ln691_212_reg_2355;
wire   [9:0] add_ln691_216_fu_1850_p2;
reg   [9:0] add_ln691_216_reg_2360;
wire   [9:0] add_ln691_220_fu_1907_p2;
reg   [9:0] add_ln691_220_reg_2365;
wire   [0:0] icmp_ln378_fu_1945_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [139:0] vec_o_data_M_elems_V_2_fu_246;
wire   [139:0] tmp_211_fu_1913_p15;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_320_p2;
wire   [0:0] icmp_ln338_fu_339_p2;
wire   [0:0] xor_ln336_fu_334_p2;
wire   [0:0] and_ln336_fu_345_p2;
wire   [0:0] or_ln337_fu_351_p2;
wire   [2:0] trunc_ln145_fu_370_p1;
wire   [2:0] trunc_ln145_51_fu_444_p1;
wire  signed [2:0] mul_ln1345_fu_726_p0;
wire  signed [5:0] sext_ln1345_90_fu_722_p1;
wire  signed [2:0] mul_ln1345_fu_726_p1;
wire  signed [5:0] sext_ln1345_fu_718_p1;
wire   [2:0] trunc_ln145_73_fu_384_p4;
wire   [2:0] trunc_ln145_79_fu_458_p4;
wire  signed [2:0] mul_ln1345_167_fu_740_p0;
wire  signed [5:0] sext_ln1345_94_fu_736_p1;
wire  signed [2:0] mul_ln1345_167_fu_740_p1;
wire  signed [5:0] sext_ln1345_93_fu_732_p1;
wire   [2:0] trunc_ln145_74_fu_394_p4;
wire   [2:0] trunc_ln145_80_fu_468_p4;
wire  signed [2:0] mul_ln1345_168_fu_754_p0;
wire  signed [5:0] sext_ln1345_96_fu_750_p1;
wire  signed [2:0] mul_ln1345_168_fu_754_p1;
wire  signed [5:0] sext_ln1345_95_fu_746_p1;
wire   [2:0] trunc_ln145_81_fu_478_p4;
wire  signed [2:0] mul_ln1345_169_fu_764_p0;
wire  signed [5:0] sext_ln1345_97_fu_760_p1;
wire  signed [2:0] mul_ln1345_169_fu_764_p1;
wire   [2:0] trunc_ln145_83_fu_498_p4;
wire  signed [2:0] mul_ln1345_171_fu_774_p0;
wire  signed [5:0] sext_ln1345_99_fu_770_p1;
wire  signed [2:0] mul_ln1345_171_fu_774_p1;
wire   [2:0] trunc_ln145_84_fu_508_p4;
wire  signed [2:0] mul_ln1345_172_fu_784_p0;
wire  signed [5:0] sext_ln1345_100_fu_780_p1;
wire  signed [2:0] mul_ln1345_172_fu_784_p1;
wire   [2:0] trunc_ln145_85_fu_518_p4;
wire  signed [2:0] mul_ln1345_173_fu_794_p0;
wire  signed [5:0] sext_ln1345_101_fu_790_p1;
wire  signed [2:0] mul_ln1345_173_fu_794_p1;
wire   [2:0] trunc_ln145_87_fu_538_p4;
wire  signed [2:0] mul_ln1345_175_fu_804_p0;
wire  signed [5:0] sext_ln1345_103_fu_800_p1;
wire  signed [2:0] mul_ln1345_175_fu_804_p1;
wire   [2:0] trunc_ln145_88_fu_548_p4;
wire  signed [2:0] mul_ln1345_176_fu_814_p0;
wire  signed [5:0] sext_ln1345_104_fu_810_p1;
wire  signed [2:0] mul_ln1345_176_fu_814_p1;
wire   [2:0] trunc_ln145_89_fu_558_p4;
wire  signed [2:0] mul_ln1345_177_fu_824_p0;
wire  signed [5:0] sext_ln1345_105_fu_820_p1;
wire  signed [2:0] mul_ln1345_177_fu_824_p1;
wire   [2:0] trunc_ln145_91_fu_578_p4;
wire  signed [2:0] mul_ln1345_179_fu_834_p0;
wire  signed [5:0] sext_ln1345_107_fu_830_p1;
wire  signed [2:0] mul_ln1345_179_fu_834_p1;
wire   [2:0] trunc_ln145_92_fu_588_p4;
wire  signed [2:0] mul_ln1345_180_fu_844_p0;
wire  signed [5:0] sext_ln1345_108_fu_840_p1;
wire  signed [2:0] mul_ln1345_180_fu_844_p1;
wire   [2:0] trunc_ln145_93_fu_598_p4;
wire  signed [2:0] mul_ln1345_181_fu_854_p0;
wire  signed [5:0] sext_ln1345_109_fu_850_p1;
wire  signed [2:0] mul_ln1345_181_fu_854_p1;
wire   [2:0] trunc_ln145_95_fu_618_p4;
wire  signed [2:0] mul_ln1345_183_fu_864_p0;
wire  signed [5:0] sext_ln1345_111_fu_860_p1;
wire  signed [2:0] mul_ln1345_183_fu_864_p1;
wire   [2:0] trunc_ln145_96_fu_628_p4;
wire  signed [2:0] mul_ln1345_184_fu_874_p0;
wire  signed [5:0] sext_ln1345_112_fu_870_p1;
wire  signed [2:0] mul_ln1345_184_fu_874_p1;
wire   [2:0] trunc_ln145_97_fu_638_p4;
wire  signed [2:0] mul_ln1345_185_fu_884_p0;
wire  signed [5:0] sext_ln1345_113_fu_880_p1;
wire  signed [2:0] mul_ln1345_185_fu_884_p1;
wire   [2:0] trunc_ln145_99_fu_658_p4;
wire  signed [2:0] mul_ln1345_187_fu_894_p0;
wire  signed [5:0] sext_ln1345_115_fu_890_p1;
wire  signed [2:0] mul_ln1345_187_fu_894_p1;
wire   [2:0] trunc_ln145_100_fu_668_p4;
wire  signed [2:0] mul_ln1345_188_fu_904_p0;
wire  signed [5:0] sext_ln1345_116_fu_900_p1;
wire  signed [2:0] mul_ln1345_188_fu_904_p1;
wire   [2:0] trunc_ln145_101_fu_678_p4;
wire  signed [2:0] mul_ln1345_189_fu_914_p0;
wire  signed [5:0] sext_ln1345_117_fu_910_p1;
wire  signed [2:0] mul_ln1345_189_fu_914_p1;
wire   [2:0] trunc_ln145_103_fu_698_p4;
wire  signed [2:0] mul_ln1345_191_fu_924_p0;
wire  signed [5:0] sext_ln1345_119_fu_920_p1;
wire  signed [2:0] mul_ln1345_191_fu_924_p1;
wire   [2:0] trunc_ln145_104_fu_708_p4;
wire  signed [2:0] mul_ln1345_192_fu_934_p0;
wire  signed [5:0] sext_ln1345_120_fu_930_p1;
wire  signed [2:0] mul_ln1345_192_fu_934_p1;
wire   [2:0] trunc_ln145_75_fu_404_p4;
wire  signed [2:0] mul_ln1345_193_fu_944_p0;
wire  signed [2:0] mul_ln1345_193_fu_944_p1;
wire  signed [5:0] sext_ln1345_121_fu_940_p1;
wire   [2:0] trunc_ln145_77_fu_424_p4;
wire  signed [2:0] mul_ln1345_195_fu_954_p0;
wire  signed [2:0] mul_ln1345_195_fu_954_p1;
wire  signed [5:0] sext_ln1345_123_fu_950_p1;
wire   [2:0] trunc_ln145_s_fu_434_p4;
wire  signed [2:0] mul_ln1345_196_fu_964_p0;
wire  signed [2:0] mul_ln1345_196_fu_964_p1;
wire  signed [5:0] sext_ln1345_124_fu_960_p1;
wire  signed [2:0] mul_ln1345_197_fu_970_p0;
wire  signed [2:0] mul_ln1345_197_fu_970_p1;
wire  signed [2:0] mul_ln1345_199_fu_976_p0;
wire  signed [2:0] mul_ln1345_199_fu_976_p1;
wire  signed [2:0] mul_ln1345_200_fu_982_p0;
wire  signed [2:0] mul_ln1345_200_fu_982_p1;
wire  signed [2:0] mul_ln1345_201_fu_988_p0;
wire  signed [2:0] mul_ln1345_201_fu_988_p1;
wire  signed [2:0] mul_ln1345_203_fu_994_p0;
wire  signed [2:0] mul_ln1345_203_fu_994_p1;
wire  signed [2:0] mul_ln1345_204_fu_1000_p0;
wire  signed [2:0] mul_ln1345_204_fu_1000_p1;
wire  signed [2:0] mul_ln1345_205_fu_1006_p0;
wire  signed [2:0] mul_ln1345_205_fu_1006_p1;
wire  signed [2:0] mul_ln1345_207_fu_1012_p0;
wire  signed [2:0] mul_ln1345_207_fu_1012_p1;
wire  signed [2:0] mul_ln1345_208_fu_1018_p0;
wire  signed [2:0] mul_ln1345_208_fu_1018_p1;
wire  signed [2:0] mul_ln1345_209_fu_1024_p0;
wire  signed [2:0] mul_ln1345_209_fu_1024_p1;
wire  signed [2:0] mul_ln1345_211_fu_1030_p0;
wire  signed [2:0] mul_ln1345_211_fu_1030_p1;
wire  signed [2:0] mul_ln1345_212_fu_1036_p0;
wire  signed [2:0] mul_ln1345_212_fu_1036_p1;
wire  signed [2:0] mul_ln1345_213_fu_1042_p0;
wire  signed [2:0] mul_ln1345_213_fu_1042_p1;
wire  signed [2:0] mul_ln1345_215_fu_1048_p0;
wire  signed [2:0] mul_ln1345_215_fu_1048_p1;
wire  signed [2:0] mul_ln1345_216_fu_1054_p0;
wire  signed [2:0] mul_ln1345_216_fu_1054_p1;
wire  signed [2:0] mul_ln1345_217_fu_1060_p0;
wire  signed [2:0] mul_ln1345_217_fu_1060_p1;
wire  signed [2:0] mul_ln1345_219_fu_1066_p0;
wire  signed [2:0] mul_ln1345_219_fu_1066_p1;
wire  signed [2:0] mul_ln1345_220_fu_1072_p0;
wire  signed [2:0] mul_ln1345_220_fu_1072_p1;
wire   [139:0] select_ln342_fu_1087_p3;
wire  signed [2:0] mul_ln1345_166_fu_1107_p0;
wire  signed [5:0] sext_ln1345_92_fu_1104_p1;
wire  signed [2:0] mul_ln1345_166_fu_1107_p1;
wire  signed [5:0] sext_ln1345_91_fu_1101_p1;
wire  signed [5:0] mul_ln1345_166_fu_1107_p2;
wire   [9:0] trunc_ln691_fu_1097_p1;
wire  signed [9:0] sext_ln691_166_fu_1113_p1;
wire  signed [6:0] sext_ln691_fu_1094_p1;
wire  signed [6:0] sext_ln691_167_fu_1120_p1;
wire   [6:0] add_ln691_166_fu_1129_p2;
wire  signed [6:0] sext_ln368_fu_1117_p1;
wire   [6:0] add_ln691_167_fu_1135_p2;
wire  signed [9:0] sext_ln691_168_fu_1141_p1;
wire   [9:0] add_ln691_fu_1123_p2;
wire  signed [2:0] mul_ln1345_170_fu_1167_p0;
wire  signed [5:0] sext_ln1345_98_fu_1164_p1;
wire  signed [2:0] mul_ln1345_170_fu_1167_p1;
wire  signed [5:0] mul_ln1345_170_fu_1167_p2;
wire   [9:0] tmp_s_fu_1154_p4;
wire  signed [9:0] sext_ln691_170_fu_1173_p1;
wire  signed [6:0] sext_ln691_169_fu_1151_p1;
wire  signed [6:0] sext_ln691_171_fu_1180_p1;
wire   [6:0] add_ln691_170_fu_1189_p2;
wire  signed [6:0] sext_ln368_76_fu_1177_p1;
wire   [6:0] add_ln691_171_fu_1195_p2;
wire  signed [9:0] sext_ln691_172_fu_1201_p1;
wire   [9:0] add_ln691_169_fu_1183_p2;
wire  signed [2:0] mul_ln1345_174_fu_1227_p0;
wire  signed [5:0] sext_ln1345_102_fu_1224_p1;
wire  signed [2:0] mul_ln1345_174_fu_1227_p1;
wire  signed [5:0] mul_ln1345_174_fu_1227_p2;
wire   [9:0] tmp_199_fu_1214_p4;
wire  signed [9:0] sext_ln691_174_fu_1233_p1;
wire  signed [6:0] sext_ln691_173_fu_1211_p1;
wire  signed [6:0] sext_ln691_175_fu_1240_p1;
wire   [6:0] add_ln691_174_fu_1249_p2;
wire  signed [6:0] sext_ln368_77_fu_1237_p1;
wire   [6:0] add_ln691_175_fu_1255_p2;
wire  signed [9:0] sext_ln691_176_fu_1261_p1;
wire   [9:0] add_ln691_173_fu_1243_p2;
wire  signed [2:0] mul_ln1345_178_fu_1287_p0;
wire  signed [5:0] sext_ln1345_106_fu_1284_p1;
wire  signed [2:0] mul_ln1345_178_fu_1287_p1;
wire  signed [5:0] mul_ln1345_178_fu_1287_p2;
wire   [9:0] tmp_200_fu_1274_p4;
wire  signed [9:0] sext_ln691_178_fu_1293_p1;
wire  signed [6:0] sext_ln691_177_fu_1271_p1;
wire  signed [6:0] sext_ln691_179_fu_1300_p1;
wire   [6:0] add_ln691_178_fu_1309_p2;
wire  signed [6:0] sext_ln368_78_fu_1297_p1;
wire   [6:0] add_ln691_179_fu_1315_p2;
wire  signed [9:0] sext_ln691_180_fu_1321_p1;
wire   [9:0] add_ln691_177_fu_1303_p2;
wire  signed [2:0] mul_ln1345_182_fu_1347_p0;
wire  signed [5:0] sext_ln1345_110_fu_1344_p1;
wire  signed [2:0] mul_ln1345_182_fu_1347_p1;
wire  signed [5:0] mul_ln1345_182_fu_1347_p2;
wire   [9:0] tmp_201_fu_1334_p4;
wire  signed [9:0] sext_ln691_182_fu_1353_p1;
wire  signed [6:0] sext_ln691_181_fu_1331_p1;
wire  signed [6:0] sext_ln691_183_fu_1360_p1;
wire   [6:0] add_ln691_182_fu_1369_p2;
wire  signed [6:0] sext_ln368_79_fu_1357_p1;
wire   [6:0] add_ln691_183_fu_1375_p2;
wire  signed [9:0] sext_ln691_184_fu_1381_p1;
wire   [9:0] add_ln691_181_fu_1363_p2;
wire  signed [2:0] mul_ln1345_186_fu_1407_p0;
wire  signed [5:0] sext_ln1345_114_fu_1404_p1;
wire  signed [2:0] mul_ln1345_186_fu_1407_p1;
wire  signed [5:0] mul_ln1345_186_fu_1407_p2;
wire   [9:0] tmp_202_fu_1394_p4;
wire  signed [9:0] sext_ln691_186_fu_1413_p1;
wire  signed [6:0] sext_ln691_185_fu_1391_p1;
wire  signed [6:0] sext_ln691_187_fu_1420_p1;
wire   [6:0] add_ln691_186_fu_1429_p2;
wire  signed [6:0] sext_ln368_80_fu_1417_p1;
wire   [6:0] add_ln691_187_fu_1435_p2;
wire  signed [9:0] sext_ln691_188_fu_1441_p1;
wire   [9:0] add_ln691_185_fu_1423_p2;
wire  signed [2:0] mul_ln1345_190_fu_1467_p0;
wire  signed [5:0] sext_ln1345_118_fu_1464_p1;
wire  signed [2:0] mul_ln1345_190_fu_1467_p1;
wire  signed [5:0] mul_ln1345_190_fu_1467_p2;
wire   [9:0] tmp_203_fu_1454_p4;
wire  signed [9:0] sext_ln691_190_fu_1473_p1;
wire  signed [6:0] sext_ln691_189_fu_1451_p1;
wire  signed [6:0] sext_ln691_191_fu_1480_p1;
wire   [6:0] add_ln691_190_fu_1489_p2;
wire  signed [6:0] sext_ln368_81_fu_1477_p1;
wire   [6:0] add_ln691_191_fu_1495_p2;
wire  signed [9:0] sext_ln691_192_fu_1501_p1;
wire   [9:0] add_ln691_189_fu_1483_p2;
wire  signed [2:0] mul_ln1345_194_fu_1527_p0;
wire  signed [2:0] mul_ln1345_194_fu_1527_p1;
wire  signed [5:0] sext_ln1345_122_fu_1524_p1;
wire  signed [5:0] mul_ln1345_194_fu_1527_p2;
wire   [9:0] tmp_204_fu_1514_p4;
wire  signed [9:0] sext_ln691_194_fu_1533_p1;
wire  signed [6:0] sext_ln691_193_fu_1511_p1;
wire  signed [6:0] sext_ln691_195_fu_1540_p1;
wire   [6:0] add_ln691_194_fu_1549_p2;
wire  signed [6:0] sext_ln368_82_fu_1537_p1;
wire   [6:0] add_ln691_195_fu_1555_p2;
wire  signed [9:0] sext_ln691_196_fu_1561_p1;
wire   [9:0] add_ln691_193_fu_1543_p2;
wire  signed [2:0] mul_ln1345_198_fu_1584_p0;
wire  signed [2:0] mul_ln1345_198_fu_1584_p1;
wire  signed [5:0] mul_ln1345_198_fu_1584_p2;
wire   [9:0] tmp_205_fu_1574_p4;
wire  signed [9:0] sext_ln691_198_fu_1590_p1;
wire  signed [6:0] sext_ln691_197_fu_1571_p1;
wire  signed [6:0] sext_ln691_199_fu_1597_p1;
wire   [6:0] add_ln691_198_fu_1606_p2;
wire  signed [6:0] sext_ln368_83_fu_1594_p1;
wire   [6:0] add_ln691_199_fu_1612_p2;
wire  signed [9:0] sext_ln691_200_fu_1618_p1;
wire   [9:0] add_ln691_197_fu_1600_p2;
wire  signed [2:0] mul_ln1345_202_fu_1641_p0;
wire  signed [2:0] mul_ln1345_202_fu_1641_p1;
wire  signed [5:0] mul_ln1345_202_fu_1641_p2;
wire   [9:0] tmp_206_fu_1631_p4;
wire  signed [9:0] sext_ln691_202_fu_1647_p1;
wire  signed [6:0] sext_ln691_201_fu_1628_p1;
wire  signed [6:0] sext_ln691_203_fu_1654_p1;
wire   [6:0] add_ln691_202_fu_1663_p2;
wire  signed [6:0] sext_ln368_84_fu_1651_p1;
wire   [6:0] add_ln691_203_fu_1669_p2;
wire  signed [9:0] sext_ln691_204_fu_1675_p1;
wire   [9:0] add_ln691_201_fu_1657_p2;
wire  signed [2:0] mul_ln1345_206_fu_1698_p0;
wire  signed [2:0] mul_ln1345_206_fu_1698_p1;
wire  signed [5:0] mul_ln1345_206_fu_1698_p2;
wire   [9:0] tmp_207_fu_1688_p4;
wire  signed [9:0] sext_ln691_206_fu_1704_p1;
wire  signed [6:0] sext_ln691_205_fu_1685_p1;
wire  signed [6:0] sext_ln691_207_fu_1711_p1;
wire   [6:0] add_ln691_206_fu_1720_p2;
wire  signed [6:0] sext_ln368_85_fu_1708_p1;
wire   [6:0] add_ln691_207_fu_1726_p2;
wire  signed [9:0] sext_ln691_208_fu_1732_p1;
wire   [9:0] add_ln691_205_fu_1714_p2;
wire  signed [2:0] mul_ln1345_210_fu_1755_p0;
wire  signed [2:0] mul_ln1345_210_fu_1755_p1;
wire  signed [5:0] mul_ln1345_210_fu_1755_p2;
wire   [9:0] tmp_208_fu_1745_p4;
wire  signed [9:0] sext_ln691_210_fu_1761_p1;
wire  signed [6:0] sext_ln691_209_fu_1742_p1;
wire  signed [6:0] sext_ln691_211_fu_1768_p1;
wire   [6:0] add_ln691_210_fu_1777_p2;
wire  signed [6:0] sext_ln368_86_fu_1765_p1;
wire   [6:0] add_ln691_211_fu_1783_p2;
wire  signed [9:0] sext_ln691_212_fu_1789_p1;
wire   [9:0] add_ln691_209_fu_1771_p2;
wire  signed [2:0] mul_ln1345_214_fu_1812_p0;
wire  signed [2:0] mul_ln1345_214_fu_1812_p1;
wire  signed [5:0] mul_ln1345_214_fu_1812_p2;
wire   [9:0] tmp_209_fu_1802_p4;
wire  signed [9:0] sext_ln691_214_fu_1818_p1;
wire  signed [6:0] sext_ln691_213_fu_1799_p1;
wire  signed [6:0] sext_ln691_215_fu_1825_p1;
wire   [6:0] add_ln691_214_fu_1834_p2;
wire  signed [6:0] sext_ln368_87_fu_1822_p1;
wire   [6:0] add_ln691_215_fu_1840_p2;
wire  signed [9:0] sext_ln691_216_fu_1846_p1;
wire   [9:0] add_ln691_213_fu_1828_p2;
wire  signed [2:0] mul_ln1345_218_fu_1869_p0;
wire  signed [2:0] mul_ln1345_218_fu_1869_p1;
wire  signed [5:0] mul_ln1345_218_fu_1869_p2;
wire   [9:0] tmp_210_fu_1859_p4;
wire  signed [9:0] sext_ln691_218_fu_1875_p1;
wire  signed [6:0] sext_ln691_217_fu_1856_p1;
wire  signed [6:0] sext_ln691_219_fu_1882_p1;
wire   [6:0] add_ln691_218_fu_1891_p2;
wire  signed [6:0] sext_ln368_88_fu_1879_p1;
wire   [6:0] add_ln691_219_fu_1897_p2;
wire  signed [9:0] sext_ln691_220_fu_1903_p1;
wire   [9:0] add_ln691_217_fu_1885_p2;
wire   [217:0] tmp_212_fu_1955_p28;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U572(
    .din0(mul_ln1345_fu_726_p0),
    .din1(mul_ln1345_fu_726_p1),
    .dout(mul_ln1345_fu_726_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U573(
    .din0(mul_ln1345_167_fu_740_p0),
    .din1(mul_ln1345_167_fu_740_p1),
    .dout(mul_ln1345_167_fu_740_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U574(
    .din0(mul_ln1345_168_fu_754_p0),
    .din1(mul_ln1345_168_fu_754_p1),
    .dout(mul_ln1345_168_fu_754_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U575(
    .din0(mul_ln1345_169_fu_764_p0),
    .din1(mul_ln1345_169_fu_764_p1),
    .dout(mul_ln1345_169_fu_764_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U576(
    .din0(mul_ln1345_171_fu_774_p0),
    .din1(mul_ln1345_171_fu_774_p1),
    .dout(mul_ln1345_171_fu_774_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U577(
    .din0(mul_ln1345_172_fu_784_p0),
    .din1(mul_ln1345_172_fu_784_p1),
    .dout(mul_ln1345_172_fu_784_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U578(
    .din0(mul_ln1345_173_fu_794_p0),
    .din1(mul_ln1345_173_fu_794_p1),
    .dout(mul_ln1345_173_fu_794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U579(
    .din0(mul_ln1345_175_fu_804_p0),
    .din1(mul_ln1345_175_fu_804_p1),
    .dout(mul_ln1345_175_fu_804_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U580(
    .din0(mul_ln1345_176_fu_814_p0),
    .din1(mul_ln1345_176_fu_814_p1),
    .dout(mul_ln1345_176_fu_814_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U581(
    .din0(mul_ln1345_177_fu_824_p0),
    .din1(mul_ln1345_177_fu_824_p1),
    .dout(mul_ln1345_177_fu_824_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U582(
    .din0(mul_ln1345_179_fu_834_p0),
    .din1(mul_ln1345_179_fu_834_p1),
    .dout(mul_ln1345_179_fu_834_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U583(
    .din0(mul_ln1345_180_fu_844_p0),
    .din1(mul_ln1345_180_fu_844_p1),
    .dout(mul_ln1345_180_fu_844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U584(
    .din0(mul_ln1345_181_fu_854_p0),
    .din1(mul_ln1345_181_fu_854_p1),
    .dout(mul_ln1345_181_fu_854_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U585(
    .din0(mul_ln1345_183_fu_864_p0),
    .din1(mul_ln1345_183_fu_864_p1),
    .dout(mul_ln1345_183_fu_864_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U586(
    .din0(mul_ln1345_184_fu_874_p0),
    .din1(mul_ln1345_184_fu_874_p1),
    .dout(mul_ln1345_184_fu_874_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U587(
    .din0(mul_ln1345_185_fu_884_p0),
    .din1(mul_ln1345_185_fu_884_p1),
    .dout(mul_ln1345_185_fu_884_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U588(
    .din0(mul_ln1345_187_fu_894_p0),
    .din1(mul_ln1345_187_fu_894_p1),
    .dout(mul_ln1345_187_fu_894_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U589(
    .din0(mul_ln1345_188_fu_904_p0),
    .din1(mul_ln1345_188_fu_904_p1),
    .dout(mul_ln1345_188_fu_904_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U590(
    .din0(mul_ln1345_189_fu_914_p0),
    .din1(mul_ln1345_189_fu_914_p1),
    .dout(mul_ln1345_189_fu_914_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U591(
    .din0(mul_ln1345_191_fu_924_p0),
    .din1(mul_ln1345_191_fu_924_p1),
    .dout(mul_ln1345_191_fu_924_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U592(
    .din0(mul_ln1345_192_fu_934_p0),
    .din1(mul_ln1345_192_fu_934_p1),
    .dout(mul_ln1345_192_fu_934_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U593(
    .din0(mul_ln1345_193_fu_944_p0),
    .din1(mul_ln1345_193_fu_944_p1),
    .dout(mul_ln1345_193_fu_944_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U594(
    .din0(mul_ln1345_195_fu_954_p0),
    .din1(mul_ln1345_195_fu_954_p1),
    .dout(mul_ln1345_195_fu_954_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U595(
    .din0(mul_ln1345_196_fu_964_p0),
    .din1(mul_ln1345_196_fu_964_p1),
    .dout(mul_ln1345_196_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U596(
    .din0(mul_ln1345_197_fu_970_p0),
    .din1(mul_ln1345_197_fu_970_p1),
    .dout(mul_ln1345_197_fu_970_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U597(
    .din0(mul_ln1345_199_fu_976_p0),
    .din1(mul_ln1345_199_fu_976_p1),
    .dout(mul_ln1345_199_fu_976_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U598(
    .din0(mul_ln1345_200_fu_982_p0),
    .din1(mul_ln1345_200_fu_982_p1),
    .dout(mul_ln1345_200_fu_982_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U599(
    .din0(mul_ln1345_201_fu_988_p0),
    .din1(mul_ln1345_201_fu_988_p1),
    .dout(mul_ln1345_201_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U600(
    .din0(mul_ln1345_203_fu_994_p0),
    .din1(mul_ln1345_203_fu_994_p1),
    .dout(mul_ln1345_203_fu_994_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U601(
    .din0(mul_ln1345_204_fu_1000_p0),
    .din1(mul_ln1345_204_fu_1000_p1),
    .dout(mul_ln1345_204_fu_1000_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U602(
    .din0(mul_ln1345_205_fu_1006_p0),
    .din1(mul_ln1345_205_fu_1006_p1),
    .dout(mul_ln1345_205_fu_1006_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U603(
    .din0(mul_ln1345_207_fu_1012_p0),
    .din1(mul_ln1345_207_fu_1012_p1),
    .dout(mul_ln1345_207_fu_1012_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U604(
    .din0(mul_ln1345_208_fu_1018_p0),
    .din1(mul_ln1345_208_fu_1018_p1),
    .dout(mul_ln1345_208_fu_1018_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U605(
    .din0(mul_ln1345_209_fu_1024_p0),
    .din1(mul_ln1345_209_fu_1024_p1),
    .dout(mul_ln1345_209_fu_1024_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U606(
    .din0(mul_ln1345_211_fu_1030_p0),
    .din1(mul_ln1345_211_fu_1030_p1),
    .dout(mul_ln1345_211_fu_1030_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U607(
    .din0(mul_ln1345_212_fu_1036_p0),
    .din1(mul_ln1345_212_fu_1036_p1),
    .dout(mul_ln1345_212_fu_1036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U608(
    .din0(mul_ln1345_213_fu_1042_p0),
    .din1(mul_ln1345_213_fu_1042_p1),
    .dout(mul_ln1345_213_fu_1042_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U609(
    .din0(mul_ln1345_215_fu_1048_p0),
    .din1(mul_ln1345_215_fu_1048_p1),
    .dout(mul_ln1345_215_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U610(
    .din0(mul_ln1345_216_fu_1054_p0),
    .din1(mul_ln1345_216_fu_1054_p1),
    .dout(mul_ln1345_216_fu_1054_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U611(
    .din0(mul_ln1345_217_fu_1060_p0),
    .din1(mul_ln1345_217_fu_1060_p1),
    .dout(mul_ln1345_217_fu_1060_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U612(
    .din0(mul_ln1345_219_fu_1066_p0),
    .din1(mul_ln1345_219_fu_1066_p1),
    .dout(mul_ln1345_219_fu_1066_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U613(
    .din0(mul_ln1345_220_fu_1072_p0),
    .din1(mul_ln1345_220_fu_1072_p1),
    .dout(mul_ln1345_220_fu_1072_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U614(
    .din0(mul_ln1345_166_fu_1107_p0),
    .din1(mul_ln1345_166_fu_1107_p1),
    .dout(mul_ln1345_166_fu_1107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U615(
    .din0(mul_ln1345_170_fu_1167_p0),
    .din1(mul_ln1345_170_fu_1167_p1),
    .dout(mul_ln1345_170_fu_1167_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U616(
    .din0(mul_ln1345_174_fu_1227_p0),
    .din1(mul_ln1345_174_fu_1227_p1),
    .dout(mul_ln1345_174_fu_1227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U617(
    .din0(mul_ln1345_178_fu_1287_p0),
    .din1(mul_ln1345_178_fu_1287_p1),
    .dout(mul_ln1345_178_fu_1287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U618(
    .din0(mul_ln1345_182_fu_1347_p0),
    .din1(mul_ln1345_182_fu_1347_p1),
    .dout(mul_ln1345_182_fu_1347_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U619(
    .din0(mul_ln1345_186_fu_1407_p0),
    .din1(mul_ln1345_186_fu_1407_p1),
    .dout(mul_ln1345_186_fu_1407_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U620(
    .din0(mul_ln1345_190_fu_1467_p0),
    .din1(mul_ln1345_190_fu_1467_p1),
    .dout(mul_ln1345_190_fu_1467_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U621(
    .din0(mul_ln1345_194_fu_1527_p0),
    .din1(mul_ln1345_194_fu_1527_p1),
    .dout(mul_ln1345_194_fu_1527_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U622(
    .din0(mul_ln1345_198_fu_1584_p0),
    .din1(mul_ln1345_198_fu_1584_p1),
    .dout(mul_ln1345_198_fu_1584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U623(
    .din0(mul_ln1345_202_fu_1641_p0),
    .din1(mul_ln1345_202_fu_1641_p1),
    .dout(mul_ln1345_202_fu_1641_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U624(
    .din0(mul_ln1345_206_fu_1698_p0),
    .din1(mul_ln1345_206_fu_1698_p1),
    .dout(mul_ln1345_206_fu_1698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U625(
    .din0(mul_ln1345_210_fu_1755_p0),
    .din1(mul_ln1345_210_fu_1755_p1),
    .dout(mul_ln1345_210_fu_1755_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U626(
    .din0(mul_ln1345_214_fu_1812_p0),
    .din1(mul_ln1345_214_fu_1812_p1),
    .dout(mul_ln1345_214_fu_1812_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U627(
    .din0(mul_ln1345_218_fu_1869_p0),
    .din1(mul_ln1345_218_fu_1869_p1),
    .dout(mul_ln1345_218_fu_1869_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_291 <= cit_4_fu_1078_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_291 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten13_reg_269 <= add_ln336_fu_302_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_269 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten_reg_280 <= select_ln337_4_fu_326_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_280 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        add_ln691_168_reg_2300 <= add_ln691_168_fu_1145_p2;
        add_ln691_172_reg_2305 <= add_ln691_172_fu_1205_p2;
        add_ln691_176_reg_2310 <= add_ln691_176_fu_1265_p2;
        add_ln691_180_reg_2315 <= add_ln691_180_fu_1325_p2;
        add_ln691_184_reg_2320 <= add_ln691_184_fu_1385_p2;
        add_ln691_188_reg_2325 <= add_ln691_188_fu_1445_p2;
        add_ln691_192_reg_2330 <= add_ln691_192_fu_1505_p2;
        add_ln691_196_reg_2335 <= add_ln691_196_fu_1565_p2;
        add_ln691_200_reg_2340 <= add_ln691_200_fu_1622_p2;
        add_ln691_204_reg_2345 <= add_ln691_204_fu_1679_p2;
        add_ln691_208_reg_2350 <= add_ln691_208_fu_1736_p2;
        add_ln691_212_reg_2355 <= add_ln691_212_fu_1793_p2;
        add_ln691_216_reg_2360 <= add_ln691_216_fu_1850_p2;
        add_ln691_220_reg_2365 <= add_ln691_220_fu_1907_p2;
        icmp_ln378_reg_2370 <= icmp_ln378_fu_1945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2015 <= icmp_ln336_fu_308_p2;
        icmp_ln336_reg_2015_pp0_iter1_reg <= icmp_ln336_reg_2015;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        icmp_ln337_reg_2019 <= icmp_ln337_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln342_reg_2035 <= icmp_ln342_fu_364_p2;
        mul_ln1345_167_reg_2090 <= mul_ln1345_167_fu_740_p2;
        mul_ln1345_168_reg_2095 <= mul_ln1345_168_fu_754_p2;
        mul_ln1345_169_reg_2100 <= mul_ln1345_169_fu_764_p2;
        mul_ln1345_171_reg_2105 <= mul_ln1345_171_fu_774_p2;
        mul_ln1345_172_reg_2110 <= mul_ln1345_172_fu_784_p2;
        mul_ln1345_173_reg_2115 <= mul_ln1345_173_fu_794_p2;
        mul_ln1345_175_reg_2120 <= mul_ln1345_175_fu_804_p2;
        mul_ln1345_176_reg_2125 <= mul_ln1345_176_fu_814_p2;
        mul_ln1345_177_reg_2130 <= mul_ln1345_177_fu_824_p2;
        mul_ln1345_179_reg_2135 <= mul_ln1345_179_fu_834_p2;
        mul_ln1345_180_reg_2140 <= mul_ln1345_180_fu_844_p2;
        mul_ln1345_181_reg_2145 <= mul_ln1345_181_fu_854_p2;
        mul_ln1345_183_reg_2150 <= mul_ln1345_183_fu_864_p2;
        mul_ln1345_184_reg_2155 <= mul_ln1345_184_fu_874_p2;
        mul_ln1345_185_reg_2160 <= mul_ln1345_185_fu_884_p2;
        mul_ln1345_187_reg_2165 <= mul_ln1345_187_fu_894_p2;
        mul_ln1345_188_reg_2170 <= mul_ln1345_188_fu_904_p2;
        mul_ln1345_189_reg_2175 <= mul_ln1345_189_fu_914_p2;
        mul_ln1345_191_reg_2180 <= mul_ln1345_191_fu_924_p2;
        mul_ln1345_192_reg_2185 <= mul_ln1345_192_fu_934_p2;
        mul_ln1345_193_reg_2190 <= mul_ln1345_193_fu_944_p2;
        mul_ln1345_195_reg_2195 <= mul_ln1345_195_fu_954_p2;
        mul_ln1345_196_reg_2200 <= mul_ln1345_196_fu_964_p2;
        mul_ln1345_197_reg_2205 <= mul_ln1345_197_fu_970_p2;
        mul_ln1345_199_reg_2210 <= mul_ln1345_199_fu_976_p2;
        mul_ln1345_200_reg_2215 <= mul_ln1345_200_fu_982_p2;
        mul_ln1345_201_reg_2220 <= mul_ln1345_201_fu_988_p2;
        mul_ln1345_203_reg_2225 <= mul_ln1345_203_fu_994_p2;
        mul_ln1345_204_reg_2230 <= mul_ln1345_204_fu_1000_p2;
        mul_ln1345_205_reg_2235 <= mul_ln1345_205_fu_1006_p2;
        mul_ln1345_207_reg_2240 <= mul_ln1345_207_fu_1012_p2;
        mul_ln1345_208_reg_2245 <= mul_ln1345_208_fu_1018_p2;
        mul_ln1345_209_reg_2250 <= mul_ln1345_209_fu_1024_p2;
        mul_ln1345_211_reg_2255 <= mul_ln1345_211_fu_1030_p2;
        mul_ln1345_212_reg_2260 <= mul_ln1345_212_fu_1036_p2;
        mul_ln1345_213_reg_2265 <= mul_ln1345_213_fu_1042_p2;
        mul_ln1345_215_reg_2270 <= mul_ln1345_215_fu_1048_p2;
        mul_ln1345_216_reg_2275 <= mul_ln1345_216_fu_1054_p2;
        mul_ln1345_217_reg_2280 <= mul_ln1345_217_fu_1060_p2;
        mul_ln1345_219_reg_2285 <= mul_ln1345_219_fu_1066_p2;
        mul_ln1345_220_reg_2290 <= mul_ln1345_220_fu_1072_p2;
        mul_ln1345_reg_2085 <= mul_ln1345_fu_726_p2;
        select_ln337_reg_2030 <= select_ln337_fu_356_p3;
        trunc_ln145_102_reg_2080 <= {{weight_sm_dout[202:200]}};
        trunc_ln145_72_reg_2040 <= {{cache_window_sm_dout[10:8]}};
        trunc_ln145_76_reg_2045 <= {{cache_window_sm_dout[42:40]}};
        trunc_ln145_78_reg_2050 <= {{weight_sm_dout[10:8]}};
        trunc_ln145_82_reg_2055 <= {{weight_sm_dout[42:40]}};
        trunc_ln145_86_reg_2060 <= {{weight_sm_dout[74:72]}};
        trunc_ln145_90_reg_2065 <= {{weight_sm_dout[106:104]}};
        trunc_ln145_94_reg_2070 <= {{weight_sm_dout[138:136]}};
        trunc_ln145_98_reg_2075 <= {{weight_sm_dout[170:168]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_246 <= tmp_211_fu_1913_p15;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_302_p2 = (indvar_flatten13_reg_269 + 16'd1);

assign add_ln337_fu_320_p2 = (indvar_flatten_reg_280 + 10'd1);

assign add_ln691_166_fu_1129_p2 = ($signed(sext_ln691_fu_1094_p1) + $signed(sext_ln691_167_fu_1120_p1));

assign add_ln691_167_fu_1135_p2 = ($signed(add_ln691_166_fu_1129_p2) + $signed(sext_ln368_fu_1117_p1));

assign add_ln691_168_fu_1145_p2 = ($signed(sext_ln691_168_fu_1141_p1) + $signed(add_ln691_fu_1123_p2));

assign add_ln691_169_fu_1183_p2 = ($signed(tmp_s_fu_1154_p4) + $signed(sext_ln691_170_fu_1173_p1));

assign add_ln691_170_fu_1189_p2 = ($signed(sext_ln691_169_fu_1151_p1) + $signed(sext_ln691_171_fu_1180_p1));

assign add_ln691_171_fu_1195_p2 = ($signed(add_ln691_170_fu_1189_p2) + $signed(sext_ln368_76_fu_1177_p1));

assign add_ln691_172_fu_1205_p2 = ($signed(sext_ln691_172_fu_1201_p1) + $signed(add_ln691_169_fu_1183_p2));

assign add_ln691_173_fu_1243_p2 = ($signed(tmp_199_fu_1214_p4) + $signed(sext_ln691_174_fu_1233_p1));

assign add_ln691_174_fu_1249_p2 = ($signed(sext_ln691_173_fu_1211_p1) + $signed(sext_ln691_175_fu_1240_p1));

assign add_ln691_175_fu_1255_p2 = ($signed(add_ln691_174_fu_1249_p2) + $signed(sext_ln368_77_fu_1237_p1));

assign add_ln691_176_fu_1265_p2 = ($signed(sext_ln691_176_fu_1261_p1) + $signed(add_ln691_173_fu_1243_p2));

assign add_ln691_177_fu_1303_p2 = ($signed(tmp_200_fu_1274_p4) + $signed(sext_ln691_178_fu_1293_p1));

assign add_ln691_178_fu_1309_p2 = ($signed(sext_ln691_177_fu_1271_p1) + $signed(sext_ln691_179_fu_1300_p1));

assign add_ln691_179_fu_1315_p2 = ($signed(add_ln691_178_fu_1309_p2) + $signed(sext_ln368_78_fu_1297_p1));

assign add_ln691_180_fu_1325_p2 = ($signed(sext_ln691_180_fu_1321_p1) + $signed(add_ln691_177_fu_1303_p2));

assign add_ln691_181_fu_1363_p2 = ($signed(tmp_201_fu_1334_p4) + $signed(sext_ln691_182_fu_1353_p1));

assign add_ln691_182_fu_1369_p2 = ($signed(sext_ln691_181_fu_1331_p1) + $signed(sext_ln691_183_fu_1360_p1));

assign add_ln691_183_fu_1375_p2 = ($signed(add_ln691_182_fu_1369_p2) + $signed(sext_ln368_79_fu_1357_p1));

assign add_ln691_184_fu_1385_p2 = ($signed(sext_ln691_184_fu_1381_p1) + $signed(add_ln691_181_fu_1363_p2));

assign add_ln691_185_fu_1423_p2 = ($signed(tmp_202_fu_1394_p4) + $signed(sext_ln691_186_fu_1413_p1));

assign add_ln691_186_fu_1429_p2 = ($signed(sext_ln691_185_fu_1391_p1) + $signed(sext_ln691_187_fu_1420_p1));

assign add_ln691_187_fu_1435_p2 = ($signed(add_ln691_186_fu_1429_p2) + $signed(sext_ln368_80_fu_1417_p1));

assign add_ln691_188_fu_1445_p2 = ($signed(sext_ln691_188_fu_1441_p1) + $signed(add_ln691_185_fu_1423_p2));

assign add_ln691_189_fu_1483_p2 = ($signed(tmp_203_fu_1454_p4) + $signed(sext_ln691_190_fu_1473_p1));

assign add_ln691_190_fu_1489_p2 = ($signed(sext_ln691_189_fu_1451_p1) + $signed(sext_ln691_191_fu_1480_p1));

assign add_ln691_191_fu_1495_p2 = ($signed(add_ln691_190_fu_1489_p2) + $signed(sext_ln368_81_fu_1477_p1));

assign add_ln691_192_fu_1505_p2 = ($signed(sext_ln691_192_fu_1501_p1) + $signed(add_ln691_189_fu_1483_p2));

assign add_ln691_193_fu_1543_p2 = ($signed(tmp_204_fu_1514_p4) + $signed(sext_ln691_194_fu_1533_p1));

assign add_ln691_194_fu_1549_p2 = ($signed(sext_ln691_193_fu_1511_p1) + $signed(sext_ln691_195_fu_1540_p1));

assign add_ln691_195_fu_1555_p2 = ($signed(add_ln691_194_fu_1549_p2) + $signed(sext_ln368_82_fu_1537_p1));

assign add_ln691_196_fu_1565_p2 = ($signed(sext_ln691_196_fu_1561_p1) + $signed(add_ln691_193_fu_1543_p2));

assign add_ln691_197_fu_1600_p2 = ($signed(tmp_205_fu_1574_p4) + $signed(sext_ln691_198_fu_1590_p1));

assign add_ln691_198_fu_1606_p2 = ($signed(sext_ln691_197_fu_1571_p1) + $signed(sext_ln691_199_fu_1597_p1));

assign add_ln691_199_fu_1612_p2 = ($signed(add_ln691_198_fu_1606_p2) + $signed(sext_ln368_83_fu_1594_p1));

assign add_ln691_200_fu_1622_p2 = ($signed(sext_ln691_200_fu_1618_p1) + $signed(add_ln691_197_fu_1600_p2));

assign add_ln691_201_fu_1657_p2 = ($signed(tmp_206_fu_1631_p4) + $signed(sext_ln691_202_fu_1647_p1));

assign add_ln691_202_fu_1663_p2 = ($signed(sext_ln691_201_fu_1628_p1) + $signed(sext_ln691_203_fu_1654_p1));

assign add_ln691_203_fu_1669_p2 = ($signed(add_ln691_202_fu_1663_p2) + $signed(sext_ln368_84_fu_1651_p1));

assign add_ln691_204_fu_1679_p2 = ($signed(sext_ln691_204_fu_1675_p1) + $signed(add_ln691_201_fu_1657_p2));

assign add_ln691_205_fu_1714_p2 = ($signed(tmp_207_fu_1688_p4) + $signed(sext_ln691_206_fu_1704_p1));

assign add_ln691_206_fu_1720_p2 = ($signed(sext_ln691_205_fu_1685_p1) + $signed(sext_ln691_207_fu_1711_p1));

assign add_ln691_207_fu_1726_p2 = ($signed(add_ln691_206_fu_1720_p2) + $signed(sext_ln368_85_fu_1708_p1));

assign add_ln691_208_fu_1736_p2 = ($signed(sext_ln691_208_fu_1732_p1) + $signed(add_ln691_205_fu_1714_p2));

assign add_ln691_209_fu_1771_p2 = ($signed(tmp_208_fu_1745_p4) + $signed(sext_ln691_210_fu_1761_p1));

assign add_ln691_210_fu_1777_p2 = ($signed(sext_ln691_209_fu_1742_p1) + $signed(sext_ln691_211_fu_1768_p1));

assign add_ln691_211_fu_1783_p2 = ($signed(add_ln691_210_fu_1777_p2) + $signed(sext_ln368_86_fu_1765_p1));

assign add_ln691_212_fu_1793_p2 = ($signed(sext_ln691_212_fu_1789_p1) + $signed(add_ln691_209_fu_1771_p2));

assign add_ln691_213_fu_1828_p2 = ($signed(tmp_209_fu_1802_p4) + $signed(sext_ln691_214_fu_1818_p1));

assign add_ln691_214_fu_1834_p2 = ($signed(sext_ln691_213_fu_1799_p1) + $signed(sext_ln691_215_fu_1825_p1));

assign add_ln691_215_fu_1840_p2 = ($signed(add_ln691_214_fu_1834_p2) + $signed(sext_ln368_87_fu_1822_p1));

assign add_ln691_216_fu_1850_p2 = ($signed(sext_ln691_216_fu_1846_p1) + $signed(add_ln691_213_fu_1828_p2));

assign add_ln691_217_fu_1885_p2 = ($signed(tmp_210_fu_1859_p4) + $signed(sext_ln691_218_fu_1875_p1));

assign add_ln691_218_fu_1891_p2 = ($signed(sext_ln691_217_fu_1856_p1) + $signed(sext_ln691_219_fu_1882_p1));

assign add_ln691_219_fu_1897_p2 = ($signed(add_ln691_218_fu_1891_p2) + $signed(sext_ln368_88_fu_1879_p1));

assign add_ln691_220_fu_1907_p2 = ($signed(sext_ln691_220_fu_1903_p1) + $signed(add_ln691_217_fu_1885_p2));

assign add_ln691_fu_1123_p2 = ($signed(trunc_ln691_fu_1097_p1) + $signed(sext_ln691_166_fu_1113_p1));

assign and_ln336_fu_345_p2 = (xor_ln336_fu_334_p2 & icmp_ln338_fu_339_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2370 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_4_fu_1078_p2 = (select_ln337_fu_356_p3 + 5'd1);

assign icmp_ln336_fu_308_p2 = ((indvar_flatten13_reg_269 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_314_p2 = ((indvar_flatten_reg_280 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_339_p2 = ((cit_reg_291 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_364_p2 = ((select_ln337_fu_356_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1945_p2 = ((select_ln337_reg_2030 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_212_fu_1955_p28;

assign mul_ln1345_166_fu_1107_p0 = sext_ln1345_92_fu_1104_p1;

assign mul_ln1345_166_fu_1107_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_167_fu_740_p0 = sext_ln1345_94_fu_736_p1;

assign mul_ln1345_167_fu_740_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_168_fu_754_p0 = sext_ln1345_96_fu_750_p1;

assign mul_ln1345_168_fu_754_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_169_fu_764_p0 = sext_ln1345_97_fu_760_p1;

assign mul_ln1345_169_fu_764_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_170_fu_1167_p0 = sext_ln1345_98_fu_1164_p1;

assign mul_ln1345_170_fu_1167_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_171_fu_774_p0 = sext_ln1345_99_fu_770_p1;

assign mul_ln1345_171_fu_774_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_172_fu_784_p0 = sext_ln1345_100_fu_780_p1;

assign mul_ln1345_172_fu_784_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_173_fu_794_p0 = sext_ln1345_101_fu_790_p1;

assign mul_ln1345_173_fu_794_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_174_fu_1227_p0 = sext_ln1345_102_fu_1224_p1;

assign mul_ln1345_174_fu_1227_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_175_fu_804_p0 = sext_ln1345_103_fu_800_p1;

assign mul_ln1345_175_fu_804_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_176_fu_814_p0 = sext_ln1345_104_fu_810_p1;

assign mul_ln1345_176_fu_814_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_177_fu_824_p0 = sext_ln1345_105_fu_820_p1;

assign mul_ln1345_177_fu_824_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_178_fu_1287_p0 = sext_ln1345_106_fu_1284_p1;

assign mul_ln1345_178_fu_1287_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_179_fu_834_p0 = sext_ln1345_107_fu_830_p1;

assign mul_ln1345_179_fu_834_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_180_fu_844_p0 = sext_ln1345_108_fu_840_p1;

assign mul_ln1345_180_fu_844_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_181_fu_854_p0 = sext_ln1345_109_fu_850_p1;

assign mul_ln1345_181_fu_854_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_182_fu_1347_p0 = sext_ln1345_110_fu_1344_p1;

assign mul_ln1345_182_fu_1347_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_183_fu_864_p0 = sext_ln1345_111_fu_860_p1;

assign mul_ln1345_183_fu_864_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_184_fu_874_p0 = sext_ln1345_112_fu_870_p1;

assign mul_ln1345_184_fu_874_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_185_fu_884_p0 = sext_ln1345_113_fu_880_p1;

assign mul_ln1345_185_fu_884_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_186_fu_1407_p0 = sext_ln1345_114_fu_1404_p1;

assign mul_ln1345_186_fu_1407_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_187_fu_894_p0 = sext_ln1345_115_fu_890_p1;

assign mul_ln1345_187_fu_894_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_188_fu_904_p0 = sext_ln1345_116_fu_900_p1;

assign mul_ln1345_188_fu_904_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_189_fu_914_p0 = sext_ln1345_117_fu_910_p1;

assign mul_ln1345_189_fu_914_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_190_fu_1467_p0 = sext_ln1345_118_fu_1464_p1;

assign mul_ln1345_190_fu_1467_p1 = sext_ln1345_91_fu_1101_p1;

assign mul_ln1345_191_fu_924_p0 = sext_ln1345_119_fu_920_p1;

assign mul_ln1345_191_fu_924_p1 = sext_ln1345_93_fu_732_p1;

assign mul_ln1345_192_fu_934_p0 = sext_ln1345_120_fu_930_p1;

assign mul_ln1345_192_fu_934_p1 = sext_ln1345_95_fu_746_p1;

assign mul_ln1345_193_fu_944_p0 = sext_ln1345_90_fu_722_p1;

assign mul_ln1345_193_fu_944_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_194_fu_1527_p0 = sext_ln1345_92_fu_1104_p1;

assign mul_ln1345_194_fu_1527_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_195_fu_954_p0 = sext_ln1345_94_fu_736_p1;

assign mul_ln1345_195_fu_954_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_196_fu_964_p0 = sext_ln1345_96_fu_750_p1;

assign mul_ln1345_196_fu_964_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_197_fu_970_p0 = sext_ln1345_97_fu_760_p1;

assign mul_ln1345_197_fu_970_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_198_fu_1584_p0 = sext_ln1345_98_fu_1164_p1;

assign mul_ln1345_198_fu_1584_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_199_fu_976_p0 = sext_ln1345_99_fu_770_p1;

assign mul_ln1345_199_fu_976_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_200_fu_982_p0 = sext_ln1345_100_fu_780_p1;

assign mul_ln1345_200_fu_982_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_201_fu_988_p0 = sext_ln1345_101_fu_790_p1;

assign mul_ln1345_201_fu_988_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_202_fu_1641_p0 = sext_ln1345_102_fu_1224_p1;

assign mul_ln1345_202_fu_1641_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_203_fu_994_p0 = sext_ln1345_103_fu_800_p1;

assign mul_ln1345_203_fu_994_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_204_fu_1000_p0 = sext_ln1345_104_fu_810_p1;

assign mul_ln1345_204_fu_1000_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_205_fu_1006_p0 = sext_ln1345_105_fu_820_p1;

assign mul_ln1345_205_fu_1006_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_206_fu_1698_p0 = sext_ln1345_106_fu_1284_p1;

assign mul_ln1345_206_fu_1698_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_207_fu_1012_p0 = sext_ln1345_107_fu_830_p1;

assign mul_ln1345_207_fu_1012_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_208_fu_1018_p0 = sext_ln1345_108_fu_840_p1;

assign mul_ln1345_208_fu_1018_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_209_fu_1024_p0 = sext_ln1345_109_fu_850_p1;

assign mul_ln1345_209_fu_1024_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_210_fu_1755_p0 = sext_ln1345_110_fu_1344_p1;

assign mul_ln1345_210_fu_1755_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_211_fu_1030_p0 = sext_ln1345_111_fu_860_p1;

assign mul_ln1345_211_fu_1030_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_212_fu_1036_p0 = sext_ln1345_112_fu_870_p1;

assign mul_ln1345_212_fu_1036_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_213_fu_1042_p0 = sext_ln1345_113_fu_880_p1;

assign mul_ln1345_213_fu_1042_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_214_fu_1812_p0 = sext_ln1345_114_fu_1404_p1;

assign mul_ln1345_214_fu_1812_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_215_fu_1048_p0 = sext_ln1345_115_fu_890_p1;

assign mul_ln1345_215_fu_1048_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_216_fu_1054_p0 = sext_ln1345_116_fu_900_p1;

assign mul_ln1345_216_fu_1054_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_217_fu_1060_p0 = sext_ln1345_117_fu_910_p1;

assign mul_ln1345_217_fu_1060_p1 = sext_ln1345_121_fu_940_p1;

assign mul_ln1345_218_fu_1869_p0 = sext_ln1345_118_fu_1464_p1;

assign mul_ln1345_218_fu_1869_p1 = sext_ln1345_122_fu_1524_p1;

assign mul_ln1345_219_fu_1066_p0 = sext_ln1345_119_fu_920_p1;

assign mul_ln1345_219_fu_1066_p1 = sext_ln1345_123_fu_950_p1;

assign mul_ln1345_220_fu_1072_p0 = sext_ln1345_120_fu_930_p1;

assign mul_ln1345_220_fu_1072_p1 = sext_ln1345_124_fu_960_p1;

assign mul_ln1345_fu_726_p0 = sext_ln1345_90_fu_722_p1;

assign mul_ln1345_fu_726_p1 = sext_ln1345_fu_718_p1;

assign or_ln337_fu_351_p2 = (icmp_ln337_reg_2019 | and_ln336_fu_345_p2);

assign select_ln337_4_fu_326_p3 = ((icmp_ln337_fu_314_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_320_p2);

assign select_ln337_fu_356_p3 = ((or_ln337_fu_351_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_291);

assign select_ln342_fu_1087_p3 = ((icmp_ln342_reg_2035[0:0] == 1'b1) ? 140'd0 : vec_o_data_M_elems_V_2_fu_246);

assign sext_ln1345_100_fu_780_p1 = $signed(trunc_ln145_84_fu_508_p4);

assign sext_ln1345_101_fu_790_p1 = $signed(trunc_ln145_85_fu_518_p4);

assign sext_ln1345_102_fu_1224_p1 = $signed(trunc_ln145_86_reg_2060);

assign sext_ln1345_103_fu_800_p1 = $signed(trunc_ln145_87_fu_538_p4);

assign sext_ln1345_104_fu_810_p1 = $signed(trunc_ln145_88_fu_548_p4);

assign sext_ln1345_105_fu_820_p1 = $signed(trunc_ln145_89_fu_558_p4);

assign sext_ln1345_106_fu_1284_p1 = $signed(trunc_ln145_90_reg_2065);

assign sext_ln1345_107_fu_830_p1 = $signed(trunc_ln145_91_fu_578_p4);

assign sext_ln1345_108_fu_840_p1 = $signed(trunc_ln145_92_fu_588_p4);

assign sext_ln1345_109_fu_850_p1 = $signed(trunc_ln145_93_fu_598_p4);

assign sext_ln1345_110_fu_1344_p1 = $signed(trunc_ln145_94_reg_2070);

assign sext_ln1345_111_fu_860_p1 = $signed(trunc_ln145_95_fu_618_p4);

assign sext_ln1345_112_fu_870_p1 = $signed(trunc_ln145_96_fu_628_p4);

assign sext_ln1345_113_fu_880_p1 = $signed(trunc_ln145_97_fu_638_p4);

assign sext_ln1345_114_fu_1404_p1 = $signed(trunc_ln145_98_reg_2075);

assign sext_ln1345_115_fu_890_p1 = $signed(trunc_ln145_99_fu_658_p4);

assign sext_ln1345_116_fu_900_p1 = $signed(trunc_ln145_100_fu_668_p4);

assign sext_ln1345_117_fu_910_p1 = $signed(trunc_ln145_101_fu_678_p4);

assign sext_ln1345_118_fu_1464_p1 = $signed(trunc_ln145_102_reg_2080);

assign sext_ln1345_119_fu_920_p1 = $signed(trunc_ln145_103_fu_698_p4);

assign sext_ln1345_120_fu_930_p1 = $signed(trunc_ln145_104_fu_708_p4);

assign sext_ln1345_121_fu_940_p1 = $signed(trunc_ln145_75_fu_404_p4);

assign sext_ln1345_122_fu_1524_p1 = $signed(trunc_ln145_76_reg_2045);

assign sext_ln1345_123_fu_950_p1 = $signed(trunc_ln145_77_fu_424_p4);

assign sext_ln1345_124_fu_960_p1 = $signed(trunc_ln145_s_fu_434_p4);

assign sext_ln1345_90_fu_722_p1 = $signed(trunc_ln145_51_fu_444_p1);

assign sext_ln1345_91_fu_1101_p1 = $signed(trunc_ln145_72_reg_2040);

assign sext_ln1345_92_fu_1104_p1 = $signed(trunc_ln145_78_reg_2050);

assign sext_ln1345_93_fu_732_p1 = $signed(trunc_ln145_73_fu_384_p4);

assign sext_ln1345_94_fu_736_p1 = $signed(trunc_ln145_79_fu_458_p4);

assign sext_ln1345_95_fu_746_p1 = $signed(trunc_ln145_74_fu_394_p4);

assign sext_ln1345_96_fu_750_p1 = $signed(trunc_ln145_80_fu_468_p4);

assign sext_ln1345_97_fu_760_p1 = $signed(trunc_ln145_81_fu_478_p4);

assign sext_ln1345_98_fu_1164_p1 = $signed(trunc_ln145_82_reg_2055);

assign sext_ln1345_99_fu_770_p1 = $signed(trunc_ln145_83_fu_498_p4);

assign sext_ln1345_fu_718_p1 = $signed(trunc_ln145_fu_370_p1);

assign sext_ln368_76_fu_1177_p1 = mul_ln1345_171_reg_2105;

assign sext_ln368_77_fu_1237_p1 = mul_ln1345_175_reg_2120;

assign sext_ln368_78_fu_1297_p1 = mul_ln1345_179_reg_2135;

assign sext_ln368_79_fu_1357_p1 = mul_ln1345_183_reg_2150;

assign sext_ln368_80_fu_1417_p1 = mul_ln1345_187_reg_2165;

assign sext_ln368_81_fu_1477_p1 = mul_ln1345_191_reg_2180;

assign sext_ln368_82_fu_1537_p1 = mul_ln1345_195_reg_2195;

assign sext_ln368_83_fu_1594_p1 = mul_ln1345_199_reg_2210;

assign sext_ln368_84_fu_1651_p1 = mul_ln1345_203_reg_2225;

assign sext_ln368_85_fu_1708_p1 = mul_ln1345_207_reg_2240;

assign sext_ln368_86_fu_1765_p1 = mul_ln1345_211_reg_2255;

assign sext_ln368_87_fu_1822_p1 = mul_ln1345_215_reg_2270;

assign sext_ln368_88_fu_1879_p1 = mul_ln1345_219_reg_2285;

assign sext_ln368_fu_1117_p1 = mul_ln1345_167_reg_2090;

assign sext_ln691_166_fu_1113_p1 = mul_ln1345_166_fu_1107_p2;

assign sext_ln691_167_fu_1120_p1 = mul_ln1345_168_reg_2095;

assign sext_ln691_168_fu_1141_p1 = $signed(add_ln691_167_fu_1135_p2);

assign sext_ln691_169_fu_1151_p1 = mul_ln1345_169_reg_2100;

assign sext_ln691_170_fu_1173_p1 = mul_ln1345_170_fu_1167_p2;

assign sext_ln691_171_fu_1180_p1 = mul_ln1345_172_reg_2110;

assign sext_ln691_172_fu_1201_p1 = $signed(add_ln691_171_fu_1195_p2);

assign sext_ln691_173_fu_1211_p1 = mul_ln1345_173_reg_2115;

assign sext_ln691_174_fu_1233_p1 = mul_ln1345_174_fu_1227_p2;

assign sext_ln691_175_fu_1240_p1 = mul_ln1345_176_reg_2125;

assign sext_ln691_176_fu_1261_p1 = $signed(add_ln691_175_fu_1255_p2);

assign sext_ln691_177_fu_1271_p1 = mul_ln1345_177_reg_2130;

assign sext_ln691_178_fu_1293_p1 = mul_ln1345_178_fu_1287_p2;

assign sext_ln691_179_fu_1300_p1 = mul_ln1345_180_reg_2140;

assign sext_ln691_180_fu_1321_p1 = $signed(add_ln691_179_fu_1315_p2);

assign sext_ln691_181_fu_1331_p1 = mul_ln1345_181_reg_2145;

assign sext_ln691_182_fu_1353_p1 = mul_ln1345_182_fu_1347_p2;

assign sext_ln691_183_fu_1360_p1 = mul_ln1345_184_reg_2155;

assign sext_ln691_184_fu_1381_p1 = $signed(add_ln691_183_fu_1375_p2);

assign sext_ln691_185_fu_1391_p1 = mul_ln1345_185_reg_2160;

assign sext_ln691_186_fu_1413_p1 = mul_ln1345_186_fu_1407_p2;

assign sext_ln691_187_fu_1420_p1 = mul_ln1345_188_reg_2170;

assign sext_ln691_188_fu_1441_p1 = $signed(add_ln691_187_fu_1435_p2);

assign sext_ln691_189_fu_1451_p1 = mul_ln1345_189_reg_2175;

assign sext_ln691_190_fu_1473_p1 = mul_ln1345_190_fu_1467_p2;

assign sext_ln691_191_fu_1480_p1 = mul_ln1345_192_reg_2185;

assign sext_ln691_192_fu_1501_p1 = $signed(add_ln691_191_fu_1495_p2);

assign sext_ln691_193_fu_1511_p1 = mul_ln1345_193_reg_2190;

assign sext_ln691_194_fu_1533_p1 = mul_ln1345_194_fu_1527_p2;

assign sext_ln691_195_fu_1540_p1 = mul_ln1345_196_reg_2200;

assign sext_ln691_196_fu_1561_p1 = $signed(add_ln691_195_fu_1555_p2);

assign sext_ln691_197_fu_1571_p1 = mul_ln1345_197_reg_2205;

assign sext_ln691_198_fu_1590_p1 = mul_ln1345_198_fu_1584_p2;

assign sext_ln691_199_fu_1597_p1 = mul_ln1345_200_reg_2215;

assign sext_ln691_200_fu_1618_p1 = $signed(add_ln691_199_fu_1612_p2);

assign sext_ln691_201_fu_1628_p1 = mul_ln1345_201_reg_2220;

assign sext_ln691_202_fu_1647_p1 = mul_ln1345_202_fu_1641_p2;

assign sext_ln691_203_fu_1654_p1 = mul_ln1345_204_reg_2230;

assign sext_ln691_204_fu_1675_p1 = $signed(add_ln691_203_fu_1669_p2);

assign sext_ln691_205_fu_1685_p1 = mul_ln1345_205_reg_2235;

assign sext_ln691_206_fu_1704_p1 = mul_ln1345_206_fu_1698_p2;

assign sext_ln691_207_fu_1711_p1 = mul_ln1345_208_reg_2245;

assign sext_ln691_208_fu_1732_p1 = $signed(add_ln691_207_fu_1726_p2);

assign sext_ln691_209_fu_1742_p1 = mul_ln1345_209_reg_2250;

assign sext_ln691_210_fu_1761_p1 = mul_ln1345_210_fu_1755_p2;

assign sext_ln691_211_fu_1768_p1 = mul_ln1345_212_reg_2260;

assign sext_ln691_212_fu_1789_p1 = $signed(add_ln691_211_fu_1783_p2);

assign sext_ln691_213_fu_1799_p1 = mul_ln1345_213_reg_2265;

assign sext_ln691_214_fu_1818_p1 = mul_ln1345_214_fu_1812_p2;

assign sext_ln691_215_fu_1825_p1 = mul_ln1345_216_reg_2275;

assign sext_ln691_216_fu_1846_p1 = $signed(add_ln691_215_fu_1840_p2);

assign sext_ln691_217_fu_1856_p1 = mul_ln1345_217_reg_2280;

assign sext_ln691_218_fu_1875_p1 = mul_ln1345_218_fu_1869_p2;

assign sext_ln691_219_fu_1882_p1 = mul_ln1345_220_reg_2290;

assign sext_ln691_220_fu_1903_p1 = $signed(add_ln691_219_fu_1897_p2);

assign sext_ln691_fu_1094_p1 = mul_ln1345_reg_2085;

assign start_out = real_start;

assign tmp_199_fu_1214_p4 = {{select_ln342_fu_1087_p3[29:20]}};

assign tmp_200_fu_1274_p4 = {{select_ln342_fu_1087_p3[39:30]}};

assign tmp_201_fu_1334_p4 = {{select_ln342_fu_1087_p3[49:40]}};

assign tmp_202_fu_1394_p4 = {{select_ln342_fu_1087_p3[59:50]}};

assign tmp_203_fu_1454_p4 = {{select_ln342_fu_1087_p3[69:60]}};

assign tmp_204_fu_1514_p4 = {{select_ln342_fu_1087_p3[79:70]}};

assign tmp_205_fu_1574_p4 = {{select_ln342_fu_1087_p3[89:80]}};

assign tmp_206_fu_1631_p4 = {{select_ln342_fu_1087_p3[99:90]}};

assign tmp_207_fu_1688_p4 = {{select_ln342_fu_1087_p3[109:100]}};

assign tmp_208_fu_1745_p4 = {{select_ln342_fu_1087_p3[119:110]}};

assign tmp_209_fu_1802_p4 = {{select_ln342_fu_1087_p3[129:120]}};

assign tmp_210_fu_1859_p4 = {{select_ln342_fu_1087_p3[139:130]}};

assign tmp_211_fu_1913_p15 = {{{{{{{{{{{{{{add_ln691_220_fu_1907_p2}, {add_ln691_216_fu_1850_p2}}, {add_ln691_212_fu_1793_p2}}, {add_ln691_208_fu_1736_p2}}, {add_ln691_204_fu_1679_p2}}, {add_ln691_200_fu_1622_p2}}, {add_ln691_196_fu_1565_p2}}, {add_ln691_192_fu_1505_p2}}, {add_ln691_188_fu_1445_p2}}, {add_ln691_184_fu_1385_p2}}, {add_ln691_180_fu_1325_p2}}, {add_ln691_176_fu_1265_p2}}, {add_ln691_172_fu_1205_p2}}, {add_ln691_168_fu_1145_p2}};

assign tmp_212_fu_1955_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_220_reg_2365}, {6'd0}}, {add_ln691_216_reg_2360}}, {6'd0}}, {add_ln691_212_reg_2355}}, {6'd0}}, {add_ln691_208_reg_2350}}, {6'd0}}, {add_ln691_204_reg_2345}}, {6'd0}}, {add_ln691_200_reg_2340}}, {6'd0}}, {add_ln691_196_reg_2335}}, {6'd0}}, {add_ln691_192_reg_2330}}, {6'd0}}, {add_ln691_188_reg_2325}}, {6'd0}}, {add_ln691_184_reg_2320}}, {6'd0}}, {add_ln691_180_reg_2315}}, {6'd0}}, {add_ln691_176_reg_2310}}, {6'd0}}, {add_ln691_172_reg_2305}}, {6'd0}}, {add_ln691_168_reg_2300}};

assign tmp_s_fu_1154_p4 = {{select_ln342_fu_1087_p3[19:10]}};

assign trunc_ln145_100_fu_668_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_101_fu_678_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_103_fu_698_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_104_fu_708_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_51_fu_444_p1 = weight_sm_dout[2:0];

assign trunc_ln145_73_fu_384_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_74_fu_394_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_75_fu_404_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_77_fu_424_p4 = {{cache_window_sm_dout[50:48]}};

assign trunc_ln145_79_fu_458_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_80_fu_468_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_81_fu_478_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_83_fu_498_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_84_fu_508_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_85_fu_518_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_87_fu_538_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_88_fu_548_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_89_fu_558_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln145_91_fu_578_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_92_fu_588_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_93_fu_598_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_95_fu_618_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_96_fu_628_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_97_fu_638_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_99_fu_658_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_fu_370_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_434_p4 = {{cache_window_sm_dout[58:56]}};

assign trunc_ln691_fu_1097_p1 = select_ln342_fu_1087_p3[9:0];

assign xor_ln336_fu_334_p2 = (icmp_ln337_reg_2019 ^ 1'd1);

endmodule //ATTN0_matmul_step2_mac152
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac157 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [223:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2015;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2370;
reg   [15:0] indvar_flatten13_reg_269;
reg   [9:0] indvar_flatten_reg_280;
reg   [4:0] cit_reg_291;
wire   [15:0] add_ln336_fu_302_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_308_p2;
reg   [0:0] icmp_ln336_reg_2015_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_314_p2;
reg   [0:0] icmp_ln337_reg_2019;
wire   [9:0] select_ln337_3_fu_326_p3;
wire   [4:0] select_ln337_fu_356_p3;
reg   [4:0] select_ln337_reg_2030;
wire   [0:0] icmp_ln342_fu_364_p2;
reg   [0:0] icmp_ln342_reg_2035;
reg   [2:0] trunc_ln145_s_reg_2040;
reg   [2:0] trunc_ln145_47_reg_2045;
reg   [2:0] trunc_ln145_51_reg_2050;
reg   [2:0] trunc_ln145_55_reg_2055;
reg   [2:0] trunc_ln145_59_reg_2060;
reg   [2:0] trunc_ln145_63_reg_2065;
reg   [2:0] trunc_ln145_67_reg_2070;
reg   [2:0] trunc_ln145_71_reg_2075;
reg   [2:0] trunc_ln145_75_reg_2080;
wire  signed [5:0] mul_ln1345_fu_726_p2;
reg  signed [5:0] mul_ln1345_reg_2085;
wire  signed [5:0] mul_ln1345_112_fu_740_p2;
reg  signed [5:0] mul_ln1345_112_reg_2090;
wire  signed [5:0] mul_ln1345_113_fu_754_p2;
reg  signed [5:0] mul_ln1345_113_reg_2095;
wire  signed [5:0] mul_ln1345_114_fu_764_p2;
reg  signed [5:0] mul_ln1345_114_reg_2100;
wire  signed [5:0] mul_ln1345_116_fu_774_p2;
reg  signed [5:0] mul_ln1345_116_reg_2105;
wire  signed [5:0] mul_ln1345_117_fu_784_p2;
reg  signed [5:0] mul_ln1345_117_reg_2110;
wire  signed [5:0] mul_ln1345_118_fu_794_p2;
reg  signed [5:0] mul_ln1345_118_reg_2115;
wire  signed [5:0] mul_ln1345_120_fu_804_p2;
reg  signed [5:0] mul_ln1345_120_reg_2120;
wire  signed [5:0] mul_ln1345_121_fu_814_p2;
reg  signed [5:0] mul_ln1345_121_reg_2125;
wire  signed [5:0] mul_ln1345_122_fu_824_p2;
reg  signed [5:0] mul_ln1345_122_reg_2130;
wire  signed [5:0] mul_ln1345_124_fu_834_p2;
reg  signed [5:0] mul_ln1345_124_reg_2135;
wire  signed [5:0] mul_ln1345_125_fu_844_p2;
reg  signed [5:0] mul_ln1345_125_reg_2140;
wire  signed [5:0] mul_ln1345_126_fu_854_p2;
reg  signed [5:0] mul_ln1345_126_reg_2145;
wire  signed [5:0] mul_ln1345_128_fu_864_p2;
reg  signed [5:0] mul_ln1345_128_reg_2150;
wire  signed [5:0] mul_ln1345_129_fu_874_p2;
reg  signed [5:0] mul_ln1345_129_reg_2155;
wire  signed [5:0] mul_ln1345_130_fu_884_p2;
reg  signed [5:0] mul_ln1345_130_reg_2160;
wire  signed [5:0] mul_ln1345_132_fu_894_p2;
reg  signed [5:0] mul_ln1345_132_reg_2165;
wire  signed [5:0] mul_ln1345_133_fu_904_p2;
reg  signed [5:0] mul_ln1345_133_reg_2170;
wire  signed [5:0] mul_ln1345_134_fu_914_p2;
reg  signed [5:0] mul_ln1345_134_reg_2175;
wire  signed [5:0] mul_ln1345_136_fu_924_p2;
reg  signed [5:0] mul_ln1345_136_reg_2180;
wire  signed [5:0] mul_ln1345_137_fu_934_p2;
reg  signed [5:0] mul_ln1345_137_reg_2185;
wire  signed [5:0] mul_ln1345_138_fu_944_p2;
reg  signed [5:0] mul_ln1345_138_reg_2190;
wire  signed [5:0] mul_ln1345_140_fu_954_p2;
reg  signed [5:0] mul_ln1345_140_reg_2195;
wire  signed [5:0] mul_ln1345_141_fu_964_p2;
reg  signed [5:0] mul_ln1345_141_reg_2200;
wire  signed [5:0] mul_ln1345_142_fu_970_p2;
reg  signed [5:0] mul_ln1345_142_reg_2205;
wire  signed [5:0] mul_ln1345_144_fu_976_p2;
reg  signed [5:0] mul_ln1345_144_reg_2210;
wire  signed [5:0] mul_ln1345_145_fu_982_p2;
reg  signed [5:0] mul_ln1345_145_reg_2215;
wire  signed [5:0] mul_ln1345_146_fu_988_p2;
reg  signed [5:0] mul_ln1345_146_reg_2220;
wire  signed [5:0] mul_ln1345_148_fu_994_p2;
reg  signed [5:0] mul_ln1345_148_reg_2225;
wire  signed [5:0] mul_ln1345_149_fu_1000_p2;
reg  signed [5:0] mul_ln1345_149_reg_2230;
wire  signed [5:0] mul_ln1345_150_fu_1006_p2;
reg  signed [5:0] mul_ln1345_150_reg_2235;
wire  signed [5:0] mul_ln1345_152_fu_1012_p2;
reg  signed [5:0] mul_ln1345_152_reg_2240;
wire  signed [5:0] mul_ln1345_153_fu_1018_p2;
reg  signed [5:0] mul_ln1345_153_reg_2245;
wire  signed [5:0] mul_ln1345_154_fu_1024_p2;
reg  signed [5:0] mul_ln1345_154_reg_2250;
wire  signed [5:0] mul_ln1345_156_fu_1030_p2;
reg  signed [5:0] mul_ln1345_156_reg_2255;
wire  signed [5:0] mul_ln1345_157_fu_1036_p2;
reg  signed [5:0] mul_ln1345_157_reg_2260;
wire  signed [5:0] mul_ln1345_158_fu_1042_p2;
reg  signed [5:0] mul_ln1345_158_reg_2265;
wire  signed [5:0] mul_ln1345_160_fu_1048_p2;
reg  signed [5:0] mul_ln1345_160_reg_2270;
wire  signed [5:0] mul_ln1345_161_fu_1054_p2;
reg  signed [5:0] mul_ln1345_161_reg_2275;
wire  signed [5:0] mul_ln1345_162_fu_1060_p2;
reg  signed [5:0] mul_ln1345_162_reg_2280;
wire  signed [5:0] mul_ln1345_164_fu_1066_p2;
reg  signed [5:0] mul_ln1345_164_reg_2285;
wire  signed [5:0] mul_ln1345_165_fu_1072_p2;
reg  signed [5:0] mul_ln1345_165_reg_2290;
wire   [4:0] cit_3_fu_1078_p2;
wire   [9:0] add_ln691_113_fu_1145_p2;
reg   [9:0] add_ln691_113_reg_2300;
wire   [9:0] add_ln691_117_fu_1205_p2;
reg   [9:0] add_ln691_117_reg_2305;
wire   [9:0] add_ln691_121_fu_1265_p2;
reg   [9:0] add_ln691_121_reg_2310;
wire   [9:0] add_ln691_125_fu_1325_p2;
reg   [9:0] add_ln691_125_reg_2315;
wire   [9:0] add_ln691_129_fu_1385_p2;
reg   [9:0] add_ln691_129_reg_2320;
wire   [9:0] add_ln691_133_fu_1445_p2;
reg   [9:0] add_ln691_133_reg_2325;
wire   [9:0] add_ln691_137_fu_1505_p2;
reg   [9:0] add_ln691_137_reg_2330;
wire   [9:0] add_ln691_141_fu_1565_p2;
reg   [9:0] add_ln691_141_reg_2335;
wire   [9:0] add_ln691_145_fu_1622_p2;
reg   [9:0] add_ln691_145_reg_2340;
wire   [9:0] add_ln691_149_fu_1679_p2;
reg   [9:0] add_ln691_149_reg_2345;
wire   [9:0] add_ln691_153_fu_1736_p2;
reg   [9:0] add_ln691_153_reg_2350;
wire   [9:0] add_ln691_157_fu_1793_p2;
reg   [9:0] add_ln691_157_reg_2355;
wire   [9:0] add_ln691_161_fu_1850_p2;
reg   [9:0] add_ln691_161_reg_2360;
wire   [9:0] add_ln691_165_fu_1907_p2;
reg   [9:0] add_ln691_165_reg_2365;
wire   [0:0] icmp_ln378_fu_1945_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [139:0] vec_o_data_M_elems_V_2_fu_246;
wire   [139:0] tmp_197_fu_1913_p15;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_320_p2;
wire   [0:0] icmp_ln338_fu_339_p2;
wire   [0:0] xor_ln336_fu_334_p2;
wire   [0:0] and_ln336_fu_345_p2;
wire   [0:0] or_ln337_fu_351_p2;
wire   [2:0] trunc_ln145_fu_370_p1;
wire   [2:0] trunc_ln145_50_fu_444_p1;
wire  signed [2:0] mul_ln1345_fu_726_p0;
wire  signed [5:0] sext_ln1345_55_fu_722_p1;
wire  signed [2:0] mul_ln1345_fu_726_p1;
wire  signed [5:0] sext_ln1345_fu_718_p1;
wire   [2:0] trunc_ln145_44_fu_384_p4;
wire   [2:0] trunc_ln145_52_fu_458_p4;
wire  signed [2:0] mul_ln1345_112_fu_740_p0;
wire  signed [5:0] sext_ln1345_59_fu_736_p1;
wire  signed [2:0] mul_ln1345_112_fu_740_p1;
wire  signed [5:0] sext_ln1345_58_fu_732_p1;
wire   [2:0] trunc_ln145_45_fu_394_p4;
wire   [2:0] trunc_ln145_53_fu_468_p4;
wire  signed [2:0] mul_ln1345_113_fu_754_p0;
wire  signed [5:0] sext_ln1345_61_fu_750_p1;
wire  signed [2:0] mul_ln1345_113_fu_754_p1;
wire  signed [5:0] sext_ln1345_60_fu_746_p1;
wire   [2:0] trunc_ln145_54_fu_478_p4;
wire  signed [2:0] mul_ln1345_114_fu_764_p0;
wire  signed [5:0] sext_ln1345_62_fu_760_p1;
wire  signed [2:0] mul_ln1345_114_fu_764_p1;
wire   [2:0] trunc_ln145_56_fu_498_p4;
wire  signed [2:0] mul_ln1345_116_fu_774_p0;
wire  signed [5:0] sext_ln1345_64_fu_770_p1;
wire  signed [2:0] mul_ln1345_116_fu_774_p1;
wire   [2:0] trunc_ln145_57_fu_508_p4;
wire  signed [2:0] mul_ln1345_117_fu_784_p0;
wire  signed [5:0] sext_ln1345_65_fu_780_p1;
wire  signed [2:0] mul_ln1345_117_fu_784_p1;
wire   [2:0] trunc_ln145_58_fu_518_p4;
wire  signed [2:0] mul_ln1345_118_fu_794_p0;
wire  signed [5:0] sext_ln1345_66_fu_790_p1;
wire  signed [2:0] mul_ln1345_118_fu_794_p1;
wire   [2:0] trunc_ln145_60_fu_538_p4;
wire  signed [2:0] mul_ln1345_120_fu_804_p0;
wire  signed [5:0] sext_ln1345_68_fu_800_p1;
wire  signed [2:0] mul_ln1345_120_fu_804_p1;
wire   [2:0] trunc_ln145_61_fu_548_p4;
wire  signed [2:0] mul_ln1345_121_fu_814_p0;
wire  signed [5:0] sext_ln1345_69_fu_810_p1;
wire  signed [2:0] mul_ln1345_121_fu_814_p1;
wire   [2:0] trunc_ln145_62_fu_558_p4;
wire  signed [2:0] mul_ln1345_122_fu_824_p0;
wire  signed [5:0] sext_ln1345_70_fu_820_p1;
wire  signed [2:0] mul_ln1345_122_fu_824_p1;
wire   [2:0] trunc_ln145_64_fu_578_p4;
wire  signed [2:0] mul_ln1345_124_fu_834_p0;
wire  signed [5:0] sext_ln1345_72_fu_830_p1;
wire  signed [2:0] mul_ln1345_124_fu_834_p1;
wire   [2:0] trunc_ln145_65_fu_588_p4;
wire  signed [2:0] mul_ln1345_125_fu_844_p0;
wire  signed [5:0] sext_ln1345_73_fu_840_p1;
wire  signed [2:0] mul_ln1345_125_fu_844_p1;
wire   [2:0] trunc_ln145_66_fu_598_p4;
wire  signed [2:0] mul_ln1345_126_fu_854_p0;
wire  signed [5:0] sext_ln1345_74_fu_850_p1;
wire  signed [2:0] mul_ln1345_126_fu_854_p1;
wire   [2:0] trunc_ln145_68_fu_618_p4;
wire  signed [2:0] mul_ln1345_128_fu_864_p0;
wire  signed [5:0] sext_ln1345_76_fu_860_p1;
wire  signed [2:0] mul_ln1345_128_fu_864_p1;
wire   [2:0] trunc_ln145_69_fu_628_p4;
wire  signed [2:0] mul_ln1345_129_fu_874_p0;
wire  signed [5:0] sext_ln1345_77_fu_870_p1;
wire  signed [2:0] mul_ln1345_129_fu_874_p1;
wire   [2:0] trunc_ln145_70_fu_638_p4;
wire  signed [2:0] mul_ln1345_130_fu_884_p0;
wire  signed [5:0] sext_ln1345_78_fu_880_p1;
wire  signed [2:0] mul_ln1345_130_fu_884_p1;
wire   [2:0] trunc_ln145_72_fu_658_p4;
wire  signed [2:0] mul_ln1345_132_fu_894_p0;
wire  signed [5:0] sext_ln1345_80_fu_890_p1;
wire  signed [2:0] mul_ln1345_132_fu_894_p1;
wire   [2:0] trunc_ln145_73_fu_668_p4;
wire  signed [2:0] mul_ln1345_133_fu_904_p0;
wire  signed [5:0] sext_ln1345_81_fu_900_p1;
wire  signed [2:0] mul_ln1345_133_fu_904_p1;
wire   [2:0] trunc_ln145_74_fu_678_p4;
wire  signed [2:0] mul_ln1345_134_fu_914_p0;
wire  signed [5:0] sext_ln1345_82_fu_910_p1;
wire  signed [2:0] mul_ln1345_134_fu_914_p1;
wire   [2:0] trunc_ln145_76_fu_698_p4;
wire  signed [2:0] mul_ln1345_136_fu_924_p0;
wire  signed [5:0] sext_ln1345_84_fu_920_p1;
wire  signed [2:0] mul_ln1345_136_fu_924_p1;
wire   [2:0] trunc_ln145_77_fu_708_p4;
wire  signed [2:0] mul_ln1345_137_fu_934_p0;
wire  signed [5:0] sext_ln1345_85_fu_930_p1;
wire  signed [2:0] mul_ln1345_137_fu_934_p1;
wire   [2:0] trunc_ln145_46_fu_404_p4;
wire  signed [2:0] mul_ln1345_138_fu_944_p0;
wire  signed [2:0] mul_ln1345_138_fu_944_p1;
wire  signed [5:0] sext_ln1345_86_fu_940_p1;
wire   [2:0] trunc_ln145_48_fu_424_p4;
wire  signed [2:0] mul_ln1345_140_fu_954_p0;
wire  signed [2:0] mul_ln1345_140_fu_954_p1;
wire  signed [5:0] sext_ln1345_88_fu_950_p1;
wire   [2:0] trunc_ln145_49_fu_434_p4;
wire  signed [2:0] mul_ln1345_141_fu_964_p0;
wire  signed [2:0] mul_ln1345_141_fu_964_p1;
wire  signed [5:0] sext_ln1345_89_fu_960_p1;
wire  signed [2:0] mul_ln1345_142_fu_970_p0;
wire  signed [2:0] mul_ln1345_142_fu_970_p1;
wire  signed [2:0] mul_ln1345_144_fu_976_p0;
wire  signed [2:0] mul_ln1345_144_fu_976_p1;
wire  signed [2:0] mul_ln1345_145_fu_982_p0;
wire  signed [2:0] mul_ln1345_145_fu_982_p1;
wire  signed [2:0] mul_ln1345_146_fu_988_p0;
wire  signed [2:0] mul_ln1345_146_fu_988_p1;
wire  signed [2:0] mul_ln1345_148_fu_994_p0;
wire  signed [2:0] mul_ln1345_148_fu_994_p1;
wire  signed [2:0] mul_ln1345_149_fu_1000_p0;
wire  signed [2:0] mul_ln1345_149_fu_1000_p1;
wire  signed [2:0] mul_ln1345_150_fu_1006_p0;
wire  signed [2:0] mul_ln1345_150_fu_1006_p1;
wire  signed [2:0] mul_ln1345_152_fu_1012_p0;
wire  signed [2:0] mul_ln1345_152_fu_1012_p1;
wire  signed [2:0] mul_ln1345_153_fu_1018_p0;
wire  signed [2:0] mul_ln1345_153_fu_1018_p1;
wire  signed [2:0] mul_ln1345_154_fu_1024_p0;
wire  signed [2:0] mul_ln1345_154_fu_1024_p1;
wire  signed [2:0] mul_ln1345_156_fu_1030_p0;
wire  signed [2:0] mul_ln1345_156_fu_1030_p1;
wire  signed [2:0] mul_ln1345_157_fu_1036_p0;
wire  signed [2:0] mul_ln1345_157_fu_1036_p1;
wire  signed [2:0] mul_ln1345_158_fu_1042_p0;
wire  signed [2:0] mul_ln1345_158_fu_1042_p1;
wire  signed [2:0] mul_ln1345_160_fu_1048_p0;
wire  signed [2:0] mul_ln1345_160_fu_1048_p1;
wire  signed [2:0] mul_ln1345_161_fu_1054_p0;
wire  signed [2:0] mul_ln1345_161_fu_1054_p1;
wire  signed [2:0] mul_ln1345_162_fu_1060_p0;
wire  signed [2:0] mul_ln1345_162_fu_1060_p1;
wire  signed [2:0] mul_ln1345_164_fu_1066_p0;
wire  signed [2:0] mul_ln1345_164_fu_1066_p1;
wire  signed [2:0] mul_ln1345_165_fu_1072_p0;
wire  signed [2:0] mul_ln1345_165_fu_1072_p1;
wire   [139:0] select_ln342_fu_1087_p3;
wire  signed [2:0] mul_ln1345_111_fu_1107_p0;
wire  signed [5:0] sext_ln1345_57_fu_1104_p1;
wire  signed [2:0] mul_ln1345_111_fu_1107_p1;
wire  signed [5:0] sext_ln1345_56_fu_1101_p1;
wire  signed [5:0] mul_ln1345_111_fu_1107_p2;
wire   [9:0] trunc_ln691_fu_1097_p1;
wire  signed [9:0] sext_ln691_111_fu_1113_p1;
wire  signed [6:0] sext_ln691_fu_1094_p1;
wire  signed [6:0] sext_ln691_112_fu_1120_p1;
wire   [6:0] add_ln691_111_fu_1129_p2;
wire  signed [6:0] sext_ln368_fu_1117_p1;
wire   [6:0] add_ln691_112_fu_1135_p2;
wire  signed [9:0] sext_ln691_113_fu_1141_p1;
wire   [9:0] add_ln691_fu_1123_p2;
wire  signed [2:0] mul_ln1345_115_fu_1167_p0;
wire  signed [5:0] sext_ln1345_63_fu_1164_p1;
wire  signed [2:0] mul_ln1345_115_fu_1167_p1;
wire  signed [5:0] mul_ln1345_115_fu_1167_p2;
wire   [9:0] tmp_s_fu_1154_p4;
wire  signed [9:0] sext_ln691_115_fu_1173_p1;
wire  signed [6:0] sext_ln691_114_fu_1151_p1;
wire  signed [6:0] sext_ln691_116_fu_1180_p1;
wire   [6:0] add_ln691_115_fu_1189_p2;
wire  signed [6:0] sext_ln368_63_fu_1177_p1;
wire   [6:0] add_ln691_116_fu_1195_p2;
wire  signed [9:0] sext_ln691_117_fu_1201_p1;
wire   [9:0] add_ln691_114_fu_1183_p2;
wire  signed [2:0] mul_ln1345_119_fu_1227_p0;
wire  signed [5:0] sext_ln1345_67_fu_1224_p1;
wire  signed [2:0] mul_ln1345_119_fu_1227_p1;
wire  signed [5:0] mul_ln1345_119_fu_1227_p2;
wire   [9:0] tmp_185_fu_1214_p4;
wire  signed [9:0] sext_ln691_119_fu_1233_p1;
wire  signed [6:0] sext_ln691_118_fu_1211_p1;
wire  signed [6:0] sext_ln691_120_fu_1240_p1;
wire   [6:0] add_ln691_119_fu_1249_p2;
wire  signed [6:0] sext_ln368_64_fu_1237_p1;
wire   [6:0] add_ln691_120_fu_1255_p2;
wire  signed [9:0] sext_ln691_121_fu_1261_p1;
wire   [9:0] add_ln691_118_fu_1243_p2;
wire  signed [2:0] mul_ln1345_123_fu_1287_p0;
wire  signed [5:0] sext_ln1345_71_fu_1284_p1;
wire  signed [2:0] mul_ln1345_123_fu_1287_p1;
wire  signed [5:0] mul_ln1345_123_fu_1287_p2;
wire   [9:0] tmp_186_fu_1274_p4;
wire  signed [9:0] sext_ln691_123_fu_1293_p1;
wire  signed [6:0] sext_ln691_122_fu_1271_p1;
wire  signed [6:0] sext_ln691_124_fu_1300_p1;
wire   [6:0] add_ln691_123_fu_1309_p2;
wire  signed [6:0] sext_ln368_65_fu_1297_p1;
wire   [6:0] add_ln691_124_fu_1315_p2;
wire  signed [9:0] sext_ln691_125_fu_1321_p1;
wire   [9:0] add_ln691_122_fu_1303_p2;
wire  signed [2:0] mul_ln1345_127_fu_1347_p0;
wire  signed [5:0] sext_ln1345_75_fu_1344_p1;
wire  signed [2:0] mul_ln1345_127_fu_1347_p1;
wire  signed [5:0] mul_ln1345_127_fu_1347_p2;
wire   [9:0] tmp_187_fu_1334_p4;
wire  signed [9:0] sext_ln691_127_fu_1353_p1;
wire  signed [6:0] sext_ln691_126_fu_1331_p1;
wire  signed [6:0] sext_ln691_128_fu_1360_p1;
wire   [6:0] add_ln691_127_fu_1369_p2;
wire  signed [6:0] sext_ln368_66_fu_1357_p1;
wire   [6:0] add_ln691_128_fu_1375_p2;
wire  signed [9:0] sext_ln691_129_fu_1381_p1;
wire   [9:0] add_ln691_126_fu_1363_p2;
wire  signed [2:0] mul_ln1345_131_fu_1407_p0;
wire  signed [5:0] sext_ln1345_79_fu_1404_p1;
wire  signed [2:0] mul_ln1345_131_fu_1407_p1;
wire  signed [5:0] mul_ln1345_131_fu_1407_p2;
wire   [9:0] tmp_188_fu_1394_p4;
wire  signed [9:0] sext_ln691_131_fu_1413_p1;
wire  signed [6:0] sext_ln691_130_fu_1391_p1;
wire  signed [6:0] sext_ln691_132_fu_1420_p1;
wire   [6:0] add_ln691_131_fu_1429_p2;
wire  signed [6:0] sext_ln368_67_fu_1417_p1;
wire   [6:0] add_ln691_132_fu_1435_p2;
wire  signed [9:0] sext_ln691_133_fu_1441_p1;
wire   [9:0] add_ln691_130_fu_1423_p2;
wire  signed [2:0] mul_ln1345_135_fu_1467_p0;
wire  signed [5:0] sext_ln1345_83_fu_1464_p1;
wire  signed [2:0] mul_ln1345_135_fu_1467_p1;
wire  signed [5:0] mul_ln1345_135_fu_1467_p2;
wire   [9:0] tmp_189_fu_1454_p4;
wire  signed [9:0] sext_ln691_135_fu_1473_p1;
wire  signed [6:0] sext_ln691_134_fu_1451_p1;
wire  signed [6:0] sext_ln691_136_fu_1480_p1;
wire   [6:0] add_ln691_135_fu_1489_p2;
wire  signed [6:0] sext_ln368_68_fu_1477_p1;
wire   [6:0] add_ln691_136_fu_1495_p2;
wire  signed [9:0] sext_ln691_137_fu_1501_p1;
wire   [9:0] add_ln691_134_fu_1483_p2;
wire  signed [2:0] mul_ln1345_139_fu_1527_p0;
wire  signed [2:0] mul_ln1345_139_fu_1527_p1;
wire  signed [5:0] sext_ln1345_87_fu_1524_p1;
wire  signed [5:0] mul_ln1345_139_fu_1527_p2;
wire   [9:0] tmp_190_fu_1514_p4;
wire  signed [9:0] sext_ln691_139_fu_1533_p1;
wire  signed [6:0] sext_ln691_138_fu_1511_p1;
wire  signed [6:0] sext_ln691_140_fu_1540_p1;
wire   [6:0] add_ln691_139_fu_1549_p2;
wire  signed [6:0] sext_ln368_69_fu_1537_p1;
wire   [6:0] add_ln691_140_fu_1555_p2;
wire  signed [9:0] sext_ln691_141_fu_1561_p1;
wire   [9:0] add_ln691_138_fu_1543_p2;
wire  signed [2:0] mul_ln1345_143_fu_1584_p0;
wire  signed [2:0] mul_ln1345_143_fu_1584_p1;
wire  signed [5:0] mul_ln1345_143_fu_1584_p2;
wire   [9:0] tmp_191_fu_1574_p4;
wire  signed [9:0] sext_ln691_143_fu_1590_p1;
wire  signed [6:0] sext_ln691_142_fu_1571_p1;
wire  signed [6:0] sext_ln691_144_fu_1597_p1;
wire   [6:0] add_ln691_143_fu_1606_p2;
wire  signed [6:0] sext_ln368_70_fu_1594_p1;
wire   [6:0] add_ln691_144_fu_1612_p2;
wire  signed [9:0] sext_ln691_145_fu_1618_p1;
wire   [9:0] add_ln691_142_fu_1600_p2;
wire  signed [2:0] mul_ln1345_147_fu_1641_p0;
wire  signed [2:0] mul_ln1345_147_fu_1641_p1;
wire  signed [5:0] mul_ln1345_147_fu_1641_p2;
wire   [9:0] tmp_192_fu_1631_p4;
wire  signed [9:0] sext_ln691_147_fu_1647_p1;
wire  signed [6:0] sext_ln691_146_fu_1628_p1;
wire  signed [6:0] sext_ln691_148_fu_1654_p1;
wire   [6:0] add_ln691_147_fu_1663_p2;
wire  signed [6:0] sext_ln368_71_fu_1651_p1;
wire   [6:0] add_ln691_148_fu_1669_p2;
wire  signed [9:0] sext_ln691_149_fu_1675_p1;
wire   [9:0] add_ln691_146_fu_1657_p2;
wire  signed [2:0] mul_ln1345_151_fu_1698_p0;
wire  signed [2:0] mul_ln1345_151_fu_1698_p1;
wire  signed [5:0] mul_ln1345_151_fu_1698_p2;
wire   [9:0] tmp_193_fu_1688_p4;
wire  signed [9:0] sext_ln691_151_fu_1704_p1;
wire  signed [6:0] sext_ln691_150_fu_1685_p1;
wire  signed [6:0] sext_ln691_152_fu_1711_p1;
wire   [6:0] add_ln691_151_fu_1720_p2;
wire  signed [6:0] sext_ln368_72_fu_1708_p1;
wire   [6:0] add_ln691_152_fu_1726_p2;
wire  signed [9:0] sext_ln691_153_fu_1732_p1;
wire   [9:0] add_ln691_150_fu_1714_p2;
wire  signed [2:0] mul_ln1345_155_fu_1755_p0;
wire  signed [2:0] mul_ln1345_155_fu_1755_p1;
wire  signed [5:0] mul_ln1345_155_fu_1755_p2;
wire   [9:0] tmp_194_fu_1745_p4;
wire  signed [9:0] sext_ln691_155_fu_1761_p1;
wire  signed [6:0] sext_ln691_154_fu_1742_p1;
wire  signed [6:0] sext_ln691_156_fu_1768_p1;
wire   [6:0] add_ln691_155_fu_1777_p2;
wire  signed [6:0] sext_ln368_73_fu_1765_p1;
wire   [6:0] add_ln691_156_fu_1783_p2;
wire  signed [9:0] sext_ln691_157_fu_1789_p1;
wire   [9:0] add_ln691_154_fu_1771_p2;
wire  signed [2:0] mul_ln1345_159_fu_1812_p0;
wire  signed [2:0] mul_ln1345_159_fu_1812_p1;
wire  signed [5:0] mul_ln1345_159_fu_1812_p2;
wire   [9:0] tmp_195_fu_1802_p4;
wire  signed [9:0] sext_ln691_159_fu_1818_p1;
wire  signed [6:0] sext_ln691_158_fu_1799_p1;
wire  signed [6:0] sext_ln691_160_fu_1825_p1;
wire   [6:0] add_ln691_159_fu_1834_p2;
wire  signed [6:0] sext_ln368_74_fu_1822_p1;
wire   [6:0] add_ln691_160_fu_1840_p2;
wire  signed [9:0] sext_ln691_161_fu_1846_p1;
wire   [9:0] add_ln691_158_fu_1828_p2;
wire  signed [2:0] mul_ln1345_163_fu_1869_p0;
wire  signed [2:0] mul_ln1345_163_fu_1869_p1;
wire  signed [5:0] mul_ln1345_163_fu_1869_p2;
wire   [9:0] tmp_196_fu_1859_p4;
wire  signed [9:0] sext_ln691_163_fu_1875_p1;
wire  signed [6:0] sext_ln691_162_fu_1856_p1;
wire  signed [6:0] sext_ln691_164_fu_1882_p1;
wire   [6:0] add_ln691_163_fu_1891_p2;
wire  signed [6:0] sext_ln368_75_fu_1879_p1;
wire   [6:0] add_ln691_164_fu_1897_p2;
wire  signed [9:0] sext_ln691_165_fu_1903_p1;
wire   [9:0] add_ln691_162_fu_1885_p2;
wire   [217:0] tmp_198_fu_1955_p28;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U649(
    .din0(mul_ln1345_fu_726_p0),
    .din1(mul_ln1345_fu_726_p1),
    .dout(mul_ln1345_fu_726_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U650(
    .din0(mul_ln1345_112_fu_740_p0),
    .din1(mul_ln1345_112_fu_740_p1),
    .dout(mul_ln1345_112_fu_740_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U651(
    .din0(mul_ln1345_113_fu_754_p0),
    .din1(mul_ln1345_113_fu_754_p1),
    .dout(mul_ln1345_113_fu_754_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U652(
    .din0(mul_ln1345_114_fu_764_p0),
    .din1(mul_ln1345_114_fu_764_p1),
    .dout(mul_ln1345_114_fu_764_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U653(
    .din0(mul_ln1345_116_fu_774_p0),
    .din1(mul_ln1345_116_fu_774_p1),
    .dout(mul_ln1345_116_fu_774_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U654(
    .din0(mul_ln1345_117_fu_784_p0),
    .din1(mul_ln1345_117_fu_784_p1),
    .dout(mul_ln1345_117_fu_784_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U655(
    .din0(mul_ln1345_118_fu_794_p0),
    .din1(mul_ln1345_118_fu_794_p1),
    .dout(mul_ln1345_118_fu_794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U656(
    .din0(mul_ln1345_120_fu_804_p0),
    .din1(mul_ln1345_120_fu_804_p1),
    .dout(mul_ln1345_120_fu_804_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U657(
    .din0(mul_ln1345_121_fu_814_p0),
    .din1(mul_ln1345_121_fu_814_p1),
    .dout(mul_ln1345_121_fu_814_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U658(
    .din0(mul_ln1345_122_fu_824_p0),
    .din1(mul_ln1345_122_fu_824_p1),
    .dout(mul_ln1345_122_fu_824_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U659(
    .din0(mul_ln1345_124_fu_834_p0),
    .din1(mul_ln1345_124_fu_834_p1),
    .dout(mul_ln1345_124_fu_834_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U660(
    .din0(mul_ln1345_125_fu_844_p0),
    .din1(mul_ln1345_125_fu_844_p1),
    .dout(mul_ln1345_125_fu_844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U661(
    .din0(mul_ln1345_126_fu_854_p0),
    .din1(mul_ln1345_126_fu_854_p1),
    .dout(mul_ln1345_126_fu_854_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U662(
    .din0(mul_ln1345_128_fu_864_p0),
    .din1(mul_ln1345_128_fu_864_p1),
    .dout(mul_ln1345_128_fu_864_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U663(
    .din0(mul_ln1345_129_fu_874_p0),
    .din1(mul_ln1345_129_fu_874_p1),
    .dout(mul_ln1345_129_fu_874_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U664(
    .din0(mul_ln1345_130_fu_884_p0),
    .din1(mul_ln1345_130_fu_884_p1),
    .dout(mul_ln1345_130_fu_884_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U665(
    .din0(mul_ln1345_132_fu_894_p0),
    .din1(mul_ln1345_132_fu_894_p1),
    .dout(mul_ln1345_132_fu_894_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U666(
    .din0(mul_ln1345_133_fu_904_p0),
    .din1(mul_ln1345_133_fu_904_p1),
    .dout(mul_ln1345_133_fu_904_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U667(
    .din0(mul_ln1345_134_fu_914_p0),
    .din1(mul_ln1345_134_fu_914_p1),
    .dout(mul_ln1345_134_fu_914_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U668(
    .din0(mul_ln1345_136_fu_924_p0),
    .din1(mul_ln1345_136_fu_924_p1),
    .dout(mul_ln1345_136_fu_924_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U669(
    .din0(mul_ln1345_137_fu_934_p0),
    .din1(mul_ln1345_137_fu_934_p1),
    .dout(mul_ln1345_137_fu_934_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U670(
    .din0(mul_ln1345_138_fu_944_p0),
    .din1(mul_ln1345_138_fu_944_p1),
    .dout(mul_ln1345_138_fu_944_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U671(
    .din0(mul_ln1345_140_fu_954_p0),
    .din1(mul_ln1345_140_fu_954_p1),
    .dout(mul_ln1345_140_fu_954_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U672(
    .din0(mul_ln1345_141_fu_964_p0),
    .din1(mul_ln1345_141_fu_964_p1),
    .dout(mul_ln1345_141_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U673(
    .din0(mul_ln1345_142_fu_970_p0),
    .din1(mul_ln1345_142_fu_970_p1),
    .dout(mul_ln1345_142_fu_970_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U674(
    .din0(mul_ln1345_144_fu_976_p0),
    .din1(mul_ln1345_144_fu_976_p1),
    .dout(mul_ln1345_144_fu_976_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U675(
    .din0(mul_ln1345_145_fu_982_p0),
    .din1(mul_ln1345_145_fu_982_p1),
    .dout(mul_ln1345_145_fu_982_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U676(
    .din0(mul_ln1345_146_fu_988_p0),
    .din1(mul_ln1345_146_fu_988_p1),
    .dout(mul_ln1345_146_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U677(
    .din0(mul_ln1345_148_fu_994_p0),
    .din1(mul_ln1345_148_fu_994_p1),
    .dout(mul_ln1345_148_fu_994_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U678(
    .din0(mul_ln1345_149_fu_1000_p0),
    .din1(mul_ln1345_149_fu_1000_p1),
    .dout(mul_ln1345_149_fu_1000_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U679(
    .din0(mul_ln1345_150_fu_1006_p0),
    .din1(mul_ln1345_150_fu_1006_p1),
    .dout(mul_ln1345_150_fu_1006_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U680(
    .din0(mul_ln1345_152_fu_1012_p0),
    .din1(mul_ln1345_152_fu_1012_p1),
    .dout(mul_ln1345_152_fu_1012_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U681(
    .din0(mul_ln1345_153_fu_1018_p0),
    .din1(mul_ln1345_153_fu_1018_p1),
    .dout(mul_ln1345_153_fu_1018_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U682(
    .din0(mul_ln1345_154_fu_1024_p0),
    .din1(mul_ln1345_154_fu_1024_p1),
    .dout(mul_ln1345_154_fu_1024_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U683(
    .din0(mul_ln1345_156_fu_1030_p0),
    .din1(mul_ln1345_156_fu_1030_p1),
    .dout(mul_ln1345_156_fu_1030_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U684(
    .din0(mul_ln1345_157_fu_1036_p0),
    .din1(mul_ln1345_157_fu_1036_p1),
    .dout(mul_ln1345_157_fu_1036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U685(
    .din0(mul_ln1345_158_fu_1042_p0),
    .din1(mul_ln1345_158_fu_1042_p1),
    .dout(mul_ln1345_158_fu_1042_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U686(
    .din0(mul_ln1345_160_fu_1048_p0),
    .din1(mul_ln1345_160_fu_1048_p1),
    .dout(mul_ln1345_160_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U687(
    .din0(mul_ln1345_161_fu_1054_p0),
    .din1(mul_ln1345_161_fu_1054_p1),
    .dout(mul_ln1345_161_fu_1054_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U688(
    .din0(mul_ln1345_162_fu_1060_p0),
    .din1(mul_ln1345_162_fu_1060_p1),
    .dout(mul_ln1345_162_fu_1060_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U689(
    .din0(mul_ln1345_164_fu_1066_p0),
    .din1(mul_ln1345_164_fu_1066_p1),
    .dout(mul_ln1345_164_fu_1066_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U690(
    .din0(mul_ln1345_165_fu_1072_p0),
    .din1(mul_ln1345_165_fu_1072_p1),
    .dout(mul_ln1345_165_fu_1072_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U691(
    .din0(mul_ln1345_111_fu_1107_p0),
    .din1(mul_ln1345_111_fu_1107_p1),
    .dout(mul_ln1345_111_fu_1107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U692(
    .din0(mul_ln1345_115_fu_1167_p0),
    .din1(mul_ln1345_115_fu_1167_p1),
    .dout(mul_ln1345_115_fu_1167_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U693(
    .din0(mul_ln1345_119_fu_1227_p0),
    .din1(mul_ln1345_119_fu_1227_p1),
    .dout(mul_ln1345_119_fu_1227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U694(
    .din0(mul_ln1345_123_fu_1287_p0),
    .din1(mul_ln1345_123_fu_1287_p1),
    .dout(mul_ln1345_123_fu_1287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U695(
    .din0(mul_ln1345_127_fu_1347_p0),
    .din1(mul_ln1345_127_fu_1347_p1),
    .dout(mul_ln1345_127_fu_1347_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U696(
    .din0(mul_ln1345_131_fu_1407_p0),
    .din1(mul_ln1345_131_fu_1407_p1),
    .dout(mul_ln1345_131_fu_1407_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U697(
    .din0(mul_ln1345_135_fu_1467_p0),
    .din1(mul_ln1345_135_fu_1467_p1),
    .dout(mul_ln1345_135_fu_1467_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U698(
    .din0(mul_ln1345_139_fu_1527_p0),
    .din1(mul_ln1345_139_fu_1527_p1),
    .dout(mul_ln1345_139_fu_1527_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U699(
    .din0(mul_ln1345_143_fu_1584_p0),
    .din1(mul_ln1345_143_fu_1584_p1),
    .dout(mul_ln1345_143_fu_1584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U700(
    .din0(mul_ln1345_147_fu_1641_p0),
    .din1(mul_ln1345_147_fu_1641_p1),
    .dout(mul_ln1345_147_fu_1641_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U701(
    .din0(mul_ln1345_151_fu_1698_p0),
    .din1(mul_ln1345_151_fu_1698_p1),
    .dout(mul_ln1345_151_fu_1698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U702(
    .din0(mul_ln1345_155_fu_1755_p0),
    .din1(mul_ln1345_155_fu_1755_p1),
    .dout(mul_ln1345_155_fu_1755_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U703(
    .din0(mul_ln1345_159_fu_1812_p0),
    .din1(mul_ln1345_159_fu_1812_p1),
    .dout(mul_ln1345_159_fu_1812_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U704(
    .din0(mul_ln1345_163_fu_1869_p0),
    .din1(mul_ln1345_163_fu_1869_p1),
    .dout(mul_ln1345_163_fu_1869_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_291 <= cit_3_fu_1078_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_291 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten13_reg_269 <= add_ln336_fu_302_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_269 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten_reg_280 <= select_ln337_3_fu_326_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_280 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        add_ln691_113_reg_2300 <= add_ln691_113_fu_1145_p2;
        add_ln691_117_reg_2305 <= add_ln691_117_fu_1205_p2;
        add_ln691_121_reg_2310 <= add_ln691_121_fu_1265_p2;
        add_ln691_125_reg_2315 <= add_ln691_125_fu_1325_p2;
        add_ln691_129_reg_2320 <= add_ln691_129_fu_1385_p2;
        add_ln691_133_reg_2325 <= add_ln691_133_fu_1445_p2;
        add_ln691_137_reg_2330 <= add_ln691_137_fu_1505_p2;
        add_ln691_141_reg_2335 <= add_ln691_141_fu_1565_p2;
        add_ln691_145_reg_2340 <= add_ln691_145_fu_1622_p2;
        add_ln691_149_reg_2345 <= add_ln691_149_fu_1679_p2;
        add_ln691_153_reg_2350 <= add_ln691_153_fu_1736_p2;
        add_ln691_157_reg_2355 <= add_ln691_157_fu_1793_p2;
        add_ln691_161_reg_2360 <= add_ln691_161_fu_1850_p2;
        add_ln691_165_reg_2365 <= add_ln691_165_fu_1907_p2;
        icmp_ln378_reg_2370 <= icmp_ln378_fu_1945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2015 <= icmp_ln336_fu_308_p2;
        icmp_ln336_reg_2015_pp0_iter1_reg <= icmp_ln336_reg_2015;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        icmp_ln337_reg_2019 <= icmp_ln337_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln342_reg_2035 <= icmp_ln342_fu_364_p2;
        mul_ln1345_112_reg_2090 <= mul_ln1345_112_fu_740_p2;
        mul_ln1345_113_reg_2095 <= mul_ln1345_113_fu_754_p2;
        mul_ln1345_114_reg_2100 <= mul_ln1345_114_fu_764_p2;
        mul_ln1345_116_reg_2105 <= mul_ln1345_116_fu_774_p2;
        mul_ln1345_117_reg_2110 <= mul_ln1345_117_fu_784_p2;
        mul_ln1345_118_reg_2115 <= mul_ln1345_118_fu_794_p2;
        mul_ln1345_120_reg_2120 <= mul_ln1345_120_fu_804_p2;
        mul_ln1345_121_reg_2125 <= mul_ln1345_121_fu_814_p2;
        mul_ln1345_122_reg_2130 <= mul_ln1345_122_fu_824_p2;
        mul_ln1345_124_reg_2135 <= mul_ln1345_124_fu_834_p2;
        mul_ln1345_125_reg_2140 <= mul_ln1345_125_fu_844_p2;
        mul_ln1345_126_reg_2145 <= mul_ln1345_126_fu_854_p2;
        mul_ln1345_128_reg_2150 <= mul_ln1345_128_fu_864_p2;
        mul_ln1345_129_reg_2155 <= mul_ln1345_129_fu_874_p2;
        mul_ln1345_130_reg_2160 <= mul_ln1345_130_fu_884_p2;
        mul_ln1345_132_reg_2165 <= mul_ln1345_132_fu_894_p2;
        mul_ln1345_133_reg_2170 <= mul_ln1345_133_fu_904_p2;
        mul_ln1345_134_reg_2175 <= mul_ln1345_134_fu_914_p2;
        mul_ln1345_136_reg_2180 <= mul_ln1345_136_fu_924_p2;
        mul_ln1345_137_reg_2185 <= mul_ln1345_137_fu_934_p2;
        mul_ln1345_138_reg_2190 <= mul_ln1345_138_fu_944_p2;
        mul_ln1345_140_reg_2195 <= mul_ln1345_140_fu_954_p2;
        mul_ln1345_141_reg_2200 <= mul_ln1345_141_fu_964_p2;
        mul_ln1345_142_reg_2205 <= mul_ln1345_142_fu_970_p2;
        mul_ln1345_144_reg_2210 <= mul_ln1345_144_fu_976_p2;
        mul_ln1345_145_reg_2215 <= mul_ln1345_145_fu_982_p2;
        mul_ln1345_146_reg_2220 <= mul_ln1345_146_fu_988_p2;
        mul_ln1345_148_reg_2225 <= mul_ln1345_148_fu_994_p2;
        mul_ln1345_149_reg_2230 <= mul_ln1345_149_fu_1000_p2;
        mul_ln1345_150_reg_2235 <= mul_ln1345_150_fu_1006_p2;
        mul_ln1345_152_reg_2240 <= mul_ln1345_152_fu_1012_p2;
        mul_ln1345_153_reg_2245 <= mul_ln1345_153_fu_1018_p2;
        mul_ln1345_154_reg_2250 <= mul_ln1345_154_fu_1024_p2;
        mul_ln1345_156_reg_2255 <= mul_ln1345_156_fu_1030_p2;
        mul_ln1345_157_reg_2260 <= mul_ln1345_157_fu_1036_p2;
        mul_ln1345_158_reg_2265 <= mul_ln1345_158_fu_1042_p2;
        mul_ln1345_160_reg_2270 <= mul_ln1345_160_fu_1048_p2;
        mul_ln1345_161_reg_2275 <= mul_ln1345_161_fu_1054_p2;
        mul_ln1345_162_reg_2280 <= mul_ln1345_162_fu_1060_p2;
        mul_ln1345_164_reg_2285 <= mul_ln1345_164_fu_1066_p2;
        mul_ln1345_165_reg_2290 <= mul_ln1345_165_fu_1072_p2;
        mul_ln1345_reg_2085 <= mul_ln1345_fu_726_p2;
        select_ln337_reg_2030 <= select_ln337_fu_356_p3;
        trunc_ln145_47_reg_2045 <= {{cache_window_sm_dout[42:40]}};
        trunc_ln145_51_reg_2050 <= {{weight_sm_dout[10:8]}};
        trunc_ln145_55_reg_2055 <= {{weight_sm_dout[42:40]}};
        trunc_ln145_59_reg_2060 <= {{weight_sm_dout[74:72]}};
        trunc_ln145_63_reg_2065 <= {{weight_sm_dout[106:104]}};
        trunc_ln145_67_reg_2070 <= {{weight_sm_dout[138:136]}};
        trunc_ln145_71_reg_2075 <= {{weight_sm_dout[170:168]}};
        trunc_ln145_75_reg_2080 <= {{weight_sm_dout[202:200]}};
        trunc_ln145_s_reg_2040 <= {{cache_window_sm_dout[10:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_246 <= tmp_197_fu_1913_p15;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_302_p2 = (indvar_flatten13_reg_269 + 16'd1);

assign add_ln337_fu_320_p2 = (indvar_flatten_reg_280 + 10'd1);

assign add_ln691_111_fu_1129_p2 = ($signed(sext_ln691_fu_1094_p1) + $signed(sext_ln691_112_fu_1120_p1));

assign add_ln691_112_fu_1135_p2 = ($signed(add_ln691_111_fu_1129_p2) + $signed(sext_ln368_fu_1117_p1));

assign add_ln691_113_fu_1145_p2 = ($signed(sext_ln691_113_fu_1141_p1) + $signed(add_ln691_fu_1123_p2));

assign add_ln691_114_fu_1183_p2 = ($signed(tmp_s_fu_1154_p4) + $signed(sext_ln691_115_fu_1173_p1));

assign add_ln691_115_fu_1189_p2 = ($signed(sext_ln691_114_fu_1151_p1) + $signed(sext_ln691_116_fu_1180_p1));

assign add_ln691_116_fu_1195_p2 = ($signed(add_ln691_115_fu_1189_p2) + $signed(sext_ln368_63_fu_1177_p1));

assign add_ln691_117_fu_1205_p2 = ($signed(sext_ln691_117_fu_1201_p1) + $signed(add_ln691_114_fu_1183_p2));

assign add_ln691_118_fu_1243_p2 = ($signed(tmp_185_fu_1214_p4) + $signed(sext_ln691_119_fu_1233_p1));

assign add_ln691_119_fu_1249_p2 = ($signed(sext_ln691_118_fu_1211_p1) + $signed(sext_ln691_120_fu_1240_p1));

assign add_ln691_120_fu_1255_p2 = ($signed(add_ln691_119_fu_1249_p2) + $signed(sext_ln368_64_fu_1237_p1));

assign add_ln691_121_fu_1265_p2 = ($signed(sext_ln691_121_fu_1261_p1) + $signed(add_ln691_118_fu_1243_p2));

assign add_ln691_122_fu_1303_p2 = ($signed(tmp_186_fu_1274_p4) + $signed(sext_ln691_123_fu_1293_p1));

assign add_ln691_123_fu_1309_p2 = ($signed(sext_ln691_122_fu_1271_p1) + $signed(sext_ln691_124_fu_1300_p1));

assign add_ln691_124_fu_1315_p2 = ($signed(add_ln691_123_fu_1309_p2) + $signed(sext_ln368_65_fu_1297_p1));

assign add_ln691_125_fu_1325_p2 = ($signed(sext_ln691_125_fu_1321_p1) + $signed(add_ln691_122_fu_1303_p2));

assign add_ln691_126_fu_1363_p2 = ($signed(tmp_187_fu_1334_p4) + $signed(sext_ln691_127_fu_1353_p1));

assign add_ln691_127_fu_1369_p2 = ($signed(sext_ln691_126_fu_1331_p1) + $signed(sext_ln691_128_fu_1360_p1));

assign add_ln691_128_fu_1375_p2 = ($signed(add_ln691_127_fu_1369_p2) + $signed(sext_ln368_66_fu_1357_p1));

assign add_ln691_129_fu_1385_p2 = ($signed(sext_ln691_129_fu_1381_p1) + $signed(add_ln691_126_fu_1363_p2));

assign add_ln691_130_fu_1423_p2 = ($signed(tmp_188_fu_1394_p4) + $signed(sext_ln691_131_fu_1413_p1));

assign add_ln691_131_fu_1429_p2 = ($signed(sext_ln691_130_fu_1391_p1) + $signed(sext_ln691_132_fu_1420_p1));

assign add_ln691_132_fu_1435_p2 = ($signed(add_ln691_131_fu_1429_p2) + $signed(sext_ln368_67_fu_1417_p1));

assign add_ln691_133_fu_1445_p2 = ($signed(sext_ln691_133_fu_1441_p1) + $signed(add_ln691_130_fu_1423_p2));

assign add_ln691_134_fu_1483_p2 = ($signed(tmp_189_fu_1454_p4) + $signed(sext_ln691_135_fu_1473_p1));

assign add_ln691_135_fu_1489_p2 = ($signed(sext_ln691_134_fu_1451_p1) + $signed(sext_ln691_136_fu_1480_p1));

assign add_ln691_136_fu_1495_p2 = ($signed(add_ln691_135_fu_1489_p2) + $signed(sext_ln368_68_fu_1477_p1));

assign add_ln691_137_fu_1505_p2 = ($signed(sext_ln691_137_fu_1501_p1) + $signed(add_ln691_134_fu_1483_p2));

assign add_ln691_138_fu_1543_p2 = ($signed(tmp_190_fu_1514_p4) + $signed(sext_ln691_139_fu_1533_p1));

assign add_ln691_139_fu_1549_p2 = ($signed(sext_ln691_138_fu_1511_p1) + $signed(sext_ln691_140_fu_1540_p1));

assign add_ln691_140_fu_1555_p2 = ($signed(add_ln691_139_fu_1549_p2) + $signed(sext_ln368_69_fu_1537_p1));

assign add_ln691_141_fu_1565_p2 = ($signed(sext_ln691_141_fu_1561_p1) + $signed(add_ln691_138_fu_1543_p2));

assign add_ln691_142_fu_1600_p2 = ($signed(tmp_191_fu_1574_p4) + $signed(sext_ln691_143_fu_1590_p1));

assign add_ln691_143_fu_1606_p2 = ($signed(sext_ln691_142_fu_1571_p1) + $signed(sext_ln691_144_fu_1597_p1));

assign add_ln691_144_fu_1612_p2 = ($signed(add_ln691_143_fu_1606_p2) + $signed(sext_ln368_70_fu_1594_p1));

assign add_ln691_145_fu_1622_p2 = ($signed(sext_ln691_145_fu_1618_p1) + $signed(add_ln691_142_fu_1600_p2));

assign add_ln691_146_fu_1657_p2 = ($signed(tmp_192_fu_1631_p4) + $signed(sext_ln691_147_fu_1647_p1));

assign add_ln691_147_fu_1663_p2 = ($signed(sext_ln691_146_fu_1628_p1) + $signed(sext_ln691_148_fu_1654_p1));

assign add_ln691_148_fu_1669_p2 = ($signed(add_ln691_147_fu_1663_p2) + $signed(sext_ln368_71_fu_1651_p1));

assign add_ln691_149_fu_1679_p2 = ($signed(sext_ln691_149_fu_1675_p1) + $signed(add_ln691_146_fu_1657_p2));

assign add_ln691_150_fu_1714_p2 = ($signed(tmp_193_fu_1688_p4) + $signed(sext_ln691_151_fu_1704_p1));

assign add_ln691_151_fu_1720_p2 = ($signed(sext_ln691_150_fu_1685_p1) + $signed(sext_ln691_152_fu_1711_p1));

assign add_ln691_152_fu_1726_p2 = ($signed(add_ln691_151_fu_1720_p2) + $signed(sext_ln368_72_fu_1708_p1));

assign add_ln691_153_fu_1736_p2 = ($signed(sext_ln691_153_fu_1732_p1) + $signed(add_ln691_150_fu_1714_p2));

assign add_ln691_154_fu_1771_p2 = ($signed(tmp_194_fu_1745_p4) + $signed(sext_ln691_155_fu_1761_p1));

assign add_ln691_155_fu_1777_p2 = ($signed(sext_ln691_154_fu_1742_p1) + $signed(sext_ln691_156_fu_1768_p1));

assign add_ln691_156_fu_1783_p2 = ($signed(add_ln691_155_fu_1777_p2) + $signed(sext_ln368_73_fu_1765_p1));

assign add_ln691_157_fu_1793_p2 = ($signed(sext_ln691_157_fu_1789_p1) + $signed(add_ln691_154_fu_1771_p2));

assign add_ln691_158_fu_1828_p2 = ($signed(tmp_195_fu_1802_p4) + $signed(sext_ln691_159_fu_1818_p1));

assign add_ln691_159_fu_1834_p2 = ($signed(sext_ln691_158_fu_1799_p1) + $signed(sext_ln691_160_fu_1825_p1));

assign add_ln691_160_fu_1840_p2 = ($signed(add_ln691_159_fu_1834_p2) + $signed(sext_ln368_74_fu_1822_p1));

assign add_ln691_161_fu_1850_p2 = ($signed(sext_ln691_161_fu_1846_p1) + $signed(add_ln691_158_fu_1828_p2));

assign add_ln691_162_fu_1885_p2 = ($signed(tmp_196_fu_1859_p4) + $signed(sext_ln691_163_fu_1875_p1));

assign add_ln691_163_fu_1891_p2 = ($signed(sext_ln691_162_fu_1856_p1) + $signed(sext_ln691_164_fu_1882_p1));

assign add_ln691_164_fu_1897_p2 = ($signed(add_ln691_163_fu_1891_p2) + $signed(sext_ln368_75_fu_1879_p1));

assign add_ln691_165_fu_1907_p2 = ($signed(sext_ln691_165_fu_1903_p1) + $signed(add_ln691_162_fu_1885_p2));

assign add_ln691_fu_1123_p2 = ($signed(trunc_ln691_fu_1097_p1) + $signed(sext_ln691_111_fu_1113_p1));

assign and_ln336_fu_345_p2 = (xor_ln336_fu_334_p2 & icmp_ln338_fu_339_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2370 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_3_fu_1078_p2 = (select_ln337_fu_356_p3 + 5'd1);

assign icmp_ln336_fu_308_p2 = ((indvar_flatten13_reg_269 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_314_p2 = ((indvar_flatten_reg_280 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_339_p2 = ((cit_reg_291 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_364_p2 = ((select_ln337_fu_356_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1945_p2 = ((select_ln337_reg_2030 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_198_fu_1955_p28;

assign mul_ln1345_111_fu_1107_p0 = sext_ln1345_57_fu_1104_p1;

assign mul_ln1345_111_fu_1107_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_112_fu_740_p0 = sext_ln1345_59_fu_736_p1;

assign mul_ln1345_112_fu_740_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_113_fu_754_p0 = sext_ln1345_61_fu_750_p1;

assign mul_ln1345_113_fu_754_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_114_fu_764_p0 = sext_ln1345_62_fu_760_p1;

assign mul_ln1345_114_fu_764_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_115_fu_1167_p0 = sext_ln1345_63_fu_1164_p1;

assign mul_ln1345_115_fu_1167_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_116_fu_774_p0 = sext_ln1345_64_fu_770_p1;

assign mul_ln1345_116_fu_774_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_117_fu_784_p0 = sext_ln1345_65_fu_780_p1;

assign mul_ln1345_117_fu_784_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_118_fu_794_p0 = sext_ln1345_66_fu_790_p1;

assign mul_ln1345_118_fu_794_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_119_fu_1227_p0 = sext_ln1345_67_fu_1224_p1;

assign mul_ln1345_119_fu_1227_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_120_fu_804_p0 = sext_ln1345_68_fu_800_p1;

assign mul_ln1345_120_fu_804_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_121_fu_814_p0 = sext_ln1345_69_fu_810_p1;

assign mul_ln1345_121_fu_814_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_122_fu_824_p0 = sext_ln1345_70_fu_820_p1;

assign mul_ln1345_122_fu_824_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_123_fu_1287_p0 = sext_ln1345_71_fu_1284_p1;

assign mul_ln1345_123_fu_1287_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_124_fu_834_p0 = sext_ln1345_72_fu_830_p1;

assign mul_ln1345_124_fu_834_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_125_fu_844_p0 = sext_ln1345_73_fu_840_p1;

assign mul_ln1345_125_fu_844_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_126_fu_854_p0 = sext_ln1345_74_fu_850_p1;

assign mul_ln1345_126_fu_854_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_127_fu_1347_p0 = sext_ln1345_75_fu_1344_p1;

assign mul_ln1345_127_fu_1347_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_128_fu_864_p0 = sext_ln1345_76_fu_860_p1;

assign mul_ln1345_128_fu_864_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_129_fu_874_p0 = sext_ln1345_77_fu_870_p1;

assign mul_ln1345_129_fu_874_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_130_fu_884_p0 = sext_ln1345_78_fu_880_p1;

assign mul_ln1345_130_fu_884_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_131_fu_1407_p0 = sext_ln1345_79_fu_1404_p1;

assign mul_ln1345_131_fu_1407_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_132_fu_894_p0 = sext_ln1345_80_fu_890_p1;

assign mul_ln1345_132_fu_894_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_133_fu_904_p0 = sext_ln1345_81_fu_900_p1;

assign mul_ln1345_133_fu_904_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_134_fu_914_p0 = sext_ln1345_82_fu_910_p1;

assign mul_ln1345_134_fu_914_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_135_fu_1467_p0 = sext_ln1345_83_fu_1464_p1;

assign mul_ln1345_135_fu_1467_p1 = sext_ln1345_56_fu_1101_p1;

assign mul_ln1345_136_fu_924_p0 = sext_ln1345_84_fu_920_p1;

assign mul_ln1345_136_fu_924_p1 = sext_ln1345_58_fu_732_p1;

assign mul_ln1345_137_fu_934_p0 = sext_ln1345_85_fu_930_p1;

assign mul_ln1345_137_fu_934_p1 = sext_ln1345_60_fu_746_p1;

assign mul_ln1345_138_fu_944_p0 = sext_ln1345_55_fu_722_p1;

assign mul_ln1345_138_fu_944_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_139_fu_1527_p0 = sext_ln1345_57_fu_1104_p1;

assign mul_ln1345_139_fu_1527_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_140_fu_954_p0 = sext_ln1345_59_fu_736_p1;

assign mul_ln1345_140_fu_954_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_141_fu_964_p0 = sext_ln1345_61_fu_750_p1;

assign mul_ln1345_141_fu_964_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_142_fu_970_p0 = sext_ln1345_62_fu_760_p1;

assign mul_ln1345_142_fu_970_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_143_fu_1584_p0 = sext_ln1345_63_fu_1164_p1;

assign mul_ln1345_143_fu_1584_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_144_fu_976_p0 = sext_ln1345_64_fu_770_p1;

assign mul_ln1345_144_fu_976_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_145_fu_982_p0 = sext_ln1345_65_fu_780_p1;

assign mul_ln1345_145_fu_982_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_146_fu_988_p0 = sext_ln1345_66_fu_790_p1;

assign mul_ln1345_146_fu_988_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_147_fu_1641_p0 = sext_ln1345_67_fu_1224_p1;

assign mul_ln1345_147_fu_1641_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_148_fu_994_p0 = sext_ln1345_68_fu_800_p1;

assign mul_ln1345_148_fu_994_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_149_fu_1000_p0 = sext_ln1345_69_fu_810_p1;

assign mul_ln1345_149_fu_1000_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_150_fu_1006_p0 = sext_ln1345_70_fu_820_p1;

assign mul_ln1345_150_fu_1006_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_151_fu_1698_p0 = sext_ln1345_71_fu_1284_p1;

assign mul_ln1345_151_fu_1698_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_152_fu_1012_p0 = sext_ln1345_72_fu_830_p1;

assign mul_ln1345_152_fu_1012_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_153_fu_1018_p0 = sext_ln1345_73_fu_840_p1;

assign mul_ln1345_153_fu_1018_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_154_fu_1024_p0 = sext_ln1345_74_fu_850_p1;

assign mul_ln1345_154_fu_1024_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_155_fu_1755_p0 = sext_ln1345_75_fu_1344_p1;

assign mul_ln1345_155_fu_1755_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_156_fu_1030_p0 = sext_ln1345_76_fu_860_p1;

assign mul_ln1345_156_fu_1030_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_157_fu_1036_p0 = sext_ln1345_77_fu_870_p1;

assign mul_ln1345_157_fu_1036_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_158_fu_1042_p0 = sext_ln1345_78_fu_880_p1;

assign mul_ln1345_158_fu_1042_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_159_fu_1812_p0 = sext_ln1345_79_fu_1404_p1;

assign mul_ln1345_159_fu_1812_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_160_fu_1048_p0 = sext_ln1345_80_fu_890_p1;

assign mul_ln1345_160_fu_1048_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_161_fu_1054_p0 = sext_ln1345_81_fu_900_p1;

assign mul_ln1345_161_fu_1054_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_162_fu_1060_p0 = sext_ln1345_82_fu_910_p1;

assign mul_ln1345_162_fu_1060_p1 = sext_ln1345_86_fu_940_p1;

assign mul_ln1345_163_fu_1869_p0 = sext_ln1345_83_fu_1464_p1;

assign mul_ln1345_163_fu_1869_p1 = sext_ln1345_87_fu_1524_p1;

assign mul_ln1345_164_fu_1066_p0 = sext_ln1345_84_fu_920_p1;

assign mul_ln1345_164_fu_1066_p1 = sext_ln1345_88_fu_950_p1;

assign mul_ln1345_165_fu_1072_p0 = sext_ln1345_85_fu_930_p1;

assign mul_ln1345_165_fu_1072_p1 = sext_ln1345_89_fu_960_p1;

assign mul_ln1345_fu_726_p0 = sext_ln1345_55_fu_722_p1;

assign mul_ln1345_fu_726_p1 = sext_ln1345_fu_718_p1;

assign or_ln337_fu_351_p2 = (icmp_ln337_reg_2019 | and_ln336_fu_345_p2);

assign select_ln337_3_fu_326_p3 = ((icmp_ln337_fu_314_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_320_p2);

assign select_ln337_fu_356_p3 = ((or_ln337_fu_351_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_291);

assign select_ln342_fu_1087_p3 = ((icmp_ln342_reg_2035[0:0] == 1'b1) ? 140'd0 : vec_o_data_M_elems_V_2_fu_246);

assign sext_ln1345_55_fu_722_p1 = $signed(trunc_ln145_50_fu_444_p1);

assign sext_ln1345_56_fu_1101_p1 = $signed(trunc_ln145_s_reg_2040);

assign sext_ln1345_57_fu_1104_p1 = $signed(trunc_ln145_51_reg_2050);

assign sext_ln1345_58_fu_732_p1 = $signed(trunc_ln145_44_fu_384_p4);

assign sext_ln1345_59_fu_736_p1 = $signed(trunc_ln145_52_fu_458_p4);

assign sext_ln1345_60_fu_746_p1 = $signed(trunc_ln145_45_fu_394_p4);

assign sext_ln1345_61_fu_750_p1 = $signed(trunc_ln145_53_fu_468_p4);

assign sext_ln1345_62_fu_760_p1 = $signed(trunc_ln145_54_fu_478_p4);

assign sext_ln1345_63_fu_1164_p1 = $signed(trunc_ln145_55_reg_2055);

assign sext_ln1345_64_fu_770_p1 = $signed(trunc_ln145_56_fu_498_p4);

assign sext_ln1345_65_fu_780_p1 = $signed(trunc_ln145_57_fu_508_p4);

assign sext_ln1345_66_fu_790_p1 = $signed(trunc_ln145_58_fu_518_p4);

assign sext_ln1345_67_fu_1224_p1 = $signed(trunc_ln145_59_reg_2060);

assign sext_ln1345_68_fu_800_p1 = $signed(trunc_ln145_60_fu_538_p4);

assign sext_ln1345_69_fu_810_p1 = $signed(trunc_ln145_61_fu_548_p4);

assign sext_ln1345_70_fu_820_p1 = $signed(trunc_ln145_62_fu_558_p4);

assign sext_ln1345_71_fu_1284_p1 = $signed(trunc_ln145_63_reg_2065);

assign sext_ln1345_72_fu_830_p1 = $signed(trunc_ln145_64_fu_578_p4);

assign sext_ln1345_73_fu_840_p1 = $signed(trunc_ln145_65_fu_588_p4);

assign sext_ln1345_74_fu_850_p1 = $signed(trunc_ln145_66_fu_598_p4);

assign sext_ln1345_75_fu_1344_p1 = $signed(trunc_ln145_67_reg_2070);

assign sext_ln1345_76_fu_860_p1 = $signed(trunc_ln145_68_fu_618_p4);

assign sext_ln1345_77_fu_870_p1 = $signed(trunc_ln145_69_fu_628_p4);

assign sext_ln1345_78_fu_880_p1 = $signed(trunc_ln145_70_fu_638_p4);

assign sext_ln1345_79_fu_1404_p1 = $signed(trunc_ln145_71_reg_2075);

assign sext_ln1345_80_fu_890_p1 = $signed(trunc_ln145_72_fu_658_p4);

assign sext_ln1345_81_fu_900_p1 = $signed(trunc_ln145_73_fu_668_p4);

assign sext_ln1345_82_fu_910_p1 = $signed(trunc_ln145_74_fu_678_p4);

assign sext_ln1345_83_fu_1464_p1 = $signed(trunc_ln145_75_reg_2080);

assign sext_ln1345_84_fu_920_p1 = $signed(trunc_ln145_76_fu_698_p4);

assign sext_ln1345_85_fu_930_p1 = $signed(trunc_ln145_77_fu_708_p4);

assign sext_ln1345_86_fu_940_p1 = $signed(trunc_ln145_46_fu_404_p4);

assign sext_ln1345_87_fu_1524_p1 = $signed(trunc_ln145_47_reg_2045);

assign sext_ln1345_88_fu_950_p1 = $signed(trunc_ln145_48_fu_424_p4);

assign sext_ln1345_89_fu_960_p1 = $signed(trunc_ln145_49_fu_434_p4);

assign sext_ln1345_fu_718_p1 = $signed(trunc_ln145_fu_370_p1);

assign sext_ln368_63_fu_1177_p1 = mul_ln1345_116_reg_2105;

assign sext_ln368_64_fu_1237_p1 = mul_ln1345_120_reg_2120;

assign sext_ln368_65_fu_1297_p1 = mul_ln1345_124_reg_2135;

assign sext_ln368_66_fu_1357_p1 = mul_ln1345_128_reg_2150;

assign sext_ln368_67_fu_1417_p1 = mul_ln1345_132_reg_2165;

assign sext_ln368_68_fu_1477_p1 = mul_ln1345_136_reg_2180;

assign sext_ln368_69_fu_1537_p1 = mul_ln1345_140_reg_2195;

assign sext_ln368_70_fu_1594_p1 = mul_ln1345_144_reg_2210;

assign sext_ln368_71_fu_1651_p1 = mul_ln1345_148_reg_2225;

assign sext_ln368_72_fu_1708_p1 = mul_ln1345_152_reg_2240;

assign sext_ln368_73_fu_1765_p1 = mul_ln1345_156_reg_2255;

assign sext_ln368_74_fu_1822_p1 = mul_ln1345_160_reg_2270;

assign sext_ln368_75_fu_1879_p1 = mul_ln1345_164_reg_2285;

assign sext_ln368_fu_1117_p1 = mul_ln1345_112_reg_2090;

assign sext_ln691_111_fu_1113_p1 = mul_ln1345_111_fu_1107_p2;

assign sext_ln691_112_fu_1120_p1 = mul_ln1345_113_reg_2095;

assign sext_ln691_113_fu_1141_p1 = $signed(add_ln691_112_fu_1135_p2);

assign sext_ln691_114_fu_1151_p1 = mul_ln1345_114_reg_2100;

assign sext_ln691_115_fu_1173_p1 = mul_ln1345_115_fu_1167_p2;

assign sext_ln691_116_fu_1180_p1 = mul_ln1345_117_reg_2110;

assign sext_ln691_117_fu_1201_p1 = $signed(add_ln691_116_fu_1195_p2);

assign sext_ln691_118_fu_1211_p1 = mul_ln1345_118_reg_2115;

assign sext_ln691_119_fu_1233_p1 = mul_ln1345_119_fu_1227_p2;

assign sext_ln691_120_fu_1240_p1 = mul_ln1345_121_reg_2125;

assign sext_ln691_121_fu_1261_p1 = $signed(add_ln691_120_fu_1255_p2);

assign sext_ln691_122_fu_1271_p1 = mul_ln1345_122_reg_2130;

assign sext_ln691_123_fu_1293_p1 = mul_ln1345_123_fu_1287_p2;

assign sext_ln691_124_fu_1300_p1 = mul_ln1345_125_reg_2140;

assign sext_ln691_125_fu_1321_p1 = $signed(add_ln691_124_fu_1315_p2);

assign sext_ln691_126_fu_1331_p1 = mul_ln1345_126_reg_2145;

assign sext_ln691_127_fu_1353_p1 = mul_ln1345_127_fu_1347_p2;

assign sext_ln691_128_fu_1360_p1 = mul_ln1345_129_reg_2155;

assign sext_ln691_129_fu_1381_p1 = $signed(add_ln691_128_fu_1375_p2);

assign sext_ln691_130_fu_1391_p1 = mul_ln1345_130_reg_2160;

assign sext_ln691_131_fu_1413_p1 = mul_ln1345_131_fu_1407_p2;

assign sext_ln691_132_fu_1420_p1 = mul_ln1345_133_reg_2170;

assign sext_ln691_133_fu_1441_p1 = $signed(add_ln691_132_fu_1435_p2);

assign sext_ln691_134_fu_1451_p1 = mul_ln1345_134_reg_2175;

assign sext_ln691_135_fu_1473_p1 = mul_ln1345_135_fu_1467_p2;

assign sext_ln691_136_fu_1480_p1 = mul_ln1345_137_reg_2185;

assign sext_ln691_137_fu_1501_p1 = $signed(add_ln691_136_fu_1495_p2);

assign sext_ln691_138_fu_1511_p1 = mul_ln1345_138_reg_2190;

assign sext_ln691_139_fu_1533_p1 = mul_ln1345_139_fu_1527_p2;

assign sext_ln691_140_fu_1540_p1 = mul_ln1345_141_reg_2200;

assign sext_ln691_141_fu_1561_p1 = $signed(add_ln691_140_fu_1555_p2);

assign sext_ln691_142_fu_1571_p1 = mul_ln1345_142_reg_2205;

assign sext_ln691_143_fu_1590_p1 = mul_ln1345_143_fu_1584_p2;

assign sext_ln691_144_fu_1597_p1 = mul_ln1345_145_reg_2215;

assign sext_ln691_145_fu_1618_p1 = $signed(add_ln691_144_fu_1612_p2);

assign sext_ln691_146_fu_1628_p1 = mul_ln1345_146_reg_2220;

assign sext_ln691_147_fu_1647_p1 = mul_ln1345_147_fu_1641_p2;

assign sext_ln691_148_fu_1654_p1 = mul_ln1345_149_reg_2230;

assign sext_ln691_149_fu_1675_p1 = $signed(add_ln691_148_fu_1669_p2);

assign sext_ln691_150_fu_1685_p1 = mul_ln1345_150_reg_2235;

assign sext_ln691_151_fu_1704_p1 = mul_ln1345_151_fu_1698_p2;

assign sext_ln691_152_fu_1711_p1 = mul_ln1345_153_reg_2245;

assign sext_ln691_153_fu_1732_p1 = $signed(add_ln691_152_fu_1726_p2);

assign sext_ln691_154_fu_1742_p1 = mul_ln1345_154_reg_2250;

assign sext_ln691_155_fu_1761_p1 = mul_ln1345_155_fu_1755_p2;

assign sext_ln691_156_fu_1768_p1 = mul_ln1345_157_reg_2260;

assign sext_ln691_157_fu_1789_p1 = $signed(add_ln691_156_fu_1783_p2);

assign sext_ln691_158_fu_1799_p1 = mul_ln1345_158_reg_2265;

assign sext_ln691_159_fu_1818_p1 = mul_ln1345_159_fu_1812_p2;

assign sext_ln691_160_fu_1825_p1 = mul_ln1345_161_reg_2275;

assign sext_ln691_161_fu_1846_p1 = $signed(add_ln691_160_fu_1840_p2);

assign sext_ln691_162_fu_1856_p1 = mul_ln1345_162_reg_2280;

assign sext_ln691_163_fu_1875_p1 = mul_ln1345_163_fu_1869_p2;

assign sext_ln691_164_fu_1882_p1 = mul_ln1345_165_reg_2290;

assign sext_ln691_165_fu_1903_p1 = $signed(add_ln691_164_fu_1897_p2);

assign sext_ln691_fu_1094_p1 = mul_ln1345_reg_2085;

assign start_out = real_start;

assign tmp_185_fu_1214_p4 = {{select_ln342_fu_1087_p3[29:20]}};

assign tmp_186_fu_1274_p4 = {{select_ln342_fu_1087_p3[39:30]}};

assign tmp_187_fu_1334_p4 = {{select_ln342_fu_1087_p3[49:40]}};

assign tmp_188_fu_1394_p4 = {{select_ln342_fu_1087_p3[59:50]}};

assign tmp_189_fu_1454_p4 = {{select_ln342_fu_1087_p3[69:60]}};

assign tmp_190_fu_1514_p4 = {{select_ln342_fu_1087_p3[79:70]}};

assign tmp_191_fu_1574_p4 = {{select_ln342_fu_1087_p3[89:80]}};

assign tmp_192_fu_1631_p4 = {{select_ln342_fu_1087_p3[99:90]}};

assign tmp_193_fu_1688_p4 = {{select_ln342_fu_1087_p3[109:100]}};

assign tmp_194_fu_1745_p4 = {{select_ln342_fu_1087_p3[119:110]}};

assign tmp_195_fu_1802_p4 = {{select_ln342_fu_1087_p3[129:120]}};

assign tmp_196_fu_1859_p4 = {{select_ln342_fu_1087_p3[139:130]}};

assign tmp_197_fu_1913_p15 = {{{{{{{{{{{{{{add_ln691_165_fu_1907_p2}, {add_ln691_161_fu_1850_p2}}, {add_ln691_157_fu_1793_p2}}, {add_ln691_153_fu_1736_p2}}, {add_ln691_149_fu_1679_p2}}, {add_ln691_145_fu_1622_p2}}, {add_ln691_141_fu_1565_p2}}, {add_ln691_137_fu_1505_p2}}, {add_ln691_133_fu_1445_p2}}, {add_ln691_129_fu_1385_p2}}, {add_ln691_125_fu_1325_p2}}, {add_ln691_121_fu_1265_p2}}, {add_ln691_117_fu_1205_p2}}, {add_ln691_113_fu_1145_p2}};

assign tmp_198_fu_1955_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_165_reg_2365}, {6'd0}}, {add_ln691_161_reg_2360}}, {6'd0}}, {add_ln691_157_reg_2355}}, {6'd0}}, {add_ln691_153_reg_2350}}, {6'd0}}, {add_ln691_149_reg_2345}}, {6'd0}}, {add_ln691_145_reg_2340}}, {6'd0}}, {add_ln691_141_reg_2335}}, {6'd0}}, {add_ln691_137_reg_2330}}, {6'd0}}, {add_ln691_133_reg_2325}}, {6'd0}}, {add_ln691_129_reg_2320}}, {6'd0}}, {add_ln691_125_reg_2315}}, {6'd0}}, {add_ln691_121_reg_2310}}, {6'd0}}, {add_ln691_117_reg_2305}}, {6'd0}}, {add_ln691_113_reg_2300}};

assign tmp_s_fu_1154_p4 = {{select_ln342_fu_1087_p3[19:10]}};

assign trunc_ln145_44_fu_384_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_45_fu_394_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_46_fu_404_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_48_fu_424_p4 = {{cache_window_sm_dout[50:48]}};

assign trunc_ln145_49_fu_434_p4 = {{cache_window_sm_dout[58:56]}};

assign trunc_ln145_50_fu_444_p1 = weight_sm_dout[2:0];

assign trunc_ln145_52_fu_458_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_53_fu_468_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_54_fu_478_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_56_fu_498_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_57_fu_508_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_58_fu_518_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_60_fu_538_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_61_fu_548_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_62_fu_558_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln145_64_fu_578_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_65_fu_588_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_66_fu_598_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_68_fu_618_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_69_fu_628_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_70_fu_638_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_72_fu_658_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_73_fu_668_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_74_fu_678_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_76_fu_698_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_77_fu_708_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_fu_370_p1 = cache_window_sm_dout[2:0];

assign trunc_ln691_fu_1097_p1 = select_ln342_fu_1087_p3[9:0];

assign xor_ln336_fu_334_p2 = (icmp_ln337_reg_2019 ^ 1'd1);

endmodule //ATTN0_matmul_step2_mac157
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac168 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [111:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [127:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2066;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2336;
reg   [15:0] indvar_flatten13_reg_243;
reg   [9:0] indvar_flatten_reg_254;
reg   [4:0] cit_reg_265;
wire   [15:0] add_ln336_fu_276_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_282_p2;
reg   [0:0] icmp_ln336_reg_2066_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_288_p2;
reg   [0:0] icmp_ln337_reg_2070;
wire   [9:0] select_ln337_2_fu_300_p3;
wire   [4:0] select_ln337_fu_330_p3;
reg   [4:0] select_ln337_reg_2081;
wire   [0:0] icmp_ln342_fu_338_p2;
reg   [0:0] icmp_ln342_reg_2086;
wire  signed [5:0] mul_ln1345_58_fu_714_p2;
reg  signed [5:0] mul_ln1345_58_reg_2091;
wire  signed [5:0] mul_ln1345_59_fu_738_p2;
reg  signed [5:0] mul_ln1345_59_reg_2096;
wire  signed [5:0] mul_ln1345_60_fu_762_p2;
reg  signed [5:0] mul_ln1345_60_reg_2101;
wire   [6:0] add_ln691_58_fu_796_p2;
reg   [6:0] add_ln691_58_reg_2106;
wire   [6:0] add_ln691_59_fu_802_p2;
reg   [6:0] add_ln691_59_reg_2111;
wire  signed [5:0] mul_ln1345_65_fu_854_p2;
reg  signed [5:0] mul_ln1345_65_reg_2116;
wire  signed [5:0] mul_ln1345_66_fu_864_p2;
reg  signed [5:0] mul_ln1345_66_reg_2121;
wire  signed [5:0] mul_ln1345_67_fu_874_p2;
reg  signed [5:0] mul_ln1345_67_reg_2126;
wire   [6:0] add_ln691_65_fu_894_p2;
reg   [6:0] add_ln691_65_reg_2131;
wire   [6:0] add_ln691_66_fu_900_p2;
reg   [6:0] add_ln691_66_reg_2136;
wire  signed [5:0] mul_ln1345_72_fu_952_p2;
reg  signed [5:0] mul_ln1345_72_reg_2141;
wire  signed [5:0] mul_ln1345_73_fu_962_p2;
reg  signed [5:0] mul_ln1345_73_reg_2146;
wire  signed [5:0] mul_ln1345_74_fu_972_p2;
reg  signed [5:0] mul_ln1345_74_reg_2151;
wire   [6:0] add_ln691_72_fu_992_p2;
reg   [6:0] add_ln691_72_reg_2156;
wire   [6:0] add_ln691_73_fu_998_p2;
reg   [6:0] add_ln691_73_reg_2161;
wire  signed [5:0] mul_ln1345_79_fu_1050_p2;
reg  signed [5:0] mul_ln1345_79_reg_2166;
wire  signed [5:0] mul_ln1345_80_fu_1060_p2;
reg  signed [5:0] mul_ln1345_80_reg_2171;
wire  signed [5:0] mul_ln1345_81_fu_1070_p2;
reg  signed [5:0] mul_ln1345_81_reg_2176;
wire   [6:0] add_ln691_79_fu_1090_p2;
reg   [6:0] add_ln691_79_reg_2181;
wire   [6:0] add_ln691_80_fu_1096_p2;
reg   [6:0] add_ln691_80_reg_2186;
wire  signed [5:0] mul_ln1345_86_fu_1188_p2;
reg  signed [5:0] mul_ln1345_86_reg_2191;
wire  signed [5:0] mul_ln1345_87_fu_1208_p2;
reg  signed [5:0] mul_ln1345_87_reg_2196;
wire  signed [5:0] mul_ln1345_88_fu_1228_p2;
reg  signed [5:0] mul_ln1345_88_reg_2201;
wire   [6:0] add_ln691_86_fu_1258_p2;
reg   [6:0] add_ln691_86_reg_2206;
wire   [6:0] add_ln691_87_fu_1264_p2;
reg   [6:0] add_ln691_87_reg_2211;
wire  signed [5:0] mul_ln1345_93_fu_1300_p2;
reg  signed [5:0] mul_ln1345_93_reg_2216;
wire  signed [5:0] mul_ln1345_94_fu_1306_p2;
reg  signed [5:0] mul_ln1345_94_reg_2221;
wire  signed [5:0] mul_ln1345_95_fu_1312_p2;
reg  signed [5:0] mul_ln1345_95_reg_2226;
wire   [6:0] add_ln691_93_fu_1328_p2;
reg   [6:0] add_ln691_93_reg_2231;
wire   [6:0] add_ln691_94_fu_1334_p2;
reg   [6:0] add_ln691_94_reg_2236;
wire  signed [5:0] mul_ln1345_100_fu_1370_p2;
reg  signed [5:0] mul_ln1345_100_reg_2241;
wire  signed [5:0] mul_ln1345_101_fu_1376_p2;
reg  signed [5:0] mul_ln1345_101_reg_2246;
wire  signed [5:0] mul_ln1345_102_fu_1382_p2;
reg  signed [5:0] mul_ln1345_102_reg_2251;
wire   [6:0] add_ln691_100_fu_1398_p2;
reg   [6:0] add_ln691_100_reg_2256;
wire   [6:0] add_ln691_101_fu_1404_p2;
reg   [6:0] add_ln691_101_reg_2261;
wire  signed [5:0] mul_ln1345_107_fu_1440_p2;
reg  signed [5:0] mul_ln1345_107_reg_2266;
wire  signed [5:0] mul_ln1345_108_fu_1446_p2;
reg  signed [5:0] mul_ln1345_108_reg_2271;
wire  signed [5:0] mul_ln1345_109_fu_1452_p2;
reg  signed [5:0] mul_ln1345_109_reg_2276;
wire   [6:0] add_ln691_107_fu_1468_p2;
reg   [6:0] add_ln691_107_reg_2281;
wire   [6:0] add_ln691_108_fu_1474_p2;
reg   [6:0] add_ln691_108_reg_2286;
wire   [4:0] cit_2_fu_1480_p2;
wire   [10:0] add_ln691_61_fu_1547_p2;
reg   [10:0] add_ln691_61_reg_2296;
wire   [10:0] add_ln691_68_fu_1610_p2;
reg   [10:0] add_ln691_68_reg_2301;
wire   [10:0] add_ln691_75_fu_1673_p2;
reg   [10:0] add_ln691_75_reg_2306;
wire   [10:0] add_ln691_82_fu_1736_p2;
reg   [10:0] add_ln691_82_reg_2311;
wire   [10:0] add_ln691_89_fu_1799_p2;
reg   [10:0] add_ln691_89_reg_2316;
wire   [10:0] add_ln691_96_fu_1862_p2;
reg   [10:0] add_ln691_96_reg_2321;
wire   [10:0] add_ln691_103_fu_1925_p2;
reg   [10:0] add_ln691_103_reg_2326;
wire   [10:0] add_ln691_110_fu_1988_p2;
reg   [10:0] add_ln691_110_reg_2331;
wire   [0:0] icmp_ln378_fu_2014_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [87:0] vec_o_data_M_elems_V_2_fu_220;
wire   [87:0] tmp_183_fu_1994_p9;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_294_p2;
wire   [0:0] icmp_ln338_fu_313_p2;
wire   [0:0] xor_ln336_fu_308_p2;
wire   [0:0] and_ln336_fu_319_p2;
wire   [0:0] or_ln337_fu_325_p2;
wire   [2:0] trunc_ln145_fu_344_p1;
wire   [2:0] trunc_ln145_44_fu_348_p1;
wire  signed [2:0] mul_ln1345_fu_630_p0;
wire  signed [5:0] sext_ln1345_fu_626_p1;
wire   [2:0] mul_ln1345_fu_630_p1;
wire   [5:0] zext_ln1345_fu_622_p1;
wire  signed [5:0] mul_ln1345_fu_630_p2;
wire   [2:0] tmp_190_fu_640_p4;
wire   [2:0] trunc_ln145_18_fu_352_p4;
wire   [2:0] mul_ln1345_56_fu_658_p0;
wire   [5:0] zext_ln1345_14_fu_650_p1;
wire  signed [2:0] mul_ln1345_56_fu_658_p1;
wire  signed [5:0] sext_ln1345_28_fu_654_p1;
wire  signed [5:0] mul_ln1345_56_fu_658_p2;
wire   [2:0] tmp_191_fu_668_p4;
wire   [2:0] trunc_ln145_19_fu_362_p4;
wire   [2:0] mul_ln1345_57_fu_686_p0;
wire   [5:0] zext_ln1345_15_fu_678_p1;
wire  signed [2:0] mul_ln1345_57_fu_686_p1;
wire  signed [5:0] sext_ln1345_29_fu_682_p1;
wire  signed [5:0] mul_ln1345_57_fu_686_p2;
wire   [2:0] tmp_192_fu_696_p4;
wire   [2:0] trunc_ln145_20_fu_372_p4;
wire   [2:0] mul_ln1345_58_fu_714_p0;
wire   [5:0] zext_ln1345_16_fu_706_p1;
wire  signed [2:0] mul_ln1345_58_fu_714_p1;
wire  signed [5:0] sext_ln1345_30_fu_710_p1;
wire   [2:0] tmp_193_fu_720_p4;
wire   [2:0] trunc_ln145_21_fu_382_p4;
wire   [2:0] mul_ln1345_59_fu_738_p0;
wire   [5:0] zext_ln1345_17_fu_730_p1;
wire  signed [2:0] mul_ln1345_59_fu_738_p1;
wire  signed [5:0] sext_ln1345_31_fu_734_p1;
wire   [2:0] tmp_194_fu_744_p4;
wire   [2:0] trunc_ln145_22_fu_392_p4;
wire   [2:0] mul_ln1345_60_fu_762_p0;
wire   [5:0] zext_ln1345_18_fu_754_p1;
wire  signed [2:0] mul_ln1345_60_fu_762_p1;
wire  signed [5:0] sext_ln1345_32_fu_758_p1;
wire   [2:0] tmp_195_fu_768_p4;
wire   [2:0] trunc_ln145_23_fu_402_p4;
wire   [2:0] mul_ln1345_61_fu_786_p0;
wire   [5:0] zext_ln1345_19_fu_778_p1;
wire  signed [2:0] mul_ln1345_61_fu_786_p1;
wire  signed [5:0] sext_ln1345_33_fu_782_p1;
wire  signed [5:0] mul_ln1345_61_fu_786_p2;
wire  signed [6:0] sext_ln368_32_fu_692_p1;
wire  signed [6:0] sext_ln368_fu_664_p1;
wire  signed [6:0] sext_ln691_fu_636_p1;
wire  signed [6:0] sext_ln691_57_fu_792_p1;
wire   [2:0] trunc_ln145_24_fu_412_p4;
wire  signed [2:0] mul_ln1345_62_fu_812_p0;
wire  signed [5:0] sext_ln1345_34_fu_808_p1;
wire   [2:0] mul_ln1345_62_fu_812_p1;
wire  signed [5:0] mul_ln1345_62_fu_812_p2;
wire   [2:0] trunc_ln145_25_fu_422_p4;
wire   [2:0] mul_ln1345_63_fu_826_p0;
wire  signed [2:0] mul_ln1345_63_fu_826_p1;
wire  signed [5:0] sext_ln1345_35_fu_822_p1;
wire  signed [5:0] mul_ln1345_63_fu_826_p2;
wire   [2:0] trunc_ln145_26_fu_432_p4;
wire   [2:0] mul_ln1345_64_fu_840_p0;
wire  signed [2:0] mul_ln1345_64_fu_840_p1;
wire  signed [5:0] sext_ln1345_36_fu_836_p1;
wire  signed [5:0] mul_ln1345_64_fu_840_p2;
wire   [2:0] trunc_ln145_27_fu_442_p4;
wire   [2:0] mul_ln1345_65_fu_854_p0;
wire  signed [2:0] mul_ln1345_65_fu_854_p1;
wire  signed [5:0] sext_ln1345_37_fu_850_p1;
wire   [2:0] trunc_ln145_28_fu_452_p4;
wire   [2:0] mul_ln1345_66_fu_864_p0;
wire  signed [2:0] mul_ln1345_66_fu_864_p1;
wire  signed [5:0] sext_ln1345_38_fu_860_p1;
wire   [2:0] trunc_ln145_s_fu_462_p4;
wire   [2:0] mul_ln1345_67_fu_874_p0;
wire  signed [2:0] mul_ln1345_67_fu_874_p1;
wire  signed [5:0] sext_ln1345_39_fu_870_p1;
wire   [2:0] trunc_ln145_29_fu_472_p4;
wire   [2:0] mul_ln1345_68_fu_884_p0;
wire  signed [2:0] mul_ln1345_68_fu_884_p1;
wire  signed [5:0] sext_ln1345_40_fu_880_p1;
wire  signed [5:0] mul_ln1345_68_fu_884_p2;
wire  signed [6:0] sext_ln368_36_fu_846_p1;
wire  signed [6:0] sext_ln368_35_fu_832_p1;
wire  signed [6:0] sext_ln691_62_fu_818_p1;
wire  signed [6:0] sext_ln691_64_fu_890_p1;
wire   [2:0] trunc_ln145_30_fu_482_p4;
wire  signed [2:0] mul_ln1345_69_fu_910_p0;
wire  signed [5:0] sext_ln1345_41_fu_906_p1;
wire   [2:0] mul_ln1345_69_fu_910_p1;
wire  signed [5:0] mul_ln1345_69_fu_910_p2;
wire   [2:0] trunc_ln145_31_fu_492_p4;
wire   [2:0] mul_ln1345_70_fu_924_p0;
wire  signed [2:0] mul_ln1345_70_fu_924_p1;
wire  signed [5:0] sext_ln1345_42_fu_920_p1;
wire  signed [5:0] mul_ln1345_70_fu_924_p2;
wire   [2:0] trunc_ln145_32_fu_502_p4;
wire   [2:0] mul_ln1345_71_fu_938_p0;
wire  signed [2:0] mul_ln1345_71_fu_938_p1;
wire  signed [5:0] sext_ln1345_43_fu_934_p1;
wire  signed [5:0] mul_ln1345_71_fu_938_p2;
wire   [2:0] trunc_ln145_33_fu_512_p4;
wire   [2:0] mul_ln1345_72_fu_952_p0;
wire  signed [2:0] mul_ln1345_72_fu_952_p1;
wire  signed [5:0] sext_ln1345_44_fu_948_p1;
wire   [2:0] trunc_ln145_34_fu_522_p4;
wire   [2:0] mul_ln1345_73_fu_962_p0;
wire  signed [2:0] mul_ln1345_73_fu_962_p1;
wire  signed [5:0] sext_ln1345_45_fu_958_p1;
wire   [2:0] trunc_ln145_35_fu_532_p4;
wire   [2:0] mul_ln1345_74_fu_972_p0;
wire  signed [2:0] mul_ln1345_74_fu_972_p1;
wire  signed [5:0] sext_ln1345_46_fu_968_p1;
wire   [2:0] trunc_ln145_36_fu_542_p4;
wire   [2:0] mul_ln1345_75_fu_982_p0;
wire  signed [2:0] mul_ln1345_75_fu_982_p1;
wire  signed [5:0] sext_ln1345_47_fu_978_p1;
wire  signed [5:0] mul_ln1345_75_fu_982_p2;
wire  signed [6:0] sext_ln368_40_fu_944_p1;
wire  signed [6:0] sext_ln368_39_fu_930_p1;
wire  signed [6:0] sext_ln691_69_fu_916_p1;
wire  signed [6:0] sext_ln691_71_fu_988_p1;
wire   [2:0] trunc_ln145_37_fu_552_p4;
wire  signed [2:0] mul_ln1345_76_fu_1008_p0;
wire  signed [5:0] sext_ln1345_48_fu_1004_p1;
wire   [2:0] mul_ln1345_76_fu_1008_p1;
wire  signed [5:0] mul_ln1345_76_fu_1008_p2;
wire   [2:0] trunc_ln145_38_fu_562_p4;
wire   [2:0] mul_ln1345_77_fu_1022_p0;
wire  signed [2:0] mul_ln1345_77_fu_1022_p1;
wire  signed [5:0] sext_ln1345_49_fu_1018_p1;
wire  signed [5:0] mul_ln1345_77_fu_1022_p2;
wire   [2:0] trunc_ln145_39_fu_572_p4;
wire   [2:0] mul_ln1345_78_fu_1036_p0;
wire  signed [2:0] mul_ln1345_78_fu_1036_p1;
wire  signed [5:0] sext_ln1345_50_fu_1032_p1;
wire  signed [5:0] mul_ln1345_78_fu_1036_p2;
wire   [2:0] trunc_ln145_40_fu_582_p4;
wire   [2:0] mul_ln1345_79_fu_1050_p0;
wire  signed [2:0] mul_ln1345_79_fu_1050_p1;
wire  signed [5:0] sext_ln1345_51_fu_1046_p1;
wire   [2:0] trunc_ln145_41_fu_592_p4;
wire   [2:0] mul_ln1345_80_fu_1060_p0;
wire  signed [2:0] mul_ln1345_80_fu_1060_p1;
wire  signed [5:0] sext_ln1345_52_fu_1056_p1;
wire   [2:0] trunc_ln145_42_fu_602_p4;
wire   [2:0] mul_ln1345_81_fu_1070_p0;
wire  signed [2:0] mul_ln1345_81_fu_1070_p1;
wire  signed [5:0] sext_ln1345_53_fu_1066_p1;
wire   [2:0] trunc_ln145_43_fu_612_p4;
wire   [2:0] mul_ln1345_82_fu_1080_p0;
wire  signed [2:0] mul_ln1345_82_fu_1080_p1;
wire  signed [5:0] sext_ln1345_54_fu_1076_p1;
wire  signed [5:0] mul_ln1345_82_fu_1080_p2;
wire  signed [6:0] sext_ln368_44_fu_1042_p1;
wire  signed [6:0] sext_ln368_43_fu_1028_p1;
wire  signed [6:0] sext_ln691_76_fu_1014_p1;
wire  signed [6:0] sext_ln691_78_fu_1086_p1;
wire   [2:0] tmp_196_fu_1102_p4;
wire   [2:0] mul_ln1345_83_fu_1116_p0;
wire   [5:0] zext_ln1345_20_fu_1112_p1;
wire  signed [2:0] mul_ln1345_83_fu_1116_p1;
wire  signed [5:0] mul_ln1345_83_fu_1116_p2;
wire   [2:0] tmp_197_fu_1126_p4;
wire   [2:0] mul_ln1345_84_fu_1140_p0;
wire   [5:0] zext_ln1345_21_fu_1136_p1;
wire  signed [2:0] mul_ln1345_84_fu_1140_p1;
wire  signed [5:0] mul_ln1345_84_fu_1140_p2;
wire   [2:0] tmp_198_fu_1150_p4;
wire   [2:0] mul_ln1345_85_fu_1164_p0;
wire   [5:0] zext_ln1345_22_fu_1160_p1;
wire  signed [2:0] mul_ln1345_85_fu_1164_p1;
wire  signed [5:0] mul_ln1345_85_fu_1164_p2;
wire   [2:0] tmp_199_fu_1174_p4;
wire   [2:0] mul_ln1345_86_fu_1188_p0;
wire   [5:0] zext_ln1345_23_fu_1184_p1;
wire  signed [2:0] mul_ln1345_86_fu_1188_p1;
wire   [2:0] tmp_200_fu_1194_p4;
wire   [2:0] mul_ln1345_87_fu_1208_p0;
wire   [5:0] zext_ln1345_24_fu_1204_p1;
wire  signed [2:0] mul_ln1345_87_fu_1208_p1;
wire   [2:0] tmp_201_fu_1214_p4;
wire   [2:0] mul_ln1345_88_fu_1228_p0;
wire   [5:0] zext_ln1345_25_fu_1224_p1;
wire  signed [2:0] mul_ln1345_88_fu_1228_p1;
wire   [2:0] tmp_202_fu_1234_p4;
wire   [2:0] mul_ln1345_89_fu_1248_p0;
wire   [5:0] zext_ln1345_26_fu_1244_p1;
wire  signed [2:0] mul_ln1345_89_fu_1248_p1;
wire  signed [5:0] mul_ln1345_89_fu_1248_p2;
wire  signed [6:0] sext_ln368_48_fu_1170_p1;
wire  signed [6:0] sext_ln368_47_fu_1146_p1;
wire  signed [6:0] sext_ln691_83_fu_1122_p1;
wire  signed [6:0] sext_ln691_85_fu_1254_p1;
wire   [2:0] mul_ln1345_90_fu_1270_p0;
wire  signed [2:0] mul_ln1345_90_fu_1270_p1;
wire  signed [5:0] mul_ln1345_90_fu_1270_p2;
wire   [2:0] mul_ln1345_91_fu_1280_p0;
wire  signed [2:0] mul_ln1345_91_fu_1280_p1;
wire  signed [5:0] mul_ln1345_91_fu_1280_p2;
wire   [2:0] mul_ln1345_92_fu_1290_p0;
wire  signed [2:0] mul_ln1345_92_fu_1290_p1;
wire  signed [5:0] mul_ln1345_92_fu_1290_p2;
wire   [2:0] mul_ln1345_93_fu_1300_p0;
wire  signed [2:0] mul_ln1345_93_fu_1300_p1;
wire   [2:0] mul_ln1345_94_fu_1306_p0;
wire  signed [2:0] mul_ln1345_94_fu_1306_p1;
wire   [2:0] mul_ln1345_95_fu_1312_p0;
wire  signed [2:0] mul_ln1345_95_fu_1312_p1;
wire   [2:0] mul_ln1345_96_fu_1318_p0;
wire  signed [2:0] mul_ln1345_96_fu_1318_p1;
wire  signed [5:0] mul_ln1345_96_fu_1318_p2;
wire  signed [6:0] sext_ln368_52_fu_1296_p1;
wire  signed [6:0] sext_ln368_51_fu_1286_p1;
wire  signed [6:0] sext_ln691_90_fu_1276_p1;
wire  signed [6:0] sext_ln691_92_fu_1324_p1;
wire   [2:0] mul_ln1345_97_fu_1340_p0;
wire  signed [2:0] mul_ln1345_97_fu_1340_p1;
wire  signed [5:0] mul_ln1345_97_fu_1340_p2;
wire   [2:0] mul_ln1345_98_fu_1350_p0;
wire  signed [2:0] mul_ln1345_98_fu_1350_p1;
wire  signed [5:0] mul_ln1345_98_fu_1350_p2;
wire   [2:0] mul_ln1345_99_fu_1360_p0;
wire  signed [2:0] mul_ln1345_99_fu_1360_p1;
wire  signed [5:0] mul_ln1345_99_fu_1360_p2;
wire   [2:0] mul_ln1345_100_fu_1370_p0;
wire  signed [2:0] mul_ln1345_100_fu_1370_p1;
wire   [2:0] mul_ln1345_101_fu_1376_p0;
wire  signed [2:0] mul_ln1345_101_fu_1376_p1;
wire   [2:0] mul_ln1345_102_fu_1382_p0;
wire  signed [2:0] mul_ln1345_102_fu_1382_p1;
wire   [2:0] mul_ln1345_103_fu_1388_p0;
wire  signed [2:0] mul_ln1345_103_fu_1388_p1;
wire  signed [5:0] mul_ln1345_103_fu_1388_p2;
wire  signed [6:0] sext_ln368_56_fu_1366_p1;
wire  signed [6:0] sext_ln368_55_fu_1356_p1;
wire  signed [6:0] sext_ln691_97_fu_1346_p1;
wire  signed [6:0] sext_ln691_99_fu_1394_p1;
wire   [2:0] mul_ln1345_104_fu_1410_p0;
wire  signed [2:0] mul_ln1345_104_fu_1410_p1;
wire  signed [5:0] mul_ln1345_104_fu_1410_p2;
wire   [2:0] mul_ln1345_105_fu_1420_p0;
wire  signed [2:0] mul_ln1345_105_fu_1420_p1;
wire  signed [5:0] mul_ln1345_105_fu_1420_p2;
wire   [2:0] mul_ln1345_106_fu_1430_p0;
wire  signed [2:0] mul_ln1345_106_fu_1430_p1;
wire  signed [5:0] mul_ln1345_106_fu_1430_p2;
wire   [2:0] mul_ln1345_107_fu_1440_p0;
wire  signed [2:0] mul_ln1345_107_fu_1440_p1;
wire   [2:0] mul_ln1345_108_fu_1446_p0;
wire  signed [2:0] mul_ln1345_108_fu_1446_p1;
wire   [2:0] mul_ln1345_109_fu_1452_p0;
wire  signed [2:0] mul_ln1345_109_fu_1452_p1;
wire   [2:0] mul_ln1345_110_fu_1458_p0;
wire  signed [2:0] mul_ln1345_110_fu_1458_p1;
wire  signed [5:0] mul_ln1345_110_fu_1458_p2;
wire  signed [6:0] sext_ln368_60_fu_1436_p1;
wire  signed [6:0] sext_ln368_59_fu_1426_p1;
wire  signed [6:0] sext_ln691_104_fu_1416_p1;
wire  signed [6:0] sext_ln691_106_fu_1464_p1;
wire   [87:0] select_ln342_fu_1489_p3;
wire   [10:0] trunc_ln691_fu_1496_p1;
wire  signed [10:0] sext_ln691_56_fu_1503_p1;
wire  signed [6:0] sext_ln368_34_fu_1506_p1;
wire  signed [6:0] sext_ln368_33_fu_1500_p1;
wire   [6:0] add_ln691_56_fu_1515_p2;
wire  signed [10:0] sext_ln691_58_fu_1521_p1;
wire   [10:0] add_ln691_fu_1509_p2;
wire  signed [7:0] sext_ln691_60_fu_1534_p1;
wire  signed [7:0] sext_ln691_59_fu_1531_p1;
wire   [7:0] add_ln691_60_fu_1537_p2;
wire  signed [10:0] sext_ln691_61_fu_1543_p1;
wire   [10:0] add_ln691_57_fu_1525_p2;
wire   [10:0] tmp_s_fu_1553_p4;
wire  signed [10:0] sext_ln691_63_fu_1566_p1;
wire  signed [6:0] sext_ln368_38_fu_1569_p1;
wire  signed [6:0] sext_ln368_37_fu_1563_p1;
wire   [6:0] add_ln691_63_fu_1578_p2;
wire  signed [10:0] sext_ln691_65_fu_1584_p1;
wire   [10:0] add_ln691_62_fu_1572_p2;
wire  signed [7:0] sext_ln691_67_fu_1597_p1;
wire  signed [7:0] sext_ln691_66_fu_1594_p1;
wire   [7:0] add_ln691_67_fu_1600_p2;
wire  signed [10:0] sext_ln691_68_fu_1606_p1;
wire   [10:0] add_ln691_64_fu_1588_p2;
wire   [10:0] tmp_177_fu_1616_p4;
wire  signed [10:0] sext_ln691_70_fu_1629_p1;
wire  signed [6:0] sext_ln368_42_fu_1632_p1;
wire  signed [6:0] sext_ln368_41_fu_1626_p1;
wire   [6:0] add_ln691_70_fu_1641_p2;
wire  signed [10:0] sext_ln691_72_fu_1647_p1;
wire   [10:0] add_ln691_69_fu_1635_p2;
wire  signed [7:0] sext_ln691_74_fu_1660_p1;
wire  signed [7:0] sext_ln691_73_fu_1657_p1;
wire   [7:0] add_ln691_74_fu_1663_p2;
wire  signed [10:0] sext_ln691_75_fu_1669_p1;
wire   [10:0] add_ln691_71_fu_1651_p2;
wire   [10:0] tmp_178_fu_1679_p4;
wire  signed [10:0] sext_ln691_77_fu_1692_p1;
wire  signed [6:0] sext_ln368_46_fu_1695_p1;
wire  signed [6:0] sext_ln368_45_fu_1689_p1;
wire   [6:0] add_ln691_77_fu_1704_p2;
wire  signed [10:0] sext_ln691_79_fu_1710_p1;
wire   [10:0] add_ln691_76_fu_1698_p2;
wire  signed [7:0] sext_ln691_81_fu_1723_p1;
wire  signed [7:0] sext_ln691_80_fu_1720_p1;
wire   [7:0] add_ln691_81_fu_1726_p2;
wire  signed [10:0] sext_ln691_82_fu_1732_p1;
wire   [10:0] add_ln691_78_fu_1714_p2;
wire   [10:0] tmp_179_fu_1742_p4;
wire  signed [10:0] sext_ln691_84_fu_1755_p1;
wire  signed [6:0] sext_ln368_50_fu_1758_p1;
wire  signed [6:0] sext_ln368_49_fu_1752_p1;
wire   [6:0] add_ln691_84_fu_1767_p2;
wire  signed [10:0] sext_ln691_86_fu_1773_p1;
wire   [10:0] add_ln691_83_fu_1761_p2;
wire  signed [7:0] sext_ln691_88_fu_1786_p1;
wire  signed [7:0] sext_ln691_87_fu_1783_p1;
wire   [7:0] add_ln691_88_fu_1789_p2;
wire  signed [10:0] sext_ln691_89_fu_1795_p1;
wire   [10:0] add_ln691_85_fu_1777_p2;
wire   [10:0] tmp_180_fu_1805_p4;
wire  signed [10:0] sext_ln691_91_fu_1818_p1;
wire  signed [6:0] sext_ln368_54_fu_1821_p1;
wire  signed [6:0] sext_ln368_53_fu_1815_p1;
wire   [6:0] add_ln691_91_fu_1830_p2;
wire  signed [10:0] sext_ln691_93_fu_1836_p1;
wire   [10:0] add_ln691_90_fu_1824_p2;
wire  signed [7:0] sext_ln691_95_fu_1849_p1;
wire  signed [7:0] sext_ln691_94_fu_1846_p1;
wire   [7:0] add_ln691_95_fu_1852_p2;
wire  signed [10:0] sext_ln691_96_fu_1858_p1;
wire   [10:0] add_ln691_92_fu_1840_p2;
wire   [10:0] tmp_181_fu_1868_p4;
wire  signed [10:0] sext_ln691_98_fu_1881_p1;
wire  signed [6:0] sext_ln368_58_fu_1884_p1;
wire  signed [6:0] sext_ln368_57_fu_1878_p1;
wire   [6:0] add_ln691_98_fu_1893_p2;
wire  signed [10:0] sext_ln691_100_fu_1899_p1;
wire   [10:0] add_ln691_97_fu_1887_p2;
wire  signed [7:0] sext_ln691_102_fu_1912_p1;
wire  signed [7:0] sext_ln691_101_fu_1909_p1;
wire   [7:0] add_ln691_102_fu_1915_p2;
wire  signed [10:0] sext_ln691_103_fu_1921_p1;
wire   [10:0] add_ln691_99_fu_1903_p2;
wire   [10:0] tmp_182_fu_1931_p4;
wire  signed [10:0] sext_ln691_105_fu_1944_p1;
wire  signed [6:0] sext_ln368_62_fu_1947_p1;
wire  signed [6:0] sext_ln368_61_fu_1941_p1;
wire   [6:0] add_ln691_105_fu_1956_p2;
wire  signed [10:0] sext_ln691_107_fu_1962_p1;
wire   [10:0] add_ln691_104_fu_1950_p2;
wire  signed [7:0] sext_ln691_109_fu_1975_p1;
wire  signed [7:0] sext_ln691_108_fu_1972_p1;
wire   [7:0] add_ln691_109_fu_1978_p2;
wire  signed [10:0] sext_ln691_110_fu_1984_p1;
wire   [10:0] add_ln691_106_fu_1966_p2;
wire   [122:0] tmp_184_fu_2024_p16;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U846(
    .din0(mul_ln1345_fu_630_p0),
    .din1(mul_ln1345_fu_630_p1),
    .dout(mul_ln1345_fu_630_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U847(
    .din0(mul_ln1345_56_fu_658_p0),
    .din1(mul_ln1345_56_fu_658_p1),
    .dout(mul_ln1345_56_fu_658_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U848(
    .din0(mul_ln1345_57_fu_686_p0),
    .din1(mul_ln1345_57_fu_686_p1),
    .dout(mul_ln1345_57_fu_686_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U849(
    .din0(mul_ln1345_58_fu_714_p0),
    .din1(mul_ln1345_58_fu_714_p1),
    .dout(mul_ln1345_58_fu_714_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U850(
    .din0(mul_ln1345_59_fu_738_p0),
    .din1(mul_ln1345_59_fu_738_p1),
    .dout(mul_ln1345_59_fu_738_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U851(
    .din0(mul_ln1345_60_fu_762_p0),
    .din1(mul_ln1345_60_fu_762_p1),
    .dout(mul_ln1345_60_fu_762_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U852(
    .din0(mul_ln1345_61_fu_786_p0),
    .din1(mul_ln1345_61_fu_786_p1),
    .dout(mul_ln1345_61_fu_786_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U853(
    .din0(mul_ln1345_62_fu_812_p0),
    .din1(mul_ln1345_62_fu_812_p1),
    .dout(mul_ln1345_62_fu_812_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U854(
    .din0(mul_ln1345_63_fu_826_p0),
    .din1(mul_ln1345_63_fu_826_p1),
    .dout(mul_ln1345_63_fu_826_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U855(
    .din0(mul_ln1345_64_fu_840_p0),
    .din1(mul_ln1345_64_fu_840_p1),
    .dout(mul_ln1345_64_fu_840_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U856(
    .din0(mul_ln1345_65_fu_854_p0),
    .din1(mul_ln1345_65_fu_854_p1),
    .dout(mul_ln1345_65_fu_854_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U857(
    .din0(mul_ln1345_66_fu_864_p0),
    .din1(mul_ln1345_66_fu_864_p1),
    .dout(mul_ln1345_66_fu_864_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U858(
    .din0(mul_ln1345_67_fu_874_p0),
    .din1(mul_ln1345_67_fu_874_p1),
    .dout(mul_ln1345_67_fu_874_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U859(
    .din0(mul_ln1345_68_fu_884_p0),
    .din1(mul_ln1345_68_fu_884_p1),
    .dout(mul_ln1345_68_fu_884_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U860(
    .din0(mul_ln1345_69_fu_910_p0),
    .din1(mul_ln1345_69_fu_910_p1),
    .dout(mul_ln1345_69_fu_910_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U861(
    .din0(mul_ln1345_70_fu_924_p0),
    .din1(mul_ln1345_70_fu_924_p1),
    .dout(mul_ln1345_70_fu_924_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U862(
    .din0(mul_ln1345_71_fu_938_p0),
    .din1(mul_ln1345_71_fu_938_p1),
    .dout(mul_ln1345_71_fu_938_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U863(
    .din0(mul_ln1345_72_fu_952_p0),
    .din1(mul_ln1345_72_fu_952_p1),
    .dout(mul_ln1345_72_fu_952_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U864(
    .din0(mul_ln1345_73_fu_962_p0),
    .din1(mul_ln1345_73_fu_962_p1),
    .dout(mul_ln1345_73_fu_962_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U865(
    .din0(mul_ln1345_74_fu_972_p0),
    .din1(mul_ln1345_74_fu_972_p1),
    .dout(mul_ln1345_74_fu_972_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U866(
    .din0(mul_ln1345_75_fu_982_p0),
    .din1(mul_ln1345_75_fu_982_p1),
    .dout(mul_ln1345_75_fu_982_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U867(
    .din0(mul_ln1345_76_fu_1008_p0),
    .din1(mul_ln1345_76_fu_1008_p1),
    .dout(mul_ln1345_76_fu_1008_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U868(
    .din0(mul_ln1345_77_fu_1022_p0),
    .din1(mul_ln1345_77_fu_1022_p1),
    .dout(mul_ln1345_77_fu_1022_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U869(
    .din0(mul_ln1345_78_fu_1036_p0),
    .din1(mul_ln1345_78_fu_1036_p1),
    .dout(mul_ln1345_78_fu_1036_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U870(
    .din0(mul_ln1345_79_fu_1050_p0),
    .din1(mul_ln1345_79_fu_1050_p1),
    .dout(mul_ln1345_79_fu_1050_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U871(
    .din0(mul_ln1345_80_fu_1060_p0),
    .din1(mul_ln1345_80_fu_1060_p1),
    .dout(mul_ln1345_80_fu_1060_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U872(
    .din0(mul_ln1345_81_fu_1070_p0),
    .din1(mul_ln1345_81_fu_1070_p1),
    .dout(mul_ln1345_81_fu_1070_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U873(
    .din0(mul_ln1345_82_fu_1080_p0),
    .din1(mul_ln1345_82_fu_1080_p1),
    .dout(mul_ln1345_82_fu_1080_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U874(
    .din0(mul_ln1345_83_fu_1116_p0),
    .din1(mul_ln1345_83_fu_1116_p1),
    .dout(mul_ln1345_83_fu_1116_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U875(
    .din0(mul_ln1345_84_fu_1140_p0),
    .din1(mul_ln1345_84_fu_1140_p1),
    .dout(mul_ln1345_84_fu_1140_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U876(
    .din0(mul_ln1345_85_fu_1164_p0),
    .din1(mul_ln1345_85_fu_1164_p1),
    .dout(mul_ln1345_85_fu_1164_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U877(
    .din0(mul_ln1345_86_fu_1188_p0),
    .din1(mul_ln1345_86_fu_1188_p1),
    .dout(mul_ln1345_86_fu_1188_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U878(
    .din0(mul_ln1345_87_fu_1208_p0),
    .din1(mul_ln1345_87_fu_1208_p1),
    .dout(mul_ln1345_87_fu_1208_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U879(
    .din0(mul_ln1345_88_fu_1228_p0),
    .din1(mul_ln1345_88_fu_1228_p1),
    .dout(mul_ln1345_88_fu_1228_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U880(
    .din0(mul_ln1345_89_fu_1248_p0),
    .din1(mul_ln1345_89_fu_1248_p1),
    .dout(mul_ln1345_89_fu_1248_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U881(
    .din0(mul_ln1345_90_fu_1270_p0),
    .din1(mul_ln1345_90_fu_1270_p1),
    .dout(mul_ln1345_90_fu_1270_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U882(
    .din0(mul_ln1345_91_fu_1280_p0),
    .din1(mul_ln1345_91_fu_1280_p1),
    .dout(mul_ln1345_91_fu_1280_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U883(
    .din0(mul_ln1345_92_fu_1290_p0),
    .din1(mul_ln1345_92_fu_1290_p1),
    .dout(mul_ln1345_92_fu_1290_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U884(
    .din0(mul_ln1345_93_fu_1300_p0),
    .din1(mul_ln1345_93_fu_1300_p1),
    .dout(mul_ln1345_93_fu_1300_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U885(
    .din0(mul_ln1345_94_fu_1306_p0),
    .din1(mul_ln1345_94_fu_1306_p1),
    .dout(mul_ln1345_94_fu_1306_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U886(
    .din0(mul_ln1345_95_fu_1312_p0),
    .din1(mul_ln1345_95_fu_1312_p1),
    .dout(mul_ln1345_95_fu_1312_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U887(
    .din0(mul_ln1345_96_fu_1318_p0),
    .din1(mul_ln1345_96_fu_1318_p1),
    .dout(mul_ln1345_96_fu_1318_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U888(
    .din0(mul_ln1345_97_fu_1340_p0),
    .din1(mul_ln1345_97_fu_1340_p1),
    .dout(mul_ln1345_97_fu_1340_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U889(
    .din0(mul_ln1345_98_fu_1350_p0),
    .din1(mul_ln1345_98_fu_1350_p1),
    .dout(mul_ln1345_98_fu_1350_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U890(
    .din0(mul_ln1345_99_fu_1360_p0),
    .din1(mul_ln1345_99_fu_1360_p1),
    .dout(mul_ln1345_99_fu_1360_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U891(
    .din0(mul_ln1345_100_fu_1370_p0),
    .din1(mul_ln1345_100_fu_1370_p1),
    .dout(mul_ln1345_100_fu_1370_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U892(
    .din0(mul_ln1345_101_fu_1376_p0),
    .din1(mul_ln1345_101_fu_1376_p1),
    .dout(mul_ln1345_101_fu_1376_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U893(
    .din0(mul_ln1345_102_fu_1382_p0),
    .din1(mul_ln1345_102_fu_1382_p1),
    .dout(mul_ln1345_102_fu_1382_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U894(
    .din0(mul_ln1345_103_fu_1388_p0),
    .din1(mul_ln1345_103_fu_1388_p1),
    .dout(mul_ln1345_103_fu_1388_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U895(
    .din0(mul_ln1345_104_fu_1410_p0),
    .din1(mul_ln1345_104_fu_1410_p1),
    .dout(mul_ln1345_104_fu_1410_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U896(
    .din0(mul_ln1345_105_fu_1420_p0),
    .din1(mul_ln1345_105_fu_1420_p1),
    .dout(mul_ln1345_105_fu_1420_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U897(
    .din0(mul_ln1345_106_fu_1430_p0),
    .din1(mul_ln1345_106_fu_1430_p1),
    .dout(mul_ln1345_106_fu_1430_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U898(
    .din0(mul_ln1345_107_fu_1440_p0),
    .din1(mul_ln1345_107_fu_1440_p1),
    .dout(mul_ln1345_107_fu_1440_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U899(
    .din0(mul_ln1345_108_fu_1446_p0),
    .din1(mul_ln1345_108_fu_1446_p1),
    .dout(mul_ln1345_108_fu_1446_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U900(
    .din0(mul_ln1345_109_fu_1452_p0),
    .din1(mul_ln1345_109_fu_1452_p1),
    .dout(mul_ln1345_109_fu_1452_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U901(
    .din0(mul_ln1345_110_fu_1458_p0),
    .din1(mul_ln1345_110_fu_1458_p1),
    .dout(mul_ln1345_110_fu_1458_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_265 <= cit_2_fu_1480_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_265 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten13_reg_243 <= add_ln336_fu_276_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_243 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten_reg_254 <= select_ln337_2_fu_300_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_254 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_100_reg_2256 <= add_ln691_100_fu_1398_p2;
        add_ln691_101_reg_2261 <= add_ln691_101_fu_1404_p2;
        add_ln691_107_reg_2281 <= add_ln691_107_fu_1468_p2;
        add_ln691_108_reg_2286 <= add_ln691_108_fu_1474_p2;
        add_ln691_58_reg_2106 <= add_ln691_58_fu_796_p2;
        add_ln691_59_reg_2111 <= add_ln691_59_fu_802_p2;
        add_ln691_65_reg_2131 <= add_ln691_65_fu_894_p2;
        add_ln691_66_reg_2136 <= add_ln691_66_fu_900_p2;
        add_ln691_72_reg_2156 <= add_ln691_72_fu_992_p2;
        add_ln691_73_reg_2161 <= add_ln691_73_fu_998_p2;
        add_ln691_79_reg_2181 <= add_ln691_79_fu_1090_p2;
        add_ln691_80_reg_2186 <= add_ln691_80_fu_1096_p2;
        add_ln691_86_reg_2206 <= add_ln691_86_fu_1258_p2;
        add_ln691_87_reg_2211 <= add_ln691_87_fu_1264_p2;
        add_ln691_93_reg_2231 <= add_ln691_93_fu_1328_p2;
        add_ln691_94_reg_2236 <= add_ln691_94_fu_1334_p2;
        icmp_ln342_reg_2086 <= icmp_ln342_fu_338_p2;
        mul_ln1345_100_reg_2241 <= mul_ln1345_100_fu_1370_p2;
        mul_ln1345_101_reg_2246 <= mul_ln1345_101_fu_1376_p2;
        mul_ln1345_102_reg_2251 <= mul_ln1345_102_fu_1382_p2;
        mul_ln1345_107_reg_2266 <= mul_ln1345_107_fu_1440_p2;
        mul_ln1345_108_reg_2271 <= mul_ln1345_108_fu_1446_p2;
        mul_ln1345_109_reg_2276 <= mul_ln1345_109_fu_1452_p2;
        mul_ln1345_58_reg_2091 <= mul_ln1345_58_fu_714_p2;
        mul_ln1345_59_reg_2096 <= mul_ln1345_59_fu_738_p2;
        mul_ln1345_60_reg_2101 <= mul_ln1345_60_fu_762_p2;
        mul_ln1345_65_reg_2116 <= mul_ln1345_65_fu_854_p2;
        mul_ln1345_66_reg_2121 <= mul_ln1345_66_fu_864_p2;
        mul_ln1345_67_reg_2126 <= mul_ln1345_67_fu_874_p2;
        mul_ln1345_72_reg_2141 <= mul_ln1345_72_fu_952_p2;
        mul_ln1345_73_reg_2146 <= mul_ln1345_73_fu_962_p2;
        mul_ln1345_74_reg_2151 <= mul_ln1345_74_fu_972_p2;
        mul_ln1345_79_reg_2166 <= mul_ln1345_79_fu_1050_p2;
        mul_ln1345_80_reg_2171 <= mul_ln1345_80_fu_1060_p2;
        mul_ln1345_81_reg_2176 <= mul_ln1345_81_fu_1070_p2;
        mul_ln1345_86_reg_2191 <= mul_ln1345_86_fu_1188_p2;
        mul_ln1345_87_reg_2196 <= mul_ln1345_87_fu_1208_p2;
        mul_ln1345_88_reg_2201 <= mul_ln1345_88_fu_1228_p2;
        mul_ln1345_93_reg_2216 <= mul_ln1345_93_fu_1300_p2;
        mul_ln1345_94_reg_2221 <= mul_ln1345_94_fu_1306_p2;
        mul_ln1345_95_reg_2226 <= mul_ln1345_95_fu_1312_p2;
        select_ln337_reg_2081 <= select_ln337_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        add_ln691_103_reg_2326 <= add_ln691_103_fu_1925_p2;
        add_ln691_110_reg_2331 <= add_ln691_110_fu_1988_p2;
        add_ln691_61_reg_2296 <= add_ln691_61_fu_1547_p2;
        add_ln691_68_reg_2301 <= add_ln691_68_fu_1610_p2;
        add_ln691_75_reg_2306 <= add_ln691_75_fu_1673_p2;
        add_ln691_82_reg_2311 <= add_ln691_82_fu_1736_p2;
        add_ln691_89_reg_2316 <= add_ln691_89_fu_1799_p2;
        add_ln691_96_reg_2321 <= add_ln691_96_fu_1862_p2;
        icmp_ln378_reg_2336 <= icmp_ln378_fu_2014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2066 <= icmp_ln336_fu_282_p2;
        icmp_ln336_reg_2066_pp0_iter1_reg <= icmp_ln336_reg_2066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        icmp_ln337_reg_2070 <= icmp_ln337_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_220 <= tmp_183_fu_1994_p9;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_276_p2 = (indvar_flatten13_reg_243 + 16'd1);

assign add_ln337_fu_294_p2 = (indvar_flatten_reg_254 + 10'd1);

assign add_ln691_100_fu_1398_p2 = ($signed(sext_ln368_56_fu_1366_p1) + $signed(sext_ln368_55_fu_1356_p1));

assign add_ln691_101_fu_1404_p2 = ($signed(sext_ln691_97_fu_1346_p1) + $signed(sext_ln691_99_fu_1394_p1));

assign add_ln691_102_fu_1915_p2 = ($signed(sext_ln691_102_fu_1912_p1) + $signed(sext_ln691_101_fu_1909_p1));

assign add_ln691_103_fu_1925_p2 = ($signed(sext_ln691_103_fu_1921_p1) + $signed(add_ln691_99_fu_1903_p2));

assign add_ln691_104_fu_1950_p2 = ($signed(tmp_182_fu_1931_p4) + $signed(sext_ln691_105_fu_1944_p1));

assign add_ln691_105_fu_1956_p2 = ($signed(sext_ln368_62_fu_1947_p1) + $signed(sext_ln368_61_fu_1941_p1));

assign add_ln691_106_fu_1966_p2 = ($signed(sext_ln691_107_fu_1962_p1) + $signed(add_ln691_104_fu_1950_p2));

assign add_ln691_107_fu_1468_p2 = ($signed(sext_ln368_60_fu_1436_p1) + $signed(sext_ln368_59_fu_1426_p1));

assign add_ln691_108_fu_1474_p2 = ($signed(sext_ln691_104_fu_1416_p1) + $signed(sext_ln691_106_fu_1464_p1));

assign add_ln691_109_fu_1978_p2 = ($signed(sext_ln691_109_fu_1975_p1) + $signed(sext_ln691_108_fu_1972_p1));

assign add_ln691_110_fu_1988_p2 = ($signed(sext_ln691_110_fu_1984_p1) + $signed(add_ln691_106_fu_1966_p2));

assign add_ln691_56_fu_1515_p2 = ($signed(sext_ln368_34_fu_1506_p1) + $signed(sext_ln368_33_fu_1500_p1));

assign add_ln691_57_fu_1525_p2 = ($signed(sext_ln691_58_fu_1521_p1) + $signed(add_ln691_fu_1509_p2));

assign add_ln691_58_fu_796_p2 = ($signed(sext_ln368_32_fu_692_p1) + $signed(sext_ln368_fu_664_p1));

assign add_ln691_59_fu_802_p2 = ($signed(sext_ln691_fu_636_p1) + $signed(sext_ln691_57_fu_792_p1));

assign add_ln691_60_fu_1537_p2 = ($signed(sext_ln691_60_fu_1534_p1) + $signed(sext_ln691_59_fu_1531_p1));

assign add_ln691_61_fu_1547_p2 = ($signed(sext_ln691_61_fu_1543_p1) + $signed(add_ln691_57_fu_1525_p2));

assign add_ln691_62_fu_1572_p2 = ($signed(tmp_s_fu_1553_p4) + $signed(sext_ln691_63_fu_1566_p1));

assign add_ln691_63_fu_1578_p2 = ($signed(sext_ln368_38_fu_1569_p1) + $signed(sext_ln368_37_fu_1563_p1));

assign add_ln691_64_fu_1588_p2 = ($signed(sext_ln691_65_fu_1584_p1) + $signed(add_ln691_62_fu_1572_p2));

assign add_ln691_65_fu_894_p2 = ($signed(sext_ln368_36_fu_846_p1) + $signed(sext_ln368_35_fu_832_p1));

assign add_ln691_66_fu_900_p2 = ($signed(sext_ln691_62_fu_818_p1) + $signed(sext_ln691_64_fu_890_p1));

assign add_ln691_67_fu_1600_p2 = ($signed(sext_ln691_67_fu_1597_p1) + $signed(sext_ln691_66_fu_1594_p1));

assign add_ln691_68_fu_1610_p2 = ($signed(sext_ln691_68_fu_1606_p1) + $signed(add_ln691_64_fu_1588_p2));

assign add_ln691_69_fu_1635_p2 = ($signed(tmp_177_fu_1616_p4) + $signed(sext_ln691_70_fu_1629_p1));

assign add_ln691_70_fu_1641_p2 = ($signed(sext_ln368_42_fu_1632_p1) + $signed(sext_ln368_41_fu_1626_p1));

assign add_ln691_71_fu_1651_p2 = ($signed(sext_ln691_72_fu_1647_p1) + $signed(add_ln691_69_fu_1635_p2));

assign add_ln691_72_fu_992_p2 = ($signed(sext_ln368_40_fu_944_p1) + $signed(sext_ln368_39_fu_930_p1));

assign add_ln691_73_fu_998_p2 = ($signed(sext_ln691_69_fu_916_p1) + $signed(sext_ln691_71_fu_988_p1));

assign add_ln691_74_fu_1663_p2 = ($signed(sext_ln691_74_fu_1660_p1) + $signed(sext_ln691_73_fu_1657_p1));

assign add_ln691_75_fu_1673_p2 = ($signed(sext_ln691_75_fu_1669_p1) + $signed(add_ln691_71_fu_1651_p2));

assign add_ln691_76_fu_1698_p2 = ($signed(tmp_178_fu_1679_p4) + $signed(sext_ln691_77_fu_1692_p1));

assign add_ln691_77_fu_1704_p2 = ($signed(sext_ln368_46_fu_1695_p1) + $signed(sext_ln368_45_fu_1689_p1));

assign add_ln691_78_fu_1714_p2 = ($signed(sext_ln691_79_fu_1710_p1) + $signed(add_ln691_76_fu_1698_p2));

assign add_ln691_79_fu_1090_p2 = ($signed(sext_ln368_44_fu_1042_p1) + $signed(sext_ln368_43_fu_1028_p1));

assign add_ln691_80_fu_1096_p2 = ($signed(sext_ln691_76_fu_1014_p1) + $signed(sext_ln691_78_fu_1086_p1));

assign add_ln691_81_fu_1726_p2 = ($signed(sext_ln691_81_fu_1723_p1) + $signed(sext_ln691_80_fu_1720_p1));

assign add_ln691_82_fu_1736_p2 = ($signed(sext_ln691_82_fu_1732_p1) + $signed(add_ln691_78_fu_1714_p2));

assign add_ln691_83_fu_1761_p2 = ($signed(tmp_179_fu_1742_p4) + $signed(sext_ln691_84_fu_1755_p1));

assign add_ln691_84_fu_1767_p2 = ($signed(sext_ln368_50_fu_1758_p1) + $signed(sext_ln368_49_fu_1752_p1));

assign add_ln691_85_fu_1777_p2 = ($signed(sext_ln691_86_fu_1773_p1) + $signed(add_ln691_83_fu_1761_p2));

assign add_ln691_86_fu_1258_p2 = ($signed(sext_ln368_48_fu_1170_p1) + $signed(sext_ln368_47_fu_1146_p1));

assign add_ln691_87_fu_1264_p2 = ($signed(sext_ln691_83_fu_1122_p1) + $signed(sext_ln691_85_fu_1254_p1));

assign add_ln691_88_fu_1789_p2 = ($signed(sext_ln691_88_fu_1786_p1) + $signed(sext_ln691_87_fu_1783_p1));

assign add_ln691_89_fu_1799_p2 = ($signed(sext_ln691_89_fu_1795_p1) + $signed(add_ln691_85_fu_1777_p2));

assign add_ln691_90_fu_1824_p2 = ($signed(tmp_180_fu_1805_p4) + $signed(sext_ln691_91_fu_1818_p1));

assign add_ln691_91_fu_1830_p2 = ($signed(sext_ln368_54_fu_1821_p1) + $signed(sext_ln368_53_fu_1815_p1));

assign add_ln691_92_fu_1840_p2 = ($signed(sext_ln691_93_fu_1836_p1) + $signed(add_ln691_90_fu_1824_p2));

assign add_ln691_93_fu_1328_p2 = ($signed(sext_ln368_52_fu_1296_p1) + $signed(sext_ln368_51_fu_1286_p1));

assign add_ln691_94_fu_1334_p2 = ($signed(sext_ln691_90_fu_1276_p1) + $signed(sext_ln691_92_fu_1324_p1));

assign add_ln691_95_fu_1852_p2 = ($signed(sext_ln691_95_fu_1849_p1) + $signed(sext_ln691_94_fu_1846_p1));

assign add_ln691_96_fu_1862_p2 = ($signed(sext_ln691_96_fu_1858_p1) + $signed(add_ln691_92_fu_1840_p2));

assign add_ln691_97_fu_1887_p2 = ($signed(tmp_181_fu_1868_p4) + $signed(sext_ln691_98_fu_1881_p1));

assign add_ln691_98_fu_1893_p2 = ($signed(sext_ln368_58_fu_1884_p1) + $signed(sext_ln368_57_fu_1878_p1));

assign add_ln691_99_fu_1903_p2 = ($signed(sext_ln691_100_fu_1899_p1) + $signed(add_ln691_97_fu_1887_p2));

assign add_ln691_fu_1509_p2 = ($signed(trunc_ln691_fu_1496_p1) + $signed(sext_ln691_56_fu_1503_p1));

assign and_ln336_fu_319_p2 = (xor_ln336_fu_308_p2 & icmp_ln338_fu_313_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2336 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_2_fu_1480_p2 = (select_ln337_fu_330_p3 + 5'd1);

assign icmp_ln336_fu_282_p2 = ((indvar_flatten13_reg_243 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_288_p2 = ((indvar_flatten_reg_254 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_313_p2 = ((cit_reg_265 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_338_p2 = ((select_ln337_fu_330_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2014_p2 = ((select_ln337_reg_2081 == 5'd27) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_184_fu_2024_p16;

assign mul_ln1345_100_fu_1370_p0 = zext_ln1345_23_fu_1184_p1;

assign mul_ln1345_100_fu_1370_p1 = sext_ln1345_44_fu_948_p1;

assign mul_ln1345_101_fu_1376_p0 = zext_ln1345_24_fu_1204_p1;

assign mul_ln1345_101_fu_1376_p1 = sext_ln1345_45_fu_958_p1;

assign mul_ln1345_102_fu_1382_p0 = zext_ln1345_25_fu_1224_p1;

assign mul_ln1345_102_fu_1382_p1 = sext_ln1345_46_fu_968_p1;

assign mul_ln1345_103_fu_1388_p0 = zext_ln1345_26_fu_1244_p1;

assign mul_ln1345_103_fu_1388_p1 = sext_ln1345_47_fu_978_p1;

assign mul_ln1345_104_fu_1410_p0 = zext_ln1345_20_fu_1112_p1;

assign mul_ln1345_104_fu_1410_p1 = sext_ln1345_48_fu_1004_p1;

assign mul_ln1345_105_fu_1420_p0 = zext_ln1345_21_fu_1136_p1;

assign mul_ln1345_105_fu_1420_p1 = sext_ln1345_49_fu_1018_p1;

assign mul_ln1345_106_fu_1430_p0 = zext_ln1345_22_fu_1160_p1;

assign mul_ln1345_106_fu_1430_p1 = sext_ln1345_50_fu_1032_p1;

assign mul_ln1345_107_fu_1440_p0 = zext_ln1345_23_fu_1184_p1;

assign mul_ln1345_107_fu_1440_p1 = sext_ln1345_51_fu_1046_p1;

assign mul_ln1345_108_fu_1446_p0 = zext_ln1345_24_fu_1204_p1;

assign mul_ln1345_108_fu_1446_p1 = sext_ln1345_52_fu_1056_p1;

assign mul_ln1345_109_fu_1452_p0 = zext_ln1345_25_fu_1224_p1;

assign mul_ln1345_109_fu_1452_p1 = sext_ln1345_53_fu_1066_p1;

assign mul_ln1345_110_fu_1458_p0 = zext_ln1345_26_fu_1244_p1;

assign mul_ln1345_110_fu_1458_p1 = sext_ln1345_54_fu_1076_p1;

assign mul_ln1345_56_fu_658_p0 = zext_ln1345_14_fu_650_p1;

assign mul_ln1345_56_fu_658_p1 = sext_ln1345_28_fu_654_p1;

assign mul_ln1345_57_fu_686_p0 = zext_ln1345_15_fu_678_p1;

assign mul_ln1345_57_fu_686_p1 = sext_ln1345_29_fu_682_p1;

assign mul_ln1345_58_fu_714_p0 = zext_ln1345_16_fu_706_p1;

assign mul_ln1345_58_fu_714_p1 = sext_ln1345_30_fu_710_p1;

assign mul_ln1345_59_fu_738_p0 = zext_ln1345_17_fu_730_p1;

assign mul_ln1345_59_fu_738_p1 = sext_ln1345_31_fu_734_p1;

assign mul_ln1345_60_fu_762_p0 = zext_ln1345_18_fu_754_p1;

assign mul_ln1345_60_fu_762_p1 = sext_ln1345_32_fu_758_p1;

assign mul_ln1345_61_fu_786_p0 = zext_ln1345_19_fu_778_p1;

assign mul_ln1345_61_fu_786_p1 = sext_ln1345_33_fu_782_p1;

assign mul_ln1345_62_fu_812_p0 = sext_ln1345_34_fu_808_p1;

assign mul_ln1345_62_fu_812_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_63_fu_826_p0 = zext_ln1345_14_fu_650_p1;

assign mul_ln1345_63_fu_826_p1 = sext_ln1345_35_fu_822_p1;

assign mul_ln1345_64_fu_840_p0 = zext_ln1345_15_fu_678_p1;

assign mul_ln1345_64_fu_840_p1 = sext_ln1345_36_fu_836_p1;

assign mul_ln1345_65_fu_854_p0 = zext_ln1345_16_fu_706_p1;

assign mul_ln1345_65_fu_854_p1 = sext_ln1345_37_fu_850_p1;

assign mul_ln1345_66_fu_864_p0 = zext_ln1345_17_fu_730_p1;

assign mul_ln1345_66_fu_864_p1 = sext_ln1345_38_fu_860_p1;

assign mul_ln1345_67_fu_874_p0 = zext_ln1345_18_fu_754_p1;

assign mul_ln1345_67_fu_874_p1 = sext_ln1345_39_fu_870_p1;

assign mul_ln1345_68_fu_884_p0 = zext_ln1345_19_fu_778_p1;

assign mul_ln1345_68_fu_884_p1 = sext_ln1345_40_fu_880_p1;

assign mul_ln1345_69_fu_910_p0 = sext_ln1345_41_fu_906_p1;

assign mul_ln1345_69_fu_910_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_70_fu_924_p0 = zext_ln1345_14_fu_650_p1;

assign mul_ln1345_70_fu_924_p1 = sext_ln1345_42_fu_920_p1;

assign mul_ln1345_71_fu_938_p0 = zext_ln1345_15_fu_678_p1;

assign mul_ln1345_71_fu_938_p1 = sext_ln1345_43_fu_934_p1;

assign mul_ln1345_72_fu_952_p0 = zext_ln1345_16_fu_706_p1;

assign mul_ln1345_72_fu_952_p1 = sext_ln1345_44_fu_948_p1;

assign mul_ln1345_73_fu_962_p0 = zext_ln1345_17_fu_730_p1;

assign mul_ln1345_73_fu_962_p1 = sext_ln1345_45_fu_958_p1;

assign mul_ln1345_74_fu_972_p0 = zext_ln1345_18_fu_754_p1;

assign mul_ln1345_74_fu_972_p1 = sext_ln1345_46_fu_968_p1;

assign mul_ln1345_75_fu_982_p0 = zext_ln1345_19_fu_778_p1;

assign mul_ln1345_75_fu_982_p1 = sext_ln1345_47_fu_978_p1;

assign mul_ln1345_76_fu_1008_p0 = sext_ln1345_48_fu_1004_p1;

assign mul_ln1345_76_fu_1008_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_77_fu_1022_p0 = zext_ln1345_14_fu_650_p1;

assign mul_ln1345_77_fu_1022_p1 = sext_ln1345_49_fu_1018_p1;

assign mul_ln1345_78_fu_1036_p0 = zext_ln1345_15_fu_678_p1;

assign mul_ln1345_78_fu_1036_p1 = sext_ln1345_50_fu_1032_p1;

assign mul_ln1345_79_fu_1050_p0 = zext_ln1345_16_fu_706_p1;

assign mul_ln1345_79_fu_1050_p1 = sext_ln1345_51_fu_1046_p1;

assign mul_ln1345_80_fu_1060_p0 = zext_ln1345_17_fu_730_p1;

assign mul_ln1345_80_fu_1060_p1 = sext_ln1345_52_fu_1056_p1;

assign mul_ln1345_81_fu_1070_p0 = zext_ln1345_18_fu_754_p1;

assign mul_ln1345_81_fu_1070_p1 = sext_ln1345_53_fu_1066_p1;

assign mul_ln1345_82_fu_1080_p0 = zext_ln1345_19_fu_778_p1;

assign mul_ln1345_82_fu_1080_p1 = sext_ln1345_54_fu_1076_p1;

assign mul_ln1345_83_fu_1116_p0 = zext_ln1345_20_fu_1112_p1;

assign mul_ln1345_83_fu_1116_p1 = sext_ln1345_fu_626_p1;

assign mul_ln1345_84_fu_1140_p0 = zext_ln1345_21_fu_1136_p1;

assign mul_ln1345_84_fu_1140_p1 = sext_ln1345_28_fu_654_p1;

assign mul_ln1345_85_fu_1164_p0 = zext_ln1345_22_fu_1160_p1;

assign mul_ln1345_85_fu_1164_p1 = sext_ln1345_29_fu_682_p1;

assign mul_ln1345_86_fu_1188_p0 = zext_ln1345_23_fu_1184_p1;

assign mul_ln1345_86_fu_1188_p1 = sext_ln1345_30_fu_710_p1;

assign mul_ln1345_87_fu_1208_p0 = zext_ln1345_24_fu_1204_p1;

assign mul_ln1345_87_fu_1208_p1 = sext_ln1345_31_fu_734_p1;

assign mul_ln1345_88_fu_1228_p0 = zext_ln1345_25_fu_1224_p1;

assign mul_ln1345_88_fu_1228_p1 = sext_ln1345_32_fu_758_p1;

assign mul_ln1345_89_fu_1248_p0 = zext_ln1345_26_fu_1244_p1;

assign mul_ln1345_89_fu_1248_p1 = sext_ln1345_33_fu_782_p1;

assign mul_ln1345_90_fu_1270_p0 = zext_ln1345_20_fu_1112_p1;

assign mul_ln1345_90_fu_1270_p1 = sext_ln1345_34_fu_808_p1;

assign mul_ln1345_91_fu_1280_p0 = zext_ln1345_21_fu_1136_p1;

assign mul_ln1345_91_fu_1280_p1 = sext_ln1345_35_fu_822_p1;

assign mul_ln1345_92_fu_1290_p0 = zext_ln1345_22_fu_1160_p1;

assign mul_ln1345_92_fu_1290_p1 = sext_ln1345_36_fu_836_p1;

assign mul_ln1345_93_fu_1300_p0 = zext_ln1345_23_fu_1184_p1;

assign mul_ln1345_93_fu_1300_p1 = sext_ln1345_37_fu_850_p1;

assign mul_ln1345_94_fu_1306_p0 = zext_ln1345_24_fu_1204_p1;

assign mul_ln1345_94_fu_1306_p1 = sext_ln1345_38_fu_860_p1;

assign mul_ln1345_95_fu_1312_p0 = zext_ln1345_25_fu_1224_p1;

assign mul_ln1345_95_fu_1312_p1 = sext_ln1345_39_fu_870_p1;

assign mul_ln1345_96_fu_1318_p0 = zext_ln1345_26_fu_1244_p1;

assign mul_ln1345_96_fu_1318_p1 = sext_ln1345_40_fu_880_p1;

assign mul_ln1345_97_fu_1340_p0 = zext_ln1345_20_fu_1112_p1;

assign mul_ln1345_97_fu_1340_p1 = sext_ln1345_41_fu_906_p1;

assign mul_ln1345_98_fu_1350_p0 = zext_ln1345_21_fu_1136_p1;

assign mul_ln1345_98_fu_1350_p1 = sext_ln1345_42_fu_920_p1;

assign mul_ln1345_99_fu_1360_p0 = zext_ln1345_22_fu_1160_p1;

assign mul_ln1345_99_fu_1360_p1 = sext_ln1345_43_fu_934_p1;

assign mul_ln1345_fu_630_p0 = sext_ln1345_fu_626_p1;

assign mul_ln1345_fu_630_p1 = zext_ln1345_fu_622_p1;

assign or_ln337_fu_325_p2 = (icmp_ln337_reg_2070 | and_ln336_fu_319_p2);

assign select_ln337_2_fu_300_p3 = ((icmp_ln337_fu_288_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_294_p2);

assign select_ln337_fu_330_p3 = ((or_ln337_fu_325_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_265);

assign select_ln342_fu_1489_p3 = ((icmp_ln342_reg_2086[0:0] == 1'b1) ? 88'd0 : vec_o_data_M_elems_V_2_fu_220);

assign sext_ln1345_28_fu_654_p1 = $signed(trunc_ln145_18_fu_352_p4);

assign sext_ln1345_29_fu_682_p1 = $signed(trunc_ln145_19_fu_362_p4);

assign sext_ln1345_30_fu_710_p1 = $signed(trunc_ln145_20_fu_372_p4);

assign sext_ln1345_31_fu_734_p1 = $signed(trunc_ln145_21_fu_382_p4);

assign sext_ln1345_32_fu_758_p1 = $signed(trunc_ln145_22_fu_392_p4);

assign sext_ln1345_33_fu_782_p1 = $signed(trunc_ln145_23_fu_402_p4);

assign sext_ln1345_34_fu_808_p1 = $signed(trunc_ln145_24_fu_412_p4);

assign sext_ln1345_35_fu_822_p1 = $signed(trunc_ln145_25_fu_422_p4);

assign sext_ln1345_36_fu_836_p1 = $signed(trunc_ln145_26_fu_432_p4);

assign sext_ln1345_37_fu_850_p1 = $signed(trunc_ln145_27_fu_442_p4);

assign sext_ln1345_38_fu_860_p1 = $signed(trunc_ln145_28_fu_452_p4);

assign sext_ln1345_39_fu_870_p1 = $signed(trunc_ln145_s_fu_462_p4);

assign sext_ln1345_40_fu_880_p1 = $signed(trunc_ln145_29_fu_472_p4);

assign sext_ln1345_41_fu_906_p1 = $signed(trunc_ln145_30_fu_482_p4);

assign sext_ln1345_42_fu_920_p1 = $signed(trunc_ln145_31_fu_492_p4);

assign sext_ln1345_43_fu_934_p1 = $signed(trunc_ln145_32_fu_502_p4);

assign sext_ln1345_44_fu_948_p1 = $signed(trunc_ln145_33_fu_512_p4);

assign sext_ln1345_45_fu_958_p1 = $signed(trunc_ln145_34_fu_522_p4);

assign sext_ln1345_46_fu_968_p1 = $signed(trunc_ln145_35_fu_532_p4);

assign sext_ln1345_47_fu_978_p1 = $signed(trunc_ln145_36_fu_542_p4);

assign sext_ln1345_48_fu_1004_p1 = $signed(trunc_ln145_37_fu_552_p4);

assign sext_ln1345_49_fu_1018_p1 = $signed(trunc_ln145_38_fu_562_p4);

assign sext_ln1345_50_fu_1032_p1 = $signed(trunc_ln145_39_fu_572_p4);

assign sext_ln1345_51_fu_1046_p1 = $signed(trunc_ln145_40_fu_582_p4);

assign sext_ln1345_52_fu_1056_p1 = $signed(trunc_ln145_41_fu_592_p4);

assign sext_ln1345_53_fu_1066_p1 = $signed(trunc_ln145_42_fu_602_p4);

assign sext_ln1345_54_fu_1076_p1 = $signed(trunc_ln145_43_fu_612_p4);

assign sext_ln1345_fu_626_p1 = $signed(trunc_ln145_44_fu_348_p1);

assign sext_ln368_32_fu_692_p1 = mul_ln1345_57_fu_686_p2;

assign sext_ln368_33_fu_1500_p1 = mul_ln1345_58_reg_2091;

assign sext_ln368_34_fu_1506_p1 = mul_ln1345_60_reg_2101;

assign sext_ln368_35_fu_832_p1 = mul_ln1345_63_fu_826_p2;

assign sext_ln368_36_fu_846_p1 = mul_ln1345_64_fu_840_p2;

assign sext_ln368_37_fu_1563_p1 = mul_ln1345_65_reg_2116;

assign sext_ln368_38_fu_1569_p1 = mul_ln1345_67_reg_2126;

assign sext_ln368_39_fu_930_p1 = mul_ln1345_70_fu_924_p2;

assign sext_ln368_40_fu_944_p1 = mul_ln1345_71_fu_938_p2;

assign sext_ln368_41_fu_1626_p1 = mul_ln1345_72_reg_2141;

assign sext_ln368_42_fu_1632_p1 = mul_ln1345_74_reg_2151;

assign sext_ln368_43_fu_1028_p1 = mul_ln1345_77_fu_1022_p2;

assign sext_ln368_44_fu_1042_p1 = mul_ln1345_78_fu_1036_p2;

assign sext_ln368_45_fu_1689_p1 = mul_ln1345_79_reg_2166;

assign sext_ln368_46_fu_1695_p1 = mul_ln1345_81_reg_2176;

assign sext_ln368_47_fu_1146_p1 = mul_ln1345_84_fu_1140_p2;

assign sext_ln368_48_fu_1170_p1 = mul_ln1345_85_fu_1164_p2;

assign sext_ln368_49_fu_1752_p1 = mul_ln1345_86_reg_2191;

assign sext_ln368_50_fu_1758_p1 = mul_ln1345_88_reg_2201;

assign sext_ln368_51_fu_1286_p1 = mul_ln1345_91_fu_1280_p2;

assign sext_ln368_52_fu_1296_p1 = mul_ln1345_92_fu_1290_p2;

assign sext_ln368_53_fu_1815_p1 = mul_ln1345_93_reg_2216;

assign sext_ln368_54_fu_1821_p1 = mul_ln1345_95_reg_2226;

assign sext_ln368_55_fu_1356_p1 = mul_ln1345_98_fu_1350_p2;

assign sext_ln368_56_fu_1366_p1 = mul_ln1345_99_fu_1360_p2;

assign sext_ln368_57_fu_1878_p1 = mul_ln1345_100_reg_2241;

assign sext_ln368_58_fu_1884_p1 = mul_ln1345_102_reg_2251;

assign sext_ln368_59_fu_1426_p1 = mul_ln1345_105_fu_1420_p2;

assign sext_ln368_60_fu_1436_p1 = mul_ln1345_106_fu_1430_p2;

assign sext_ln368_61_fu_1941_p1 = mul_ln1345_107_reg_2266;

assign sext_ln368_62_fu_1947_p1 = mul_ln1345_109_reg_2276;

assign sext_ln368_fu_664_p1 = mul_ln1345_56_fu_658_p2;

assign sext_ln691_100_fu_1899_p1 = $signed(add_ln691_98_fu_1893_p2);

assign sext_ln691_101_fu_1909_p1 = $signed(add_ln691_100_reg_2256);

assign sext_ln691_102_fu_1912_p1 = $signed(add_ln691_101_reg_2261);

assign sext_ln691_103_fu_1921_p1 = $signed(add_ln691_102_fu_1915_p2);

assign sext_ln691_104_fu_1416_p1 = mul_ln1345_104_fu_1410_p2;

assign sext_ln691_105_fu_1944_p1 = mul_ln1345_108_reg_2271;

assign sext_ln691_106_fu_1464_p1 = mul_ln1345_110_fu_1458_p2;

assign sext_ln691_107_fu_1962_p1 = $signed(add_ln691_105_fu_1956_p2);

assign sext_ln691_108_fu_1972_p1 = $signed(add_ln691_107_reg_2281);

assign sext_ln691_109_fu_1975_p1 = $signed(add_ln691_108_reg_2286);

assign sext_ln691_110_fu_1984_p1 = $signed(add_ln691_109_fu_1978_p2);

assign sext_ln691_56_fu_1503_p1 = mul_ln1345_59_reg_2096;

assign sext_ln691_57_fu_792_p1 = mul_ln1345_61_fu_786_p2;

assign sext_ln691_58_fu_1521_p1 = $signed(add_ln691_56_fu_1515_p2);

assign sext_ln691_59_fu_1531_p1 = $signed(add_ln691_58_reg_2106);

assign sext_ln691_60_fu_1534_p1 = $signed(add_ln691_59_reg_2111);

assign sext_ln691_61_fu_1543_p1 = $signed(add_ln691_60_fu_1537_p2);

assign sext_ln691_62_fu_818_p1 = mul_ln1345_62_fu_812_p2;

assign sext_ln691_63_fu_1566_p1 = mul_ln1345_66_reg_2121;

assign sext_ln691_64_fu_890_p1 = mul_ln1345_68_fu_884_p2;

assign sext_ln691_65_fu_1584_p1 = $signed(add_ln691_63_fu_1578_p2);

assign sext_ln691_66_fu_1594_p1 = $signed(add_ln691_65_reg_2131);

assign sext_ln691_67_fu_1597_p1 = $signed(add_ln691_66_reg_2136);

assign sext_ln691_68_fu_1606_p1 = $signed(add_ln691_67_fu_1600_p2);

assign sext_ln691_69_fu_916_p1 = mul_ln1345_69_fu_910_p2;

assign sext_ln691_70_fu_1629_p1 = mul_ln1345_73_reg_2146;

assign sext_ln691_71_fu_988_p1 = mul_ln1345_75_fu_982_p2;

assign sext_ln691_72_fu_1647_p1 = $signed(add_ln691_70_fu_1641_p2);

assign sext_ln691_73_fu_1657_p1 = $signed(add_ln691_72_reg_2156);

assign sext_ln691_74_fu_1660_p1 = $signed(add_ln691_73_reg_2161);

assign sext_ln691_75_fu_1669_p1 = $signed(add_ln691_74_fu_1663_p2);

assign sext_ln691_76_fu_1014_p1 = mul_ln1345_76_fu_1008_p2;

assign sext_ln691_77_fu_1692_p1 = mul_ln1345_80_reg_2171;

assign sext_ln691_78_fu_1086_p1 = mul_ln1345_82_fu_1080_p2;

assign sext_ln691_79_fu_1710_p1 = $signed(add_ln691_77_fu_1704_p2);

assign sext_ln691_80_fu_1720_p1 = $signed(add_ln691_79_reg_2181);

assign sext_ln691_81_fu_1723_p1 = $signed(add_ln691_80_reg_2186);

assign sext_ln691_82_fu_1732_p1 = $signed(add_ln691_81_fu_1726_p2);

assign sext_ln691_83_fu_1122_p1 = mul_ln1345_83_fu_1116_p2;

assign sext_ln691_84_fu_1755_p1 = mul_ln1345_87_reg_2196;

assign sext_ln691_85_fu_1254_p1 = mul_ln1345_89_fu_1248_p2;

assign sext_ln691_86_fu_1773_p1 = $signed(add_ln691_84_fu_1767_p2);

assign sext_ln691_87_fu_1783_p1 = $signed(add_ln691_86_reg_2206);

assign sext_ln691_88_fu_1786_p1 = $signed(add_ln691_87_reg_2211);

assign sext_ln691_89_fu_1795_p1 = $signed(add_ln691_88_fu_1789_p2);

assign sext_ln691_90_fu_1276_p1 = mul_ln1345_90_fu_1270_p2;

assign sext_ln691_91_fu_1818_p1 = mul_ln1345_94_reg_2221;

assign sext_ln691_92_fu_1324_p1 = mul_ln1345_96_fu_1318_p2;

assign sext_ln691_93_fu_1836_p1 = $signed(add_ln691_91_fu_1830_p2);

assign sext_ln691_94_fu_1846_p1 = $signed(add_ln691_93_reg_2231);

assign sext_ln691_95_fu_1849_p1 = $signed(add_ln691_94_reg_2236);

assign sext_ln691_96_fu_1858_p1 = $signed(add_ln691_95_fu_1852_p2);

assign sext_ln691_97_fu_1346_p1 = mul_ln1345_97_fu_1340_p2;

assign sext_ln691_98_fu_1881_p1 = mul_ln1345_101_reg_2246;

assign sext_ln691_99_fu_1394_p1 = mul_ln1345_103_fu_1388_p2;

assign sext_ln691_fu_636_p1 = mul_ln1345_fu_630_p2;

assign start_out = real_start;

assign tmp_177_fu_1616_p4 = {{select_ln342_fu_1489_p3[32:22]}};

assign tmp_178_fu_1679_p4 = {{select_ln342_fu_1489_p3[43:33]}};

assign tmp_179_fu_1742_p4 = {{select_ln342_fu_1489_p3[54:44]}};

assign tmp_180_fu_1805_p4 = {{select_ln342_fu_1489_p3[65:55]}};

assign tmp_181_fu_1868_p4 = {{select_ln342_fu_1489_p3[76:66]}};

assign tmp_182_fu_1931_p4 = {{select_ln342_fu_1489_p3[87:77]}};

assign tmp_183_fu_1994_p9 = {{{{{{{{add_ln691_110_fu_1988_p2}, {add_ln691_103_fu_1925_p2}}, {add_ln691_96_fu_1862_p2}}, {add_ln691_89_fu_1799_p2}}, {add_ln691_82_fu_1736_p2}}, {add_ln691_75_fu_1673_p2}}, {add_ln691_68_fu_1610_p2}}, {add_ln691_61_fu_1547_p2}};

assign tmp_184_fu_2024_p16 = {{{{{{{{{{{{{{{add_ln691_110_reg_2331}, {5'd0}}, {add_ln691_103_reg_2326}}, {5'd0}}, {add_ln691_96_reg_2321}}, {5'd0}}, {add_ln691_89_reg_2316}}, {5'd0}}, {add_ln691_82_reg_2311}}, {5'd0}}, {add_ln691_75_reg_2306}}, {5'd0}}, {add_ln691_68_reg_2301}}, {5'd0}}, {add_ln691_61_reg_2296}};

assign tmp_190_fu_640_p4 = {{cache_window_sm_dout[10:8]}};

assign tmp_191_fu_668_p4 = {{cache_window_sm_dout[18:16]}};

assign tmp_192_fu_696_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_193_fu_720_p4 = {{cache_window_sm_dout[34:32]}};

assign tmp_194_fu_744_p4 = {{cache_window_sm_dout[42:40]}};

assign tmp_195_fu_768_p4 = {{cache_window_sm_dout[50:48]}};

assign tmp_196_fu_1102_p4 = {{cache_window_sm_dout[58:56]}};

assign tmp_197_fu_1126_p4 = {{cache_window_sm_dout[66:64]}};

assign tmp_198_fu_1150_p4 = {{cache_window_sm_dout[74:72]}};

assign tmp_199_fu_1174_p4 = {{cache_window_sm_dout[82:80]}};

assign tmp_200_fu_1194_p4 = {{cache_window_sm_dout[90:88]}};

assign tmp_201_fu_1214_p4 = {{cache_window_sm_dout[98:96]}};

assign tmp_202_fu_1234_p4 = {{cache_window_sm_dout[106:104]}};

assign tmp_s_fu_1553_p4 = {{select_ln342_fu_1489_p3[21:11]}};

assign trunc_ln145_18_fu_352_p4 = {{weight_sm_dout[10:8]}};

assign trunc_ln145_19_fu_362_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_20_fu_372_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_21_fu_382_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_22_fu_392_p4 = {{weight_sm_dout[42:40]}};

assign trunc_ln145_23_fu_402_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_24_fu_412_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_25_fu_422_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_26_fu_432_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln145_27_fu_442_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_28_fu_452_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_29_fu_472_p4 = {{weight_sm_dout[106:104]}};

assign trunc_ln145_30_fu_482_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_31_fu_492_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_32_fu_502_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_33_fu_512_p4 = {{weight_sm_dout[138:136]}};

assign trunc_ln145_34_fu_522_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_35_fu_532_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_36_fu_542_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_37_fu_552_p4 = {{weight_sm_dout[170:168]}};

assign trunc_ln145_38_fu_562_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_39_fu_572_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_40_fu_582_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_41_fu_592_p4 = {{weight_sm_dout[202:200]}};

assign trunc_ln145_42_fu_602_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_43_fu_612_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_44_fu_348_p1 = weight_sm_dout[2:0];

assign trunc_ln145_fu_344_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_462_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln691_fu_1496_p1 = select_ln342_fu_1489_p3[10:0];

assign xor_ln336_fu_308_p2 = (icmp_ln337_reg_2070 ^ 1'd1);

assign zext_ln1345_14_fu_650_p1 = tmp_190_fu_640_p4;

assign zext_ln1345_15_fu_678_p1 = tmp_191_fu_668_p4;

assign zext_ln1345_16_fu_706_p1 = tmp_192_fu_696_p4;

assign zext_ln1345_17_fu_730_p1 = tmp_193_fu_720_p4;

assign zext_ln1345_18_fu_754_p1 = tmp_194_fu_744_p4;

assign zext_ln1345_19_fu_778_p1 = tmp_195_fu_768_p4;

assign zext_ln1345_20_fu_1112_p1 = tmp_196_fu_1102_p4;

assign zext_ln1345_21_fu_1136_p1 = tmp_197_fu_1126_p4;

assign zext_ln1345_22_fu_1160_p1 = tmp_198_fu_1150_p4;

assign zext_ln1345_23_fu_1184_p1 = tmp_199_fu_1174_p4;

assign zext_ln1345_24_fu_1204_p1 = tmp_200_fu_1194_p4;

assign zext_ln1345_25_fu_1224_p1 = tmp_201_fu_1214_p4;

assign zext_ln1345_26_fu_1244_p1 = tmp_202_fu_1234_p4;

assign zext_ln1345_fu_622_p1 = trunc_ln145_fu_344_p1;

endmodule //ATTN0_matmul_step2_mac168
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac173 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [111:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [127:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2066;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2336;
reg   [15:0] indvar_flatten13_reg_243;
reg   [9:0] indvar_flatten_reg_254;
reg   [4:0] cit_reg_265;
wire   [15:0] add_ln336_fu_276_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_282_p2;
reg   [0:0] icmp_ln336_reg_2066_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_288_p2;
reg   [0:0] icmp_ln337_reg_2070;
wire   [9:0] select_ln337_1_fu_300_p3;
wire   [4:0] select_ln337_fu_330_p3;
reg   [4:0] select_ln337_reg_2081;
wire   [0:0] icmp_ln342_fu_338_p2;
reg   [0:0] icmp_ln342_reg_2086;
wire  signed [5:0] mul_ln1345_3_fu_714_p2;
reg  signed [5:0] mul_ln1345_3_reg_2091;
wire  signed [5:0] mul_ln1345_4_fu_738_p2;
reg  signed [5:0] mul_ln1345_4_reg_2096;
wire  signed [5:0] mul_ln1345_5_fu_762_p2;
reg  signed [5:0] mul_ln1345_5_reg_2101;
wire   [6:0] add_ln691_3_fu_796_p2;
reg   [6:0] add_ln691_3_reg_2106;
wire   [6:0] add_ln691_4_fu_802_p2;
reg   [6:0] add_ln691_4_reg_2111;
wire  signed [5:0] mul_ln1345_10_fu_854_p2;
reg  signed [5:0] mul_ln1345_10_reg_2116;
wire  signed [5:0] mul_ln1345_11_fu_864_p2;
reg  signed [5:0] mul_ln1345_11_reg_2121;
wire  signed [5:0] mul_ln1345_12_fu_874_p2;
reg  signed [5:0] mul_ln1345_12_reg_2126;
wire   [6:0] add_ln691_10_fu_894_p2;
reg   [6:0] add_ln691_10_reg_2131;
wire   [6:0] add_ln691_11_fu_900_p2;
reg   [6:0] add_ln691_11_reg_2136;
wire  signed [5:0] mul_ln1345_17_fu_952_p2;
reg  signed [5:0] mul_ln1345_17_reg_2141;
wire  signed [5:0] mul_ln1345_18_fu_962_p2;
reg  signed [5:0] mul_ln1345_18_reg_2146;
wire  signed [5:0] mul_ln1345_19_fu_972_p2;
reg  signed [5:0] mul_ln1345_19_reg_2151;
wire   [6:0] add_ln691_17_fu_992_p2;
reg   [6:0] add_ln691_17_reg_2156;
wire   [6:0] add_ln691_18_fu_998_p2;
reg   [6:0] add_ln691_18_reg_2161;
wire  signed [5:0] mul_ln1345_24_fu_1050_p2;
reg  signed [5:0] mul_ln1345_24_reg_2166;
wire  signed [5:0] mul_ln1345_25_fu_1060_p2;
reg  signed [5:0] mul_ln1345_25_reg_2171;
wire  signed [5:0] mul_ln1345_26_fu_1070_p2;
reg  signed [5:0] mul_ln1345_26_reg_2176;
wire   [6:0] add_ln691_24_fu_1090_p2;
reg   [6:0] add_ln691_24_reg_2181;
wire   [6:0] add_ln691_25_fu_1096_p2;
reg   [6:0] add_ln691_25_reg_2186;
wire  signed [5:0] mul_ln1345_31_fu_1188_p2;
reg  signed [5:0] mul_ln1345_31_reg_2191;
wire  signed [5:0] mul_ln1345_32_fu_1208_p2;
reg  signed [5:0] mul_ln1345_32_reg_2196;
wire  signed [5:0] mul_ln1345_33_fu_1228_p2;
reg  signed [5:0] mul_ln1345_33_reg_2201;
wire   [6:0] add_ln691_31_fu_1258_p2;
reg   [6:0] add_ln691_31_reg_2206;
wire   [6:0] add_ln691_32_fu_1264_p2;
reg   [6:0] add_ln691_32_reg_2211;
wire  signed [5:0] mul_ln1345_38_fu_1300_p2;
reg  signed [5:0] mul_ln1345_38_reg_2216;
wire  signed [5:0] mul_ln1345_39_fu_1306_p2;
reg  signed [5:0] mul_ln1345_39_reg_2221;
wire  signed [5:0] mul_ln1345_40_fu_1312_p2;
reg  signed [5:0] mul_ln1345_40_reg_2226;
wire   [6:0] add_ln691_38_fu_1328_p2;
reg   [6:0] add_ln691_38_reg_2231;
wire   [6:0] add_ln691_39_fu_1334_p2;
reg   [6:0] add_ln691_39_reg_2236;
wire  signed [5:0] mul_ln1345_45_fu_1370_p2;
reg  signed [5:0] mul_ln1345_45_reg_2241;
wire  signed [5:0] mul_ln1345_46_fu_1376_p2;
reg  signed [5:0] mul_ln1345_46_reg_2246;
wire  signed [5:0] mul_ln1345_47_fu_1382_p2;
reg  signed [5:0] mul_ln1345_47_reg_2251;
wire   [6:0] add_ln691_45_fu_1398_p2;
reg   [6:0] add_ln691_45_reg_2256;
wire   [6:0] add_ln691_46_fu_1404_p2;
reg   [6:0] add_ln691_46_reg_2261;
wire  signed [5:0] mul_ln1345_52_fu_1440_p2;
reg  signed [5:0] mul_ln1345_52_reg_2266;
wire  signed [5:0] mul_ln1345_53_fu_1446_p2;
reg  signed [5:0] mul_ln1345_53_reg_2271;
wire  signed [5:0] mul_ln1345_54_fu_1452_p2;
reg  signed [5:0] mul_ln1345_54_reg_2276;
wire   [6:0] add_ln691_52_fu_1468_p2;
reg   [6:0] add_ln691_52_reg_2281;
wire   [6:0] add_ln691_53_fu_1474_p2;
reg   [6:0] add_ln691_53_reg_2286;
wire   [4:0] cit_1_fu_1480_p2;
wire   [10:0] add_ln691_6_fu_1547_p2;
reg   [10:0] add_ln691_6_reg_2296;
wire   [10:0] add_ln691_13_fu_1610_p2;
reg   [10:0] add_ln691_13_reg_2301;
wire   [10:0] add_ln691_20_fu_1673_p2;
reg   [10:0] add_ln691_20_reg_2306;
wire   [10:0] add_ln691_27_fu_1736_p2;
reg   [10:0] add_ln691_27_reg_2311;
wire   [10:0] add_ln691_34_fu_1799_p2;
reg   [10:0] add_ln691_34_reg_2316;
wire   [10:0] add_ln691_41_fu_1862_p2;
reg   [10:0] add_ln691_41_reg_2321;
wire   [10:0] add_ln691_48_fu_1925_p2;
reg   [10:0] add_ln691_48_reg_2326;
wire   [10:0] add_ln691_55_fu_1988_p2;
reg   [10:0] add_ln691_55_reg_2331;
wire   [0:0] icmp_ln378_fu_2014_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [87:0] vec_o_data_M_elems_V_2_fu_220;
wire   [87:0] tmp_175_fu_1994_p9;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_294_p2;
wire   [0:0] icmp_ln338_fu_313_p2;
wire   [0:0] xor_ln336_fu_308_p2;
wire   [0:0] and_ln336_fu_319_p2;
wire   [0:0] or_ln337_fu_325_p2;
wire   [2:0] trunc_ln145_fu_344_p1;
wire   [2:0] trunc_ln145_29_fu_348_p1;
wire  signed [2:0] mul_ln1345_fu_630_p0;
wire  signed [5:0] sext_ln1345_fu_626_p1;
wire   [2:0] mul_ln1345_fu_630_p1;
wire   [5:0] zext_ln1345_fu_622_p1;
wire  signed [5:0] mul_ln1345_fu_630_p2;
wire   [2:0] tmp_177_fu_640_p4;
wire   [2:0] trunc_ln145_2_fu_352_p4;
wire   [2:0] mul_ln1345_1_fu_658_p0;
wire   [5:0] zext_ln1345_1_fu_650_p1;
wire  signed [2:0] mul_ln1345_1_fu_658_p1;
wire  signed [5:0] sext_ln1345_1_fu_654_p1;
wire  signed [5:0] mul_ln1345_1_fu_658_p2;
wire   [2:0] tmp_178_fu_668_p4;
wire   [2:0] trunc_ln145_3_fu_362_p4;
wire   [2:0] mul_ln1345_2_fu_686_p0;
wire   [5:0] zext_ln1345_2_fu_678_p1;
wire  signed [2:0] mul_ln1345_2_fu_686_p1;
wire  signed [5:0] sext_ln1345_2_fu_682_p1;
wire  signed [5:0] mul_ln1345_2_fu_686_p2;
wire   [2:0] tmp_179_fu_696_p4;
wire   [2:0] trunc_ln145_4_fu_372_p4;
wire   [2:0] mul_ln1345_3_fu_714_p0;
wire   [5:0] zext_ln1345_3_fu_706_p1;
wire  signed [2:0] mul_ln1345_3_fu_714_p1;
wire  signed [5:0] sext_ln1345_3_fu_710_p1;
wire   [2:0] tmp_180_fu_720_p4;
wire   [2:0] trunc_ln145_5_fu_382_p4;
wire   [2:0] mul_ln1345_4_fu_738_p0;
wire   [5:0] zext_ln1345_4_fu_730_p1;
wire  signed [2:0] mul_ln1345_4_fu_738_p1;
wire  signed [5:0] sext_ln1345_4_fu_734_p1;
wire   [2:0] tmp_181_fu_744_p4;
wire   [2:0] trunc_ln145_6_fu_392_p4;
wire   [2:0] mul_ln1345_5_fu_762_p0;
wire   [5:0] zext_ln1345_5_fu_754_p1;
wire  signed [2:0] mul_ln1345_5_fu_762_p1;
wire  signed [5:0] sext_ln1345_5_fu_758_p1;
wire   [2:0] tmp_182_fu_768_p4;
wire   [2:0] trunc_ln145_7_fu_402_p4;
wire   [2:0] mul_ln1345_6_fu_786_p0;
wire   [5:0] zext_ln1345_6_fu_778_p1;
wire  signed [2:0] mul_ln1345_6_fu_786_p1;
wire  signed [5:0] sext_ln1345_6_fu_782_p1;
wire  signed [5:0] mul_ln1345_6_fu_786_p2;
wire  signed [6:0] sext_ln368_1_fu_692_p1;
wire  signed [6:0] sext_ln368_fu_664_p1;
wire  signed [6:0] sext_ln691_fu_636_p1;
wire  signed [6:0] sext_ln691_2_fu_792_p1;
wire   [2:0] trunc_ln145_8_fu_412_p4;
wire  signed [2:0] mul_ln1345_7_fu_812_p0;
wire  signed [5:0] sext_ln1345_7_fu_808_p1;
wire   [2:0] mul_ln1345_7_fu_812_p1;
wire  signed [5:0] mul_ln1345_7_fu_812_p2;
wire   [2:0] trunc_ln145_9_fu_422_p4;
wire   [2:0] mul_ln1345_8_fu_826_p0;
wire  signed [2:0] mul_ln1345_8_fu_826_p1;
wire  signed [5:0] sext_ln1345_8_fu_822_p1;
wire  signed [5:0] mul_ln1345_8_fu_826_p2;
wire   [2:0] trunc_ln145_s_fu_432_p4;
wire   [2:0] mul_ln1345_9_fu_840_p0;
wire  signed [2:0] mul_ln1345_9_fu_840_p1;
wire  signed [5:0] sext_ln1345_9_fu_836_p1;
wire  signed [5:0] mul_ln1345_9_fu_840_p2;
wire   [2:0] trunc_ln145_1_fu_442_p4;
wire   [2:0] mul_ln1345_10_fu_854_p0;
wire  signed [2:0] mul_ln1345_10_fu_854_p1;
wire  signed [5:0] sext_ln1345_10_fu_850_p1;
wire   [2:0] trunc_ln145_10_fu_452_p4;
wire   [2:0] mul_ln1345_11_fu_864_p0;
wire  signed [2:0] mul_ln1345_11_fu_864_p1;
wire  signed [5:0] sext_ln1345_11_fu_860_p1;
wire   [2:0] trunc_ln145_11_fu_462_p4;
wire   [2:0] mul_ln1345_12_fu_874_p0;
wire  signed [2:0] mul_ln1345_12_fu_874_p1;
wire  signed [5:0] sext_ln1345_12_fu_870_p1;
wire   [2:0] trunc_ln145_12_fu_472_p4;
wire   [2:0] mul_ln1345_13_fu_884_p0;
wire  signed [2:0] mul_ln1345_13_fu_884_p1;
wire  signed [5:0] sext_ln1345_13_fu_880_p1;
wire  signed [5:0] mul_ln1345_13_fu_884_p2;
wire  signed [6:0] sext_ln368_5_fu_846_p1;
wire  signed [6:0] sext_ln368_4_fu_832_p1;
wire  signed [6:0] sext_ln691_7_fu_818_p1;
wire  signed [6:0] sext_ln691_9_fu_890_p1;
wire   [2:0] trunc_ln145_13_fu_482_p4;
wire  signed [2:0] mul_ln1345_14_fu_910_p0;
wire  signed [5:0] sext_ln1345_14_fu_906_p1;
wire   [2:0] mul_ln1345_14_fu_910_p1;
wire  signed [5:0] mul_ln1345_14_fu_910_p2;
wire   [2:0] trunc_ln145_14_fu_492_p4;
wire   [2:0] mul_ln1345_15_fu_924_p0;
wire  signed [2:0] mul_ln1345_15_fu_924_p1;
wire  signed [5:0] sext_ln1345_15_fu_920_p1;
wire  signed [5:0] mul_ln1345_15_fu_924_p2;
wire   [2:0] trunc_ln145_15_fu_502_p4;
wire   [2:0] mul_ln1345_16_fu_938_p0;
wire  signed [2:0] mul_ln1345_16_fu_938_p1;
wire  signed [5:0] sext_ln1345_16_fu_934_p1;
wire  signed [5:0] mul_ln1345_16_fu_938_p2;
wire   [2:0] trunc_ln145_16_fu_512_p4;
wire   [2:0] mul_ln1345_17_fu_952_p0;
wire  signed [2:0] mul_ln1345_17_fu_952_p1;
wire  signed [5:0] sext_ln1345_17_fu_948_p1;
wire   [2:0] trunc_ln145_17_fu_522_p4;
wire   [2:0] mul_ln1345_18_fu_962_p0;
wire  signed [2:0] mul_ln1345_18_fu_962_p1;
wire  signed [5:0] sext_ln1345_18_fu_958_p1;
wire   [2:0] trunc_ln145_18_fu_532_p4;
wire   [2:0] mul_ln1345_19_fu_972_p0;
wire  signed [2:0] mul_ln1345_19_fu_972_p1;
wire  signed [5:0] sext_ln1345_19_fu_968_p1;
wire   [2:0] trunc_ln145_19_fu_542_p4;
wire   [2:0] mul_ln1345_20_fu_982_p0;
wire  signed [2:0] mul_ln1345_20_fu_982_p1;
wire  signed [5:0] sext_ln1345_20_fu_978_p1;
wire  signed [5:0] mul_ln1345_20_fu_982_p2;
wire  signed [6:0] sext_ln368_9_fu_944_p1;
wire  signed [6:0] sext_ln368_8_fu_930_p1;
wire  signed [6:0] sext_ln691_14_fu_916_p1;
wire  signed [6:0] sext_ln691_16_fu_988_p1;
wire   [2:0] trunc_ln145_20_fu_552_p4;
wire  signed [2:0] mul_ln1345_21_fu_1008_p0;
wire  signed [5:0] sext_ln1345_21_fu_1004_p1;
wire   [2:0] mul_ln1345_21_fu_1008_p1;
wire  signed [5:0] mul_ln1345_21_fu_1008_p2;
wire   [2:0] trunc_ln145_21_fu_562_p4;
wire   [2:0] mul_ln1345_22_fu_1022_p0;
wire  signed [2:0] mul_ln1345_22_fu_1022_p1;
wire  signed [5:0] sext_ln1345_22_fu_1018_p1;
wire  signed [5:0] mul_ln1345_22_fu_1022_p2;
wire   [2:0] trunc_ln145_22_fu_572_p4;
wire   [2:0] mul_ln1345_23_fu_1036_p0;
wire  signed [2:0] mul_ln1345_23_fu_1036_p1;
wire  signed [5:0] sext_ln1345_23_fu_1032_p1;
wire  signed [5:0] mul_ln1345_23_fu_1036_p2;
wire   [2:0] trunc_ln145_23_fu_582_p4;
wire   [2:0] mul_ln1345_24_fu_1050_p0;
wire  signed [2:0] mul_ln1345_24_fu_1050_p1;
wire  signed [5:0] sext_ln1345_24_fu_1046_p1;
wire   [2:0] trunc_ln145_24_fu_592_p4;
wire   [2:0] mul_ln1345_25_fu_1060_p0;
wire  signed [2:0] mul_ln1345_25_fu_1060_p1;
wire  signed [5:0] sext_ln1345_25_fu_1056_p1;
wire   [2:0] trunc_ln145_25_fu_602_p4;
wire   [2:0] mul_ln1345_26_fu_1070_p0;
wire  signed [2:0] mul_ln1345_26_fu_1070_p1;
wire  signed [5:0] sext_ln1345_26_fu_1066_p1;
wire   [2:0] trunc_ln145_26_fu_612_p4;
wire   [2:0] mul_ln1345_27_fu_1080_p0;
wire  signed [2:0] mul_ln1345_27_fu_1080_p1;
wire  signed [5:0] sext_ln1345_27_fu_1076_p1;
wire  signed [5:0] mul_ln1345_27_fu_1080_p2;
wire  signed [6:0] sext_ln368_13_fu_1042_p1;
wire  signed [6:0] sext_ln368_12_fu_1028_p1;
wire  signed [6:0] sext_ln691_21_fu_1014_p1;
wire  signed [6:0] sext_ln691_23_fu_1086_p1;
wire   [2:0] tmp_183_fu_1102_p4;
wire   [2:0] mul_ln1345_28_fu_1116_p0;
wire   [5:0] zext_ln1345_7_fu_1112_p1;
wire  signed [2:0] mul_ln1345_28_fu_1116_p1;
wire  signed [5:0] mul_ln1345_28_fu_1116_p2;
wire   [2:0] tmp_184_fu_1126_p4;
wire   [2:0] mul_ln1345_29_fu_1140_p0;
wire   [5:0] zext_ln1345_8_fu_1136_p1;
wire  signed [2:0] mul_ln1345_29_fu_1140_p1;
wire  signed [5:0] mul_ln1345_29_fu_1140_p2;
wire   [2:0] tmp_185_fu_1150_p4;
wire   [2:0] mul_ln1345_30_fu_1164_p0;
wire   [5:0] zext_ln1345_9_fu_1160_p1;
wire  signed [2:0] mul_ln1345_30_fu_1164_p1;
wire  signed [5:0] mul_ln1345_30_fu_1164_p2;
wire   [2:0] tmp_186_fu_1174_p4;
wire   [2:0] mul_ln1345_31_fu_1188_p0;
wire   [5:0] zext_ln1345_10_fu_1184_p1;
wire  signed [2:0] mul_ln1345_31_fu_1188_p1;
wire   [2:0] tmp_187_fu_1194_p4;
wire   [2:0] mul_ln1345_32_fu_1208_p0;
wire   [5:0] zext_ln1345_11_fu_1204_p1;
wire  signed [2:0] mul_ln1345_32_fu_1208_p1;
wire   [2:0] tmp_188_fu_1214_p4;
wire   [2:0] mul_ln1345_33_fu_1228_p0;
wire   [5:0] zext_ln1345_12_fu_1224_p1;
wire  signed [2:0] mul_ln1345_33_fu_1228_p1;
wire   [2:0] tmp_189_fu_1234_p4;
wire   [2:0] mul_ln1345_34_fu_1248_p0;
wire   [5:0] zext_ln1345_13_fu_1244_p1;
wire  signed [2:0] mul_ln1345_34_fu_1248_p1;
wire  signed [5:0] mul_ln1345_34_fu_1248_p2;
wire  signed [6:0] sext_ln368_17_fu_1170_p1;
wire  signed [6:0] sext_ln368_16_fu_1146_p1;
wire  signed [6:0] sext_ln691_28_fu_1122_p1;
wire  signed [6:0] sext_ln691_30_fu_1254_p1;
wire   [2:0] mul_ln1345_35_fu_1270_p0;
wire  signed [2:0] mul_ln1345_35_fu_1270_p1;
wire  signed [5:0] mul_ln1345_35_fu_1270_p2;
wire   [2:0] mul_ln1345_36_fu_1280_p0;
wire  signed [2:0] mul_ln1345_36_fu_1280_p1;
wire  signed [5:0] mul_ln1345_36_fu_1280_p2;
wire   [2:0] mul_ln1345_37_fu_1290_p0;
wire  signed [2:0] mul_ln1345_37_fu_1290_p1;
wire  signed [5:0] mul_ln1345_37_fu_1290_p2;
wire   [2:0] mul_ln1345_38_fu_1300_p0;
wire  signed [2:0] mul_ln1345_38_fu_1300_p1;
wire   [2:0] mul_ln1345_39_fu_1306_p0;
wire  signed [2:0] mul_ln1345_39_fu_1306_p1;
wire   [2:0] mul_ln1345_40_fu_1312_p0;
wire  signed [2:0] mul_ln1345_40_fu_1312_p1;
wire   [2:0] mul_ln1345_41_fu_1318_p0;
wire  signed [2:0] mul_ln1345_41_fu_1318_p1;
wire  signed [5:0] mul_ln1345_41_fu_1318_p2;
wire  signed [6:0] sext_ln368_21_fu_1296_p1;
wire  signed [6:0] sext_ln368_20_fu_1286_p1;
wire  signed [6:0] sext_ln691_35_fu_1276_p1;
wire  signed [6:0] sext_ln691_37_fu_1324_p1;
wire   [2:0] mul_ln1345_42_fu_1340_p0;
wire  signed [2:0] mul_ln1345_42_fu_1340_p1;
wire  signed [5:0] mul_ln1345_42_fu_1340_p2;
wire   [2:0] mul_ln1345_43_fu_1350_p0;
wire  signed [2:0] mul_ln1345_43_fu_1350_p1;
wire  signed [5:0] mul_ln1345_43_fu_1350_p2;
wire   [2:0] mul_ln1345_44_fu_1360_p0;
wire  signed [2:0] mul_ln1345_44_fu_1360_p1;
wire  signed [5:0] mul_ln1345_44_fu_1360_p2;
wire   [2:0] mul_ln1345_45_fu_1370_p0;
wire  signed [2:0] mul_ln1345_45_fu_1370_p1;
wire   [2:0] mul_ln1345_46_fu_1376_p0;
wire  signed [2:0] mul_ln1345_46_fu_1376_p1;
wire   [2:0] mul_ln1345_47_fu_1382_p0;
wire  signed [2:0] mul_ln1345_47_fu_1382_p1;
wire   [2:0] mul_ln1345_48_fu_1388_p0;
wire  signed [2:0] mul_ln1345_48_fu_1388_p1;
wire  signed [5:0] mul_ln1345_48_fu_1388_p2;
wire  signed [6:0] sext_ln368_25_fu_1366_p1;
wire  signed [6:0] sext_ln368_24_fu_1356_p1;
wire  signed [6:0] sext_ln691_42_fu_1346_p1;
wire  signed [6:0] sext_ln691_44_fu_1394_p1;
wire   [2:0] mul_ln1345_49_fu_1410_p0;
wire  signed [2:0] mul_ln1345_49_fu_1410_p1;
wire  signed [5:0] mul_ln1345_49_fu_1410_p2;
wire   [2:0] mul_ln1345_50_fu_1420_p0;
wire  signed [2:0] mul_ln1345_50_fu_1420_p1;
wire  signed [5:0] mul_ln1345_50_fu_1420_p2;
wire   [2:0] mul_ln1345_51_fu_1430_p0;
wire  signed [2:0] mul_ln1345_51_fu_1430_p1;
wire  signed [5:0] mul_ln1345_51_fu_1430_p2;
wire   [2:0] mul_ln1345_52_fu_1440_p0;
wire  signed [2:0] mul_ln1345_52_fu_1440_p1;
wire   [2:0] mul_ln1345_53_fu_1446_p0;
wire  signed [2:0] mul_ln1345_53_fu_1446_p1;
wire   [2:0] mul_ln1345_54_fu_1452_p0;
wire  signed [2:0] mul_ln1345_54_fu_1452_p1;
wire   [2:0] mul_ln1345_55_fu_1458_p0;
wire  signed [2:0] mul_ln1345_55_fu_1458_p1;
wire  signed [5:0] mul_ln1345_55_fu_1458_p2;
wire  signed [6:0] sext_ln368_29_fu_1436_p1;
wire  signed [6:0] sext_ln368_28_fu_1426_p1;
wire  signed [6:0] sext_ln691_49_fu_1416_p1;
wire  signed [6:0] sext_ln691_51_fu_1464_p1;
wire   [87:0] select_ln342_fu_1489_p3;
wire   [10:0] trunc_ln691_fu_1496_p1;
wire  signed [10:0] sext_ln691_1_fu_1503_p1;
wire  signed [6:0] sext_ln368_3_fu_1506_p1;
wire  signed [6:0] sext_ln368_2_fu_1500_p1;
wire   [6:0] add_ln691_1_fu_1515_p2;
wire  signed [10:0] sext_ln691_3_fu_1521_p1;
wire   [10:0] add_ln691_fu_1509_p2;
wire  signed [7:0] sext_ln691_5_fu_1534_p1;
wire  signed [7:0] sext_ln691_4_fu_1531_p1;
wire   [7:0] add_ln691_5_fu_1537_p2;
wire  signed [10:0] sext_ln691_6_fu_1543_p1;
wire   [10:0] add_ln691_2_fu_1525_p2;
wire   [10:0] tmp_s_fu_1553_p4;
wire  signed [10:0] sext_ln691_8_fu_1566_p1;
wire  signed [6:0] sext_ln368_7_fu_1569_p1;
wire  signed [6:0] sext_ln368_6_fu_1563_p1;
wire   [6:0] add_ln691_8_fu_1578_p2;
wire  signed [10:0] sext_ln691_10_fu_1584_p1;
wire   [10:0] add_ln691_7_fu_1572_p2;
wire  signed [7:0] sext_ln691_12_fu_1597_p1;
wire  signed [7:0] sext_ln691_11_fu_1594_p1;
wire   [7:0] add_ln691_12_fu_1600_p2;
wire  signed [10:0] sext_ln691_13_fu_1606_p1;
wire   [10:0] add_ln691_9_fu_1588_p2;
wire   [10:0] tmp_169_fu_1616_p4;
wire  signed [10:0] sext_ln691_15_fu_1629_p1;
wire  signed [6:0] sext_ln368_11_fu_1632_p1;
wire  signed [6:0] sext_ln368_10_fu_1626_p1;
wire   [6:0] add_ln691_15_fu_1641_p2;
wire  signed [10:0] sext_ln691_17_fu_1647_p1;
wire   [10:0] add_ln691_14_fu_1635_p2;
wire  signed [7:0] sext_ln691_19_fu_1660_p1;
wire  signed [7:0] sext_ln691_18_fu_1657_p1;
wire   [7:0] add_ln691_19_fu_1663_p2;
wire  signed [10:0] sext_ln691_20_fu_1669_p1;
wire   [10:0] add_ln691_16_fu_1651_p2;
wire   [10:0] tmp_170_fu_1679_p4;
wire  signed [10:0] sext_ln691_22_fu_1692_p1;
wire  signed [6:0] sext_ln368_15_fu_1695_p1;
wire  signed [6:0] sext_ln368_14_fu_1689_p1;
wire   [6:0] add_ln691_22_fu_1704_p2;
wire  signed [10:0] sext_ln691_24_fu_1710_p1;
wire   [10:0] add_ln691_21_fu_1698_p2;
wire  signed [7:0] sext_ln691_26_fu_1723_p1;
wire  signed [7:0] sext_ln691_25_fu_1720_p1;
wire   [7:0] add_ln691_26_fu_1726_p2;
wire  signed [10:0] sext_ln691_27_fu_1732_p1;
wire   [10:0] add_ln691_23_fu_1714_p2;
wire   [10:0] tmp_171_fu_1742_p4;
wire  signed [10:0] sext_ln691_29_fu_1755_p1;
wire  signed [6:0] sext_ln368_19_fu_1758_p1;
wire  signed [6:0] sext_ln368_18_fu_1752_p1;
wire   [6:0] add_ln691_29_fu_1767_p2;
wire  signed [10:0] sext_ln691_31_fu_1773_p1;
wire   [10:0] add_ln691_28_fu_1761_p2;
wire  signed [7:0] sext_ln691_33_fu_1786_p1;
wire  signed [7:0] sext_ln691_32_fu_1783_p1;
wire   [7:0] add_ln691_33_fu_1789_p2;
wire  signed [10:0] sext_ln691_34_fu_1795_p1;
wire   [10:0] add_ln691_30_fu_1777_p2;
wire   [10:0] tmp_172_fu_1805_p4;
wire  signed [10:0] sext_ln691_36_fu_1818_p1;
wire  signed [6:0] sext_ln368_23_fu_1821_p1;
wire  signed [6:0] sext_ln368_22_fu_1815_p1;
wire   [6:0] add_ln691_36_fu_1830_p2;
wire  signed [10:0] sext_ln691_38_fu_1836_p1;
wire   [10:0] add_ln691_35_fu_1824_p2;
wire  signed [7:0] sext_ln691_40_fu_1849_p1;
wire  signed [7:0] sext_ln691_39_fu_1846_p1;
wire   [7:0] add_ln691_40_fu_1852_p2;
wire  signed [10:0] sext_ln691_41_fu_1858_p1;
wire   [10:0] add_ln691_37_fu_1840_p2;
wire   [10:0] tmp_173_fu_1868_p4;
wire  signed [10:0] sext_ln691_43_fu_1881_p1;
wire  signed [6:0] sext_ln368_27_fu_1884_p1;
wire  signed [6:0] sext_ln368_26_fu_1878_p1;
wire   [6:0] add_ln691_43_fu_1893_p2;
wire  signed [10:0] sext_ln691_45_fu_1899_p1;
wire   [10:0] add_ln691_42_fu_1887_p2;
wire  signed [7:0] sext_ln691_47_fu_1912_p1;
wire  signed [7:0] sext_ln691_46_fu_1909_p1;
wire   [7:0] add_ln691_47_fu_1915_p2;
wire  signed [10:0] sext_ln691_48_fu_1921_p1;
wire   [10:0] add_ln691_44_fu_1903_p2;
wire   [10:0] tmp_174_fu_1931_p4;
wire  signed [10:0] sext_ln691_50_fu_1944_p1;
wire  signed [6:0] sext_ln368_31_fu_1947_p1;
wire  signed [6:0] sext_ln368_30_fu_1941_p1;
wire   [6:0] add_ln691_50_fu_1956_p2;
wire  signed [10:0] sext_ln691_52_fu_1962_p1;
wire   [10:0] add_ln691_49_fu_1950_p2;
wire  signed [7:0] sext_ln691_54_fu_1975_p1;
wire  signed [7:0] sext_ln691_53_fu_1972_p1;
wire   [7:0] add_ln691_54_fu_1978_p2;
wire  signed [10:0] sext_ln691_55_fu_1984_p1;
wire   [10:0] add_ln691_51_fu_1966_p2;
wire   [122:0] tmp_176_fu_2024_p16;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U925(
    .din0(mul_ln1345_fu_630_p0),
    .din1(mul_ln1345_fu_630_p1),
    .dout(mul_ln1345_fu_630_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U926(
    .din0(mul_ln1345_1_fu_658_p0),
    .din1(mul_ln1345_1_fu_658_p1),
    .dout(mul_ln1345_1_fu_658_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U927(
    .din0(mul_ln1345_2_fu_686_p0),
    .din1(mul_ln1345_2_fu_686_p1),
    .dout(mul_ln1345_2_fu_686_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U928(
    .din0(mul_ln1345_3_fu_714_p0),
    .din1(mul_ln1345_3_fu_714_p1),
    .dout(mul_ln1345_3_fu_714_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U929(
    .din0(mul_ln1345_4_fu_738_p0),
    .din1(mul_ln1345_4_fu_738_p1),
    .dout(mul_ln1345_4_fu_738_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U930(
    .din0(mul_ln1345_5_fu_762_p0),
    .din1(mul_ln1345_5_fu_762_p1),
    .dout(mul_ln1345_5_fu_762_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U931(
    .din0(mul_ln1345_6_fu_786_p0),
    .din1(mul_ln1345_6_fu_786_p1),
    .dout(mul_ln1345_6_fu_786_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U932(
    .din0(mul_ln1345_7_fu_812_p0),
    .din1(mul_ln1345_7_fu_812_p1),
    .dout(mul_ln1345_7_fu_812_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U933(
    .din0(mul_ln1345_8_fu_826_p0),
    .din1(mul_ln1345_8_fu_826_p1),
    .dout(mul_ln1345_8_fu_826_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U934(
    .din0(mul_ln1345_9_fu_840_p0),
    .din1(mul_ln1345_9_fu_840_p1),
    .dout(mul_ln1345_9_fu_840_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U935(
    .din0(mul_ln1345_10_fu_854_p0),
    .din1(mul_ln1345_10_fu_854_p1),
    .dout(mul_ln1345_10_fu_854_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U936(
    .din0(mul_ln1345_11_fu_864_p0),
    .din1(mul_ln1345_11_fu_864_p1),
    .dout(mul_ln1345_11_fu_864_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U937(
    .din0(mul_ln1345_12_fu_874_p0),
    .din1(mul_ln1345_12_fu_874_p1),
    .dout(mul_ln1345_12_fu_874_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U938(
    .din0(mul_ln1345_13_fu_884_p0),
    .din1(mul_ln1345_13_fu_884_p1),
    .dout(mul_ln1345_13_fu_884_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U939(
    .din0(mul_ln1345_14_fu_910_p0),
    .din1(mul_ln1345_14_fu_910_p1),
    .dout(mul_ln1345_14_fu_910_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U940(
    .din0(mul_ln1345_15_fu_924_p0),
    .din1(mul_ln1345_15_fu_924_p1),
    .dout(mul_ln1345_15_fu_924_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U941(
    .din0(mul_ln1345_16_fu_938_p0),
    .din1(mul_ln1345_16_fu_938_p1),
    .dout(mul_ln1345_16_fu_938_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U942(
    .din0(mul_ln1345_17_fu_952_p0),
    .din1(mul_ln1345_17_fu_952_p1),
    .dout(mul_ln1345_17_fu_952_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U943(
    .din0(mul_ln1345_18_fu_962_p0),
    .din1(mul_ln1345_18_fu_962_p1),
    .dout(mul_ln1345_18_fu_962_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U944(
    .din0(mul_ln1345_19_fu_972_p0),
    .din1(mul_ln1345_19_fu_972_p1),
    .dout(mul_ln1345_19_fu_972_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U945(
    .din0(mul_ln1345_20_fu_982_p0),
    .din1(mul_ln1345_20_fu_982_p1),
    .dout(mul_ln1345_20_fu_982_p2)
);

ATTN0_mul_3s_3ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3ns_6_1_1_U946(
    .din0(mul_ln1345_21_fu_1008_p0),
    .din1(mul_ln1345_21_fu_1008_p1),
    .dout(mul_ln1345_21_fu_1008_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U947(
    .din0(mul_ln1345_22_fu_1022_p0),
    .din1(mul_ln1345_22_fu_1022_p1),
    .dout(mul_ln1345_22_fu_1022_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U948(
    .din0(mul_ln1345_23_fu_1036_p0),
    .din1(mul_ln1345_23_fu_1036_p1),
    .dout(mul_ln1345_23_fu_1036_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U949(
    .din0(mul_ln1345_24_fu_1050_p0),
    .din1(mul_ln1345_24_fu_1050_p1),
    .dout(mul_ln1345_24_fu_1050_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U950(
    .din0(mul_ln1345_25_fu_1060_p0),
    .din1(mul_ln1345_25_fu_1060_p1),
    .dout(mul_ln1345_25_fu_1060_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U951(
    .din0(mul_ln1345_26_fu_1070_p0),
    .din1(mul_ln1345_26_fu_1070_p1),
    .dout(mul_ln1345_26_fu_1070_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U952(
    .din0(mul_ln1345_27_fu_1080_p0),
    .din1(mul_ln1345_27_fu_1080_p1),
    .dout(mul_ln1345_27_fu_1080_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U953(
    .din0(mul_ln1345_28_fu_1116_p0),
    .din1(mul_ln1345_28_fu_1116_p1),
    .dout(mul_ln1345_28_fu_1116_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U954(
    .din0(mul_ln1345_29_fu_1140_p0),
    .din1(mul_ln1345_29_fu_1140_p1),
    .dout(mul_ln1345_29_fu_1140_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U955(
    .din0(mul_ln1345_30_fu_1164_p0),
    .din1(mul_ln1345_30_fu_1164_p1),
    .dout(mul_ln1345_30_fu_1164_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U956(
    .din0(mul_ln1345_31_fu_1188_p0),
    .din1(mul_ln1345_31_fu_1188_p1),
    .dout(mul_ln1345_31_fu_1188_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U957(
    .din0(mul_ln1345_32_fu_1208_p0),
    .din1(mul_ln1345_32_fu_1208_p1),
    .dout(mul_ln1345_32_fu_1208_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U958(
    .din0(mul_ln1345_33_fu_1228_p0),
    .din1(mul_ln1345_33_fu_1228_p1),
    .dout(mul_ln1345_33_fu_1228_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U959(
    .din0(mul_ln1345_34_fu_1248_p0),
    .din1(mul_ln1345_34_fu_1248_p1),
    .dout(mul_ln1345_34_fu_1248_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U960(
    .din0(mul_ln1345_35_fu_1270_p0),
    .din1(mul_ln1345_35_fu_1270_p1),
    .dout(mul_ln1345_35_fu_1270_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U961(
    .din0(mul_ln1345_36_fu_1280_p0),
    .din1(mul_ln1345_36_fu_1280_p1),
    .dout(mul_ln1345_36_fu_1280_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U962(
    .din0(mul_ln1345_37_fu_1290_p0),
    .din1(mul_ln1345_37_fu_1290_p1),
    .dout(mul_ln1345_37_fu_1290_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U963(
    .din0(mul_ln1345_38_fu_1300_p0),
    .din1(mul_ln1345_38_fu_1300_p1),
    .dout(mul_ln1345_38_fu_1300_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U964(
    .din0(mul_ln1345_39_fu_1306_p0),
    .din1(mul_ln1345_39_fu_1306_p1),
    .dout(mul_ln1345_39_fu_1306_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U965(
    .din0(mul_ln1345_40_fu_1312_p0),
    .din1(mul_ln1345_40_fu_1312_p1),
    .dout(mul_ln1345_40_fu_1312_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U966(
    .din0(mul_ln1345_41_fu_1318_p0),
    .din1(mul_ln1345_41_fu_1318_p1),
    .dout(mul_ln1345_41_fu_1318_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U967(
    .din0(mul_ln1345_42_fu_1340_p0),
    .din1(mul_ln1345_42_fu_1340_p1),
    .dout(mul_ln1345_42_fu_1340_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U968(
    .din0(mul_ln1345_43_fu_1350_p0),
    .din1(mul_ln1345_43_fu_1350_p1),
    .dout(mul_ln1345_43_fu_1350_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U969(
    .din0(mul_ln1345_44_fu_1360_p0),
    .din1(mul_ln1345_44_fu_1360_p1),
    .dout(mul_ln1345_44_fu_1360_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U970(
    .din0(mul_ln1345_45_fu_1370_p0),
    .din1(mul_ln1345_45_fu_1370_p1),
    .dout(mul_ln1345_45_fu_1370_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U971(
    .din0(mul_ln1345_46_fu_1376_p0),
    .din1(mul_ln1345_46_fu_1376_p1),
    .dout(mul_ln1345_46_fu_1376_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U972(
    .din0(mul_ln1345_47_fu_1382_p0),
    .din1(mul_ln1345_47_fu_1382_p1),
    .dout(mul_ln1345_47_fu_1382_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U973(
    .din0(mul_ln1345_48_fu_1388_p0),
    .din1(mul_ln1345_48_fu_1388_p1),
    .dout(mul_ln1345_48_fu_1388_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U974(
    .din0(mul_ln1345_49_fu_1410_p0),
    .din1(mul_ln1345_49_fu_1410_p1),
    .dout(mul_ln1345_49_fu_1410_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U975(
    .din0(mul_ln1345_50_fu_1420_p0),
    .din1(mul_ln1345_50_fu_1420_p1),
    .dout(mul_ln1345_50_fu_1420_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U976(
    .din0(mul_ln1345_51_fu_1430_p0),
    .din1(mul_ln1345_51_fu_1430_p1),
    .dout(mul_ln1345_51_fu_1430_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U977(
    .din0(mul_ln1345_52_fu_1440_p0),
    .din1(mul_ln1345_52_fu_1440_p1),
    .dout(mul_ln1345_52_fu_1440_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U978(
    .din0(mul_ln1345_53_fu_1446_p0),
    .din1(mul_ln1345_53_fu_1446_p1),
    .dout(mul_ln1345_53_fu_1446_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U979(
    .din0(mul_ln1345_54_fu_1452_p0),
    .din1(mul_ln1345_54_fu_1452_p1),
    .dout(mul_ln1345_54_fu_1452_p2)
);

ATTN0_mul_3ns_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3ns_3s_6_1_1_U980(
    .din0(mul_ln1345_55_fu_1458_p0),
    .din1(mul_ln1345_55_fu_1458_p1),
    .dout(mul_ln1345_55_fu_1458_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_265 <= cit_1_fu_1480_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_265 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten13_reg_243 <= add_ln336_fu_276_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_243 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        indvar_flatten_reg_254 <= select_ln337_1_fu_300_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_254 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_10_reg_2131 <= add_ln691_10_fu_894_p2;
        add_ln691_11_reg_2136 <= add_ln691_11_fu_900_p2;
        add_ln691_17_reg_2156 <= add_ln691_17_fu_992_p2;
        add_ln691_18_reg_2161 <= add_ln691_18_fu_998_p2;
        add_ln691_24_reg_2181 <= add_ln691_24_fu_1090_p2;
        add_ln691_25_reg_2186 <= add_ln691_25_fu_1096_p2;
        add_ln691_31_reg_2206 <= add_ln691_31_fu_1258_p2;
        add_ln691_32_reg_2211 <= add_ln691_32_fu_1264_p2;
        add_ln691_38_reg_2231 <= add_ln691_38_fu_1328_p2;
        add_ln691_39_reg_2236 <= add_ln691_39_fu_1334_p2;
        add_ln691_3_reg_2106 <= add_ln691_3_fu_796_p2;
        add_ln691_45_reg_2256 <= add_ln691_45_fu_1398_p2;
        add_ln691_46_reg_2261 <= add_ln691_46_fu_1404_p2;
        add_ln691_4_reg_2111 <= add_ln691_4_fu_802_p2;
        add_ln691_52_reg_2281 <= add_ln691_52_fu_1468_p2;
        add_ln691_53_reg_2286 <= add_ln691_53_fu_1474_p2;
        icmp_ln342_reg_2086 <= icmp_ln342_fu_338_p2;
        mul_ln1345_10_reg_2116 <= mul_ln1345_10_fu_854_p2;
        mul_ln1345_11_reg_2121 <= mul_ln1345_11_fu_864_p2;
        mul_ln1345_12_reg_2126 <= mul_ln1345_12_fu_874_p2;
        mul_ln1345_17_reg_2141 <= mul_ln1345_17_fu_952_p2;
        mul_ln1345_18_reg_2146 <= mul_ln1345_18_fu_962_p2;
        mul_ln1345_19_reg_2151 <= mul_ln1345_19_fu_972_p2;
        mul_ln1345_24_reg_2166 <= mul_ln1345_24_fu_1050_p2;
        mul_ln1345_25_reg_2171 <= mul_ln1345_25_fu_1060_p2;
        mul_ln1345_26_reg_2176 <= mul_ln1345_26_fu_1070_p2;
        mul_ln1345_31_reg_2191 <= mul_ln1345_31_fu_1188_p2;
        mul_ln1345_32_reg_2196 <= mul_ln1345_32_fu_1208_p2;
        mul_ln1345_33_reg_2201 <= mul_ln1345_33_fu_1228_p2;
        mul_ln1345_38_reg_2216 <= mul_ln1345_38_fu_1300_p2;
        mul_ln1345_39_reg_2221 <= mul_ln1345_39_fu_1306_p2;
        mul_ln1345_3_reg_2091 <= mul_ln1345_3_fu_714_p2;
        mul_ln1345_40_reg_2226 <= mul_ln1345_40_fu_1312_p2;
        mul_ln1345_45_reg_2241 <= mul_ln1345_45_fu_1370_p2;
        mul_ln1345_46_reg_2246 <= mul_ln1345_46_fu_1376_p2;
        mul_ln1345_47_reg_2251 <= mul_ln1345_47_fu_1382_p2;
        mul_ln1345_4_reg_2096 <= mul_ln1345_4_fu_738_p2;
        mul_ln1345_52_reg_2266 <= mul_ln1345_52_fu_1440_p2;
        mul_ln1345_53_reg_2271 <= mul_ln1345_53_fu_1446_p2;
        mul_ln1345_54_reg_2276 <= mul_ln1345_54_fu_1452_p2;
        mul_ln1345_5_reg_2101 <= mul_ln1345_5_fu_762_p2;
        select_ln337_reg_2081 <= select_ln337_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        add_ln691_13_reg_2301 <= add_ln691_13_fu_1610_p2;
        add_ln691_20_reg_2306 <= add_ln691_20_fu_1673_p2;
        add_ln691_27_reg_2311 <= add_ln691_27_fu_1736_p2;
        add_ln691_34_reg_2316 <= add_ln691_34_fu_1799_p2;
        add_ln691_41_reg_2321 <= add_ln691_41_fu_1862_p2;
        add_ln691_48_reg_2326 <= add_ln691_48_fu_1925_p2;
        add_ln691_55_reg_2331 <= add_ln691_55_fu_1988_p2;
        add_ln691_6_reg_2296 <= add_ln691_6_fu_1547_p2;
        icmp_ln378_reg_2336 <= icmp_ln378_fu_2014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2066 <= icmp_ln336_fu_282_p2;
        icmp_ln336_reg_2066_pp0_iter1_reg <= icmp_ln336_reg_2066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd0))) begin
        icmp_ln337_reg_2070 <= icmp_ln337_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2066_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_220 <= tmp_175_fu_1994_p9;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_282_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2066 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_276_p2 = (indvar_flatten13_reg_243 + 16'd1);

assign add_ln337_fu_294_p2 = (indvar_flatten_reg_254 + 10'd1);

assign add_ln691_10_fu_894_p2 = ($signed(sext_ln368_5_fu_846_p1) + $signed(sext_ln368_4_fu_832_p1));

assign add_ln691_11_fu_900_p2 = ($signed(sext_ln691_7_fu_818_p1) + $signed(sext_ln691_9_fu_890_p1));

assign add_ln691_12_fu_1600_p2 = ($signed(sext_ln691_12_fu_1597_p1) + $signed(sext_ln691_11_fu_1594_p1));

assign add_ln691_13_fu_1610_p2 = ($signed(sext_ln691_13_fu_1606_p1) + $signed(add_ln691_9_fu_1588_p2));

assign add_ln691_14_fu_1635_p2 = ($signed(tmp_169_fu_1616_p4) + $signed(sext_ln691_15_fu_1629_p1));

assign add_ln691_15_fu_1641_p2 = ($signed(sext_ln368_11_fu_1632_p1) + $signed(sext_ln368_10_fu_1626_p1));

assign add_ln691_16_fu_1651_p2 = ($signed(sext_ln691_17_fu_1647_p1) + $signed(add_ln691_14_fu_1635_p2));

assign add_ln691_17_fu_992_p2 = ($signed(sext_ln368_9_fu_944_p1) + $signed(sext_ln368_8_fu_930_p1));

assign add_ln691_18_fu_998_p2 = ($signed(sext_ln691_14_fu_916_p1) + $signed(sext_ln691_16_fu_988_p1));

assign add_ln691_19_fu_1663_p2 = ($signed(sext_ln691_19_fu_1660_p1) + $signed(sext_ln691_18_fu_1657_p1));

assign add_ln691_1_fu_1515_p2 = ($signed(sext_ln368_3_fu_1506_p1) + $signed(sext_ln368_2_fu_1500_p1));

assign add_ln691_20_fu_1673_p2 = ($signed(sext_ln691_20_fu_1669_p1) + $signed(add_ln691_16_fu_1651_p2));

assign add_ln691_21_fu_1698_p2 = ($signed(tmp_170_fu_1679_p4) + $signed(sext_ln691_22_fu_1692_p1));

assign add_ln691_22_fu_1704_p2 = ($signed(sext_ln368_15_fu_1695_p1) + $signed(sext_ln368_14_fu_1689_p1));

assign add_ln691_23_fu_1714_p2 = ($signed(sext_ln691_24_fu_1710_p1) + $signed(add_ln691_21_fu_1698_p2));

assign add_ln691_24_fu_1090_p2 = ($signed(sext_ln368_13_fu_1042_p1) + $signed(sext_ln368_12_fu_1028_p1));

assign add_ln691_25_fu_1096_p2 = ($signed(sext_ln691_21_fu_1014_p1) + $signed(sext_ln691_23_fu_1086_p1));

assign add_ln691_26_fu_1726_p2 = ($signed(sext_ln691_26_fu_1723_p1) + $signed(sext_ln691_25_fu_1720_p1));

assign add_ln691_27_fu_1736_p2 = ($signed(sext_ln691_27_fu_1732_p1) + $signed(add_ln691_23_fu_1714_p2));

assign add_ln691_28_fu_1761_p2 = ($signed(tmp_171_fu_1742_p4) + $signed(sext_ln691_29_fu_1755_p1));

assign add_ln691_29_fu_1767_p2 = ($signed(sext_ln368_19_fu_1758_p1) + $signed(sext_ln368_18_fu_1752_p1));

assign add_ln691_2_fu_1525_p2 = ($signed(sext_ln691_3_fu_1521_p1) + $signed(add_ln691_fu_1509_p2));

assign add_ln691_30_fu_1777_p2 = ($signed(sext_ln691_31_fu_1773_p1) + $signed(add_ln691_28_fu_1761_p2));

assign add_ln691_31_fu_1258_p2 = ($signed(sext_ln368_17_fu_1170_p1) + $signed(sext_ln368_16_fu_1146_p1));

assign add_ln691_32_fu_1264_p2 = ($signed(sext_ln691_28_fu_1122_p1) + $signed(sext_ln691_30_fu_1254_p1));

assign add_ln691_33_fu_1789_p2 = ($signed(sext_ln691_33_fu_1786_p1) + $signed(sext_ln691_32_fu_1783_p1));

assign add_ln691_34_fu_1799_p2 = ($signed(sext_ln691_34_fu_1795_p1) + $signed(add_ln691_30_fu_1777_p2));

assign add_ln691_35_fu_1824_p2 = ($signed(tmp_172_fu_1805_p4) + $signed(sext_ln691_36_fu_1818_p1));

assign add_ln691_36_fu_1830_p2 = ($signed(sext_ln368_23_fu_1821_p1) + $signed(sext_ln368_22_fu_1815_p1));

assign add_ln691_37_fu_1840_p2 = ($signed(sext_ln691_38_fu_1836_p1) + $signed(add_ln691_35_fu_1824_p2));

assign add_ln691_38_fu_1328_p2 = ($signed(sext_ln368_21_fu_1296_p1) + $signed(sext_ln368_20_fu_1286_p1));

assign add_ln691_39_fu_1334_p2 = ($signed(sext_ln691_35_fu_1276_p1) + $signed(sext_ln691_37_fu_1324_p1));

assign add_ln691_3_fu_796_p2 = ($signed(sext_ln368_1_fu_692_p1) + $signed(sext_ln368_fu_664_p1));

assign add_ln691_40_fu_1852_p2 = ($signed(sext_ln691_40_fu_1849_p1) + $signed(sext_ln691_39_fu_1846_p1));

assign add_ln691_41_fu_1862_p2 = ($signed(sext_ln691_41_fu_1858_p1) + $signed(add_ln691_37_fu_1840_p2));

assign add_ln691_42_fu_1887_p2 = ($signed(tmp_173_fu_1868_p4) + $signed(sext_ln691_43_fu_1881_p1));

assign add_ln691_43_fu_1893_p2 = ($signed(sext_ln368_27_fu_1884_p1) + $signed(sext_ln368_26_fu_1878_p1));

assign add_ln691_44_fu_1903_p2 = ($signed(sext_ln691_45_fu_1899_p1) + $signed(add_ln691_42_fu_1887_p2));

assign add_ln691_45_fu_1398_p2 = ($signed(sext_ln368_25_fu_1366_p1) + $signed(sext_ln368_24_fu_1356_p1));

assign add_ln691_46_fu_1404_p2 = ($signed(sext_ln691_42_fu_1346_p1) + $signed(sext_ln691_44_fu_1394_p1));

assign add_ln691_47_fu_1915_p2 = ($signed(sext_ln691_47_fu_1912_p1) + $signed(sext_ln691_46_fu_1909_p1));

assign add_ln691_48_fu_1925_p2 = ($signed(sext_ln691_48_fu_1921_p1) + $signed(add_ln691_44_fu_1903_p2));

assign add_ln691_49_fu_1950_p2 = ($signed(tmp_174_fu_1931_p4) + $signed(sext_ln691_50_fu_1944_p1));

assign add_ln691_4_fu_802_p2 = ($signed(sext_ln691_fu_636_p1) + $signed(sext_ln691_2_fu_792_p1));

assign add_ln691_50_fu_1956_p2 = ($signed(sext_ln368_31_fu_1947_p1) + $signed(sext_ln368_30_fu_1941_p1));

assign add_ln691_51_fu_1966_p2 = ($signed(sext_ln691_52_fu_1962_p1) + $signed(add_ln691_49_fu_1950_p2));

assign add_ln691_52_fu_1468_p2 = ($signed(sext_ln368_29_fu_1436_p1) + $signed(sext_ln368_28_fu_1426_p1));

assign add_ln691_53_fu_1474_p2 = ($signed(sext_ln691_49_fu_1416_p1) + $signed(sext_ln691_51_fu_1464_p1));

assign add_ln691_54_fu_1978_p2 = ($signed(sext_ln691_54_fu_1975_p1) + $signed(sext_ln691_53_fu_1972_p1));

assign add_ln691_55_fu_1988_p2 = ($signed(sext_ln691_55_fu_1984_p1) + $signed(add_ln691_51_fu_1966_p2));

assign add_ln691_5_fu_1537_p2 = ($signed(sext_ln691_5_fu_1534_p1) + $signed(sext_ln691_4_fu_1531_p1));

assign add_ln691_6_fu_1547_p2 = ($signed(sext_ln691_6_fu_1543_p1) + $signed(add_ln691_2_fu_1525_p2));

assign add_ln691_7_fu_1572_p2 = ($signed(tmp_s_fu_1553_p4) + $signed(sext_ln691_8_fu_1566_p1));

assign add_ln691_8_fu_1578_p2 = ($signed(sext_ln368_7_fu_1569_p1) + $signed(sext_ln368_6_fu_1563_p1));

assign add_ln691_9_fu_1588_p2 = ($signed(sext_ln691_10_fu_1584_p1) + $signed(add_ln691_7_fu_1572_p2));

assign add_ln691_fu_1509_p2 = ($signed(trunc_ln691_fu_1496_p1) + $signed(sext_ln691_1_fu_1503_p1));

assign and_ln336_fu_319_p2 = (xor_ln336_fu_308_p2 & icmp_ln338_fu_313_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2336 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2066 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2066 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2336 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_1_fu_1480_p2 = (select_ln337_fu_330_p3 + 5'd1);

assign icmp_ln336_fu_282_p2 = ((indvar_flatten13_reg_243 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_288_p2 = ((indvar_flatten_reg_254 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_313_p2 = ((cit_reg_265 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_338_p2 = ((select_ln337_fu_330_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_2014_p2 = ((select_ln337_reg_2081 == 5'd27) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_176_fu_2024_p16;

assign mul_ln1345_10_fu_854_p0 = zext_ln1345_3_fu_706_p1;

assign mul_ln1345_10_fu_854_p1 = sext_ln1345_10_fu_850_p1;

assign mul_ln1345_11_fu_864_p0 = zext_ln1345_4_fu_730_p1;

assign mul_ln1345_11_fu_864_p1 = sext_ln1345_11_fu_860_p1;

assign mul_ln1345_12_fu_874_p0 = zext_ln1345_5_fu_754_p1;

assign mul_ln1345_12_fu_874_p1 = sext_ln1345_12_fu_870_p1;

assign mul_ln1345_13_fu_884_p0 = zext_ln1345_6_fu_778_p1;

assign mul_ln1345_13_fu_884_p1 = sext_ln1345_13_fu_880_p1;

assign mul_ln1345_14_fu_910_p0 = sext_ln1345_14_fu_906_p1;

assign mul_ln1345_14_fu_910_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_15_fu_924_p0 = zext_ln1345_1_fu_650_p1;

assign mul_ln1345_15_fu_924_p1 = sext_ln1345_15_fu_920_p1;

assign mul_ln1345_16_fu_938_p0 = zext_ln1345_2_fu_678_p1;

assign mul_ln1345_16_fu_938_p1 = sext_ln1345_16_fu_934_p1;

assign mul_ln1345_17_fu_952_p0 = zext_ln1345_3_fu_706_p1;

assign mul_ln1345_17_fu_952_p1 = sext_ln1345_17_fu_948_p1;

assign mul_ln1345_18_fu_962_p0 = zext_ln1345_4_fu_730_p1;

assign mul_ln1345_18_fu_962_p1 = sext_ln1345_18_fu_958_p1;

assign mul_ln1345_19_fu_972_p0 = zext_ln1345_5_fu_754_p1;

assign mul_ln1345_19_fu_972_p1 = sext_ln1345_19_fu_968_p1;

assign mul_ln1345_1_fu_658_p0 = zext_ln1345_1_fu_650_p1;

assign mul_ln1345_1_fu_658_p1 = sext_ln1345_1_fu_654_p1;

assign mul_ln1345_20_fu_982_p0 = zext_ln1345_6_fu_778_p1;

assign mul_ln1345_20_fu_982_p1 = sext_ln1345_20_fu_978_p1;

assign mul_ln1345_21_fu_1008_p0 = sext_ln1345_21_fu_1004_p1;

assign mul_ln1345_21_fu_1008_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_22_fu_1022_p0 = zext_ln1345_1_fu_650_p1;

assign mul_ln1345_22_fu_1022_p1 = sext_ln1345_22_fu_1018_p1;

assign mul_ln1345_23_fu_1036_p0 = zext_ln1345_2_fu_678_p1;

assign mul_ln1345_23_fu_1036_p1 = sext_ln1345_23_fu_1032_p1;

assign mul_ln1345_24_fu_1050_p0 = zext_ln1345_3_fu_706_p1;

assign mul_ln1345_24_fu_1050_p1 = sext_ln1345_24_fu_1046_p1;

assign mul_ln1345_25_fu_1060_p0 = zext_ln1345_4_fu_730_p1;

assign mul_ln1345_25_fu_1060_p1 = sext_ln1345_25_fu_1056_p1;

assign mul_ln1345_26_fu_1070_p0 = zext_ln1345_5_fu_754_p1;

assign mul_ln1345_26_fu_1070_p1 = sext_ln1345_26_fu_1066_p1;

assign mul_ln1345_27_fu_1080_p0 = zext_ln1345_6_fu_778_p1;

assign mul_ln1345_27_fu_1080_p1 = sext_ln1345_27_fu_1076_p1;

assign mul_ln1345_28_fu_1116_p0 = zext_ln1345_7_fu_1112_p1;

assign mul_ln1345_28_fu_1116_p1 = sext_ln1345_fu_626_p1;

assign mul_ln1345_29_fu_1140_p0 = zext_ln1345_8_fu_1136_p1;

assign mul_ln1345_29_fu_1140_p1 = sext_ln1345_1_fu_654_p1;

assign mul_ln1345_2_fu_686_p0 = zext_ln1345_2_fu_678_p1;

assign mul_ln1345_2_fu_686_p1 = sext_ln1345_2_fu_682_p1;

assign mul_ln1345_30_fu_1164_p0 = zext_ln1345_9_fu_1160_p1;

assign mul_ln1345_30_fu_1164_p1 = sext_ln1345_2_fu_682_p1;

assign mul_ln1345_31_fu_1188_p0 = zext_ln1345_10_fu_1184_p1;

assign mul_ln1345_31_fu_1188_p1 = sext_ln1345_3_fu_710_p1;

assign mul_ln1345_32_fu_1208_p0 = zext_ln1345_11_fu_1204_p1;

assign mul_ln1345_32_fu_1208_p1 = sext_ln1345_4_fu_734_p1;

assign mul_ln1345_33_fu_1228_p0 = zext_ln1345_12_fu_1224_p1;

assign mul_ln1345_33_fu_1228_p1 = sext_ln1345_5_fu_758_p1;

assign mul_ln1345_34_fu_1248_p0 = zext_ln1345_13_fu_1244_p1;

assign mul_ln1345_34_fu_1248_p1 = sext_ln1345_6_fu_782_p1;

assign mul_ln1345_35_fu_1270_p0 = zext_ln1345_7_fu_1112_p1;

assign mul_ln1345_35_fu_1270_p1 = sext_ln1345_7_fu_808_p1;

assign mul_ln1345_36_fu_1280_p0 = zext_ln1345_8_fu_1136_p1;

assign mul_ln1345_36_fu_1280_p1 = sext_ln1345_8_fu_822_p1;

assign mul_ln1345_37_fu_1290_p0 = zext_ln1345_9_fu_1160_p1;

assign mul_ln1345_37_fu_1290_p1 = sext_ln1345_9_fu_836_p1;

assign mul_ln1345_38_fu_1300_p0 = zext_ln1345_10_fu_1184_p1;

assign mul_ln1345_38_fu_1300_p1 = sext_ln1345_10_fu_850_p1;

assign mul_ln1345_39_fu_1306_p0 = zext_ln1345_11_fu_1204_p1;

assign mul_ln1345_39_fu_1306_p1 = sext_ln1345_11_fu_860_p1;

assign mul_ln1345_3_fu_714_p0 = zext_ln1345_3_fu_706_p1;

assign mul_ln1345_3_fu_714_p1 = sext_ln1345_3_fu_710_p1;

assign mul_ln1345_40_fu_1312_p0 = zext_ln1345_12_fu_1224_p1;

assign mul_ln1345_40_fu_1312_p1 = sext_ln1345_12_fu_870_p1;

assign mul_ln1345_41_fu_1318_p0 = zext_ln1345_13_fu_1244_p1;

assign mul_ln1345_41_fu_1318_p1 = sext_ln1345_13_fu_880_p1;

assign mul_ln1345_42_fu_1340_p0 = zext_ln1345_7_fu_1112_p1;

assign mul_ln1345_42_fu_1340_p1 = sext_ln1345_14_fu_906_p1;

assign mul_ln1345_43_fu_1350_p0 = zext_ln1345_8_fu_1136_p1;

assign mul_ln1345_43_fu_1350_p1 = sext_ln1345_15_fu_920_p1;

assign mul_ln1345_44_fu_1360_p0 = zext_ln1345_9_fu_1160_p1;

assign mul_ln1345_44_fu_1360_p1 = sext_ln1345_16_fu_934_p1;

assign mul_ln1345_45_fu_1370_p0 = zext_ln1345_10_fu_1184_p1;

assign mul_ln1345_45_fu_1370_p1 = sext_ln1345_17_fu_948_p1;

assign mul_ln1345_46_fu_1376_p0 = zext_ln1345_11_fu_1204_p1;

assign mul_ln1345_46_fu_1376_p1 = sext_ln1345_18_fu_958_p1;

assign mul_ln1345_47_fu_1382_p0 = zext_ln1345_12_fu_1224_p1;

assign mul_ln1345_47_fu_1382_p1 = sext_ln1345_19_fu_968_p1;

assign mul_ln1345_48_fu_1388_p0 = zext_ln1345_13_fu_1244_p1;

assign mul_ln1345_48_fu_1388_p1 = sext_ln1345_20_fu_978_p1;

assign mul_ln1345_49_fu_1410_p0 = zext_ln1345_7_fu_1112_p1;

assign mul_ln1345_49_fu_1410_p1 = sext_ln1345_21_fu_1004_p1;

assign mul_ln1345_4_fu_738_p0 = zext_ln1345_4_fu_730_p1;

assign mul_ln1345_4_fu_738_p1 = sext_ln1345_4_fu_734_p1;

assign mul_ln1345_50_fu_1420_p0 = zext_ln1345_8_fu_1136_p1;

assign mul_ln1345_50_fu_1420_p1 = sext_ln1345_22_fu_1018_p1;

assign mul_ln1345_51_fu_1430_p0 = zext_ln1345_9_fu_1160_p1;

assign mul_ln1345_51_fu_1430_p1 = sext_ln1345_23_fu_1032_p1;

assign mul_ln1345_52_fu_1440_p0 = zext_ln1345_10_fu_1184_p1;

assign mul_ln1345_52_fu_1440_p1 = sext_ln1345_24_fu_1046_p1;

assign mul_ln1345_53_fu_1446_p0 = zext_ln1345_11_fu_1204_p1;

assign mul_ln1345_53_fu_1446_p1 = sext_ln1345_25_fu_1056_p1;

assign mul_ln1345_54_fu_1452_p0 = zext_ln1345_12_fu_1224_p1;

assign mul_ln1345_54_fu_1452_p1 = sext_ln1345_26_fu_1066_p1;

assign mul_ln1345_55_fu_1458_p0 = zext_ln1345_13_fu_1244_p1;

assign mul_ln1345_55_fu_1458_p1 = sext_ln1345_27_fu_1076_p1;

assign mul_ln1345_5_fu_762_p0 = zext_ln1345_5_fu_754_p1;

assign mul_ln1345_5_fu_762_p1 = sext_ln1345_5_fu_758_p1;

assign mul_ln1345_6_fu_786_p0 = zext_ln1345_6_fu_778_p1;

assign mul_ln1345_6_fu_786_p1 = sext_ln1345_6_fu_782_p1;

assign mul_ln1345_7_fu_812_p0 = sext_ln1345_7_fu_808_p1;

assign mul_ln1345_7_fu_812_p1 = zext_ln1345_fu_622_p1;

assign mul_ln1345_8_fu_826_p0 = zext_ln1345_1_fu_650_p1;

assign mul_ln1345_8_fu_826_p1 = sext_ln1345_8_fu_822_p1;

assign mul_ln1345_9_fu_840_p0 = zext_ln1345_2_fu_678_p1;

assign mul_ln1345_9_fu_840_p1 = sext_ln1345_9_fu_836_p1;

assign mul_ln1345_fu_630_p0 = sext_ln1345_fu_626_p1;

assign mul_ln1345_fu_630_p1 = zext_ln1345_fu_622_p1;

assign or_ln337_fu_325_p2 = (icmp_ln337_reg_2070 | and_ln336_fu_319_p2);

assign select_ln337_1_fu_300_p3 = ((icmp_ln337_fu_288_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_294_p2);

assign select_ln337_fu_330_p3 = ((or_ln337_fu_325_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_265);

assign select_ln342_fu_1489_p3 = ((icmp_ln342_reg_2086[0:0] == 1'b1) ? 88'd0 : vec_o_data_M_elems_V_2_fu_220);

assign sext_ln1345_10_fu_850_p1 = $signed(trunc_ln145_1_fu_442_p4);

assign sext_ln1345_11_fu_860_p1 = $signed(trunc_ln145_10_fu_452_p4);

assign sext_ln1345_12_fu_870_p1 = $signed(trunc_ln145_11_fu_462_p4);

assign sext_ln1345_13_fu_880_p1 = $signed(trunc_ln145_12_fu_472_p4);

assign sext_ln1345_14_fu_906_p1 = $signed(trunc_ln145_13_fu_482_p4);

assign sext_ln1345_15_fu_920_p1 = $signed(trunc_ln145_14_fu_492_p4);

assign sext_ln1345_16_fu_934_p1 = $signed(trunc_ln145_15_fu_502_p4);

assign sext_ln1345_17_fu_948_p1 = $signed(trunc_ln145_16_fu_512_p4);

assign sext_ln1345_18_fu_958_p1 = $signed(trunc_ln145_17_fu_522_p4);

assign sext_ln1345_19_fu_968_p1 = $signed(trunc_ln145_18_fu_532_p4);

assign sext_ln1345_1_fu_654_p1 = $signed(trunc_ln145_2_fu_352_p4);

assign sext_ln1345_20_fu_978_p1 = $signed(trunc_ln145_19_fu_542_p4);

assign sext_ln1345_21_fu_1004_p1 = $signed(trunc_ln145_20_fu_552_p4);

assign sext_ln1345_22_fu_1018_p1 = $signed(trunc_ln145_21_fu_562_p4);

assign sext_ln1345_23_fu_1032_p1 = $signed(trunc_ln145_22_fu_572_p4);

assign sext_ln1345_24_fu_1046_p1 = $signed(trunc_ln145_23_fu_582_p4);

assign sext_ln1345_25_fu_1056_p1 = $signed(trunc_ln145_24_fu_592_p4);

assign sext_ln1345_26_fu_1066_p1 = $signed(trunc_ln145_25_fu_602_p4);

assign sext_ln1345_27_fu_1076_p1 = $signed(trunc_ln145_26_fu_612_p4);

assign sext_ln1345_2_fu_682_p1 = $signed(trunc_ln145_3_fu_362_p4);

assign sext_ln1345_3_fu_710_p1 = $signed(trunc_ln145_4_fu_372_p4);

assign sext_ln1345_4_fu_734_p1 = $signed(trunc_ln145_5_fu_382_p4);

assign sext_ln1345_5_fu_758_p1 = $signed(trunc_ln145_6_fu_392_p4);

assign sext_ln1345_6_fu_782_p1 = $signed(trunc_ln145_7_fu_402_p4);

assign sext_ln1345_7_fu_808_p1 = $signed(trunc_ln145_8_fu_412_p4);

assign sext_ln1345_8_fu_822_p1 = $signed(trunc_ln145_9_fu_422_p4);

assign sext_ln1345_9_fu_836_p1 = $signed(trunc_ln145_s_fu_432_p4);

assign sext_ln1345_fu_626_p1 = $signed(trunc_ln145_29_fu_348_p1);

assign sext_ln368_10_fu_1626_p1 = mul_ln1345_17_reg_2141;

assign sext_ln368_11_fu_1632_p1 = mul_ln1345_19_reg_2151;

assign sext_ln368_12_fu_1028_p1 = mul_ln1345_22_fu_1022_p2;

assign sext_ln368_13_fu_1042_p1 = mul_ln1345_23_fu_1036_p2;

assign sext_ln368_14_fu_1689_p1 = mul_ln1345_24_reg_2166;

assign sext_ln368_15_fu_1695_p1 = mul_ln1345_26_reg_2176;

assign sext_ln368_16_fu_1146_p1 = mul_ln1345_29_fu_1140_p2;

assign sext_ln368_17_fu_1170_p1 = mul_ln1345_30_fu_1164_p2;

assign sext_ln368_18_fu_1752_p1 = mul_ln1345_31_reg_2191;

assign sext_ln368_19_fu_1758_p1 = mul_ln1345_33_reg_2201;

assign sext_ln368_1_fu_692_p1 = mul_ln1345_2_fu_686_p2;

assign sext_ln368_20_fu_1286_p1 = mul_ln1345_36_fu_1280_p2;

assign sext_ln368_21_fu_1296_p1 = mul_ln1345_37_fu_1290_p2;

assign sext_ln368_22_fu_1815_p1 = mul_ln1345_38_reg_2216;

assign sext_ln368_23_fu_1821_p1 = mul_ln1345_40_reg_2226;

assign sext_ln368_24_fu_1356_p1 = mul_ln1345_43_fu_1350_p2;

assign sext_ln368_25_fu_1366_p1 = mul_ln1345_44_fu_1360_p2;

assign sext_ln368_26_fu_1878_p1 = mul_ln1345_45_reg_2241;

assign sext_ln368_27_fu_1884_p1 = mul_ln1345_47_reg_2251;

assign sext_ln368_28_fu_1426_p1 = mul_ln1345_50_fu_1420_p2;

assign sext_ln368_29_fu_1436_p1 = mul_ln1345_51_fu_1430_p2;

assign sext_ln368_2_fu_1500_p1 = mul_ln1345_3_reg_2091;

assign sext_ln368_30_fu_1941_p1 = mul_ln1345_52_reg_2266;

assign sext_ln368_31_fu_1947_p1 = mul_ln1345_54_reg_2276;

assign sext_ln368_3_fu_1506_p1 = mul_ln1345_5_reg_2101;

assign sext_ln368_4_fu_832_p1 = mul_ln1345_8_fu_826_p2;

assign sext_ln368_5_fu_846_p1 = mul_ln1345_9_fu_840_p2;

assign sext_ln368_6_fu_1563_p1 = mul_ln1345_10_reg_2116;

assign sext_ln368_7_fu_1569_p1 = mul_ln1345_12_reg_2126;

assign sext_ln368_8_fu_930_p1 = mul_ln1345_15_fu_924_p2;

assign sext_ln368_9_fu_944_p1 = mul_ln1345_16_fu_938_p2;

assign sext_ln368_fu_664_p1 = mul_ln1345_1_fu_658_p2;

assign sext_ln691_10_fu_1584_p1 = $signed(add_ln691_8_fu_1578_p2);

assign sext_ln691_11_fu_1594_p1 = $signed(add_ln691_10_reg_2131);

assign sext_ln691_12_fu_1597_p1 = $signed(add_ln691_11_reg_2136);

assign sext_ln691_13_fu_1606_p1 = $signed(add_ln691_12_fu_1600_p2);

assign sext_ln691_14_fu_916_p1 = mul_ln1345_14_fu_910_p2;

assign sext_ln691_15_fu_1629_p1 = mul_ln1345_18_reg_2146;

assign sext_ln691_16_fu_988_p1 = mul_ln1345_20_fu_982_p2;

assign sext_ln691_17_fu_1647_p1 = $signed(add_ln691_15_fu_1641_p2);

assign sext_ln691_18_fu_1657_p1 = $signed(add_ln691_17_reg_2156);

assign sext_ln691_19_fu_1660_p1 = $signed(add_ln691_18_reg_2161);

assign sext_ln691_1_fu_1503_p1 = mul_ln1345_4_reg_2096;

assign sext_ln691_20_fu_1669_p1 = $signed(add_ln691_19_fu_1663_p2);

assign sext_ln691_21_fu_1014_p1 = mul_ln1345_21_fu_1008_p2;

assign sext_ln691_22_fu_1692_p1 = mul_ln1345_25_reg_2171;

assign sext_ln691_23_fu_1086_p1 = mul_ln1345_27_fu_1080_p2;

assign sext_ln691_24_fu_1710_p1 = $signed(add_ln691_22_fu_1704_p2);

assign sext_ln691_25_fu_1720_p1 = $signed(add_ln691_24_reg_2181);

assign sext_ln691_26_fu_1723_p1 = $signed(add_ln691_25_reg_2186);

assign sext_ln691_27_fu_1732_p1 = $signed(add_ln691_26_fu_1726_p2);

assign sext_ln691_28_fu_1122_p1 = mul_ln1345_28_fu_1116_p2;

assign sext_ln691_29_fu_1755_p1 = mul_ln1345_32_reg_2196;

assign sext_ln691_2_fu_792_p1 = mul_ln1345_6_fu_786_p2;

assign sext_ln691_30_fu_1254_p1 = mul_ln1345_34_fu_1248_p2;

assign sext_ln691_31_fu_1773_p1 = $signed(add_ln691_29_fu_1767_p2);

assign sext_ln691_32_fu_1783_p1 = $signed(add_ln691_31_reg_2206);

assign sext_ln691_33_fu_1786_p1 = $signed(add_ln691_32_reg_2211);

assign sext_ln691_34_fu_1795_p1 = $signed(add_ln691_33_fu_1789_p2);

assign sext_ln691_35_fu_1276_p1 = mul_ln1345_35_fu_1270_p2;

assign sext_ln691_36_fu_1818_p1 = mul_ln1345_39_reg_2221;

assign sext_ln691_37_fu_1324_p1 = mul_ln1345_41_fu_1318_p2;

assign sext_ln691_38_fu_1836_p1 = $signed(add_ln691_36_fu_1830_p2);

assign sext_ln691_39_fu_1846_p1 = $signed(add_ln691_38_reg_2231);

assign sext_ln691_3_fu_1521_p1 = $signed(add_ln691_1_fu_1515_p2);

assign sext_ln691_40_fu_1849_p1 = $signed(add_ln691_39_reg_2236);

assign sext_ln691_41_fu_1858_p1 = $signed(add_ln691_40_fu_1852_p2);

assign sext_ln691_42_fu_1346_p1 = mul_ln1345_42_fu_1340_p2;

assign sext_ln691_43_fu_1881_p1 = mul_ln1345_46_reg_2246;

assign sext_ln691_44_fu_1394_p1 = mul_ln1345_48_fu_1388_p2;

assign sext_ln691_45_fu_1899_p1 = $signed(add_ln691_43_fu_1893_p2);

assign sext_ln691_46_fu_1909_p1 = $signed(add_ln691_45_reg_2256);

assign sext_ln691_47_fu_1912_p1 = $signed(add_ln691_46_reg_2261);

assign sext_ln691_48_fu_1921_p1 = $signed(add_ln691_47_fu_1915_p2);

assign sext_ln691_49_fu_1416_p1 = mul_ln1345_49_fu_1410_p2;

assign sext_ln691_4_fu_1531_p1 = $signed(add_ln691_3_reg_2106);

assign sext_ln691_50_fu_1944_p1 = mul_ln1345_53_reg_2271;

assign sext_ln691_51_fu_1464_p1 = mul_ln1345_55_fu_1458_p2;

assign sext_ln691_52_fu_1962_p1 = $signed(add_ln691_50_fu_1956_p2);

assign sext_ln691_53_fu_1972_p1 = $signed(add_ln691_52_reg_2281);

assign sext_ln691_54_fu_1975_p1 = $signed(add_ln691_53_reg_2286);

assign sext_ln691_55_fu_1984_p1 = $signed(add_ln691_54_fu_1978_p2);

assign sext_ln691_5_fu_1534_p1 = $signed(add_ln691_4_reg_2111);

assign sext_ln691_6_fu_1543_p1 = $signed(add_ln691_5_fu_1537_p2);

assign sext_ln691_7_fu_818_p1 = mul_ln1345_7_fu_812_p2;

assign sext_ln691_8_fu_1566_p1 = mul_ln1345_11_reg_2121;

assign sext_ln691_9_fu_890_p1 = mul_ln1345_13_fu_884_p2;

assign sext_ln691_fu_636_p1 = mul_ln1345_fu_630_p2;

assign start_out = real_start;

assign tmp_169_fu_1616_p4 = {{select_ln342_fu_1489_p3[32:22]}};

assign tmp_170_fu_1679_p4 = {{select_ln342_fu_1489_p3[43:33]}};

assign tmp_171_fu_1742_p4 = {{select_ln342_fu_1489_p3[54:44]}};

assign tmp_172_fu_1805_p4 = {{select_ln342_fu_1489_p3[65:55]}};

assign tmp_173_fu_1868_p4 = {{select_ln342_fu_1489_p3[76:66]}};

assign tmp_174_fu_1931_p4 = {{select_ln342_fu_1489_p3[87:77]}};

assign tmp_175_fu_1994_p9 = {{{{{{{{add_ln691_55_fu_1988_p2}, {add_ln691_48_fu_1925_p2}}, {add_ln691_41_fu_1862_p2}}, {add_ln691_34_fu_1799_p2}}, {add_ln691_27_fu_1736_p2}}, {add_ln691_20_fu_1673_p2}}, {add_ln691_13_fu_1610_p2}}, {add_ln691_6_fu_1547_p2}};

assign tmp_176_fu_2024_p16 = {{{{{{{{{{{{{{{add_ln691_55_reg_2331}, {5'd0}}, {add_ln691_48_reg_2326}}, {5'd0}}, {add_ln691_41_reg_2321}}, {5'd0}}, {add_ln691_34_reg_2316}}, {5'd0}}, {add_ln691_27_reg_2311}}, {5'd0}}, {add_ln691_20_reg_2306}}, {5'd0}}, {add_ln691_13_reg_2301}}, {5'd0}}, {add_ln691_6_reg_2296}};

assign tmp_177_fu_640_p4 = {{cache_window_sm_dout[10:8]}};

assign tmp_178_fu_668_p4 = {{cache_window_sm_dout[18:16]}};

assign tmp_179_fu_696_p4 = {{cache_window_sm_dout[26:24]}};

assign tmp_180_fu_720_p4 = {{cache_window_sm_dout[34:32]}};

assign tmp_181_fu_744_p4 = {{cache_window_sm_dout[42:40]}};

assign tmp_182_fu_768_p4 = {{cache_window_sm_dout[50:48]}};

assign tmp_183_fu_1102_p4 = {{cache_window_sm_dout[58:56]}};

assign tmp_184_fu_1126_p4 = {{cache_window_sm_dout[66:64]}};

assign tmp_185_fu_1150_p4 = {{cache_window_sm_dout[74:72]}};

assign tmp_186_fu_1174_p4 = {{cache_window_sm_dout[82:80]}};

assign tmp_187_fu_1194_p4 = {{cache_window_sm_dout[90:88]}};

assign tmp_188_fu_1214_p4 = {{cache_window_sm_dout[98:96]}};

assign tmp_189_fu_1234_p4 = {{cache_window_sm_dout[106:104]}};

assign tmp_s_fu_1553_p4 = {{select_ln342_fu_1489_p3[21:11]}};

assign trunc_ln145_10_fu_452_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_11_fu_462_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln145_12_fu_472_p4 = {{weight_sm_dout[106:104]}};

assign trunc_ln145_13_fu_482_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_14_fu_492_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_15_fu_502_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_16_fu_512_p4 = {{weight_sm_dout[138:136]}};

assign trunc_ln145_17_fu_522_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_18_fu_532_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_19_fu_542_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_1_fu_442_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_20_fu_552_p4 = {{weight_sm_dout[170:168]}};

assign trunc_ln145_21_fu_562_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_22_fu_572_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_23_fu_582_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_24_fu_592_p4 = {{weight_sm_dout[202:200]}};

assign trunc_ln145_25_fu_602_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_26_fu_612_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_29_fu_348_p1 = weight_sm_dout[2:0];

assign trunc_ln145_2_fu_352_p4 = {{weight_sm_dout[10:8]}};

assign trunc_ln145_3_fu_362_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_4_fu_372_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_5_fu_382_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_6_fu_392_p4 = {{weight_sm_dout[42:40]}};

assign trunc_ln145_7_fu_402_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_8_fu_412_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_9_fu_422_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_fu_344_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_432_p4 = {{weight_sm_dout[74:72]}};

assign trunc_ln691_fu_1496_p1 = select_ln342_fu_1489_p3[10:0];

assign xor_ln336_fu_308_p2 = (icmp_ln337_reg_2070 ^ 1'd1);

assign zext_ln1345_10_fu_1184_p1 = tmp_186_fu_1174_p4;

assign zext_ln1345_11_fu_1204_p1 = tmp_187_fu_1194_p4;

assign zext_ln1345_12_fu_1224_p1 = tmp_188_fu_1214_p4;

assign zext_ln1345_13_fu_1244_p1 = tmp_189_fu_1234_p4;

assign zext_ln1345_1_fu_650_p1 = tmp_177_fu_640_p4;

assign zext_ln1345_2_fu_678_p1 = tmp_178_fu_668_p4;

assign zext_ln1345_3_fu_706_p1 = tmp_179_fu_696_p4;

assign zext_ln1345_4_fu_730_p1 = tmp_180_fu_720_p4;

assign zext_ln1345_5_fu_754_p1 = tmp_181_fu_744_p4;

assign zext_ln1345_6_fu_778_p1 = tmp_182_fu_768_p4;

assign zext_ln1345_7_fu_1112_p1 = tmp_183_fu_1102_p4;

assign zext_ln1345_8_fu_1136_p1 = tmp_184_fu_1126_p4;

assign zext_ln1345_9_fu_1160_p1 = tmp_185_fu_1150_p4;

assign zext_ln1345_fu_622_p1 = trunc_ln145_fu_344_p1;

endmodule //ATTN0_matmul_step2_mac173
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        weight_sm_dout,
        weight_sm_empty_n,
        weight_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
input  [223:0] weight_sm_dout;
input   weight_sm_empty_n;
output   weight_sm_read;
output  [223:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg weight_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln336_reg_2015;
reg    weight_sm_blk_n;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln378_reg_2370;
reg   [15:0] indvar_flatten13_reg_269;
reg   [9:0] indvar_flatten_reg_280;
reg   [4:0] cit_reg_291;
wire   [15:0] add_ln336_fu_302_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln336_fu_308_p2;
reg   [0:0] icmp_ln336_reg_2015_pp0_iter1_reg;
wire   [0:0] icmp_ln337_fu_314_p2;
reg   [0:0] icmp_ln337_reg_2019;
wire   [9:0] select_ln337_5_fu_326_p3;
wire   [4:0] select_ln337_fu_356_p3;
reg   [4:0] select_ln337_reg_2030;
wire   [0:0] icmp_ln342_fu_364_p2;
reg   [0:0] icmp_ln342_reg_2035;
reg   [2:0] trunc_ln145_72_reg_2040;
reg   [2:0] trunc_ln145_76_reg_2045;
reg   [2:0] trunc_ln145_80_reg_2050;
reg   [2:0] trunc_ln145_84_reg_2055;
reg   [2:0] trunc_ln145_88_reg_2060;
reg   [2:0] trunc_ln145_92_reg_2065;
reg   [2:0] trunc_ln145_96_reg_2070;
reg   [2:0] trunc_ln145_100_reg_2075;
reg   [2:0] trunc_ln145_104_reg_2080;
wire  signed [5:0] mul_ln1345_fu_726_p2;
reg  signed [5:0] mul_ln1345_reg_2085;
wire  signed [5:0] mul_ln1345_277_fu_740_p2;
reg  signed [5:0] mul_ln1345_277_reg_2090;
wire  signed [5:0] mul_ln1345_278_fu_754_p2;
reg  signed [5:0] mul_ln1345_278_reg_2095;
wire  signed [5:0] mul_ln1345_279_fu_764_p2;
reg  signed [5:0] mul_ln1345_279_reg_2100;
wire  signed [5:0] mul_ln1345_281_fu_774_p2;
reg  signed [5:0] mul_ln1345_281_reg_2105;
wire  signed [5:0] mul_ln1345_282_fu_784_p2;
reg  signed [5:0] mul_ln1345_282_reg_2110;
wire  signed [5:0] mul_ln1345_283_fu_794_p2;
reg  signed [5:0] mul_ln1345_283_reg_2115;
wire  signed [5:0] mul_ln1345_285_fu_804_p2;
reg  signed [5:0] mul_ln1345_285_reg_2120;
wire  signed [5:0] mul_ln1345_286_fu_814_p2;
reg  signed [5:0] mul_ln1345_286_reg_2125;
wire  signed [5:0] mul_ln1345_287_fu_824_p2;
reg  signed [5:0] mul_ln1345_287_reg_2130;
wire  signed [5:0] mul_ln1345_289_fu_834_p2;
reg  signed [5:0] mul_ln1345_289_reg_2135;
wire  signed [5:0] mul_ln1345_290_fu_844_p2;
reg  signed [5:0] mul_ln1345_290_reg_2140;
wire  signed [5:0] mul_ln1345_291_fu_854_p2;
reg  signed [5:0] mul_ln1345_291_reg_2145;
wire  signed [5:0] mul_ln1345_293_fu_864_p2;
reg  signed [5:0] mul_ln1345_293_reg_2150;
wire  signed [5:0] mul_ln1345_294_fu_874_p2;
reg  signed [5:0] mul_ln1345_294_reg_2155;
wire  signed [5:0] mul_ln1345_295_fu_884_p2;
reg  signed [5:0] mul_ln1345_295_reg_2160;
wire  signed [5:0] mul_ln1345_297_fu_894_p2;
reg  signed [5:0] mul_ln1345_297_reg_2165;
wire  signed [5:0] mul_ln1345_298_fu_904_p2;
reg  signed [5:0] mul_ln1345_298_reg_2170;
wire  signed [5:0] mul_ln1345_299_fu_914_p2;
reg  signed [5:0] mul_ln1345_299_reg_2175;
wire  signed [5:0] mul_ln1345_301_fu_924_p2;
reg  signed [5:0] mul_ln1345_301_reg_2180;
wire  signed [5:0] mul_ln1345_302_fu_934_p2;
reg  signed [5:0] mul_ln1345_302_reg_2185;
wire  signed [5:0] mul_ln1345_303_fu_944_p2;
reg  signed [5:0] mul_ln1345_303_reg_2190;
wire  signed [5:0] mul_ln1345_305_fu_954_p2;
reg  signed [5:0] mul_ln1345_305_reg_2195;
wire  signed [5:0] mul_ln1345_306_fu_964_p2;
reg  signed [5:0] mul_ln1345_306_reg_2200;
wire  signed [5:0] mul_ln1345_307_fu_970_p2;
reg  signed [5:0] mul_ln1345_307_reg_2205;
wire  signed [5:0] mul_ln1345_309_fu_976_p2;
reg  signed [5:0] mul_ln1345_309_reg_2210;
wire  signed [5:0] mul_ln1345_310_fu_982_p2;
reg  signed [5:0] mul_ln1345_310_reg_2215;
wire  signed [5:0] mul_ln1345_311_fu_988_p2;
reg  signed [5:0] mul_ln1345_311_reg_2220;
wire  signed [5:0] mul_ln1345_313_fu_994_p2;
reg  signed [5:0] mul_ln1345_313_reg_2225;
wire  signed [5:0] mul_ln1345_314_fu_1000_p2;
reg  signed [5:0] mul_ln1345_314_reg_2230;
wire  signed [5:0] mul_ln1345_315_fu_1006_p2;
reg  signed [5:0] mul_ln1345_315_reg_2235;
wire  signed [5:0] mul_ln1345_317_fu_1012_p2;
reg  signed [5:0] mul_ln1345_317_reg_2240;
wire  signed [5:0] mul_ln1345_318_fu_1018_p2;
reg  signed [5:0] mul_ln1345_318_reg_2245;
wire  signed [5:0] mul_ln1345_319_fu_1024_p2;
reg  signed [5:0] mul_ln1345_319_reg_2250;
wire  signed [5:0] mul_ln1345_321_fu_1030_p2;
reg  signed [5:0] mul_ln1345_321_reg_2255;
wire  signed [5:0] mul_ln1345_322_fu_1036_p2;
reg  signed [5:0] mul_ln1345_322_reg_2260;
wire  signed [5:0] mul_ln1345_323_fu_1042_p2;
reg  signed [5:0] mul_ln1345_323_reg_2265;
wire  signed [5:0] mul_ln1345_325_fu_1048_p2;
reg  signed [5:0] mul_ln1345_325_reg_2270;
wire  signed [5:0] mul_ln1345_326_fu_1054_p2;
reg  signed [5:0] mul_ln1345_326_reg_2275;
wire  signed [5:0] mul_ln1345_327_fu_1060_p2;
reg  signed [5:0] mul_ln1345_327_reg_2280;
wire  signed [5:0] mul_ln1345_329_fu_1066_p2;
reg  signed [5:0] mul_ln1345_329_reg_2285;
wire  signed [5:0] mul_ln1345_330_fu_1072_p2;
reg  signed [5:0] mul_ln1345_330_reg_2290;
wire   [4:0] cit_5_fu_1078_p2;
wire   [9:0] add_ln691_279_fu_1145_p2;
reg   [9:0] add_ln691_279_reg_2300;
wire   [9:0] add_ln691_283_fu_1205_p2;
reg   [9:0] add_ln691_283_reg_2305;
wire   [9:0] add_ln691_287_fu_1265_p2;
reg   [9:0] add_ln691_287_reg_2310;
wire   [9:0] add_ln691_291_fu_1325_p2;
reg   [9:0] add_ln691_291_reg_2315;
wire   [9:0] add_ln691_295_fu_1385_p2;
reg   [9:0] add_ln691_295_reg_2320;
wire   [9:0] add_ln691_299_fu_1445_p2;
reg   [9:0] add_ln691_299_reg_2325;
wire   [9:0] add_ln691_303_fu_1505_p2;
reg   [9:0] add_ln691_303_reg_2330;
wire   [9:0] add_ln691_307_fu_1565_p2;
reg   [9:0] add_ln691_307_reg_2335;
wire   [9:0] add_ln691_311_fu_1622_p2;
reg   [9:0] add_ln691_311_reg_2340;
wire   [9:0] add_ln691_315_fu_1679_p2;
reg   [9:0] add_ln691_315_reg_2345;
wire   [9:0] add_ln691_319_fu_1736_p2;
reg   [9:0] add_ln691_319_reg_2350;
wire   [9:0] add_ln691_323_fu_1793_p2;
reg   [9:0] add_ln691_323_reg_2355;
wire   [9:0] add_ln691_327_fu_1850_p2;
reg   [9:0] add_ln691_327_reg_2360;
wire   [9:0] add_ln691_331_fu_1907_p2;
reg   [9:0] add_ln691_331_reg_2365;
wire   [0:0] icmp_ln378_fu_1945_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [139:0] vec_o_data_M_elems_V_2_fu_246;
wire   [139:0] tmp_357_fu_1913_p15;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln337_fu_320_p2;
wire   [0:0] icmp_ln338_fu_339_p2;
wire   [0:0] xor_ln336_fu_334_p2;
wire   [0:0] and_ln336_fu_345_p2;
wire   [0:0] or_ln337_fu_351_p2;
wire   [2:0] trunc_ln145_fu_370_p1;
wire   [2:0] trunc_ln145_52_fu_444_p1;
wire  signed [2:0] mul_ln1345_fu_726_p0;
wire  signed [5:0] sext_ln1345_152_fu_722_p1;
wire  signed [2:0] mul_ln1345_fu_726_p1;
wire  signed [5:0] sext_ln1345_fu_718_p1;
wire   [2:0] trunc_ln145_73_fu_384_p4;
wire   [2:0] trunc_ln145_81_fu_458_p4;
wire  signed [2:0] mul_ln1345_277_fu_740_p0;
wire  signed [5:0] sext_ln1345_156_fu_736_p1;
wire  signed [2:0] mul_ln1345_277_fu_740_p1;
wire  signed [5:0] sext_ln1345_155_fu_732_p1;
wire   [2:0] trunc_ln145_74_fu_394_p4;
wire   [2:0] trunc_ln145_82_fu_468_p4;
wire  signed [2:0] mul_ln1345_278_fu_754_p0;
wire  signed [5:0] sext_ln1345_158_fu_750_p1;
wire  signed [2:0] mul_ln1345_278_fu_754_p1;
wire  signed [5:0] sext_ln1345_157_fu_746_p1;
wire   [2:0] trunc_ln145_83_fu_478_p4;
wire  signed [2:0] mul_ln1345_279_fu_764_p0;
wire  signed [5:0] sext_ln1345_159_fu_760_p1;
wire  signed [2:0] mul_ln1345_279_fu_764_p1;
wire   [2:0] trunc_ln145_85_fu_498_p4;
wire  signed [2:0] mul_ln1345_281_fu_774_p0;
wire  signed [5:0] sext_ln1345_161_fu_770_p1;
wire  signed [2:0] mul_ln1345_281_fu_774_p1;
wire   [2:0] trunc_ln145_86_fu_508_p4;
wire  signed [2:0] mul_ln1345_282_fu_784_p0;
wire  signed [5:0] sext_ln1345_162_fu_780_p1;
wire  signed [2:0] mul_ln1345_282_fu_784_p1;
wire   [2:0] trunc_ln145_87_fu_518_p4;
wire  signed [2:0] mul_ln1345_283_fu_794_p0;
wire  signed [5:0] sext_ln1345_163_fu_790_p1;
wire  signed [2:0] mul_ln1345_283_fu_794_p1;
wire   [2:0] trunc_ln145_89_fu_538_p4;
wire  signed [2:0] mul_ln1345_285_fu_804_p0;
wire  signed [5:0] sext_ln1345_165_fu_800_p1;
wire  signed [2:0] mul_ln1345_285_fu_804_p1;
wire   [2:0] trunc_ln145_90_fu_548_p4;
wire  signed [2:0] mul_ln1345_286_fu_814_p0;
wire  signed [5:0] sext_ln1345_166_fu_810_p1;
wire  signed [2:0] mul_ln1345_286_fu_814_p1;
wire   [2:0] trunc_ln145_91_fu_558_p4;
wire  signed [2:0] mul_ln1345_287_fu_824_p0;
wire  signed [5:0] sext_ln1345_167_fu_820_p1;
wire  signed [2:0] mul_ln1345_287_fu_824_p1;
wire   [2:0] trunc_ln145_93_fu_578_p4;
wire  signed [2:0] mul_ln1345_289_fu_834_p0;
wire  signed [5:0] sext_ln1345_169_fu_830_p1;
wire  signed [2:0] mul_ln1345_289_fu_834_p1;
wire   [2:0] trunc_ln145_94_fu_588_p4;
wire  signed [2:0] mul_ln1345_290_fu_844_p0;
wire  signed [5:0] sext_ln1345_170_fu_840_p1;
wire  signed [2:0] mul_ln1345_290_fu_844_p1;
wire   [2:0] trunc_ln145_95_fu_598_p4;
wire  signed [2:0] mul_ln1345_291_fu_854_p0;
wire  signed [5:0] sext_ln1345_171_fu_850_p1;
wire  signed [2:0] mul_ln1345_291_fu_854_p1;
wire   [2:0] trunc_ln145_97_fu_618_p4;
wire  signed [2:0] mul_ln1345_293_fu_864_p0;
wire  signed [5:0] sext_ln1345_173_fu_860_p1;
wire  signed [2:0] mul_ln1345_293_fu_864_p1;
wire   [2:0] trunc_ln145_98_fu_628_p4;
wire  signed [2:0] mul_ln1345_294_fu_874_p0;
wire  signed [5:0] sext_ln1345_174_fu_870_p1;
wire  signed [2:0] mul_ln1345_294_fu_874_p1;
wire   [2:0] trunc_ln145_99_fu_638_p4;
wire  signed [2:0] mul_ln1345_295_fu_884_p0;
wire  signed [5:0] sext_ln1345_175_fu_880_p1;
wire  signed [2:0] mul_ln1345_295_fu_884_p1;
wire   [2:0] trunc_ln145_101_fu_658_p4;
wire  signed [2:0] mul_ln1345_297_fu_894_p0;
wire  signed [5:0] sext_ln1345_177_fu_890_p1;
wire  signed [2:0] mul_ln1345_297_fu_894_p1;
wire   [2:0] trunc_ln145_102_fu_668_p4;
wire  signed [2:0] mul_ln1345_298_fu_904_p0;
wire  signed [5:0] sext_ln1345_178_fu_900_p1;
wire  signed [2:0] mul_ln1345_298_fu_904_p1;
wire   [2:0] trunc_ln145_103_fu_678_p4;
wire  signed [2:0] mul_ln1345_299_fu_914_p0;
wire  signed [5:0] sext_ln1345_179_fu_910_p1;
wire  signed [2:0] mul_ln1345_299_fu_914_p1;
wire   [2:0] trunc_ln145_105_fu_698_p4;
wire  signed [2:0] mul_ln1345_301_fu_924_p0;
wire  signed [5:0] sext_ln1345_181_fu_920_p1;
wire  signed [2:0] mul_ln1345_301_fu_924_p1;
wire   [2:0] trunc_ln145_106_fu_708_p4;
wire  signed [2:0] mul_ln1345_302_fu_934_p0;
wire  signed [5:0] sext_ln1345_182_fu_930_p1;
wire  signed [2:0] mul_ln1345_302_fu_934_p1;
wire   [2:0] trunc_ln145_75_fu_404_p4;
wire  signed [2:0] mul_ln1345_303_fu_944_p0;
wire  signed [2:0] mul_ln1345_303_fu_944_p1;
wire  signed [5:0] sext_ln1345_183_fu_940_p1;
wire   [2:0] trunc_ln145_77_fu_424_p4;
wire  signed [2:0] mul_ln1345_305_fu_954_p0;
wire  signed [2:0] mul_ln1345_305_fu_954_p1;
wire  signed [5:0] sext_ln1345_185_fu_950_p1;
wire   [2:0] trunc_ln145_78_fu_434_p4;
wire  signed [2:0] mul_ln1345_306_fu_964_p0;
wire  signed [2:0] mul_ln1345_306_fu_964_p1;
wire  signed [5:0] sext_ln1345_186_fu_960_p1;
wire  signed [2:0] mul_ln1345_307_fu_970_p0;
wire  signed [2:0] mul_ln1345_307_fu_970_p1;
wire  signed [2:0] mul_ln1345_309_fu_976_p0;
wire  signed [2:0] mul_ln1345_309_fu_976_p1;
wire  signed [2:0] mul_ln1345_310_fu_982_p0;
wire  signed [2:0] mul_ln1345_310_fu_982_p1;
wire  signed [2:0] mul_ln1345_311_fu_988_p0;
wire  signed [2:0] mul_ln1345_311_fu_988_p1;
wire  signed [2:0] mul_ln1345_313_fu_994_p0;
wire  signed [2:0] mul_ln1345_313_fu_994_p1;
wire  signed [2:0] mul_ln1345_314_fu_1000_p0;
wire  signed [2:0] mul_ln1345_314_fu_1000_p1;
wire  signed [2:0] mul_ln1345_315_fu_1006_p0;
wire  signed [2:0] mul_ln1345_315_fu_1006_p1;
wire  signed [2:0] mul_ln1345_317_fu_1012_p0;
wire  signed [2:0] mul_ln1345_317_fu_1012_p1;
wire  signed [2:0] mul_ln1345_318_fu_1018_p0;
wire  signed [2:0] mul_ln1345_318_fu_1018_p1;
wire  signed [2:0] mul_ln1345_319_fu_1024_p0;
wire  signed [2:0] mul_ln1345_319_fu_1024_p1;
wire  signed [2:0] mul_ln1345_321_fu_1030_p0;
wire  signed [2:0] mul_ln1345_321_fu_1030_p1;
wire  signed [2:0] mul_ln1345_322_fu_1036_p0;
wire  signed [2:0] mul_ln1345_322_fu_1036_p1;
wire  signed [2:0] mul_ln1345_323_fu_1042_p0;
wire  signed [2:0] mul_ln1345_323_fu_1042_p1;
wire  signed [2:0] mul_ln1345_325_fu_1048_p0;
wire  signed [2:0] mul_ln1345_325_fu_1048_p1;
wire  signed [2:0] mul_ln1345_326_fu_1054_p0;
wire  signed [2:0] mul_ln1345_326_fu_1054_p1;
wire  signed [2:0] mul_ln1345_327_fu_1060_p0;
wire  signed [2:0] mul_ln1345_327_fu_1060_p1;
wire  signed [2:0] mul_ln1345_329_fu_1066_p0;
wire  signed [2:0] mul_ln1345_329_fu_1066_p1;
wire  signed [2:0] mul_ln1345_330_fu_1072_p0;
wire  signed [2:0] mul_ln1345_330_fu_1072_p1;
wire   [139:0] select_ln342_fu_1087_p3;
wire  signed [2:0] mul_ln1345_276_fu_1107_p0;
wire  signed [5:0] sext_ln1345_154_fu_1104_p1;
wire  signed [2:0] mul_ln1345_276_fu_1107_p1;
wire  signed [5:0] sext_ln1345_153_fu_1101_p1;
wire  signed [5:0] mul_ln1345_276_fu_1107_p2;
wire   [9:0] trunc_ln691_fu_1097_p1;
wire  signed [9:0] sext_ln691_276_fu_1113_p1;
wire  signed [6:0] sext_ln691_fu_1094_p1;
wire  signed [6:0] sext_ln691_277_fu_1120_p1;
wire   [6:0] add_ln691_277_fu_1129_p2;
wire  signed [6:0] sext_ln368_fu_1117_p1;
wire   [6:0] add_ln691_278_fu_1135_p2;
wire  signed [9:0] sext_ln691_278_fu_1141_p1;
wire   [9:0] add_ln691_fu_1123_p2;
wire  signed [2:0] mul_ln1345_280_fu_1167_p0;
wire  signed [5:0] sext_ln1345_160_fu_1164_p1;
wire  signed [2:0] mul_ln1345_280_fu_1167_p1;
wire  signed [5:0] mul_ln1345_280_fu_1167_p2;
wire   [9:0] tmp_s_fu_1154_p4;
wire  signed [9:0] sext_ln691_280_fu_1173_p1;
wire  signed [6:0] sext_ln691_279_fu_1151_p1;
wire  signed [6:0] sext_ln691_281_fu_1180_p1;
wire   [6:0] add_ln691_281_fu_1189_p2;
wire  signed [6:0] sext_ln368_89_fu_1177_p1;
wire   [6:0] add_ln691_282_fu_1195_p2;
wire  signed [9:0] sext_ln691_282_fu_1201_p1;
wire   [9:0] add_ln691_280_fu_1183_p2;
wire  signed [2:0] mul_ln1345_284_fu_1227_p0;
wire  signed [5:0] sext_ln1345_164_fu_1224_p1;
wire  signed [2:0] mul_ln1345_284_fu_1227_p1;
wire  signed [5:0] mul_ln1345_284_fu_1227_p2;
wire   [9:0] tmp_345_fu_1214_p4;
wire  signed [9:0] sext_ln691_284_fu_1233_p1;
wire  signed [6:0] sext_ln691_283_fu_1211_p1;
wire  signed [6:0] sext_ln691_285_fu_1240_p1;
wire   [6:0] add_ln691_285_fu_1249_p2;
wire  signed [6:0] sext_ln368_90_fu_1237_p1;
wire   [6:0] add_ln691_286_fu_1255_p2;
wire  signed [9:0] sext_ln691_286_fu_1261_p1;
wire   [9:0] add_ln691_284_fu_1243_p2;
wire  signed [2:0] mul_ln1345_288_fu_1287_p0;
wire  signed [5:0] sext_ln1345_168_fu_1284_p1;
wire  signed [2:0] mul_ln1345_288_fu_1287_p1;
wire  signed [5:0] mul_ln1345_288_fu_1287_p2;
wire   [9:0] tmp_346_fu_1274_p4;
wire  signed [9:0] sext_ln691_288_fu_1293_p1;
wire  signed [6:0] sext_ln691_287_fu_1271_p1;
wire  signed [6:0] sext_ln691_289_fu_1300_p1;
wire   [6:0] add_ln691_289_fu_1309_p2;
wire  signed [6:0] sext_ln368_91_fu_1297_p1;
wire   [6:0] add_ln691_290_fu_1315_p2;
wire  signed [9:0] sext_ln691_290_fu_1321_p1;
wire   [9:0] add_ln691_288_fu_1303_p2;
wire  signed [2:0] mul_ln1345_292_fu_1347_p0;
wire  signed [5:0] sext_ln1345_172_fu_1344_p1;
wire  signed [2:0] mul_ln1345_292_fu_1347_p1;
wire  signed [5:0] mul_ln1345_292_fu_1347_p2;
wire   [9:0] tmp_347_fu_1334_p4;
wire  signed [9:0] sext_ln691_292_fu_1353_p1;
wire  signed [6:0] sext_ln691_291_fu_1331_p1;
wire  signed [6:0] sext_ln691_293_fu_1360_p1;
wire   [6:0] add_ln691_293_fu_1369_p2;
wire  signed [6:0] sext_ln368_92_fu_1357_p1;
wire   [6:0] add_ln691_294_fu_1375_p2;
wire  signed [9:0] sext_ln691_294_fu_1381_p1;
wire   [9:0] add_ln691_292_fu_1363_p2;
wire  signed [2:0] mul_ln1345_296_fu_1407_p0;
wire  signed [5:0] sext_ln1345_176_fu_1404_p1;
wire  signed [2:0] mul_ln1345_296_fu_1407_p1;
wire  signed [5:0] mul_ln1345_296_fu_1407_p2;
wire   [9:0] tmp_348_fu_1394_p4;
wire  signed [9:0] sext_ln691_296_fu_1413_p1;
wire  signed [6:0] sext_ln691_295_fu_1391_p1;
wire  signed [6:0] sext_ln691_297_fu_1420_p1;
wire   [6:0] add_ln691_297_fu_1429_p2;
wire  signed [6:0] sext_ln368_93_fu_1417_p1;
wire   [6:0] add_ln691_298_fu_1435_p2;
wire  signed [9:0] sext_ln691_298_fu_1441_p1;
wire   [9:0] add_ln691_296_fu_1423_p2;
wire  signed [2:0] mul_ln1345_300_fu_1467_p0;
wire  signed [5:0] sext_ln1345_180_fu_1464_p1;
wire  signed [2:0] mul_ln1345_300_fu_1467_p1;
wire  signed [5:0] mul_ln1345_300_fu_1467_p2;
wire   [9:0] tmp_349_fu_1454_p4;
wire  signed [9:0] sext_ln691_300_fu_1473_p1;
wire  signed [6:0] sext_ln691_299_fu_1451_p1;
wire  signed [6:0] sext_ln691_301_fu_1480_p1;
wire   [6:0] add_ln691_301_fu_1489_p2;
wire  signed [6:0] sext_ln368_94_fu_1477_p1;
wire   [6:0] add_ln691_302_fu_1495_p2;
wire  signed [9:0] sext_ln691_302_fu_1501_p1;
wire   [9:0] add_ln691_300_fu_1483_p2;
wire  signed [2:0] mul_ln1345_304_fu_1527_p0;
wire  signed [2:0] mul_ln1345_304_fu_1527_p1;
wire  signed [5:0] sext_ln1345_184_fu_1524_p1;
wire  signed [5:0] mul_ln1345_304_fu_1527_p2;
wire   [9:0] tmp_350_fu_1514_p4;
wire  signed [9:0] sext_ln691_304_fu_1533_p1;
wire  signed [6:0] sext_ln691_303_fu_1511_p1;
wire  signed [6:0] sext_ln691_305_fu_1540_p1;
wire   [6:0] add_ln691_305_fu_1549_p2;
wire  signed [6:0] sext_ln368_95_fu_1537_p1;
wire   [6:0] add_ln691_306_fu_1555_p2;
wire  signed [9:0] sext_ln691_306_fu_1561_p1;
wire   [9:0] add_ln691_304_fu_1543_p2;
wire  signed [2:0] mul_ln1345_308_fu_1584_p0;
wire  signed [2:0] mul_ln1345_308_fu_1584_p1;
wire  signed [5:0] mul_ln1345_308_fu_1584_p2;
wire   [9:0] tmp_351_fu_1574_p4;
wire  signed [9:0] sext_ln691_308_fu_1590_p1;
wire  signed [6:0] sext_ln691_307_fu_1571_p1;
wire  signed [6:0] sext_ln691_309_fu_1597_p1;
wire   [6:0] add_ln691_309_fu_1606_p2;
wire  signed [6:0] sext_ln368_96_fu_1594_p1;
wire   [6:0] add_ln691_310_fu_1612_p2;
wire  signed [9:0] sext_ln691_310_fu_1618_p1;
wire   [9:0] add_ln691_308_fu_1600_p2;
wire  signed [2:0] mul_ln1345_312_fu_1641_p0;
wire  signed [2:0] mul_ln1345_312_fu_1641_p1;
wire  signed [5:0] mul_ln1345_312_fu_1641_p2;
wire   [9:0] tmp_352_fu_1631_p4;
wire  signed [9:0] sext_ln691_312_fu_1647_p1;
wire  signed [6:0] sext_ln691_311_fu_1628_p1;
wire  signed [6:0] sext_ln691_313_fu_1654_p1;
wire   [6:0] add_ln691_313_fu_1663_p2;
wire  signed [6:0] sext_ln368_97_fu_1651_p1;
wire   [6:0] add_ln691_314_fu_1669_p2;
wire  signed [9:0] sext_ln691_314_fu_1675_p1;
wire   [9:0] add_ln691_312_fu_1657_p2;
wire  signed [2:0] mul_ln1345_316_fu_1698_p0;
wire  signed [2:0] mul_ln1345_316_fu_1698_p1;
wire  signed [5:0] mul_ln1345_316_fu_1698_p2;
wire   [9:0] tmp_353_fu_1688_p4;
wire  signed [9:0] sext_ln691_316_fu_1704_p1;
wire  signed [6:0] sext_ln691_315_fu_1685_p1;
wire  signed [6:0] sext_ln691_317_fu_1711_p1;
wire   [6:0] add_ln691_317_fu_1720_p2;
wire  signed [6:0] sext_ln368_98_fu_1708_p1;
wire   [6:0] add_ln691_318_fu_1726_p2;
wire  signed [9:0] sext_ln691_318_fu_1732_p1;
wire   [9:0] add_ln691_316_fu_1714_p2;
wire  signed [2:0] mul_ln1345_320_fu_1755_p0;
wire  signed [2:0] mul_ln1345_320_fu_1755_p1;
wire  signed [5:0] mul_ln1345_320_fu_1755_p2;
wire   [9:0] tmp_354_fu_1745_p4;
wire  signed [9:0] sext_ln691_320_fu_1761_p1;
wire  signed [6:0] sext_ln691_319_fu_1742_p1;
wire  signed [6:0] sext_ln691_321_fu_1768_p1;
wire   [6:0] add_ln691_321_fu_1777_p2;
wire  signed [6:0] sext_ln368_99_fu_1765_p1;
wire   [6:0] add_ln691_322_fu_1783_p2;
wire  signed [9:0] sext_ln691_322_fu_1789_p1;
wire   [9:0] add_ln691_320_fu_1771_p2;
wire  signed [2:0] mul_ln1345_324_fu_1812_p0;
wire  signed [2:0] mul_ln1345_324_fu_1812_p1;
wire  signed [5:0] mul_ln1345_324_fu_1812_p2;
wire   [9:0] tmp_355_fu_1802_p4;
wire  signed [9:0] sext_ln691_324_fu_1818_p1;
wire  signed [6:0] sext_ln691_323_fu_1799_p1;
wire  signed [6:0] sext_ln691_325_fu_1825_p1;
wire   [6:0] add_ln691_325_fu_1834_p2;
wire  signed [6:0] sext_ln368_100_fu_1822_p1;
wire   [6:0] add_ln691_326_fu_1840_p2;
wire  signed [9:0] sext_ln691_326_fu_1846_p1;
wire   [9:0] add_ln691_324_fu_1828_p2;
wire  signed [2:0] mul_ln1345_328_fu_1869_p0;
wire  signed [2:0] mul_ln1345_328_fu_1869_p1;
wire  signed [5:0] mul_ln1345_328_fu_1869_p2;
wire   [9:0] tmp_356_fu_1859_p4;
wire  signed [9:0] sext_ln691_328_fu_1875_p1;
wire  signed [6:0] sext_ln691_327_fu_1856_p1;
wire  signed [6:0] sext_ln691_329_fu_1882_p1;
wire   [6:0] add_ln691_329_fu_1891_p2;
wire  signed [6:0] sext_ln368_101_fu_1879_p1;
wire   [6:0] add_ln691_330_fu_1897_p2;
wire  signed [9:0] sext_ln691_330_fu_1903_p1;
wire   [9:0] add_ln691_328_fu_1885_p2;
wire   [217:0] tmp_358_fu_1955_p28;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U726(
    .din0(mul_ln1345_fu_726_p0),
    .din1(mul_ln1345_fu_726_p1),
    .dout(mul_ln1345_fu_726_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U727(
    .din0(mul_ln1345_277_fu_740_p0),
    .din1(mul_ln1345_277_fu_740_p1),
    .dout(mul_ln1345_277_fu_740_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U728(
    .din0(mul_ln1345_278_fu_754_p0),
    .din1(mul_ln1345_278_fu_754_p1),
    .dout(mul_ln1345_278_fu_754_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U729(
    .din0(mul_ln1345_279_fu_764_p0),
    .din1(mul_ln1345_279_fu_764_p1),
    .dout(mul_ln1345_279_fu_764_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U730(
    .din0(mul_ln1345_281_fu_774_p0),
    .din1(mul_ln1345_281_fu_774_p1),
    .dout(mul_ln1345_281_fu_774_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U731(
    .din0(mul_ln1345_282_fu_784_p0),
    .din1(mul_ln1345_282_fu_784_p1),
    .dout(mul_ln1345_282_fu_784_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U732(
    .din0(mul_ln1345_283_fu_794_p0),
    .din1(mul_ln1345_283_fu_794_p1),
    .dout(mul_ln1345_283_fu_794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U733(
    .din0(mul_ln1345_285_fu_804_p0),
    .din1(mul_ln1345_285_fu_804_p1),
    .dout(mul_ln1345_285_fu_804_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U734(
    .din0(mul_ln1345_286_fu_814_p0),
    .din1(mul_ln1345_286_fu_814_p1),
    .dout(mul_ln1345_286_fu_814_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U735(
    .din0(mul_ln1345_287_fu_824_p0),
    .din1(mul_ln1345_287_fu_824_p1),
    .dout(mul_ln1345_287_fu_824_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U736(
    .din0(mul_ln1345_289_fu_834_p0),
    .din1(mul_ln1345_289_fu_834_p1),
    .dout(mul_ln1345_289_fu_834_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U737(
    .din0(mul_ln1345_290_fu_844_p0),
    .din1(mul_ln1345_290_fu_844_p1),
    .dout(mul_ln1345_290_fu_844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U738(
    .din0(mul_ln1345_291_fu_854_p0),
    .din1(mul_ln1345_291_fu_854_p1),
    .dout(mul_ln1345_291_fu_854_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U739(
    .din0(mul_ln1345_293_fu_864_p0),
    .din1(mul_ln1345_293_fu_864_p1),
    .dout(mul_ln1345_293_fu_864_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U740(
    .din0(mul_ln1345_294_fu_874_p0),
    .din1(mul_ln1345_294_fu_874_p1),
    .dout(mul_ln1345_294_fu_874_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U741(
    .din0(mul_ln1345_295_fu_884_p0),
    .din1(mul_ln1345_295_fu_884_p1),
    .dout(mul_ln1345_295_fu_884_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U742(
    .din0(mul_ln1345_297_fu_894_p0),
    .din1(mul_ln1345_297_fu_894_p1),
    .dout(mul_ln1345_297_fu_894_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U743(
    .din0(mul_ln1345_298_fu_904_p0),
    .din1(mul_ln1345_298_fu_904_p1),
    .dout(mul_ln1345_298_fu_904_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U744(
    .din0(mul_ln1345_299_fu_914_p0),
    .din1(mul_ln1345_299_fu_914_p1),
    .dout(mul_ln1345_299_fu_914_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U745(
    .din0(mul_ln1345_301_fu_924_p0),
    .din1(mul_ln1345_301_fu_924_p1),
    .dout(mul_ln1345_301_fu_924_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U746(
    .din0(mul_ln1345_302_fu_934_p0),
    .din1(mul_ln1345_302_fu_934_p1),
    .dout(mul_ln1345_302_fu_934_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U747(
    .din0(mul_ln1345_303_fu_944_p0),
    .din1(mul_ln1345_303_fu_944_p1),
    .dout(mul_ln1345_303_fu_944_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U748(
    .din0(mul_ln1345_305_fu_954_p0),
    .din1(mul_ln1345_305_fu_954_p1),
    .dout(mul_ln1345_305_fu_954_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U749(
    .din0(mul_ln1345_306_fu_964_p0),
    .din1(mul_ln1345_306_fu_964_p1),
    .dout(mul_ln1345_306_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U750(
    .din0(mul_ln1345_307_fu_970_p0),
    .din1(mul_ln1345_307_fu_970_p1),
    .dout(mul_ln1345_307_fu_970_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U751(
    .din0(mul_ln1345_309_fu_976_p0),
    .din1(mul_ln1345_309_fu_976_p1),
    .dout(mul_ln1345_309_fu_976_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U752(
    .din0(mul_ln1345_310_fu_982_p0),
    .din1(mul_ln1345_310_fu_982_p1),
    .dout(mul_ln1345_310_fu_982_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U753(
    .din0(mul_ln1345_311_fu_988_p0),
    .din1(mul_ln1345_311_fu_988_p1),
    .dout(mul_ln1345_311_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U754(
    .din0(mul_ln1345_313_fu_994_p0),
    .din1(mul_ln1345_313_fu_994_p1),
    .dout(mul_ln1345_313_fu_994_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U755(
    .din0(mul_ln1345_314_fu_1000_p0),
    .din1(mul_ln1345_314_fu_1000_p1),
    .dout(mul_ln1345_314_fu_1000_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U756(
    .din0(mul_ln1345_315_fu_1006_p0),
    .din1(mul_ln1345_315_fu_1006_p1),
    .dout(mul_ln1345_315_fu_1006_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U757(
    .din0(mul_ln1345_317_fu_1012_p0),
    .din1(mul_ln1345_317_fu_1012_p1),
    .dout(mul_ln1345_317_fu_1012_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U758(
    .din0(mul_ln1345_318_fu_1018_p0),
    .din1(mul_ln1345_318_fu_1018_p1),
    .dout(mul_ln1345_318_fu_1018_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U759(
    .din0(mul_ln1345_319_fu_1024_p0),
    .din1(mul_ln1345_319_fu_1024_p1),
    .dout(mul_ln1345_319_fu_1024_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U760(
    .din0(mul_ln1345_321_fu_1030_p0),
    .din1(mul_ln1345_321_fu_1030_p1),
    .dout(mul_ln1345_321_fu_1030_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U761(
    .din0(mul_ln1345_322_fu_1036_p0),
    .din1(mul_ln1345_322_fu_1036_p1),
    .dout(mul_ln1345_322_fu_1036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U762(
    .din0(mul_ln1345_323_fu_1042_p0),
    .din1(mul_ln1345_323_fu_1042_p1),
    .dout(mul_ln1345_323_fu_1042_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U763(
    .din0(mul_ln1345_325_fu_1048_p0),
    .din1(mul_ln1345_325_fu_1048_p1),
    .dout(mul_ln1345_325_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U764(
    .din0(mul_ln1345_326_fu_1054_p0),
    .din1(mul_ln1345_326_fu_1054_p1),
    .dout(mul_ln1345_326_fu_1054_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U765(
    .din0(mul_ln1345_327_fu_1060_p0),
    .din1(mul_ln1345_327_fu_1060_p1),
    .dout(mul_ln1345_327_fu_1060_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U766(
    .din0(mul_ln1345_329_fu_1066_p0),
    .din1(mul_ln1345_329_fu_1066_p1),
    .dout(mul_ln1345_329_fu_1066_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U767(
    .din0(mul_ln1345_330_fu_1072_p0),
    .din1(mul_ln1345_330_fu_1072_p1),
    .dout(mul_ln1345_330_fu_1072_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U768(
    .din0(mul_ln1345_276_fu_1107_p0),
    .din1(mul_ln1345_276_fu_1107_p1),
    .dout(mul_ln1345_276_fu_1107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U769(
    .din0(mul_ln1345_280_fu_1167_p0),
    .din1(mul_ln1345_280_fu_1167_p1),
    .dout(mul_ln1345_280_fu_1167_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U770(
    .din0(mul_ln1345_284_fu_1227_p0),
    .din1(mul_ln1345_284_fu_1227_p1),
    .dout(mul_ln1345_284_fu_1227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U771(
    .din0(mul_ln1345_288_fu_1287_p0),
    .din1(mul_ln1345_288_fu_1287_p1),
    .dout(mul_ln1345_288_fu_1287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U772(
    .din0(mul_ln1345_292_fu_1347_p0),
    .din1(mul_ln1345_292_fu_1347_p1),
    .dout(mul_ln1345_292_fu_1347_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U773(
    .din0(mul_ln1345_296_fu_1407_p0),
    .din1(mul_ln1345_296_fu_1407_p1),
    .dout(mul_ln1345_296_fu_1407_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U774(
    .din0(mul_ln1345_300_fu_1467_p0),
    .din1(mul_ln1345_300_fu_1467_p1),
    .dout(mul_ln1345_300_fu_1467_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U775(
    .din0(mul_ln1345_304_fu_1527_p0),
    .din1(mul_ln1345_304_fu_1527_p1),
    .dout(mul_ln1345_304_fu_1527_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U776(
    .din0(mul_ln1345_308_fu_1584_p0),
    .din1(mul_ln1345_308_fu_1584_p1),
    .dout(mul_ln1345_308_fu_1584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U777(
    .din0(mul_ln1345_312_fu_1641_p0),
    .din1(mul_ln1345_312_fu_1641_p1),
    .dout(mul_ln1345_312_fu_1641_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U778(
    .din0(mul_ln1345_316_fu_1698_p0),
    .din1(mul_ln1345_316_fu_1698_p1),
    .dout(mul_ln1345_316_fu_1698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U779(
    .din0(mul_ln1345_320_fu_1755_p0),
    .din1(mul_ln1345_320_fu_1755_p1),
    .dout(mul_ln1345_320_fu_1755_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U780(
    .din0(mul_ln1345_324_fu_1812_p0),
    .din1(mul_ln1345_324_fu_1812_p1),
    .dout(mul_ln1345_324_fu_1812_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U781(
    .din0(mul_ln1345_328_fu_1869_p0),
    .din1(mul_ln1345_328_fu_1869_p1),
    .dout(mul_ln1345_328_fu_1869_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_291 <= cit_5_fu_1078_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cit_reg_291 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten13_reg_269 <= add_ln336_fu_302_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_269 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        indvar_flatten_reg_280 <= select_ln337_5_fu_326_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_280 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        add_ln691_279_reg_2300 <= add_ln691_279_fu_1145_p2;
        add_ln691_283_reg_2305 <= add_ln691_283_fu_1205_p2;
        add_ln691_287_reg_2310 <= add_ln691_287_fu_1265_p2;
        add_ln691_291_reg_2315 <= add_ln691_291_fu_1325_p2;
        add_ln691_295_reg_2320 <= add_ln691_295_fu_1385_p2;
        add_ln691_299_reg_2325 <= add_ln691_299_fu_1445_p2;
        add_ln691_303_reg_2330 <= add_ln691_303_fu_1505_p2;
        add_ln691_307_reg_2335 <= add_ln691_307_fu_1565_p2;
        add_ln691_311_reg_2340 <= add_ln691_311_fu_1622_p2;
        add_ln691_315_reg_2345 <= add_ln691_315_fu_1679_p2;
        add_ln691_319_reg_2350 <= add_ln691_319_fu_1736_p2;
        add_ln691_323_reg_2355 <= add_ln691_323_fu_1793_p2;
        add_ln691_327_reg_2360 <= add_ln691_327_fu_1850_p2;
        add_ln691_331_reg_2365 <= add_ln691_331_fu_1907_p2;
        icmp_ln378_reg_2370 <= icmp_ln378_fu_1945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_2015 <= icmp_ln336_fu_308_p2;
        icmp_ln336_reg_2015_pp0_iter1_reg <= icmp_ln336_reg_2015;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd0))) begin
        icmp_ln337_reg_2019 <= icmp_ln337_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln342_reg_2035 <= icmp_ln342_fu_364_p2;
        mul_ln1345_277_reg_2090 <= mul_ln1345_277_fu_740_p2;
        mul_ln1345_278_reg_2095 <= mul_ln1345_278_fu_754_p2;
        mul_ln1345_279_reg_2100 <= mul_ln1345_279_fu_764_p2;
        mul_ln1345_281_reg_2105 <= mul_ln1345_281_fu_774_p2;
        mul_ln1345_282_reg_2110 <= mul_ln1345_282_fu_784_p2;
        mul_ln1345_283_reg_2115 <= mul_ln1345_283_fu_794_p2;
        mul_ln1345_285_reg_2120 <= mul_ln1345_285_fu_804_p2;
        mul_ln1345_286_reg_2125 <= mul_ln1345_286_fu_814_p2;
        mul_ln1345_287_reg_2130 <= mul_ln1345_287_fu_824_p2;
        mul_ln1345_289_reg_2135 <= mul_ln1345_289_fu_834_p2;
        mul_ln1345_290_reg_2140 <= mul_ln1345_290_fu_844_p2;
        mul_ln1345_291_reg_2145 <= mul_ln1345_291_fu_854_p2;
        mul_ln1345_293_reg_2150 <= mul_ln1345_293_fu_864_p2;
        mul_ln1345_294_reg_2155 <= mul_ln1345_294_fu_874_p2;
        mul_ln1345_295_reg_2160 <= mul_ln1345_295_fu_884_p2;
        mul_ln1345_297_reg_2165 <= mul_ln1345_297_fu_894_p2;
        mul_ln1345_298_reg_2170 <= mul_ln1345_298_fu_904_p2;
        mul_ln1345_299_reg_2175 <= mul_ln1345_299_fu_914_p2;
        mul_ln1345_301_reg_2180 <= mul_ln1345_301_fu_924_p2;
        mul_ln1345_302_reg_2185 <= mul_ln1345_302_fu_934_p2;
        mul_ln1345_303_reg_2190 <= mul_ln1345_303_fu_944_p2;
        mul_ln1345_305_reg_2195 <= mul_ln1345_305_fu_954_p2;
        mul_ln1345_306_reg_2200 <= mul_ln1345_306_fu_964_p2;
        mul_ln1345_307_reg_2205 <= mul_ln1345_307_fu_970_p2;
        mul_ln1345_309_reg_2210 <= mul_ln1345_309_fu_976_p2;
        mul_ln1345_310_reg_2215 <= mul_ln1345_310_fu_982_p2;
        mul_ln1345_311_reg_2220 <= mul_ln1345_311_fu_988_p2;
        mul_ln1345_313_reg_2225 <= mul_ln1345_313_fu_994_p2;
        mul_ln1345_314_reg_2230 <= mul_ln1345_314_fu_1000_p2;
        mul_ln1345_315_reg_2235 <= mul_ln1345_315_fu_1006_p2;
        mul_ln1345_317_reg_2240 <= mul_ln1345_317_fu_1012_p2;
        mul_ln1345_318_reg_2245 <= mul_ln1345_318_fu_1018_p2;
        mul_ln1345_319_reg_2250 <= mul_ln1345_319_fu_1024_p2;
        mul_ln1345_321_reg_2255 <= mul_ln1345_321_fu_1030_p2;
        mul_ln1345_322_reg_2260 <= mul_ln1345_322_fu_1036_p2;
        mul_ln1345_323_reg_2265 <= mul_ln1345_323_fu_1042_p2;
        mul_ln1345_325_reg_2270 <= mul_ln1345_325_fu_1048_p2;
        mul_ln1345_326_reg_2275 <= mul_ln1345_326_fu_1054_p2;
        mul_ln1345_327_reg_2280 <= mul_ln1345_327_fu_1060_p2;
        mul_ln1345_329_reg_2285 <= mul_ln1345_329_fu_1066_p2;
        mul_ln1345_330_reg_2290 <= mul_ln1345_330_fu_1072_p2;
        mul_ln1345_reg_2085 <= mul_ln1345_fu_726_p2;
        select_ln337_reg_2030 <= select_ln337_fu_356_p3;
        trunc_ln145_100_reg_2075 <= {{weight_sm_dout[170:168]}};
        trunc_ln145_104_reg_2080 <= {{weight_sm_dout[202:200]}};
        trunc_ln145_72_reg_2040 <= {{cache_window_sm_dout[10:8]}};
        trunc_ln145_76_reg_2045 <= {{cache_window_sm_dout[42:40]}};
        trunc_ln145_80_reg_2050 <= {{weight_sm_dout[10:8]}};
        trunc_ln145_84_reg_2055 <= {{weight_sm_dout[42:40]}};
        trunc_ln145_88_reg_2060 <= {{weight_sm_dout[74:72]}};
        trunc_ln145_92_reg_2065 <= {{weight_sm_dout[106:104]}};
        trunc_ln145_96_reg_2070 <= {{weight_sm_dout[138:136]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln336_reg_2015_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_246 <= tmp_357_fu_1913_p15;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln336_fu_308_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_blk_n = weight_sm_empty_n;
    end else begin
        weight_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_2015 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_sm_read = 1'b1;
    end else begin
        weight_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln336_fu_302_p2 = (indvar_flatten13_reg_269 + 16'd1);

assign add_ln337_fu_320_p2 = (indvar_flatten_reg_280 + 10'd1);

assign add_ln691_277_fu_1129_p2 = ($signed(sext_ln691_fu_1094_p1) + $signed(sext_ln691_277_fu_1120_p1));

assign add_ln691_278_fu_1135_p2 = ($signed(add_ln691_277_fu_1129_p2) + $signed(sext_ln368_fu_1117_p1));

assign add_ln691_279_fu_1145_p2 = ($signed(sext_ln691_278_fu_1141_p1) + $signed(add_ln691_fu_1123_p2));

assign add_ln691_280_fu_1183_p2 = ($signed(tmp_s_fu_1154_p4) + $signed(sext_ln691_280_fu_1173_p1));

assign add_ln691_281_fu_1189_p2 = ($signed(sext_ln691_279_fu_1151_p1) + $signed(sext_ln691_281_fu_1180_p1));

assign add_ln691_282_fu_1195_p2 = ($signed(add_ln691_281_fu_1189_p2) + $signed(sext_ln368_89_fu_1177_p1));

assign add_ln691_283_fu_1205_p2 = ($signed(sext_ln691_282_fu_1201_p1) + $signed(add_ln691_280_fu_1183_p2));

assign add_ln691_284_fu_1243_p2 = ($signed(tmp_345_fu_1214_p4) + $signed(sext_ln691_284_fu_1233_p1));

assign add_ln691_285_fu_1249_p2 = ($signed(sext_ln691_283_fu_1211_p1) + $signed(sext_ln691_285_fu_1240_p1));

assign add_ln691_286_fu_1255_p2 = ($signed(add_ln691_285_fu_1249_p2) + $signed(sext_ln368_90_fu_1237_p1));

assign add_ln691_287_fu_1265_p2 = ($signed(sext_ln691_286_fu_1261_p1) + $signed(add_ln691_284_fu_1243_p2));

assign add_ln691_288_fu_1303_p2 = ($signed(tmp_346_fu_1274_p4) + $signed(sext_ln691_288_fu_1293_p1));

assign add_ln691_289_fu_1309_p2 = ($signed(sext_ln691_287_fu_1271_p1) + $signed(sext_ln691_289_fu_1300_p1));

assign add_ln691_290_fu_1315_p2 = ($signed(add_ln691_289_fu_1309_p2) + $signed(sext_ln368_91_fu_1297_p1));

assign add_ln691_291_fu_1325_p2 = ($signed(sext_ln691_290_fu_1321_p1) + $signed(add_ln691_288_fu_1303_p2));

assign add_ln691_292_fu_1363_p2 = ($signed(tmp_347_fu_1334_p4) + $signed(sext_ln691_292_fu_1353_p1));

assign add_ln691_293_fu_1369_p2 = ($signed(sext_ln691_291_fu_1331_p1) + $signed(sext_ln691_293_fu_1360_p1));

assign add_ln691_294_fu_1375_p2 = ($signed(add_ln691_293_fu_1369_p2) + $signed(sext_ln368_92_fu_1357_p1));

assign add_ln691_295_fu_1385_p2 = ($signed(sext_ln691_294_fu_1381_p1) + $signed(add_ln691_292_fu_1363_p2));

assign add_ln691_296_fu_1423_p2 = ($signed(tmp_348_fu_1394_p4) + $signed(sext_ln691_296_fu_1413_p1));

assign add_ln691_297_fu_1429_p2 = ($signed(sext_ln691_295_fu_1391_p1) + $signed(sext_ln691_297_fu_1420_p1));

assign add_ln691_298_fu_1435_p2 = ($signed(add_ln691_297_fu_1429_p2) + $signed(sext_ln368_93_fu_1417_p1));

assign add_ln691_299_fu_1445_p2 = ($signed(sext_ln691_298_fu_1441_p1) + $signed(add_ln691_296_fu_1423_p2));

assign add_ln691_300_fu_1483_p2 = ($signed(tmp_349_fu_1454_p4) + $signed(sext_ln691_300_fu_1473_p1));

assign add_ln691_301_fu_1489_p2 = ($signed(sext_ln691_299_fu_1451_p1) + $signed(sext_ln691_301_fu_1480_p1));

assign add_ln691_302_fu_1495_p2 = ($signed(add_ln691_301_fu_1489_p2) + $signed(sext_ln368_94_fu_1477_p1));

assign add_ln691_303_fu_1505_p2 = ($signed(sext_ln691_302_fu_1501_p1) + $signed(add_ln691_300_fu_1483_p2));

assign add_ln691_304_fu_1543_p2 = ($signed(tmp_350_fu_1514_p4) + $signed(sext_ln691_304_fu_1533_p1));

assign add_ln691_305_fu_1549_p2 = ($signed(sext_ln691_303_fu_1511_p1) + $signed(sext_ln691_305_fu_1540_p1));

assign add_ln691_306_fu_1555_p2 = ($signed(add_ln691_305_fu_1549_p2) + $signed(sext_ln368_95_fu_1537_p1));

assign add_ln691_307_fu_1565_p2 = ($signed(sext_ln691_306_fu_1561_p1) + $signed(add_ln691_304_fu_1543_p2));

assign add_ln691_308_fu_1600_p2 = ($signed(tmp_351_fu_1574_p4) + $signed(sext_ln691_308_fu_1590_p1));

assign add_ln691_309_fu_1606_p2 = ($signed(sext_ln691_307_fu_1571_p1) + $signed(sext_ln691_309_fu_1597_p1));

assign add_ln691_310_fu_1612_p2 = ($signed(add_ln691_309_fu_1606_p2) + $signed(sext_ln368_96_fu_1594_p1));

assign add_ln691_311_fu_1622_p2 = ($signed(sext_ln691_310_fu_1618_p1) + $signed(add_ln691_308_fu_1600_p2));

assign add_ln691_312_fu_1657_p2 = ($signed(tmp_352_fu_1631_p4) + $signed(sext_ln691_312_fu_1647_p1));

assign add_ln691_313_fu_1663_p2 = ($signed(sext_ln691_311_fu_1628_p1) + $signed(sext_ln691_313_fu_1654_p1));

assign add_ln691_314_fu_1669_p2 = ($signed(add_ln691_313_fu_1663_p2) + $signed(sext_ln368_97_fu_1651_p1));

assign add_ln691_315_fu_1679_p2 = ($signed(sext_ln691_314_fu_1675_p1) + $signed(add_ln691_312_fu_1657_p2));

assign add_ln691_316_fu_1714_p2 = ($signed(tmp_353_fu_1688_p4) + $signed(sext_ln691_316_fu_1704_p1));

assign add_ln691_317_fu_1720_p2 = ($signed(sext_ln691_315_fu_1685_p1) + $signed(sext_ln691_317_fu_1711_p1));

assign add_ln691_318_fu_1726_p2 = ($signed(add_ln691_317_fu_1720_p2) + $signed(sext_ln368_98_fu_1708_p1));

assign add_ln691_319_fu_1736_p2 = ($signed(sext_ln691_318_fu_1732_p1) + $signed(add_ln691_316_fu_1714_p2));

assign add_ln691_320_fu_1771_p2 = ($signed(tmp_354_fu_1745_p4) + $signed(sext_ln691_320_fu_1761_p1));

assign add_ln691_321_fu_1777_p2 = ($signed(sext_ln691_319_fu_1742_p1) + $signed(sext_ln691_321_fu_1768_p1));

assign add_ln691_322_fu_1783_p2 = ($signed(add_ln691_321_fu_1777_p2) + $signed(sext_ln368_99_fu_1765_p1));

assign add_ln691_323_fu_1793_p2 = ($signed(sext_ln691_322_fu_1789_p1) + $signed(add_ln691_320_fu_1771_p2));

assign add_ln691_324_fu_1828_p2 = ($signed(tmp_355_fu_1802_p4) + $signed(sext_ln691_324_fu_1818_p1));

assign add_ln691_325_fu_1834_p2 = ($signed(sext_ln691_323_fu_1799_p1) + $signed(sext_ln691_325_fu_1825_p1));

assign add_ln691_326_fu_1840_p2 = ($signed(add_ln691_325_fu_1834_p2) + $signed(sext_ln368_100_fu_1822_p1));

assign add_ln691_327_fu_1850_p2 = ($signed(sext_ln691_326_fu_1846_p1) + $signed(add_ln691_324_fu_1828_p2));

assign add_ln691_328_fu_1885_p2 = ($signed(tmp_356_fu_1859_p4) + $signed(sext_ln691_328_fu_1875_p1));

assign add_ln691_329_fu_1891_p2 = ($signed(sext_ln691_327_fu_1856_p1) + $signed(sext_ln691_329_fu_1882_p1));

assign add_ln691_330_fu_1897_p2 = ($signed(add_ln691_329_fu_1891_p2) + $signed(sext_ln368_101_fu_1879_p1));

assign add_ln691_331_fu_1907_p2 = ($signed(sext_ln691_330_fu_1903_p1) + $signed(add_ln691_328_fu_1885_p2));

assign add_ln691_fu_1123_p2 = ($signed(trunc_ln691_fu_1097_p1) + $signed(sext_ln691_276_fu_1113_p1));

assign and_ln336_fu_345_p2 = (xor_ln336_fu_334_p2 & icmp_ln338_fu_339_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln378_reg_2370 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln336_reg_2015 == 1'd0) & (weight_sm_empty_n == 1'b0)) | ((icmp_ln336_reg_2015 == 1'd0) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln378_reg_2370 == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cit_5_fu_1078_p2 = (select_ln337_fu_356_p3 + 5'd1);

assign icmp_ln336_fu_308_p2 = ((indvar_flatten13_reg_269 == 16'd43904) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_314_p2 = ((indvar_flatten_reg_280 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_339_p2 = ((cit_reg_291 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_364_p2 = ((select_ln337_fu_356_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln378_fu_1945_p2 = ((select_ln337_reg_2030 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_358_fu_1955_p28;

assign mul_ln1345_276_fu_1107_p0 = sext_ln1345_154_fu_1104_p1;

assign mul_ln1345_276_fu_1107_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_277_fu_740_p0 = sext_ln1345_156_fu_736_p1;

assign mul_ln1345_277_fu_740_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_278_fu_754_p0 = sext_ln1345_158_fu_750_p1;

assign mul_ln1345_278_fu_754_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_279_fu_764_p0 = sext_ln1345_159_fu_760_p1;

assign mul_ln1345_279_fu_764_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_280_fu_1167_p0 = sext_ln1345_160_fu_1164_p1;

assign mul_ln1345_280_fu_1167_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_281_fu_774_p0 = sext_ln1345_161_fu_770_p1;

assign mul_ln1345_281_fu_774_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_282_fu_784_p0 = sext_ln1345_162_fu_780_p1;

assign mul_ln1345_282_fu_784_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_283_fu_794_p0 = sext_ln1345_163_fu_790_p1;

assign mul_ln1345_283_fu_794_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_284_fu_1227_p0 = sext_ln1345_164_fu_1224_p1;

assign mul_ln1345_284_fu_1227_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_285_fu_804_p0 = sext_ln1345_165_fu_800_p1;

assign mul_ln1345_285_fu_804_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_286_fu_814_p0 = sext_ln1345_166_fu_810_p1;

assign mul_ln1345_286_fu_814_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_287_fu_824_p0 = sext_ln1345_167_fu_820_p1;

assign mul_ln1345_287_fu_824_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_288_fu_1287_p0 = sext_ln1345_168_fu_1284_p1;

assign mul_ln1345_288_fu_1287_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_289_fu_834_p0 = sext_ln1345_169_fu_830_p1;

assign mul_ln1345_289_fu_834_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_290_fu_844_p0 = sext_ln1345_170_fu_840_p1;

assign mul_ln1345_290_fu_844_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_291_fu_854_p0 = sext_ln1345_171_fu_850_p1;

assign mul_ln1345_291_fu_854_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_292_fu_1347_p0 = sext_ln1345_172_fu_1344_p1;

assign mul_ln1345_292_fu_1347_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_293_fu_864_p0 = sext_ln1345_173_fu_860_p1;

assign mul_ln1345_293_fu_864_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_294_fu_874_p0 = sext_ln1345_174_fu_870_p1;

assign mul_ln1345_294_fu_874_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_295_fu_884_p0 = sext_ln1345_175_fu_880_p1;

assign mul_ln1345_295_fu_884_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_296_fu_1407_p0 = sext_ln1345_176_fu_1404_p1;

assign mul_ln1345_296_fu_1407_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_297_fu_894_p0 = sext_ln1345_177_fu_890_p1;

assign mul_ln1345_297_fu_894_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_298_fu_904_p0 = sext_ln1345_178_fu_900_p1;

assign mul_ln1345_298_fu_904_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_299_fu_914_p0 = sext_ln1345_179_fu_910_p1;

assign mul_ln1345_299_fu_914_p1 = sext_ln1345_fu_718_p1;

assign mul_ln1345_300_fu_1467_p0 = sext_ln1345_180_fu_1464_p1;

assign mul_ln1345_300_fu_1467_p1 = sext_ln1345_153_fu_1101_p1;

assign mul_ln1345_301_fu_924_p0 = sext_ln1345_181_fu_920_p1;

assign mul_ln1345_301_fu_924_p1 = sext_ln1345_155_fu_732_p1;

assign mul_ln1345_302_fu_934_p0 = sext_ln1345_182_fu_930_p1;

assign mul_ln1345_302_fu_934_p1 = sext_ln1345_157_fu_746_p1;

assign mul_ln1345_303_fu_944_p0 = sext_ln1345_152_fu_722_p1;

assign mul_ln1345_303_fu_944_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_304_fu_1527_p0 = sext_ln1345_154_fu_1104_p1;

assign mul_ln1345_304_fu_1527_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_305_fu_954_p0 = sext_ln1345_156_fu_736_p1;

assign mul_ln1345_305_fu_954_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_306_fu_964_p0 = sext_ln1345_158_fu_750_p1;

assign mul_ln1345_306_fu_964_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_307_fu_970_p0 = sext_ln1345_159_fu_760_p1;

assign mul_ln1345_307_fu_970_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_308_fu_1584_p0 = sext_ln1345_160_fu_1164_p1;

assign mul_ln1345_308_fu_1584_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_309_fu_976_p0 = sext_ln1345_161_fu_770_p1;

assign mul_ln1345_309_fu_976_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_310_fu_982_p0 = sext_ln1345_162_fu_780_p1;

assign mul_ln1345_310_fu_982_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_311_fu_988_p0 = sext_ln1345_163_fu_790_p1;

assign mul_ln1345_311_fu_988_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_312_fu_1641_p0 = sext_ln1345_164_fu_1224_p1;

assign mul_ln1345_312_fu_1641_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_313_fu_994_p0 = sext_ln1345_165_fu_800_p1;

assign mul_ln1345_313_fu_994_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_314_fu_1000_p0 = sext_ln1345_166_fu_810_p1;

assign mul_ln1345_314_fu_1000_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_315_fu_1006_p0 = sext_ln1345_167_fu_820_p1;

assign mul_ln1345_315_fu_1006_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_316_fu_1698_p0 = sext_ln1345_168_fu_1284_p1;

assign mul_ln1345_316_fu_1698_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_317_fu_1012_p0 = sext_ln1345_169_fu_830_p1;

assign mul_ln1345_317_fu_1012_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_318_fu_1018_p0 = sext_ln1345_170_fu_840_p1;

assign mul_ln1345_318_fu_1018_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_319_fu_1024_p0 = sext_ln1345_171_fu_850_p1;

assign mul_ln1345_319_fu_1024_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_320_fu_1755_p0 = sext_ln1345_172_fu_1344_p1;

assign mul_ln1345_320_fu_1755_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_321_fu_1030_p0 = sext_ln1345_173_fu_860_p1;

assign mul_ln1345_321_fu_1030_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_322_fu_1036_p0 = sext_ln1345_174_fu_870_p1;

assign mul_ln1345_322_fu_1036_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_323_fu_1042_p0 = sext_ln1345_175_fu_880_p1;

assign mul_ln1345_323_fu_1042_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_324_fu_1812_p0 = sext_ln1345_176_fu_1404_p1;

assign mul_ln1345_324_fu_1812_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_325_fu_1048_p0 = sext_ln1345_177_fu_890_p1;

assign mul_ln1345_325_fu_1048_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_326_fu_1054_p0 = sext_ln1345_178_fu_900_p1;

assign mul_ln1345_326_fu_1054_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_327_fu_1060_p0 = sext_ln1345_179_fu_910_p1;

assign mul_ln1345_327_fu_1060_p1 = sext_ln1345_183_fu_940_p1;

assign mul_ln1345_328_fu_1869_p0 = sext_ln1345_180_fu_1464_p1;

assign mul_ln1345_328_fu_1869_p1 = sext_ln1345_184_fu_1524_p1;

assign mul_ln1345_329_fu_1066_p0 = sext_ln1345_181_fu_920_p1;

assign mul_ln1345_329_fu_1066_p1 = sext_ln1345_185_fu_950_p1;

assign mul_ln1345_330_fu_1072_p0 = sext_ln1345_182_fu_930_p1;

assign mul_ln1345_330_fu_1072_p1 = sext_ln1345_186_fu_960_p1;

assign mul_ln1345_fu_726_p0 = sext_ln1345_152_fu_722_p1;

assign mul_ln1345_fu_726_p1 = sext_ln1345_fu_718_p1;

assign or_ln337_fu_351_p2 = (icmp_ln337_reg_2019 | and_ln336_fu_345_p2);

assign select_ln337_5_fu_326_p3 = ((icmp_ln337_fu_314_p2[0:0] == 1'b1) ? 10'd1 : add_ln337_fu_320_p2);

assign select_ln337_fu_356_p3 = ((or_ln337_fu_351_p2[0:0] == 1'b1) ? 5'd0 : cit_reg_291);

assign select_ln342_fu_1087_p3 = ((icmp_ln342_reg_2035[0:0] == 1'b1) ? 140'd0 : vec_o_data_M_elems_V_2_fu_246);

assign sext_ln1345_152_fu_722_p1 = $signed(trunc_ln145_52_fu_444_p1);

assign sext_ln1345_153_fu_1101_p1 = $signed(trunc_ln145_72_reg_2040);

assign sext_ln1345_154_fu_1104_p1 = $signed(trunc_ln145_80_reg_2050);

assign sext_ln1345_155_fu_732_p1 = $signed(trunc_ln145_73_fu_384_p4);

assign sext_ln1345_156_fu_736_p1 = $signed(trunc_ln145_81_fu_458_p4);

assign sext_ln1345_157_fu_746_p1 = $signed(trunc_ln145_74_fu_394_p4);

assign sext_ln1345_158_fu_750_p1 = $signed(trunc_ln145_82_fu_468_p4);

assign sext_ln1345_159_fu_760_p1 = $signed(trunc_ln145_83_fu_478_p4);

assign sext_ln1345_160_fu_1164_p1 = $signed(trunc_ln145_84_reg_2055);

assign sext_ln1345_161_fu_770_p1 = $signed(trunc_ln145_85_fu_498_p4);

assign sext_ln1345_162_fu_780_p1 = $signed(trunc_ln145_86_fu_508_p4);

assign sext_ln1345_163_fu_790_p1 = $signed(trunc_ln145_87_fu_518_p4);

assign sext_ln1345_164_fu_1224_p1 = $signed(trunc_ln145_88_reg_2060);

assign sext_ln1345_165_fu_800_p1 = $signed(trunc_ln145_89_fu_538_p4);

assign sext_ln1345_166_fu_810_p1 = $signed(trunc_ln145_90_fu_548_p4);

assign sext_ln1345_167_fu_820_p1 = $signed(trunc_ln145_91_fu_558_p4);

assign sext_ln1345_168_fu_1284_p1 = $signed(trunc_ln145_92_reg_2065);

assign sext_ln1345_169_fu_830_p1 = $signed(trunc_ln145_93_fu_578_p4);

assign sext_ln1345_170_fu_840_p1 = $signed(trunc_ln145_94_fu_588_p4);

assign sext_ln1345_171_fu_850_p1 = $signed(trunc_ln145_95_fu_598_p4);

assign sext_ln1345_172_fu_1344_p1 = $signed(trunc_ln145_96_reg_2070);

assign sext_ln1345_173_fu_860_p1 = $signed(trunc_ln145_97_fu_618_p4);

assign sext_ln1345_174_fu_870_p1 = $signed(trunc_ln145_98_fu_628_p4);

assign sext_ln1345_175_fu_880_p1 = $signed(trunc_ln145_99_fu_638_p4);

assign sext_ln1345_176_fu_1404_p1 = $signed(trunc_ln145_100_reg_2075);

assign sext_ln1345_177_fu_890_p1 = $signed(trunc_ln145_101_fu_658_p4);

assign sext_ln1345_178_fu_900_p1 = $signed(trunc_ln145_102_fu_668_p4);

assign sext_ln1345_179_fu_910_p1 = $signed(trunc_ln145_103_fu_678_p4);

assign sext_ln1345_180_fu_1464_p1 = $signed(trunc_ln145_104_reg_2080);

assign sext_ln1345_181_fu_920_p1 = $signed(trunc_ln145_105_fu_698_p4);

assign sext_ln1345_182_fu_930_p1 = $signed(trunc_ln145_106_fu_708_p4);

assign sext_ln1345_183_fu_940_p1 = $signed(trunc_ln145_75_fu_404_p4);

assign sext_ln1345_184_fu_1524_p1 = $signed(trunc_ln145_76_reg_2045);

assign sext_ln1345_185_fu_950_p1 = $signed(trunc_ln145_77_fu_424_p4);

assign sext_ln1345_186_fu_960_p1 = $signed(trunc_ln145_78_fu_434_p4);

assign sext_ln1345_fu_718_p1 = $signed(trunc_ln145_fu_370_p1);

assign sext_ln368_100_fu_1822_p1 = mul_ln1345_325_reg_2270;

assign sext_ln368_101_fu_1879_p1 = mul_ln1345_329_reg_2285;

assign sext_ln368_89_fu_1177_p1 = mul_ln1345_281_reg_2105;

assign sext_ln368_90_fu_1237_p1 = mul_ln1345_285_reg_2120;

assign sext_ln368_91_fu_1297_p1 = mul_ln1345_289_reg_2135;

assign sext_ln368_92_fu_1357_p1 = mul_ln1345_293_reg_2150;

assign sext_ln368_93_fu_1417_p1 = mul_ln1345_297_reg_2165;

assign sext_ln368_94_fu_1477_p1 = mul_ln1345_301_reg_2180;

assign sext_ln368_95_fu_1537_p1 = mul_ln1345_305_reg_2195;

assign sext_ln368_96_fu_1594_p1 = mul_ln1345_309_reg_2210;

assign sext_ln368_97_fu_1651_p1 = mul_ln1345_313_reg_2225;

assign sext_ln368_98_fu_1708_p1 = mul_ln1345_317_reg_2240;

assign sext_ln368_99_fu_1765_p1 = mul_ln1345_321_reg_2255;

assign sext_ln368_fu_1117_p1 = mul_ln1345_277_reg_2090;

assign sext_ln691_276_fu_1113_p1 = mul_ln1345_276_fu_1107_p2;

assign sext_ln691_277_fu_1120_p1 = mul_ln1345_278_reg_2095;

assign sext_ln691_278_fu_1141_p1 = $signed(add_ln691_278_fu_1135_p2);

assign sext_ln691_279_fu_1151_p1 = mul_ln1345_279_reg_2100;

assign sext_ln691_280_fu_1173_p1 = mul_ln1345_280_fu_1167_p2;

assign sext_ln691_281_fu_1180_p1 = mul_ln1345_282_reg_2110;

assign sext_ln691_282_fu_1201_p1 = $signed(add_ln691_282_fu_1195_p2);

assign sext_ln691_283_fu_1211_p1 = mul_ln1345_283_reg_2115;

assign sext_ln691_284_fu_1233_p1 = mul_ln1345_284_fu_1227_p2;

assign sext_ln691_285_fu_1240_p1 = mul_ln1345_286_reg_2125;

assign sext_ln691_286_fu_1261_p1 = $signed(add_ln691_286_fu_1255_p2);

assign sext_ln691_287_fu_1271_p1 = mul_ln1345_287_reg_2130;

assign sext_ln691_288_fu_1293_p1 = mul_ln1345_288_fu_1287_p2;

assign sext_ln691_289_fu_1300_p1 = mul_ln1345_290_reg_2140;

assign sext_ln691_290_fu_1321_p1 = $signed(add_ln691_290_fu_1315_p2);

assign sext_ln691_291_fu_1331_p1 = mul_ln1345_291_reg_2145;

assign sext_ln691_292_fu_1353_p1 = mul_ln1345_292_fu_1347_p2;

assign sext_ln691_293_fu_1360_p1 = mul_ln1345_294_reg_2155;

assign sext_ln691_294_fu_1381_p1 = $signed(add_ln691_294_fu_1375_p2);

assign sext_ln691_295_fu_1391_p1 = mul_ln1345_295_reg_2160;

assign sext_ln691_296_fu_1413_p1 = mul_ln1345_296_fu_1407_p2;

assign sext_ln691_297_fu_1420_p1 = mul_ln1345_298_reg_2170;

assign sext_ln691_298_fu_1441_p1 = $signed(add_ln691_298_fu_1435_p2);

assign sext_ln691_299_fu_1451_p1 = mul_ln1345_299_reg_2175;

assign sext_ln691_300_fu_1473_p1 = mul_ln1345_300_fu_1467_p2;

assign sext_ln691_301_fu_1480_p1 = mul_ln1345_302_reg_2185;

assign sext_ln691_302_fu_1501_p1 = $signed(add_ln691_302_fu_1495_p2);

assign sext_ln691_303_fu_1511_p1 = mul_ln1345_303_reg_2190;

assign sext_ln691_304_fu_1533_p1 = mul_ln1345_304_fu_1527_p2;

assign sext_ln691_305_fu_1540_p1 = mul_ln1345_306_reg_2200;

assign sext_ln691_306_fu_1561_p1 = $signed(add_ln691_306_fu_1555_p2);

assign sext_ln691_307_fu_1571_p1 = mul_ln1345_307_reg_2205;

assign sext_ln691_308_fu_1590_p1 = mul_ln1345_308_fu_1584_p2;

assign sext_ln691_309_fu_1597_p1 = mul_ln1345_310_reg_2215;

assign sext_ln691_310_fu_1618_p1 = $signed(add_ln691_310_fu_1612_p2);

assign sext_ln691_311_fu_1628_p1 = mul_ln1345_311_reg_2220;

assign sext_ln691_312_fu_1647_p1 = mul_ln1345_312_fu_1641_p2;

assign sext_ln691_313_fu_1654_p1 = mul_ln1345_314_reg_2230;

assign sext_ln691_314_fu_1675_p1 = $signed(add_ln691_314_fu_1669_p2);

assign sext_ln691_315_fu_1685_p1 = mul_ln1345_315_reg_2235;

assign sext_ln691_316_fu_1704_p1 = mul_ln1345_316_fu_1698_p2;

assign sext_ln691_317_fu_1711_p1 = mul_ln1345_318_reg_2245;

assign sext_ln691_318_fu_1732_p1 = $signed(add_ln691_318_fu_1726_p2);

assign sext_ln691_319_fu_1742_p1 = mul_ln1345_319_reg_2250;

assign sext_ln691_320_fu_1761_p1 = mul_ln1345_320_fu_1755_p2;

assign sext_ln691_321_fu_1768_p1 = mul_ln1345_322_reg_2260;

assign sext_ln691_322_fu_1789_p1 = $signed(add_ln691_322_fu_1783_p2);

assign sext_ln691_323_fu_1799_p1 = mul_ln1345_323_reg_2265;

assign sext_ln691_324_fu_1818_p1 = mul_ln1345_324_fu_1812_p2;

assign sext_ln691_325_fu_1825_p1 = mul_ln1345_326_reg_2275;

assign sext_ln691_326_fu_1846_p1 = $signed(add_ln691_326_fu_1840_p2);

assign sext_ln691_327_fu_1856_p1 = mul_ln1345_327_reg_2280;

assign sext_ln691_328_fu_1875_p1 = mul_ln1345_328_fu_1869_p2;

assign sext_ln691_329_fu_1882_p1 = mul_ln1345_330_reg_2290;

assign sext_ln691_330_fu_1903_p1 = $signed(add_ln691_330_fu_1897_p2);

assign sext_ln691_fu_1094_p1 = mul_ln1345_reg_2085;

assign start_out = real_start;

assign tmp_345_fu_1214_p4 = {{select_ln342_fu_1087_p3[29:20]}};

assign tmp_346_fu_1274_p4 = {{select_ln342_fu_1087_p3[39:30]}};

assign tmp_347_fu_1334_p4 = {{select_ln342_fu_1087_p3[49:40]}};

assign tmp_348_fu_1394_p4 = {{select_ln342_fu_1087_p3[59:50]}};

assign tmp_349_fu_1454_p4 = {{select_ln342_fu_1087_p3[69:60]}};

assign tmp_350_fu_1514_p4 = {{select_ln342_fu_1087_p3[79:70]}};

assign tmp_351_fu_1574_p4 = {{select_ln342_fu_1087_p3[89:80]}};

assign tmp_352_fu_1631_p4 = {{select_ln342_fu_1087_p3[99:90]}};

assign tmp_353_fu_1688_p4 = {{select_ln342_fu_1087_p3[109:100]}};

assign tmp_354_fu_1745_p4 = {{select_ln342_fu_1087_p3[119:110]}};

assign tmp_355_fu_1802_p4 = {{select_ln342_fu_1087_p3[129:120]}};

assign tmp_356_fu_1859_p4 = {{select_ln342_fu_1087_p3[139:130]}};

assign tmp_357_fu_1913_p15 = {{{{{{{{{{{{{{add_ln691_331_fu_1907_p2}, {add_ln691_327_fu_1850_p2}}, {add_ln691_323_fu_1793_p2}}, {add_ln691_319_fu_1736_p2}}, {add_ln691_315_fu_1679_p2}}, {add_ln691_311_fu_1622_p2}}, {add_ln691_307_fu_1565_p2}}, {add_ln691_303_fu_1505_p2}}, {add_ln691_299_fu_1445_p2}}, {add_ln691_295_fu_1385_p2}}, {add_ln691_291_fu_1325_p2}}, {add_ln691_287_fu_1265_p2}}, {add_ln691_283_fu_1205_p2}}, {add_ln691_279_fu_1145_p2}};

assign tmp_358_fu_1955_p28 = {{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_331_reg_2365}, {6'd0}}, {add_ln691_327_reg_2360}}, {6'd0}}, {add_ln691_323_reg_2355}}, {6'd0}}, {add_ln691_319_reg_2350}}, {6'd0}}, {add_ln691_315_reg_2345}}, {6'd0}}, {add_ln691_311_reg_2340}}, {6'd0}}, {add_ln691_307_reg_2335}}, {6'd0}}, {add_ln691_303_reg_2330}}, {6'd0}}, {add_ln691_299_reg_2325}}, {6'd0}}, {add_ln691_295_reg_2320}}, {6'd0}}, {add_ln691_291_reg_2315}}, {6'd0}}, {add_ln691_287_reg_2310}}, {6'd0}}, {add_ln691_283_reg_2305}}, {6'd0}}, {add_ln691_279_reg_2300}};

assign tmp_s_fu_1154_p4 = {{select_ln342_fu_1087_p3[19:10]}};

assign trunc_ln145_101_fu_658_p4 = {{weight_sm_dout[178:176]}};

assign trunc_ln145_102_fu_668_p4 = {{weight_sm_dout[186:184]}};

assign trunc_ln145_103_fu_678_p4 = {{weight_sm_dout[194:192]}};

assign trunc_ln145_105_fu_698_p4 = {{weight_sm_dout[210:208]}};

assign trunc_ln145_106_fu_708_p4 = {{weight_sm_dout[218:216]}};

assign trunc_ln145_52_fu_444_p1 = weight_sm_dout[2:0];

assign trunc_ln145_73_fu_384_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_74_fu_394_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_75_fu_404_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_77_fu_424_p4 = {{cache_window_sm_dout[50:48]}};

assign trunc_ln145_78_fu_434_p4 = {{cache_window_sm_dout[58:56]}};

assign trunc_ln145_81_fu_458_p4 = {{weight_sm_dout[18:16]}};

assign trunc_ln145_82_fu_468_p4 = {{weight_sm_dout[26:24]}};

assign trunc_ln145_83_fu_478_p4 = {{weight_sm_dout[34:32]}};

assign trunc_ln145_85_fu_498_p4 = {{weight_sm_dout[50:48]}};

assign trunc_ln145_86_fu_508_p4 = {{weight_sm_dout[58:56]}};

assign trunc_ln145_87_fu_518_p4 = {{weight_sm_dout[66:64]}};

assign trunc_ln145_89_fu_538_p4 = {{weight_sm_dout[82:80]}};

assign trunc_ln145_90_fu_548_p4 = {{weight_sm_dout[90:88]}};

assign trunc_ln145_91_fu_558_p4 = {{weight_sm_dout[98:96]}};

assign trunc_ln145_93_fu_578_p4 = {{weight_sm_dout[114:112]}};

assign trunc_ln145_94_fu_588_p4 = {{weight_sm_dout[122:120]}};

assign trunc_ln145_95_fu_598_p4 = {{weight_sm_dout[130:128]}};

assign trunc_ln145_97_fu_618_p4 = {{weight_sm_dout[146:144]}};

assign trunc_ln145_98_fu_628_p4 = {{weight_sm_dout[154:152]}};

assign trunc_ln145_99_fu_638_p4 = {{weight_sm_dout[162:160]}};

assign trunc_ln145_fu_370_p1 = cache_window_sm_dout[2:0];

assign trunc_ln691_fu_1097_p1 = select_ln342_fu_1087_p3[9:0];

assign xor_ln336_fu_334_p2 = (icmp_ln337_reg_2019 ^ 1'd1);

endmodule //ATTN0_matmul_step2_mac_1
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac_2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state8 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [191:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [4:0] attn_inst_matmul_gen_o_bias_arr_V_address0;
reg    attn_inst_matmul_gen_o_bias_arr_V_ce0;
wire   [77:0] attn_inst_matmul_gen_o_bias_arr_V_q0;
wire   [8:0] attn_inst_matmul_gen_o_weight_arr_V_address0;
reg    attn_inst_matmul_gen_o_weight_arr_V_ce0;
wire   [215:0] attn_inst_matmul_gen_o_weight_arr_V_q0;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln120_reg_4693;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln161_reg_4766;
reg   [0:0] icmp_ln161_reg_4766_pp0_iter1_reg;
reg   [15:0] indvar_flatten20_reg_518;
reg   [10:0] indvar_flatten_reg_530;
reg   [5:0] cot_reg_541;
reg   [4:0] cit_reg_553;
reg   [77:0] attn_inst_matmul_gen_o_bias_arr_V_load_1_reg_4683;
wire    ap_CS_fsm_state2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln120_fu_569_p2;
reg   [0:0] icmp_ln120_reg_4693_pp0_iter1_reg;
wire   [0:0] icmp_ln121_fu_575_p2;
reg   [0:0] icmp_ln121_reg_4697;
wire   [5:0] select_ln120_fu_581_p3;
reg   [5:0] select_ln120_reg_4704;
wire   [0:0] and_ln120_fu_601_p2;
reg   [0:0] and_ln120_reg_4709;
wire   [5:0] add_ln121_fu_607_p2;
reg   [5:0] add_ln121_reg_4716;
wire   [4:0] select_ln121_fu_619_p3;
reg   [4:0] select_ln121_reg_4723;
wire   [10:0] add_ln121_4_fu_627_p2;
reg   [10:0] add_ln121_4_reg_4731;
wire   [15:0] add_ln120_fu_633_p2;
reg   [15:0] add_ln120_reg_4736;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [77:0] attn_inst_matmul_gen_o_bias_arr_V_load_reg_4741;
wire   [5:0] select_ln121_15_fu_672_p3;
reg   [5:0] select_ln121_15_reg_4751;
wire   [0:0] icmp_ln126_fu_691_p2;
reg   [0:0] icmp_ln126_reg_4761;
wire   [0:0] icmp_ln161_fu_696_p2;
wire   [4:0] add_ln122_fu_701_p2;
reg   [4:0] add_ln122_reg_4770;
wire   [10:0] select_ln121_16_fu_706_p3;
reg   [10:0] select_ln121_16_reg_4775;
wire   [77:0] select_ln121_14_fu_717_p3;
reg   [77:0] select_ln121_14_reg_4780;
reg   [2:0] trunc_ln145_146_reg_4786;
reg   [2:0] trunc_ln145_147_reg_4791;
reg   [2:0] trunc_ln145_148_reg_4796;
reg   [2:0] trunc_ln145_149_reg_4801;
reg   [2:0] trunc_ln145_151_reg_4806;
reg   [2:0] trunc_ln145_152_reg_4811;
reg   [2:0] trunc_ln145_153_reg_4816;
reg   [2:0] trunc_ln145_154_reg_4821;
reg   [2:0] trunc_ln145_155_reg_4826;
wire  signed [5:0] mul_ln1345_fu_970_p2;
reg  signed [5:0] mul_ln1345_reg_4831;
wire  signed [5:0] mul_ln1345_331_fu_994_p2;
reg  signed [5:0] mul_ln1345_331_reg_4836;
wire  signed [5:0] sext_ln1345_190_fu_1010_p1;
reg  signed [5:0] sext_ln1345_190_reg_4841;
wire  signed [5:0] sext_ln1345_191_fu_1014_p1;
reg  signed [5:0] sext_ln1345_191_reg_4847;
wire  signed [5:0] mul_ln1345_332_fu_1018_p2;
reg  signed [5:0] mul_ln1345_332_reg_4852;
wire  signed [5:0] sext_ln1345_192_fu_1034_p1;
reg  signed [5:0] sext_ln1345_192_reg_4857;
wire  signed [5:0] sext_ln1345_193_fu_1038_p1;
reg  signed [5:0] sext_ln1345_193_reg_4863;
wire  signed [5:0] mul_ln1345_333_fu_1042_p2;
reg  signed [5:0] mul_ln1345_333_reg_4868;
wire  signed [5:0] sext_ln1345_194_fu_1058_p1;
reg  signed [5:0] sext_ln1345_194_reg_4873;
wire  signed [5:0] sext_ln1345_195_fu_1062_p1;
reg  signed [5:0] sext_ln1345_195_reg_4879;
wire  signed [5:0] mul_ln1345_334_fu_1066_p2;
reg  signed [5:0] mul_ln1345_334_reg_4884;
wire  signed [5:0] sext_ln1345_196_fu_1082_p1;
reg  signed [5:0] sext_ln1345_196_reg_4889;
wire  signed [5:0] sext_ln1345_197_fu_1086_p1;
reg  signed [5:0] sext_ln1345_197_reg_4895;
wire  signed [5:0] mul_ln1345_335_fu_1090_p2;
reg  signed [5:0] mul_ln1345_335_reg_4900;
wire  signed [5:0] mul_ln1345_336_fu_1114_p2;
reg  signed [5:0] mul_ln1345_336_reg_4905;
wire  signed [5:0] sext_ln1345_200_fu_1130_p1;
reg  signed [5:0] sext_ln1345_200_reg_4910;
wire  signed [5:0] sext_ln1345_201_fu_1134_p1;
reg  signed [5:0] sext_ln1345_201_reg_4916;
wire  signed [5:0] mul_ln1345_337_fu_1138_p2;
reg  signed [5:0] mul_ln1345_337_reg_4921;
wire  signed [5:0] sext_ln1345_202_fu_1154_p1;
reg  signed [5:0] sext_ln1345_202_reg_4926;
wire  signed [5:0] sext_ln1345_203_fu_1158_p1;
reg  signed [5:0] sext_ln1345_203_reg_4932;
wire  signed [5:0] mul_ln1345_338_fu_1162_p2;
reg  signed [5:0] mul_ln1345_338_reg_4937;
wire  signed [5:0] sext_ln1345_204_fu_1178_p1;
reg  signed [5:0] sext_ln1345_204_reg_4942;
wire  signed [5:0] sext_ln1345_205_fu_1182_p1;
reg  signed [5:0] sext_ln1345_205_reg_4948;
wire  signed [5:0] mul_ln1345_339_fu_1186_p2;
reg  signed [5:0] mul_ln1345_339_reg_4953;
wire  signed [5:0] sext_ln1345_206_fu_1202_p1;
reg  signed [5:0] sext_ln1345_206_reg_4958;
wire  signed [5:0] sext_ln1345_207_fu_1206_p1;
reg  signed [5:0] sext_ln1345_207_reg_4964;
wire  signed [5:0] mul_ln1345_340_fu_1210_p2;
reg  signed [5:0] mul_ln1345_340_reg_4969;
wire  signed [5:0] sext_ln1345_208_fu_1226_p1;
reg  signed [5:0] sext_ln1345_208_reg_4974;
wire  signed [5:0] sext_ln1345_209_fu_1230_p1;
reg  signed [5:0] sext_ln1345_209_reg_4980;
wire  signed [5:0] mul_ln1345_341_fu_1234_p2;
reg  signed [5:0] mul_ln1345_341_reg_4985;
wire  signed [5:0] mul_ln1345_342_fu_1254_p2;
reg  signed [5:0] mul_ln1345_342_reg_4990;
wire  signed [5:0] mul_ln1345_343_fu_1274_p2;
reg  signed [5:0] mul_ln1345_343_reg_4995;
wire  signed [5:0] sext_ln1345_212_fu_1290_p1;
reg  signed [5:0] sext_ln1345_212_reg_5000;
wire  signed [5:0] mul_ln1345_344_fu_1294_p2;
reg  signed [5:0] mul_ln1345_344_reg_5005;
wire  signed [5:0] sext_ln1345_213_fu_1310_p1;
reg  signed [5:0] sext_ln1345_213_reg_5010;
wire  signed [5:0] mul_ln1345_345_fu_1314_p2;
reg  signed [5:0] mul_ln1345_345_reg_5015;
wire  signed [5:0] sext_ln1345_214_fu_1330_p1;
reg  signed [5:0] sext_ln1345_214_reg_5020;
wire  signed [5:0] mul_ln1345_346_fu_1334_p2;
reg  signed [5:0] mul_ln1345_346_reg_5025;
wire  signed [5:0] sext_ln1345_215_fu_1350_p1;
reg  signed [5:0] sext_ln1345_215_reg_5030;
wire  signed [5:0] mul_ln1345_347_fu_1354_p2;
reg  signed [5:0] mul_ln1345_347_reg_5035;
wire  signed [5:0] mul_ln1345_348_fu_1374_p2;
reg  signed [5:0] mul_ln1345_348_reg_5040;
wire  signed [5:0] sext_ln1345_217_fu_1390_p1;
reg  signed [5:0] sext_ln1345_217_reg_5045;
wire  signed [5:0] mul_ln1345_349_fu_1394_p2;
reg  signed [5:0] mul_ln1345_349_reg_5050;
wire  signed [5:0] sext_ln1345_218_fu_1410_p1;
reg  signed [5:0] sext_ln1345_218_reg_5055;
wire  signed [5:0] mul_ln1345_350_fu_1414_p2;
reg  signed [5:0] mul_ln1345_350_reg_5060;
wire  signed [5:0] sext_ln1345_219_fu_1430_p1;
reg  signed [5:0] sext_ln1345_219_reg_5065;
wire  signed [5:0] mul_ln1345_351_fu_1434_p2;
reg  signed [5:0] mul_ln1345_351_reg_5070;
wire  signed [5:0] sext_ln1345_220_fu_1450_p1;
reg  signed [5:0] sext_ln1345_220_reg_5075;
wire  signed [5:0] mul_ln1345_352_fu_1454_p2;
reg  signed [5:0] mul_ln1345_352_reg_5080;
wire  signed [5:0] sext_ln1345_221_fu_1470_p1;
reg  signed [5:0] sext_ln1345_221_reg_5085;
wire  signed [5:0] mul_ln1345_353_fu_1474_p2;
reg  signed [5:0] mul_ln1345_353_reg_5090;
wire  signed [5:0] mul_ln1345_354_fu_1494_p2;
reg  signed [5:0] mul_ln1345_354_reg_5095;
wire  signed [5:0] mul_ln1345_355_fu_1514_p2;
reg  signed [5:0] mul_ln1345_355_reg_5100;
wire  signed [5:0] sext_ln1345_224_fu_1530_p1;
reg  signed [5:0] sext_ln1345_224_reg_5105;
wire  signed [5:0] mul_ln1345_356_fu_1534_p2;
reg  signed [5:0] mul_ln1345_356_reg_5110;
wire  signed [5:0] sext_ln1345_225_fu_1550_p1;
reg  signed [5:0] sext_ln1345_225_reg_5115;
wire  signed [5:0] mul_ln1345_357_fu_1554_p2;
reg  signed [5:0] mul_ln1345_357_reg_5120;
wire  signed [5:0] sext_ln1345_226_fu_1570_p1;
reg  signed [5:0] sext_ln1345_226_reg_5125;
wire  signed [5:0] mul_ln1345_358_fu_1574_p2;
reg  signed [5:0] mul_ln1345_358_reg_5130;
wire  signed [5:0] sext_ln1345_227_fu_1590_p1;
reg  signed [5:0] sext_ln1345_227_reg_5135;
wire  signed [5:0] mul_ln1345_359_fu_1594_p2;
reg  signed [5:0] mul_ln1345_359_reg_5140;
wire  signed [5:0] mul_ln1345_360_fu_1614_p2;
reg  signed [5:0] mul_ln1345_360_reg_5145;
wire  signed [5:0] sext_ln1345_229_fu_1630_p1;
reg  signed [5:0] sext_ln1345_229_reg_5150;
wire  signed [5:0] mul_ln1345_361_fu_1634_p2;
reg  signed [5:0] mul_ln1345_361_reg_5155;
wire  signed [5:0] sext_ln1345_230_fu_1650_p1;
reg  signed [5:0] sext_ln1345_230_reg_5160;
wire  signed [5:0] mul_ln1345_362_fu_1654_p2;
reg  signed [5:0] mul_ln1345_362_reg_5165;
wire  signed [5:0] sext_ln1345_231_fu_1670_p1;
reg  signed [5:0] sext_ln1345_231_reg_5170;
wire  signed [5:0] mul_ln1345_363_fu_1674_p2;
reg  signed [5:0] mul_ln1345_363_reg_5175;
wire  signed [5:0] sext_ln1345_232_fu_1690_p1;
reg  signed [5:0] sext_ln1345_232_reg_5180;
wire  signed [5:0] mul_ln1345_364_fu_1694_p2;
reg  signed [5:0] mul_ln1345_364_reg_5185;
wire  signed [5:0] sext_ln1345_233_fu_1710_p1;
reg  signed [5:0] sext_ln1345_233_reg_5190;
wire  signed [5:0] mul_ln1345_365_fu_1714_p2;
reg  signed [5:0] mul_ln1345_365_reg_5195;
wire  signed [5:0] mul_ln1345_366_fu_1734_p2;
reg  signed [5:0] mul_ln1345_366_reg_5200;
wire  signed [5:0] mul_ln1345_367_fu_1754_p2;
reg  signed [5:0] mul_ln1345_367_reg_5205;
wire  signed [5:0] sext_ln1345_236_fu_1770_p1;
reg  signed [5:0] sext_ln1345_236_reg_5210;
wire  signed [5:0] mul_ln1345_368_fu_1774_p2;
reg  signed [5:0] mul_ln1345_368_reg_5215;
wire  signed [5:0] sext_ln1345_237_fu_1790_p1;
reg  signed [5:0] sext_ln1345_237_reg_5220;
wire  signed [5:0] mul_ln1345_369_fu_1794_p2;
reg  signed [5:0] mul_ln1345_369_reg_5225;
wire  signed [5:0] sext_ln1345_238_fu_1810_p1;
reg  signed [5:0] sext_ln1345_238_reg_5230;
wire  signed [5:0] mul_ln1345_370_fu_1814_p2;
reg  signed [5:0] mul_ln1345_370_reg_5235;
wire  signed [5:0] sext_ln1345_239_fu_1830_p1;
reg  signed [5:0] sext_ln1345_239_reg_5240;
wire  signed [5:0] mul_ln1345_371_fu_1834_p2;
reg  signed [5:0] mul_ln1345_371_reg_5245;
wire  signed [5:0] mul_ln1345_372_fu_1854_p2;
reg  signed [5:0] mul_ln1345_372_reg_5250;
wire  signed [5:0] sext_ln1345_241_fu_1870_p1;
reg  signed [5:0] sext_ln1345_241_reg_5255;
wire  signed [5:0] mul_ln1345_373_fu_1874_p2;
reg  signed [5:0] mul_ln1345_373_reg_5260;
wire  signed [5:0] sext_ln1345_242_fu_1890_p1;
reg  signed [5:0] sext_ln1345_242_reg_5265;
wire  signed [5:0] mul_ln1345_374_fu_1894_p2;
reg  signed [5:0] mul_ln1345_374_reg_5270;
wire  signed [5:0] sext_ln1345_243_fu_1910_p1;
reg  signed [5:0] sext_ln1345_243_reg_5275;
wire  signed [5:0] mul_ln1345_375_fu_1914_p2;
reg  signed [5:0] mul_ln1345_375_reg_5280;
wire  signed [5:0] sext_ln1345_244_fu_1930_p1;
reg  signed [5:0] sext_ln1345_244_reg_5285;
wire  signed [5:0] mul_ln1345_376_fu_1934_p2;
reg  signed [5:0] mul_ln1345_376_reg_5290;
wire  signed [5:0] sext_ln1345_245_fu_1950_p1;
reg  signed [5:0] sext_ln1345_245_reg_5295;
wire  signed [5:0] mul_ln1345_377_fu_1954_p2;
reg  signed [5:0] mul_ln1345_377_reg_5300;
wire  signed [5:0] mul_ln1345_378_fu_1974_p2;
reg  signed [5:0] mul_ln1345_378_reg_5305;
wire  signed [5:0] mul_ln1345_379_fu_1994_p2;
reg  signed [5:0] mul_ln1345_379_reg_5310;
reg   [2:0] tmp_517_reg_5315;
reg   [2:0] tmp_518_reg_5320;
reg   [2:0] tmp_519_reg_5325;
reg   [2:0] tmp_520_reg_5330;
wire  signed [5:0] mul_ln1345_384_fu_2054_p2;
reg  signed [5:0] mul_ln1345_384_reg_5335;
reg   [2:0] tmp_522_reg_5340;
reg   [2:0] tmp_523_reg_5345;
reg   [2:0] tmp_524_reg_5350;
reg   [2:0] tmp_525_reg_5355;
reg   [2:0] tmp_526_reg_5360;
wire  signed [5:0] mul_ln1345_390_fu_2124_p2;
reg  signed [5:0] mul_ln1345_390_reg_5365;
wire  signed [5:0] mul_ln1345_391_fu_2144_p2;
reg  signed [5:0] mul_ln1345_391_reg_5370;
reg   [2:0] tmp_530_reg_5375;
reg   [2:0] tmp_531_reg_5380;
reg   [2:0] tmp_532_reg_5385;
reg   [2:0] tmp_533_reg_5390;
wire  signed [5:0] mul_ln1345_396_fu_2204_p2;
reg  signed [5:0] mul_ln1345_396_reg_5395;
reg   [2:0] tmp_535_reg_5400;
reg   [2:0] tmp_536_reg_5405;
reg   [2:0] tmp_537_reg_5410;
reg   [2:0] tmp_538_reg_5415;
reg   [2:0] tmp_539_reg_5420;
wire  signed [5:0] mul_ln1345_402_fu_2264_p2;
reg  signed [5:0] mul_ln1345_402_reg_5425;
wire  signed [5:0] mul_ln1345_403_fu_2274_p2;
reg  signed [5:0] mul_ln1345_403_reg_5430;
wire  signed [5:0] mul_ln1345_408_fu_2284_p2;
reg  signed [5:0] mul_ln1345_408_reg_5435;
wire  signed [5:0] mul_ln1345_414_fu_2290_p2;
reg  signed [5:0] mul_ln1345_414_reg_5440;
wire  signed [5:0] mul_ln1345_415_fu_2296_p2;
reg  signed [5:0] mul_ln1345_415_reg_5445;
wire  signed [5:0] mul_ln1345_420_fu_2302_p2;
reg  signed [5:0] mul_ln1345_420_reg_5450;
wire  signed [5:0] mul_ln1345_426_fu_2308_p2;
reg  signed [5:0] mul_ln1345_426_reg_5455;
wire  signed [5:0] mul_ln1345_427_fu_2314_p2;
reg  signed [5:0] mul_ln1345_427_reg_5460;
wire  signed [5:0] mul_ln1345_432_fu_2320_p2;
reg  signed [5:0] mul_ln1345_432_reg_5465;
wire  signed [5:0] mul_ln1345_438_fu_2326_p2;
reg  signed [5:0] mul_ln1345_438_reg_5470;
wire  signed [5:0] mul_ln1345_439_fu_2332_p2;
reg  signed [5:0] mul_ln1345_439_reg_5475;
wire  signed [5:0] mul_ln1345_444_fu_2338_p2;
reg  signed [5:0] mul_ln1345_444_reg_5480;
wire  signed [5:0] mul_ln1345_450_fu_2344_p2;
reg  signed [5:0] mul_ln1345_450_reg_5485;
wire  signed [5:0] mul_ln1345_451_fu_2350_p2;
reg  signed [5:0] mul_ln1345_451_reg_5490;
wire  signed [5:0] mul_ln1345_456_fu_2356_p2;
reg  signed [5:0] mul_ln1345_456_reg_5495;
wire  signed [5:0] mul_ln1345_462_fu_2362_p2;
reg  signed [5:0] mul_ln1345_462_reg_5500;
wire  signed [5:0] mul_ln1345_463_fu_2368_p2;
reg  signed [5:0] mul_ln1345_463_reg_5505;
wire  signed [5:0] mul_ln1345_468_fu_2374_p2;
reg  signed [5:0] mul_ln1345_468_reg_5510;
wire   [12:0] add_ln691_332_fu_2446_p2;
reg   [12:0] add_ln691_332_reg_5515;
wire   [6:0] add_ln691_334_fu_2458_p2;
reg   [6:0] add_ln691_334_reg_5520;
wire   [7:0] add_ln691_341_fu_2506_p2;
reg   [7:0] add_ln691_341_reg_5525;
wire   [12:0] add_ln691_344_fu_2568_p2;
reg   [12:0] add_ln691_344_reg_5530;
wire   [6:0] add_ln691_346_fu_2580_p2;
reg   [6:0] add_ln691_346_reg_5535;
wire   [7:0] add_ln691_353_fu_2628_p2;
reg   [7:0] add_ln691_353_reg_5540;
wire   [12:0] add_ln691_356_fu_2690_p2;
reg   [12:0] add_ln691_356_reg_5545;
wire   [6:0] add_ln691_358_fu_2702_p2;
reg   [6:0] add_ln691_358_reg_5550;
wire   [7:0] add_ln691_365_fu_2750_p2;
reg   [7:0] add_ln691_365_reg_5555;
wire   [12:0] add_ln691_368_fu_2812_p2;
reg   [12:0] add_ln691_368_reg_5560;
wire   [6:0] add_ln691_370_fu_2824_p2;
reg   [6:0] add_ln691_370_reg_5565;
wire   [7:0] add_ln691_377_fu_2872_p2;
reg   [7:0] add_ln691_377_reg_5570;
wire   [12:0] add_ln691_380_fu_3015_p2;
reg   [12:0] add_ln691_380_reg_5575;
wire   [6:0] add_ln691_382_fu_3027_p2;
reg   [6:0] add_ln691_382_reg_5580;
wire   [7:0] add_ln691_389_fu_3075_p2;
reg   [7:0] add_ln691_389_reg_5585;
wire   [12:0] add_ln691_392_fu_3218_p2;
reg   [12:0] add_ln691_392_reg_5590;
wire   [6:0] add_ln691_394_fu_3230_p2;
reg   [6:0] add_ln691_394_reg_5595;
wire   [7:0] add_ln691_401_fu_3278_p2;
reg   [7:0] add_ln691_401_reg_5600;
wire   [12:0] add_ln691_404_fu_3421_p2;
reg   [12:0] add_ln691_404_reg_5605;
wire   [6:0] add_ln691_406_fu_3433_p2;
reg   [6:0] add_ln691_406_reg_5610;
wire   [7:0] add_ln691_413_fu_3481_p2;
reg   [7:0] add_ln691_413_reg_5615;
wire   [12:0] add_ln691_416_fu_3597_p2;
reg   [12:0] add_ln691_416_reg_5620;
wire   [6:0] add_ln691_418_fu_3609_p2;
reg   [6:0] add_ln691_418_reg_5625;
wire   [7:0] add_ln691_425_fu_3657_p2;
reg   [7:0] add_ln691_425_reg_5630;
wire   [12:0] add_ln691_428_fu_3773_p2;
reg   [12:0] add_ln691_428_reg_5635;
wire   [6:0] add_ln691_430_fu_3785_p2;
reg   [6:0] add_ln691_430_reg_5640;
wire   [7:0] add_ln691_437_fu_3833_p2;
reg   [7:0] add_ln691_437_reg_5645;
wire   [12:0] add_ln691_440_fu_3949_p2;
reg   [12:0] add_ln691_440_reg_5650;
wire   [6:0] add_ln691_442_fu_3961_p2;
reg   [6:0] add_ln691_442_reg_5655;
wire   [7:0] add_ln691_449_fu_4009_p2;
reg   [7:0] add_ln691_449_reg_5660;
wire   [12:0] add_ln691_452_fu_4134_p2;
reg   [12:0] add_ln691_452_reg_5665;
wire   [6:0] add_ln691_454_fu_4146_p2;
reg   [6:0] add_ln691_454_reg_5670;
wire   [7:0] add_ln691_461_fu_4194_p2;
reg   [7:0] add_ln691_461_reg_5675;
wire   [12:0] add_ln691_464_fu_4319_p2;
reg   [12:0] add_ln691_464_reg_5680;
wire   [6:0] add_ln691_466_fu_4331_p2;
reg   [6:0] add_ln691_466_reg_5685;
wire   [7:0] add_ln691_473_fu_4379_p2;
reg   [7:0] add_ln691_473_reg_5690;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_indvar_flatten20_phi_fu_522_p4;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_534_p4;
reg   [5:0] ap_phi_mux_cot_phi_fu_545_p4;
reg   [4:0] ap_phi_mux_cit_phi_fu_557_p4;
wire   [63:0] zext_ln121_fu_564_p1;
wire   [63:0] zext_ln121_4_fu_639_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln215_4_fu_686_p1;
reg   [155:0] vec_o_data_M_elems_V_2_fu_466;
wire   [155:0] tmp_546_fu_4589_p13;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [0:0] icmp_ln122_fu_595_p2;
wire   [0:0] xor_ln120_fu_589_p2;
wire   [0:0] or_ln121_fu_613_p2;
wire   [4:0] trunc_ln215_7_fu_646_p1;
wire   [4:0] trunc_ln215_fu_643_p1;
wire   [4:0] select_ln120_8_fu_650_p3;
wire   [4:0] select_ln121_13_fu_657_p3;
wire   [8:0] tmp_cast_fu_664_p3;
wire   [8:0] zext_ln215_fu_677_p1;
wire   [8:0] add_ln215_fu_680_p2;
wire   [77:0] select_ln120_7_fu_712_p3;
wire   [2:0] trunc_ln145_fu_724_p1;
wire   [2:0] trunc_ln215_8_fu_958_p1;
wire  signed [2:0] mul_ln1345_fu_970_p0;
wire  signed [5:0] sext_ln1345_187_fu_966_p1;
wire  signed [2:0] mul_ln1345_fu_970_p1;
wire  signed [5:0] sext_ln1345_fu_962_p1;
wire   [2:0] trunc_ln145_134_fu_728_p4;
wire   [2:0] tmp_465_fu_976_p4;
wire  signed [2:0] mul_ln1345_331_fu_994_p0;
wire  signed [5:0] sext_ln1345_189_fu_990_p1;
wire  signed [2:0] mul_ln1345_331_fu_994_p1;
wire  signed [5:0] sext_ln1345_188_fu_986_p1;
wire   [2:0] trunc_ln145_135_fu_738_p4;
wire  signed [2:0] tmp_466_fu_1000_p4;
wire  signed [2:0] mul_ln1345_332_fu_1018_p1;
wire   [2:0] trunc_ln145_s_fu_748_p4;
wire  signed [2:0] tmp_467_fu_1024_p4;
wire  signed [2:0] mul_ln1345_333_fu_1042_p1;
wire   [2:0] trunc_ln145_136_fu_758_p4;
wire  signed [2:0] tmp_468_fu_1048_p4;
wire  signed [2:0] mul_ln1345_334_fu_1066_p1;
wire   [2:0] trunc_ln145_137_fu_768_p4;
wire  signed [2:0] tmp_469_fu_1072_p4;
wire  signed [2:0] mul_ln1345_335_fu_1090_p1;
wire   [2:0] trunc_ln145_138_fu_778_p4;
wire   [2:0] tmp_470_fu_1096_p4;
wire  signed [2:0] mul_ln1345_336_fu_1114_p0;
wire  signed [5:0] sext_ln1345_199_fu_1110_p1;
wire  signed [2:0] mul_ln1345_336_fu_1114_p1;
wire  signed [5:0] sext_ln1345_198_fu_1106_p1;
wire   [2:0] trunc_ln145_139_fu_788_p4;
wire  signed [2:0] tmp_471_fu_1120_p4;
wire  signed [2:0] mul_ln1345_337_fu_1138_p1;
wire   [2:0] trunc_ln145_140_fu_798_p4;
wire  signed [2:0] tmp_472_fu_1144_p4;
wire  signed [2:0] mul_ln1345_338_fu_1162_p1;
wire   [2:0] trunc_ln145_141_fu_808_p4;
wire  signed [2:0] tmp_473_fu_1168_p4;
wire  signed [2:0] mul_ln1345_339_fu_1186_p1;
wire   [2:0] trunc_ln145_142_fu_818_p4;
wire  signed [2:0] tmp_474_fu_1192_p4;
wire  signed [2:0] mul_ln1345_340_fu_1210_p1;
wire   [2:0] trunc_ln145_143_fu_828_p4;
wire  signed [2:0] tmp_475_fu_1216_p4;
wire  signed [2:0] mul_ln1345_341_fu_1234_p1;
wire   [2:0] tmp_476_fu_1240_p4;
wire  signed [2:0] mul_ln1345_342_fu_1254_p0;
wire  signed [5:0] sext_ln1345_210_fu_1250_p1;
wire  signed [2:0] mul_ln1345_342_fu_1254_p1;
wire   [2:0] tmp_478_fu_1260_p4;
wire  signed [2:0] mul_ln1345_343_fu_1274_p0;
wire  signed [5:0] sext_ln1345_211_fu_1270_p1;
wire  signed [2:0] mul_ln1345_343_fu_1274_p1;
wire  signed [2:0] tmp_479_fu_1280_p4;
wire  signed [2:0] mul_ln1345_344_fu_1294_p1;
wire  signed [2:0] tmp_480_fu_1300_p4;
wire  signed [2:0] mul_ln1345_345_fu_1314_p1;
wire  signed [2:0] tmp_481_fu_1320_p4;
wire  signed [2:0] mul_ln1345_346_fu_1334_p1;
wire  signed [2:0] tmp_482_fu_1340_p4;
wire  signed [2:0] mul_ln1345_347_fu_1354_p1;
wire   [2:0] tmp_483_fu_1360_p4;
wire  signed [2:0] mul_ln1345_348_fu_1374_p0;
wire  signed [5:0] sext_ln1345_216_fu_1370_p1;
wire  signed [2:0] mul_ln1345_348_fu_1374_p1;
wire  signed [2:0] tmp_484_fu_1380_p4;
wire  signed [2:0] mul_ln1345_349_fu_1394_p1;
wire  signed [2:0] tmp_485_fu_1400_p4;
wire  signed [2:0] mul_ln1345_350_fu_1414_p1;
wire  signed [2:0] tmp_486_fu_1420_p4;
wire  signed [2:0] mul_ln1345_351_fu_1434_p1;
wire  signed [2:0] tmp_487_fu_1440_p4;
wire  signed [2:0] mul_ln1345_352_fu_1454_p1;
wire  signed [2:0] tmp_488_fu_1460_p4;
wire  signed [2:0] mul_ln1345_353_fu_1474_p1;
wire   [2:0] tmp_489_fu_1480_p4;
wire  signed [2:0] mul_ln1345_354_fu_1494_p0;
wire  signed [5:0] sext_ln1345_222_fu_1490_p1;
wire  signed [2:0] mul_ln1345_354_fu_1494_p1;
wire   [2:0] tmp_491_fu_1500_p4;
wire  signed [2:0] mul_ln1345_355_fu_1514_p0;
wire  signed [5:0] sext_ln1345_223_fu_1510_p1;
wire  signed [2:0] mul_ln1345_355_fu_1514_p1;
wire  signed [2:0] tmp_492_fu_1520_p4;
wire  signed [2:0] mul_ln1345_356_fu_1534_p1;
wire  signed [2:0] tmp_493_fu_1540_p4;
wire  signed [2:0] mul_ln1345_357_fu_1554_p1;
wire  signed [2:0] tmp_494_fu_1560_p4;
wire  signed [2:0] mul_ln1345_358_fu_1574_p1;
wire  signed [2:0] tmp_495_fu_1580_p4;
wire  signed [2:0] mul_ln1345_359_fu_1594_p1;
wire   [2:0] tmp_496_fu_1600_p4;
wire  signed [2:0] mul_ln1345_360_fu_1614_p0;
wire  signed [5:0] sext_ln1345_228_fu_1610_p1;
wire  signed [2:0] mul_ln1345_360_fu_1614_p1;
wire  signed [2:0] tmp_497_fu_1620_p4;
wire  signed [2:0] mul_ln1345_361_fu_1634_p1;
wire  signed [2:0] tmp_s_fu_1640_p4;
wire  signed [2:0] mul_ln1345_362_fu_1654_p1;
wire  signed [2:0] tmp_498_fu_1660_p4;
wire  signed [2:0] mul_ln1345_363_fu_1674_p1;
wire  signed [2:0] tmp_499_fu_1680_p4;
wire  signed [2:0] mul_ln1345_364_fu_1694_p1;
wire  signed [2:0] tmp_500_fu_1700_p4;
wire  signed [2:0] mul_ln1345_365_fu_1714_p1;
wire   [2:0] tmp_501_fu_1720_p4;
wire  signed [2:0] mul_ln1345_366_fu_1734_p0;
wire  signed [5:0] sext_ln1345_234_fu_1730_p1;
wire  signed [2:0] mul_ln1345_366_fu_1734_p1;
wire   [2:0] tmp_503_fu_1740_p4;
wire  signed [2:0] mul_ln1345_367_fu_1754_p0;
wire  signed [5:0] sext_ln1345_235_fu_1750_p1;
wire  signed [2:0] mul_ln1345_367_fu_1754_p1;
wire  signed [2:0] tmp_504_fu_1760_p4;
wire  signed [2:0] mul_ln1345_368_fu_1774_p1;
wire  signed [2:0] tmp_505_fu_1780_p4;
wire  signed [2:0] mul_ln1345_369_fu_1794_p1;
wire  signed [2:0] tmp_506_fu_1800_p4;
wire  signed [2:0] mul_ln1345_370_fu_1814_p1;
wire  signed [2:0] tmp_507_fu_1820_p4;
wire  signed [2:0] mul_ln1345_371_fu_1834_p1;
wire   [2:0] tmp_508_fu_1840_p4;
wire  signed [2:0] mul_ln1345_372_fu_1854_p0;
wire  signed [5:0] sext_ln1345_240_fu_1850_p1;
wire  signed [2:0] mul_ln1345_372_fu_1854_p1;
wire  signed [2:0] tmp_509_fu_1860_p4;
wire  signed [2:0] mul_ln1345_373_fu_1874_p1;
wire  signed [2:0] tmp_510_fu_1880_p4;
wire  signed [2:0] mul_ln1345_374_fu_1894_p1;
wire  signed [2:0] tmp_511_fu_1900_p4;
wire  signed [2:0] mul_ln1345_375_fu_1914_p1;
wire  signed [2:0] tmp_512_fu_1920_p4;
wire  signed [2:0] mul_ln1345_376_fu_1934_p1;
wire  signed [2:0] tmp_513_fu_1940_p4;
wire  signed [2:0] mul_ln1345_377_fu_1954_p1;
wire   [2:0] tmp_514_fu_1960_p4;
wire  signed [2:0] mul_ln1345_378_fu_1974_p0;
wire  signed [5:0] sext_ln1345_246_fu_1970_p1;
wire  signed [2:0] mul_ln1345_378_fu_1974_p1;
wire   [2:0] tmp_516_fu_1980_p4;
wire  signed [2:0] mul_ln1345_379_fu_1994_p0;
wire  signed [5:0] sext_ln1345_247_fu_1990_p1;
wire  signed [2:0] mul_ln1345_379_fu_1994_p1;
wire   [2:0] tmp_521_fu_2040_p4;
wire  signed [2:0] mul_ln1345_384_fu_2054_p0;
wire  signed [5:0] sext_ln1345_252_fu_2050_p1;
wire  signed [2:0] mul_ln1345_384_fu_2054_p1;
wire   [2:0] tmp_527_fu_2110_p4;
wire  signed [2:0] mul_ln1345_390_fu_2124_p0;
wire  signed [5:0] sext_ln1345_258_fu_2120_p1;
wire  signed [2:0] mul_ln1345_390_fu_2124_p1;
wire   [2:0] tmp_529_fu_2130_p4;
wire  signed [2:0] mul_ln1345_391_fu_2144_p0;
wire  signed [5:0] sext_ln1345_259_fu_2140_p1;
wire  signed [2:0] mul_ln1345_391_fu_2144_p1;
wire   [2:0] tmp_534_fu_2190_p4;
wire  signed [2:0] mul_ln1345_396_fu_2204_p0;
wire  signed [5:0] sext_ln1345_264_fu_2200_p1;
wire  signed [2:0] mul_ln1345_396_fu_2204_p1;
wire   [2:0] trunc_ln145_144_fu_838_p4;
wire  signed [2:0] mul_ln1345_402_fu_2264_p0;
wire  signed [2:0] mul_ln1345_402_fu_2264_p1;
wire  signed [5:0] sext_ln1345_270_fu_2260_p1;
wire   [2:0] trunc_ln145_145_fu_848_p4;
wire  signed [2:0] mul_ln1345_403_fu_2274_p0;
wire  signed [2:0] mul_ln1345_403_fu_2274_p1;
wire  signed [5:0] sext_ln1345_271_fu_2270_p1;
wire   [2:0] trunc_ln145_150_fu_898_p4;
wire  signed [2:0] mul_ln1345_408_fu_2284_p0;
wire  signed [2:0] mul_ln1345_408_fu_2284_p1;
wire  signed [5:0] sext_ln1345_276_fu_2280_p1;
wire  signed [2:0] mul_ln1345_414_fu_2290_p0;
wire  signed [2:0] mul_ln1345_414_fu_2290_p1;
wire  signed [2:0] mul_ln1345_415_fu_2296_p0;
wire  signed [2:0] mul_ln1345_415_fu_2296_p1;
wire  signed [2:0] mul_ln1345_420_fu_2302_p0;
wire  signed [2:0] mul_ln1345_420_fu_2302_p1;
wire  signed [2:0] mul_ln1345_426_fu_2308_p0;
wire  signed [2:0] mul_ln1345_426_fu_2308_p1;
wire  signed [2:0] mul_ln1345_427_fu_2314_p0;
wire  signed [2:0] mul_ln1345_427_fu_2314_p1;
wire  signed [2:0] mul_ln1345_432_fu_2320_p0;
wire  signed [2:0] mul_ln1345_432_fu_2320_p1;
wire  signed [2:0] mul_ln1345_438_fu_2326_p0;
wire  signed [2:0] mul_ln1345_438_fu_2326_p1;
wire  signed [2:0] mul_ln1345_439_fu_2332_p0;
wire  signed [2:0] mul_ln1345_439_fu_2332_p1;
wire  signed [2:0] mul_ln1345_444_fu_2338_p0;
wire  signed [2:0] mul_ln1345_444_fu_2338_p1;
wire  signed [2:0] mul_ln1345_450_fu_2344_p0;
wire  signed [2:0] mul_ln1345_450_fu_2344_p1;
wire  signed [2:0] mul_ln1345_451_fu_2350_p0;
wire  signed [2:0] mul_ln1345_451_fu_2350_p1;
wire  signed [2:0] mul_ln1345_456_fu_2356_p0;
wire  signed [2:0] mul_ln1345_456_fu_2356_p1;
wire  signed [2:0] mul_ln1345_462_fu_2362_p0;
wire  signed [2:0] mul_ln1345_462_fu_2362_p1;
wire  signed [2:0] mul_ln1345_463_fu_2368_p0;
wire  signed [2:0] mul_ln1345_463_fu_2368_p1;
wire  signed [2:0] mul_ln1345_468_fu_2374_p0;
wire  signed [2:0] mul_ln1345_468_fu_2374_p1;
wire   [155:0] vec_o_data_M_elems_V_fu_2383_p3;
wire   [155:0] select_ln126_fu_2389_p3;
wire  signed [6:0] sext_ln151_8_fu_2427_p1;
wire  signed [6:0] sext_ln151_9_fu_2430_p1;
wire   [6:0] add_ln691_fu_2436_p2;
wire  signed [12:0] sext_ln691_332_fu_2442_p1;
wire   [12:0] trunc_ln691_fu_2399_p1;
wire  signed [6:0] sext_ln151_4_fu_2415_p1;
wire  signed [6:0] sext_ln151_6_fu_2421_p1;
wire   [6:0] add_ln691_333_fu_2452_p2;
wire  signed [6:0] sext_ln151_7_fu_2424_p1;
wire  signed [6:0] sext_ln151_fu_2403_p1;
wire  signed [6:0] sext_ln691_fu_2396_p1;
wire   [6:0] add_ln691_336_fu_2464_p2;
wire  signed [6:0] sext_ln151_5_fu_2418_p1;
wire   [6:0] add_ln691_337_fu_2470_p2;
wire  signed [6:0] sext_ln151_1_fu_2406_p1;
wire  signed [6:0] sext_ln151_3_fu_2412_p1;
wire   [6:0] add_ln691_338_fu_2480_p2;
wire  signed [6:0] sext_ln151_2_fu_2409_p1;
wire  signed [6:0] sext_ln691_331_fu_2433_p1;
wire   [6:0] add_ln691_339_fu_2490_p2;
wire  signed [7:0] sext_ln691_336_fu_2496_p1;
wire  signed [7:0] sext_ln691_335_fu_2486_p1;
wire   [7:0] add_ln691_340_fu_2500_p2;
wire  signed [7:0] sext_ln691_334_fu_2476_p1;
wire  signed [6:0] sext_ln151_18_fu_2549_p1;
wire  signed [6:0] sext_ln151_19_fu_2552_p1;
wire   [6:0] add_ln691_343_fu_2558_p2;
wire  signed [12:0] sext_ln691_340_fu_2564_p1;
wire   [12:0] tmp_477_fu_2515_p4;
wire  signed [6:0] sext_ln151_14_fu_2537_p1;
wire  signed [6:0] sext_ln151_16_fu_2543_p1;
wire   [6:0] add_ln691_345_fu_2574_p2;
wire  signed [6:0] sext_ln151_17_fu_2546_p1;
wire  signed [6:0] sext_ln151_10_fu_2525_p1;
wire  signed [6:0] sext_ln691_338_fu_2512_p1;
wire   [6:0] add_ln691_348_fu_2586_p2;
wire  signed [6:0] sext_ln151_15_fu_2540_p1;
wire   [6:0] add_ln691_349_fu_2592_p2;
wire  signed [6:0] sext_ln151_11_fu_2528_p1;
wire  signed [6:0] sext_ln151_13_fu_2534_p1;
wire   [6:0] add_ln691_350_fu_2602_p2;
wire  signed [6:0] sext_ln151_12_fu_2531_p1;
wire  signed [6:0] sext_ln691_339_fu_2555_p1;
wire   [6:0] add_ln691_351_fu_2612_p2;
wire  signed [7:0] sext_ln691_344_fu_2618_p1;
wire  signed [7:0] sext_ln691_343_fu_2608_p1;
wire   [7:0] add_ln691_352_fu_2622_p2;
wire  signed [7:0] sext_ln691_342_fu_2598_p1;
wire  signed [6:0] sext_ln151_28_fu_2671_p1;
wire  signed [6:0] sext_ln151_29_fu_2674_p1;
wire   [6:0] add_ln691_355_fu_2680_p2;
wire  signed [12:0] sext_ln691_348_fu_2686_p1;
wire   [12:0] tmp_490_fu_2637_p4;
wire  signed [6:0] sext_ln151_24_fu_2659_p1;
wire  signed [6:0] sext_ln151_26_fu_2665_p1;
wire   [6:0] add_ln691_357_fu_2696_p2;
wire  signed [6:0] sext_ln151_27_fu_2668_p1;
wire  signed [6:0] sext_ln151_20_fu_2647_p1;
wire  signed [6:0] sext_ln691_346_fu_2634_p1;
wire   [6:0] add_ln691_360_fu_2708_p2;
wire  signed [6:0] sext_ln151_25_fu_2662_p1;
wire   [6:0] add_ln691_361_fu_2714_p2;
wire  signed [6:0] sext_ln151_21_fu_2650_p1;
wire  signed [6:0] sext_ln151_23_fu_2656_p1;
wire   [6:0] add_ln691_362_fu_2724_p2;
wire  signed [6:0] sext_ln151_22_fu_2653_p1;
wire  signed [6:0] sext_ln691_347_fu_2677_p1;
wire   [6:0] add_ln691_363_fu_2734_p2;
wire  signed [7:0] sext_ln691_352_fu_2740_p1;
wire  signed [7:0] sext_ln691_351_fu_2730_p1;
wire   [7:0] add_ln691_364_fu_2744_p2;
wire  signed [7:0] sext_ln691_350_fu_2720_p1;
wire  signed [6:0] sext_ln151_38_fu_2793_p1;
wire  signed [6:0] sext_ln151_39_fu_2796_p1;
wire   [6:0] add_ln691_367_fu_2802_p2;
wire  signed [12:0] sext_ln691_356_fu_2808_p1;
wire   [12:0] tmp_502_fu_2759_p4;
wire  signed [6:0] sext_ln151_34_fu_2781_p1;
wire  signed [6:0] sext_ln151_36_fu_2787_p1;
wire   [6:0] add_ln691_369_fu_2818_p2;
wire  signed [6:0] sext_ln151_37_fu_2790_p1;
wire  signed [6:0] sext_ln151_30_fu_2769_p1;
wire  signed [6:0] sext_ln691_354_fu_2756_p1;
wire   [6:0] add_ln691_372_fu_2830_p2;
wire  signed [6:0] sext_ln151_35_fu_2784_p1;
wire   [6:0] add_ln691_373_fu_2836_p2;
wire  signed [6:0] sext_ln151_31_fu_2772_p1;
wire  signed [6:0] sext_ln151_33_fu_2778_p1;
wire   [6:0] add_ln691_374_fu_2846_p2;
wire  signed [6:0] sext_ln151_32_fu_2775_p1;
wire  signed [6:0] sext_ln691_355_fu_2799_p1;
wire   [6:0] add_ln691_375_fu_2856_p2;
wire  signed [7:0] sext_ln691_360_fu_2862_p1;
wire  signed [7:0] sext_ln691_359_fu_2852_p1;
wire   [7:0] add_ln691_376_fu_2866_p2;
wire  signed [7:0] sext_ln691_358_fu_2842_p1;
wire  signed [2:0] mul_ln1345_380_fu_2897_p0;
wire  signed [5:0] sext_ln1345_248_fu_2894_p1;
wire  signed [2:0] mul_ln1345_380_fu_2897_p1;
wire  signed [5:0] mul_ln1345_380_fu_2897_p2;
wire  signed [2:0] mul_ln1345_381_fu_2909_p0;
wire  signed [5:0] sext_ln1345_249_fu_2906_p1;
wire  signed [2:0] mul_ln1345_381_fu_2909_p1;
wire  signed [5:0] mul_ln1345_381_fu_2909_p2;
wire  signed [2:0] mul_ln1345_382_fu_2921_p0;
wire  signed [5:0] sext_ln1345_250_fu_2918_p1;
wire  signed [2:0] mul_ln1345_382_fu_2921_p1;
wire  signed [5:0] mul_ln1345_382_fu_2921_p2;
wire  signed [2:0] mul_ln1345_383_fu_2933_p0;
wire  signed [5:0] sext_ln1345_251_fu_2930_p1;
wire  signed [2:0] mul_ln1345_383_fu_2933_p1;
wire  signed [5:0] mul_ln1345_383_fu_2933_p2;
wire  signed [2:0] mul_ln1345_385_fu_2948_p0;
wire  signed [5:0] sext_ln1345_253_fu_2945_p1;
wire  signed [2:0] mul_ln1345_385_fu_2948_p1;
wire  signed [5:0] mul_ln1345_385_fu_2948_p2;
wire  signed [2:0] mul_ln1345_386_fu_2960_p0;
wire  signed [5:0] sext_ln1345_254_fu_2957_p1;
wire  signed [2:0] mul_ln1345_386_fu_2960_p1;
wire  signed [5:0] mul_ln1345_386_fu_2960_p2;
wire  signed [2:0] mul_ln1345_387_fu_2972_p0;
wire  signed [5:0] sext_ln1345_255_fu_2969_p1;
wire  signed [2:0] mul_ln1345_387_fu_2972_p1;
wire  signed [5:0] mul_ln1345_387_fu_2972_p2;
wire  signed [2:0] mul_ln1345_388_fu_2984_p0;
wire  signed [5:0] sext_ln1345_256_fu_2981_p1;
wire  signed [2:0] mul_ln1345_388_fu_2984_p1;
wire  signed [5:0] mul_ln1345_388_fu_2984_p2;
wire  signed [2:0] mul_ln1345_389_fu_2996_p0;
wire  signed [5:0] sext_ln1345_257_fu_2993_p1;
wire  signed [2:0] mul_ln1345_389_fu_2996_p1;
wire  signed [5:0] mul_ln1345_389_fu_2996_p2;
wire  signed [6:0] sext_ln151_48_fu_2977_p1;
wire  signed [6:0] sext_ln151_49_fu_2989_p1;
wire   [6:0] add_ln691_379_fu_3005_p2;
wire  signed [12:0] sext_ln691_364_fu_3011_p1;
wire   [12:0] tmp_515_fu_2881_p4;
wire  signed [6:0] sext_ln151_44_fu_2938_p1;
wire  signed [6:0] sext_ln151_46_fu_2953_p1;
wire   [6:0] add_ln691_381_fu_3021_p2;
wire  signed [6:0] sext_ln151_47_fu_2965_p1;
wire  signed [6:0] sext_ln151_40_fu_2891_p1;
wire  signed [6:0] sext_ln691_362_fu_2878_p1;
wire   [6:0] add_ln691_384_fu_3033_p2;
wire  signed [6:0] sext_ln151_45_fu_2942_p1;
wire   [6:0] add_ln691_385_fu_3039_p2;
wire  signed [6:0] sext_ln151_41_fu_2902_p1;
wire  signed [6:0] sext_ln151_43_fu_2926_p1;
wire   [6:0] add_ln691_386_fu_3049_p2;
wire  signed [6:0] sext_ln151_42_fu_2914_p1;
wire  signed [6:0] sext_ln691_363_fu_3001_p1;
wire   [6:0] add_ln691_387_fu_3059_p2;
wire  signed [7:0] sext_ln691_368_fu_3065_p1;
wire  signed [7:0] sext_ln691_367_fu_3055_p1;
wire   [7:0] add_ln691_388_fu_3069_p2;
wire  signed [7:0] sext_ln691_366_fu_3045_p1;
wire  signed [2:0] mul_ln1345_392_fu_3100_p0;
wire  signed [5:0] sext_ln1345_260_fu_3097_p1;
wire  signed [2:0] mul_ln1345_392_fu_3100_p1;
wire  signed [5:0] mul_ln1345_392_fu_3100_p2;
wire  signed [2:0] mul_ln1345_393_fu_3112_p0;
wire  signed [5:0] sext_ln1345_261_fu_3109_p1;
wire  signed [2:0] mul_ln1345_393_fu_3112_p1;
wire  signed [5:0] mul_ln1345_393_fu_3112_p2;
wire  signed [2:0] mul_ln1345_394_fu_3124_p0;
wire  signed [5:0] sext_ln1345_262_fu_3121_p1;
wire  signed [2:0] mul_ln1345_394_fu_3124_p1;
wire  signed [5:0] mul_ln1345_394_fu_3124_p2;
wire  signed [2:0] mul_ln1345_395_fu_3136_p0;
wire  signed [5:0] sext_ln1345_263_fu_3133_p1;
wire  signed [2:0] mul_ln1345_395_fu_3136_p1;
wire  signed [5:0] mul_ln1345_395_fu_3136_p2;
wire  signed [2:0] mul_ln1345_397_fu_3151_p0;
wire  signed [5:0] sext_ln1345_265_fu_3148_p1;
wire  signed [2:0] mul_ln1345_397_fu_3151_p1;
wire  signed [5:0] mul_ln1345_397_fu_3151_p2;
wire  signed [2:0] mul_ln1345_398_fu_3163_p0;
wire  signed [5:0] sext_ln1345_266_fu_3160_p1;
wire  signed [2:0] mul_ln1345_398_fu_3163_p1;
wire  signed [5:0] mul_ln1345_398_fu_3163_p2;
wire  signed [2:0] mul_ln1345_399_fu_3175_p0;
wire  signed [5:0] sext_ln1345_267_fu_3172_p1;
wire  signed [2:0] mul_ln1345_399_fu_3175_p1;
wire  signed [5:0] mul_ln1345_399_fu_3175_p2;
wire  signed [2:0] mul_ln1345_400_fu_3187_p0;
wire  signed [5:0] sext_ln1345_268_fu_3184_p1;
wire  signed [2:0] mul_ln1345_400_fu_3187_p1;
wire  signed [5:0] mul_ln1345_400_fu_3187_p2;
wire  signed [2:0] mul_ln1345_401_fu_3199_p0;
wire  signed [5:0] sext_ln1345_269_fu_3196_p1;
wire  signed [2:0] mul_ln1345_401_fu_3199_p1;
wire  signed [5:0] mul_ln1345_401_fu_3199_p2;
wire  signed [6:0] sext_ln151_58_fu_3180_p1;
wire  signed [6:0] sext_ln151_59_fu_3192_p1;
wire   [6:0] add_ln691_391_fu_3208_p2;
wire  signed [12:0] sext_ln691_372_fu_3214_p1;
wire   [12:0] tmp_528_fu_3084_p4;
wire  signed [6:0] sext_ln151_54_fu_3141_p1;
wire  signed [6:0] sext_ln151_56_fu_3156_p1;
wire   [6:0] add_ln691_393_fu_3224_p2;
wire  signed [6:0] sext_ln151_57_fu_3168_p1;
wire  signed [6:0] sext_ln151_50_fu_3094_p1;
wire  signed [6:0] sext_ln691_370_fu_3081_p1;
wire   [6:0] add_ln691_396_fu_3236_p2;
wire  signed [6:0] sext_ln151_55_fu_3145_p1;
wire   [6:0] add_ln691_397_fu_3242_p2;
wire  signed [6:0] sext_ln151_51_fu_3105_p1;
wire  signed [6:0] sext_ln151_53_fu_3129_p1;
wire   [6:0] add_ln691_398_fu_3252_p2;
wire  signed [6:0] sext_ln151_52_fu_3117_p1;
wire  signed [6:0] sext_ln691_371_fu_3204_p1;
wire   [6:0] add_ln691_399_fu_3262_p2;
wire  signed [7:0] sext_ln691_376_fu_3268_p1;
wire  signed [7:0] sext_ln691_375_fu_3258_p1;
wire   [7:0] add_ln691_400_fu_3272_p2;
wire  signed [7:0] sext_ln691_374_fu_3248_p1;
wire  signed [2:0] mul_ln1345_404_fu_3303_p0;
wire  signed [2:0] mul_ln1345_404_fu_3303_p1;
wire  signed [5:0] sext_ln1345_272_fu_3300_p1;
wire  signed [5:0] mul_ln1345_404_fu_3303_p2;
wire  signed [2:0] mul_ln1345_405_fu_3315_p0;
wire  signed [2:0] mul_ln1345_405_fu_3315_p1;
wire  signed [5:0] sext_ln1345_273_fu_3312_p1;
wire  signed [5:0] mul_ln1345_405_fu_3315_p2;
wire  signed [2:0] mul_ln1345_406_fu_3327_p0;
wire  signed [2:0] mul_ln1345_406_fu_3327_p1;
wire  signed [5:0] sext_ln1345_274_fu_3324_p1;
wire  signed [5:0] mul_ln1345_406_fu_3327_p2;
wire  signed [2:0] mul_ln1345_407_fu_3339_p0;
wire  signed [2:0] mul_ln1345_407_fu_3339_p1;
wire  signed [5:0] sext_ln1345_275_fu_3336_p1;
wire  signed [5:0] mul_ln1345_407_fu_3339_p2;
wire  signed [2:0] mul_ln1345_409_fu_3354_p0;
wire  signed [2:0] mul_ln1345_409_fu_3354_p1;
wire  signed [5:0] sext_ln1345_277_fu_3351_p1;
wire  signed [5:0] mul_ln1345_409_fu_3354_p2;
wire  signed [2:0] mul_ln1345_410_fu_3366_p0;
wire  signed [2:0] mul_ln1345_410_fu_3366_p1;
wire  signed [5:0] sext_ln1345_278_fu_3363_p1;
wire  signed [5:0] mul_ln1345_410_fu_3366_p2;
wire  signed [2:0] mul_ln1345_411_fu_3378_p0;
wire  signed [2:0] mul_ln1345_411_fu_3378_p1;
wire  signed [5:0] sext_ln1345_279_fu_3375_p1;
wire  signed [5:0] mul_ln1345_411_fu_3378_p2;
wire  signed [2:0] mul_ln1345_412_fu_3390_p0;
wire  signed [2:0] mul_ln1345_412_fu_3390_p1;
wire  signed [5:0] sext_ln1345_280_fu_3387_p1;
wire  signed [5:0] mul_ln1345_412_fu_3390_p2;
wire  signed [2:0] mul_ln1345_413_fu_3402_p0;
wire  signed [2:0] mul_ln1345_413_fu_3402_p1;
wire  signed [5:0] sext_ln1345_281_fu_3399_p1;
wire  signed [5:0] mul_ln1345_413_fu_3402_p2;
wire  signed [6:0] sext_ln151_68_fu_3383_p1;
wire  signed [6:0] sext_ln151_69_fu_3395_p1;
wire   [6:0] add_ln691_403_fu_3411_p2;
wire  signed [12:0] sext_ln691_380_fu_3417_p1;
wire   [12:0] tmp_540_fu_3287_p4;
wire  signed [6:0] sext_ln151_64_fu_3344_p1;
wire  signed [6:0] sext_ln151_66_fu_3359_p1;
wire   [6:0] add_ln691_405_fu_3427_p2;
wire  signed [6:0] sext_ln151_67_fu_3371_p1;
wire  signed [6:0] sext_ln151_60_fu_3297_p1;
wire  signed [6:0] sext_ln691_378_fu_3284_p1;
wire   [6:0] add_ln691_408_fu_3439_p2;
wire  signed [6:0] sext_ln151_65_fu_3348_p1;
wire   [6:0] add_ln691_409_fu_3445_p2;
wire  signed [6:0] sext_ln151_61_fu_3308_p1;
wire  signed [6:0] sext_ln151_63_fu_3332_p1;
wire   [6:0] add_ln691_410_fu_3455_p2;
wire  signed [6:0] sext_ln151_62_fu_3320_p1;
wire  signed [6:0] sext_ln691_379_fu_3407_p1;
wire   [6:0] add_ln691_411_fu_3465_p2;
wire  signed [7:0] sext_ln691_384_fu_3471_p1;
wire  signed [7:0] sext_ln691_383_fu_3461_p1;
wire   [7:0] add_ln691_412_fu_3475_p2;
wire  signed [7:0] sext_ln691_382_fu_3451_p1;
wire  signed [2:0] mul_ln1345_416_fu_3503_p0;
wire  signed [2:0] mul_ln1345_416_fu_3503_p1;
wire  signed [5:0] mul_ln1345_416_fu_3503_p2;
wire  signed [2:0] mul_ln1345_417_fu_3512_p0;
wire  signed [2:0] mul_ln1345_417_fu_3512_p1;
wire  signed [5:0] mul_ln1345_417_fu_3512_p2;
wire  signed [2:0] mul_ln1345_418_fu_3521_p0;
wire  signed [2:0] mul_ln1345_418_fu_3521_p1;
wire  signed [5:0] mul_ln1345_418_fu_3521_p2;
wire  signed [2:0] mul_ln1345_419_fu_3530_p0;
wire  signed [2:0] mul_ln1345_419_fu_3530_p1;
wire  signed [5:0] mul_ln1345_419_fu_3530_p2;
wire  signed [2:0] mul_ln1345_421_fu_3542_p0;
wire  signed [2:0] mul_ln1345_421_fu_3542_p1;
wire  signed [5:0] mul_ln1345_421_fu_3542_p2;
wire  signed [2:0] mul_ln1345_422_fu_3551_p0;
wire  signed [2:0] mul_ln1345_422_fu_3551_p1;
wire  signed [5:0] mul_ln1345_422_fu_3551_p2;
wire  signed [2:0] mul_ln1345_423_fu_3560_p0;
wire  signed [2:0] mul_ln1345_423_fu_3560_p1;
wire  signed [5:0] mul_ln1345_423_fu_3560_p2;
wire  signed [2:0] mul_ln1345_424_fu_3569_p0;
wire  signed [2:0] mul_ln1345_424_fu_3569_p1;
wire  signed [5:0] mul_ln1345_424_fu_3569_p2;
wire  signed [2:0] mul_ln1345_425_fu_3578_p0;
wire  signed [2:0] mul_ln1345_425_fu_3578_p1;
wire  signed [5:0] mul_ln1345_425_fu_3578_p2;
wire  signed [6:0] sext_ln151_78_fu_3565_p1;
wire  signed [6:0] sext_ln151_79_fu_3574_p1;
wire   [6:0] add_ln691_415_fu_3587_p2;
wire  signed [12:0] sext_ln691_388_fu_3593_p1;
wire   [12:0] tmp_541_fu_3490_p4;
wire  signed [6:0] sext_ln151_74_fu_3535_p1;
wire  signed [6:0] sext_ln151_76_fu_3547_p1;
wire   [6:0] add_ln691_417_fu_3603_p2;
wire  signed [6:0] sext_ln151_77_fu_3556_p1;
wire  signed [6:0] sext_ln151_70_fu_3500_p1;
wire  signed [6:0] sext_ln691_386_fu_3487_p1;
wire   [6:0] add_ln691_420_fu_3615_p2;
wire  signed [6:0] sext_ln151_75_fu_3539_p1;
wire   [6:0] add_ln691_421_fu_3621_p2;
wire  signed [6:0] sext_ln151_71_fu_3508_p1;
wire  signed [6:0] sext_ln151_73_fu_3526_p1;
wire   [6:0] add_ln691_422_fu_3631_p2;
wire  signed [6:0] sext_ln151_72_fu_3517_p1;
wire  signed [6:0] sext_ln691_387_fu_3583_p1;
wire   [6:0] add_ln691_423_fu_3641_p2;
wire  signed [7:0] sext_ln691_392_fu_3647_p1;
wire  signed [7:0] sext_ln691_391_fu_3637_p1;
wire   [7:0] add_ln691_424_fu_3651_p2;
wire  signed [7:0] sext_ln691_390_fu_3627_p1;
wire  signed [2:0] mul_ln1345_428_fu_3679_p0;
wire  signed [2:0] mul_ln1345_428_fu_3679_p1;
wire  signed [5:0] mul_ln1345_428_fu_3679_p2;
wire  signed [2:0] mul_ln1345_429_fu_3688_p0;
wire  signed [2:0] mul_ln1345_429_fu_3688_p1;
wire  signed [5:0] mul_ln1345_429_fu_3688_p2;
wire  signed [2:0] mul_ln1345_430_fu_3697_p0;
wire  signed [2:0] mul_ln1345_430_fu_3697_p1;
wire  signed [5:0] mul_ln1345_430_fu_3697_p2;
wire  signed [2:0] mul_ln1345_431_fu_3706_p0;
wire  signed [2:0] mul_ln1345_431_fu_3706_p1;
wire  signed [5:0] mul_ln1345_431_fu_3706_p2;
wire  signed [2:0] mul_ln1345_433_fu_3718_p0;
wire  signed [2:0] mul_ln1345_433_fu_3718_p1;
wire  signed [5:0] mul_ln1345_433_fu_3718_p2;
wire  signed [2:0] mul_ln1345_434_fu_3727_p0;
wire  signed [2:0] mul_ln1345_434_fu_3727_p1;
wire  signed [5:0] mul_ln1345_434_fu_3727_p2;
wire  signed [2:0] mul_ln1345_435_fu_3736_p0;
wire  signed [2:0] mul_ln1345_435_fu_3736_p1;
wire  signed [5:0] mul_ln1345_435_fu_3736_p2;
wire  signed [2:0] mul_ln1345_436_fu_3745_p0;
wire  signed [2:0] mul_ln1345_436_fu_3745_p1;
wire  signed [5:0] mul_ln1345_436_fu_3745_p2;
wire  signed [2:0] mul_ln1345_437_fu_3754_p0;
wire  signed [2:0] mul_ln1345_437_fu_3754_p1;
wire  signed [5:0] mul_ln1345_437_fu_3754_p2;
wire  signed [6:0] sext_ln151_88_fu_3741_p1;
wire  signed [6:0] sext_ln151_89_fu_3750_p1;
wire   [6:0] add_ln691_427_fu_3763_p2;
wire  signed [12:0] sext_ln691_396_fu_3769_p1;
wire   [12:0] tmp_542_fu_3666_p4;
wire  signed [6:0] sext_ln151_84_fu_3711_p1;
wire  signed [6:0] sext_ln151_86_fu_3723_p1;
wire   [6:0] add_ln691_429_fu_3779_p2;
wire  signed [6:0] sext_ln151_87_fu_3732_p1;
wire  signed [6:0] sext_ln151_80_fu_3676_p1;
wire  signed [6:0] sext_ln691_394_fu_3663_p1;
wire   [6:0] add_ln691_432_fu_3791_p2;
wire  signed [6:0] sext_ln151_85_fu_3715_p1;
wire   [6:0] add_ln691_433_fu_3797_p2;
wire  signed [6:0] sext_ln151_81_fu_3684_p1;
wire  signed [6:0] sext_ln151_83_fu_3702_p1;
wire   [6:0] add_ln691_434_fu_3807_p2;
wire  signed [6:0] sext_ln151_82_fu_3693_p1;
wire  signed [6:0] sext_ln691_395_fu_3759_p1;
wire   [6:0] add_ln691_435_fu_3817_p2;
wire  signed [7:0] sext_ln691_400_fu_3823_p1;
wire  signed [7:0] sext_ln691_399_fu_3813_p1;
wire   [7:0] add_ln691_436_fu_3827_p2;
wire  signed [7:0] sext_ln691_398_fu_3803_p1;
wire  signed [2:0] mul_ln1345_440_fu_3855_p0;
wire  signed [2:0] mul_ln1345_440_fu_3855_p1;
wire  signed [5:0] mul_ln1345_440_fu_3855_p2;
wire  signed [2:0] mul_ln1345_441_fu_3864_p0;
wire  signed [2:0] mul_ln1345_441_fu_3864_p1;
wire  signed [5:0] mul_ln1345_441_fu_3864_p2;
wire  signed [2:0] mul_ln1345_442_fu_3873_p0;
wire  signed [2:0] mul_ln1345_442_fu_3873_p1;
wire  signed [5:0] mul_ln1345_442_fu_3873_p2;
wire  signed [2:0] mul_ln1345_443_fu_3882_p0;
wire  signed [2:0] mul_ln1345_443_fu_3882_p1;
wire  signed [5:0] mul_ln1345_443_fu_3882_p2;
wire  signed [2:0] mul_ln1345_445_fu_3894_p0;
wire  signed [2:0] mul_ln1345_445_fu_3894_p1;
wire  signed [5:0] mul_ln1345_445_fu_3894_p2;
wire  signed [2:0] mul_ln1345_446_fu_3903_p0;
wire  signed [2:0] mul_ln1345_446_fu_3903_p1;
wire  signed [5:0] mul_ln1345_446_fu_3903_p2;
wire  signed [2:0] mul_ln1345_447_fu_3912_p0;
wire  signed [2:0] mul_ln1345_447_fu_3912_p1;
wire  signed [5:0] mul_ln1345_447_fu_3912_p2;
wire  signed [2:0] mul_ln1345_448_fu_3921_p0;
wire  signed [2:0] mul_ln1345_448_fu_3921_p1;
wire  signed [5:0] mul_ln1345_448_fu_3921_p2;
wire  signed [2:0] mul_ln1345_449_fu_3930_p0;
wire  signed [2:0] mul_ln1345_449_fu_3930_p1;
wire  signed [5:0] mul_ln1345_449_fu_3930_p2;
wire  signed [6:0] sext_ln151_98_fu_3917_p1;
wire  signed [6:0] sext_ln151_99_fu_3926_p1;
wire   [6:0] add_ln691_439_fu_3939_p2;
wire  signed [12:0] sext_ln691_404_fu_3945_p1;
wire   [12:0] tmp_543_fu_3842_p4;
wire  signed [6:0] sext_ln151_94_fu_3887_p1;
wire  signed [6:0] sext_ln151_96_fu_3899_p1;
wire   [6:0] add_ln691_441_fu_3955_p2;
wire  signed [6:0] sext_ln151_97_fu_3908_p1;
wire  signed [6:0] sext_ln151_90_fu_3852_p1;
wire  signed [6:0] sext_ln691_402_fu_3839_p1;
wire   [6:0] add_ln691_444_fu_3967_p2;
wire  signed [6:0] sext_ln151_95_fu_3891_p1;
wire   [6:0] add_ln691_445_fu_3973_p2;
wire  signed [6:0] sext_ln151_91_fu_3860_p1;
wire  signed [6:0] sext_ln151_93_fu_3878_p1;
wire   [6:0] add_ln691_446_fu_3983_p2;
wire  signed [6:0] sext_ln151_92_fu_3869_p1;
wire  signed [6:0] sext_ln691_403_fu_3935_p1;
wire   [6:0] add_ln691_447_fu_3993_p2;
wire  signed [7:0] sext_ln691_408_fu_3999_p1;
wire  signed [7:0] sext_ln691_407_fu_3989_p1;
wire   [7:0] add_ln691_448_fu_4003_p2;
wire  signed [7:0] sext_ln691_406_fu_3979_p1;
wire  signed [2:0] mul_ln1345_452_fu_4031_p0;
wire  signed [2:0] mul_ln1345_452_fu_4031_p1;
wire  signed [5:0] mul_ln1345_452_fu_4031_p2;
wire  signed [2:0] mul_ln1345_453_fu_4041_p0;
wire  signed [2:0] mul_ln1345_453_fu_4041_p1;
wire  signed [5:0] mul_ln1345_453_fu_4041_p2;
wire  signed [2:0] mul_ln1345_454_fu_4051_p0;
wire  signed [2:0] mul_ln1345_454_fu_4051_p1;
wire  signed [5:0] mul_ln1345_454_fu_4051_p2;
wire  signed [2:0] mul_ln1345_455_fu_4061_p0;
wire  signed [2:0] mul_ln1345_455_fu_4061_p1;
wire  signed [5:0] mul_ln1345_455_fu_4061_p2;
wire  signed [2:0] mul_ln1345_457_fu_4074_p0;
wire  signed [2:0] mul_ln1345_457_fu_4074_p1;
wire  signed [5:0] mul_ln1345_457_fu_4074_p2;
wire  signed [2:0] mul_ln1345_458_fu_4084_p0;
wire  signed [2:0] mul_ln1345_458_fu_4084_p1;
wire  signed [5:0] mul_ln1345_458_fu_4084_p2;
wire  signed [2:0] mul_ln1345_459_fu_4094_p0;
wire  signed [2:0] mul_ln1345_459_fu_4094_p1;
wire  signed [5:0] mul_ln1345_459_fu_4094_p2;
wire  signed [2:0] mul_ln1345_460_fu_4104_p0;
wire  signed [2:0] mul_ln1345_460_fu_4104_p1;
wire  signed [5:0] mul_ln1345_460_fu_4104_p2;
wire  signed [2:0] mul_ln1345_461_fu_4114_p0;
wire  signed [2:0] mul_ln1345_461_fu_4114_p1;
wire  signed [5:0] mul_ln1345_461_fu_4114_p2;
wire  signed [6:0] sext_ln151_108_fu_4100_p1;
wire  signed [6:0] sext_ln151_109_fu_4110_p1;
wire   [6:0] add_ln691_451_fu_4124_p2;
wire  signed [12:0] sext_ln691_412_fu_4130_p1;
wire   [12:0] tmp_544_fu_4018_p4;
wire  signed [6:0] sext_ln151_104_fu_4067_p1;
wire  signed [6:0] sext_ln151_106_fu_4080_p1;
wire   [6:0] add_ln691_453_fu_4140_p2;
wire  signed [6:0] sext_ln151_107_fu_4090_p1;
wire  signed [6:0] sext_ln151_100_fu_4028_p1;
wire  signed [6:0] sext_ln691_410_fu_4015_p1;
wire   [6:0] add_ln691_456_fu_4152_p2;
wire  signed [6:0] sext_ln151_105_fu_4071_p1;
wire   [6:0] add_ln691_457_fu_4158_p2;
wire  signed [6:0] sext_ln151_101_fu_4037_p1;
wire  signed [6:0] sext_ln151_103_fu_4057_p1;
wire   [6:0] add_ln691_458_fu_4168_p2;
wire  signed [6:0] sext_ln151_102_fu_4047_p1;
wire  signed [6:0] sext_ln691_411_fu_4120_p1;
wire   [6:0] add_ln691_459_fu_4178_p2;
wire  signed [7:0] sext_ln691_416_fu_4184_p1;
wire  signed [7:0] sext_ln691_415_fu_4174_p1;
wire   [7:0] add_ln691_460_fu_4188_p2;
wire  signed [7:0] sext_ln691_414_fu_4164_p1;
wire  signed [2:0] mul_ln1345_464_fu_4216_p0;
wire  signed [2:0] mul_ln1345_464_fu_4216_p1;
wire  signed [5:0] mul_ln1345_464_fu_4216_p2;
wire  signed [2:0] mul_ln1345_465_fu_4226_p0;
wire  signed [2:0] mul_ln1345_465_fu_4226_p1;
wire  signed [5:0] mul_ln1345_465_fu_4226_p2;
wire  signed [2:0] mul_ln1345_466_fu_4236_p0;
wire  signed [2:0] mul_ln1345_466_fu_4236_p1;
wire  signed [5:0] mul_ln1345_466_fu_4236_p2;
wire  signed [2:0] mul_ln1345_467_fu_4246_p0;
wire  signed [2:0] mul_ln1345_467_fu_4246_p1;
wire  signed [5:0] mul_ln1345_467_fu_4246_p2;
wire  signed [2:0] mul_ln1345_469_fu_4259_p0;
wire  signed [2:0] mul_ln1345_469_fu_4259_p1;
wire  signed [5:0] mul_ln1345_469_fu_4259_p2;
wire  signed [2:0] mul_ln1345_470_fu_4269_p0;
wire  signed [2:0] mul_ln1345_470_fu_4269_p1;
wire  signed [5:0] mul_ln1345_470_fu_4269_p2;
wire  signed [2:0] mul_ln1345_471_fu_4279_p0;
wire  signed [2:0] mul_ln1345_471_fu_4279_p1;
wire  signed [5:0] mul_ln1345_471_fu_4279_p2;
wire  signed [2:0] mul_ln1345_472_fu_4289_p0;
wire  signed [2:0] mul_ln1345_472_fu_4289_p1;
wire  signed [5:0] mul_ln1345_472_fu_4289_p2;
wire  signed [2:0] mul_ln1345_473_fu_4299_p0;
wire  signed [2:0] mul_ln1345_473_fu_4299_p1;
wire  signed [5:0] mul_ln1345_473_fu_4299_p2;
wire  signed [6:0] sext_ln151_118_fu_4285_p1;
wire  signed [6:0] sext_ln151_119_fu_4295_p1;
wire   [6:0] add_ln691_463_fu_4309_p2;
wire  signed [12:0] sext_ln691_420_fu_4315_p1;
wire   [12:0] tmp_545_fu_4203_p4;
wire  signed [6:0] sext_ln151_114_fu_4252_p1;
wire  signed [6:0] sext_ln151_116_fu_4265_p1;
wire   [6:0] add_ln691_465_fu_4325_p2;
wire  signed [6:0] sext_ln151_117_fu_4275_p1;
wire  signed [6:0] sext_ln151_110_fu_4213_p1;
wire  signed [6:0] sext_ln691_418_fu_4200_p1;
wire   [6:0] add_ln691_468_fu_4337_p2;
wire  signed [6:0] sext_ln151_115_fu_4256_p1;
wire   [6:0] add_ln691_469_fu_4343_p2;
wire  signed [6:0] sext_ln151_111_fu_4222_p1;
wire  signed [6:0] sext_ln151_113_fu_4242_p1;
wire   [6:0] add_ln691_470_fu_4353_p2;
wire  signed [6:0] sext_ln151_112_fu_4232_p1;
wire  signed [6:0] sext_ln691_419_fu_4305_p1;
wire   [6:0] add_ln691_471_fu_4363_p2;
wire  signed [7:0] sext_ln691_424_fu_4369_p1;
wire  signed [7:0] sext_ln691_423_fu_4359_p1;
wire   [7:0] add_ln691_472_fu_4373_p2;
wire  signed [7:0] sext_ln691_422_fu_4349_p1;
wire  signed [12:0] sext_ln691_333_fu_4385_p1;
wire  signed [12:0] sext_ln691_337_fu_4393_p1;
wire   [12:0] add_ln691_335_fu_4388_p2;
wire  signed [12:0] sext_ln691_341_fu_4402_p1;
wire  signed [12:0] sext_ln691_345_fu_4410_p1;
wire   [12:0] add_ln691_347_fu_4405_p2;
wire  signed [12:0] sext_ln691_349_fu_4419_p1;
wire  signed [12:0] sext_ln691_353_fu_4427_p1;
wire   [12:0] add_ln691_359_fu_4422_p2;
wire  signed [12:0] sext_ln691_357_fu_4436_p1;
wire  signed [12:0] sext_ln691_361_fu_4444_p1;
wire   [12:0] add_ln691_371_fu_4439_p2;
wire  signed [12:0] sext_ln691_365_fu_4453_p1;
wire  signed [12:0] sext_ln691_369_fu_4461_p1;
wire   [12:0] add_ln691_383_fu_4456_p2;
wire  signed [12:0] sext_ln691_373_fu_4470_p1;
wire  signed [12:0] sext_ln691_377_fu_4478_p1;
wire   [12:0] add_ln691_395_fu_4473_p2;
wire  signed [12:0] sext_ln691_381_fu_4487_p1;
wire  signed [12:0] sext_ln691_385_fu_4495_p1;
wire   [12:0] add_ln691_407_fu_4490_p2;
wire  signed [12:0] sext_ln691_389_fu_4504_p1;
wire  signed [12:0] sext_ln691_393_fu_4512_p1;
wire   [12:0] add_ln691_419_fu_4507_p2;
wire  signed [12:0] sext_ln691_397_fu_4521_p1;
wire  signed [12:0] sext_ln691_401_fu_4529_p1;
wire   [12:0] add_ln691_431_fu_4524_p2;
wire  signed [12:0] sext_ln691_405_fu_4538_p1;
wire  signed [12:0] sext_ln691_409_fu_4546_p1;
wire   [12:0] add_ln691_443_fu_4541_p2;
wire  signed [12:0] sext_ln691_413_fu_4555_p1;
wire  signed [12:0] sext_ln691_417_fu_4563_p1;
wire   [12:0] add_ln691_455_fu_4558_p2;
wire  signed [12:0] sext_ln691_421_fu_4572_p1;
wire  signed [12:0] sext_ln691_425_fu_4580_p1;
wire   [12:0] add_ln691_467_fu_4575_p2;
wire   [12:0] add_ln691_474_fu_4583_p2;
wire   [12:0] add_ln691_462_fu_4566_p2;
wire   [12:0] add_ln691_450_fu_4549_p2;
wire   [12:0] add_ln691_438_fu_4532_p2;
wire   [12:0] add_ln691_426_fu_4515_p2;
wire   [12:0] add_ln691_414_fu_4498_p2;
wire   [12:0] add_ln691_402_fu_4481_p2;
wire   [12:0] add_ln691_390_fu_4464_p2;
wire   [12:0] add_ln691_378_fu_4447_p2;
wire   [12:0] add_ln691_366_fu_4430_p2;
wire   [12:0] add_ln691_354_fu_4413_p2;
wire   [12:0] add_ln691_342_fu_4396_p2;
wire   [188:0] tmp_547_fu_4622_p24;
wire    ap_CS_fsm_state8;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V #(
    .DataWidth( 78 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
attn_inst_matmul_gen_o_bias_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_o_bias_arr_V_address0),
    .ce0(attn_inst_matmul_gen_o_bias_arr_V_ce0),
    .q0(attn_inst_matmul_gen_o_bias_arr_V_q0)
);

ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_o_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_o_weight_arr_V_address0),
    .ce0(attn_inst_matmul_gen_o_weight_arr_V_ce0),
    .q0(attn_inst_matmul_gen_o_weight_arr_V_q0)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1085(
    .din0(mul_ln1345_fu_970_p0),
    .din1(mul_ln1345_fu_970_p1),
    .dout(mul_ln1345_fu_970_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1086(
    .din0(mul_ln1345_331_fu_994_p0),
    .din1(mul_ln1345_331_fu_994_p1),
    .dout(mul_ln1345_331_fu_994_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1087(
    .din0(tmp_466_fu_1000_p4),
    .din1(mul_ln1345_332_fu_1018_p1),
    .dout(mul_ln1345_332_fu_1018_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1088(
    .din0(tmp_467_fu_1024_p4),
    .din1(mul_ln1345_333_fu_1042_p1),
    .dout(mul_ln1345_333_fu_1042_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1089(
    .din0(tmp_468_fu_1048_p4),
    .din1(mul_ln1345_334_fu_1066_p1),
    .dout(mul_ln1345_334_fu_1066_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1090(
    .din0(tmp_469_fu_1072_p4),
    .din1(mul_ln1345_335_fu_1090_p1),
    .dout(mul_ln1345_335_fu_1090_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1091(
    .din0(mul_ln1345_336_fu_1114_p0),
    .din1(mul_ln1345_336_fu_1114_p1),
    .dout(mul_ln1345_336_fu_1114_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1092(
    .din0(tmp_471_fu_1120_p4),
    .din1(mul_ln1345_337_fu_1138_p1),
    .dout(mul_ln1345_337_fu_1138_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1093(
    .din0(tmp_472_fu_1144_p4),
    .din1(mul_ln1345_338_fu_1162_p1),
    .dout(mul_ln1345_338_fu_1162_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1094(
    .din0(tmp_473_fu_1168_p4),
    .din1(mul_ln1345_339_fu_1186_p1),
    .dout(mul_ln1345_339_fu_1186_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1095(
    .din0(tmp_474_fu_1192_p4),
    .din1(mul_ln1345_340_fu_1210_p1),
    .dout(mul_ln1345_340_fu_1210_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1096(
    .din0(tmp_475_fu_1216_p4),
    .din1(mul_ln1345_341_fu_1234_p1),
    .dout(mul_ln1345_341_fu_1234_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1097(
    .din0(mul_ln1345_342_fu_1254_p0),
    .din1(mul_ln1345_342_fu_1254_p1),
    .dout(mul_ln1345_342_fu_1254_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1098(
    .din0(mul_ln1345_343_fu_1274_p0),
    .din1(mul_ln1345_343_fu_1274_p1),
    .dout(mul_ln1345_343_fu_1274_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1099(
    .din0(tmp_479_fu_1280_p4),
    .din1(mul_ln1345_344_fu_1294_p1),
    .dout(mul_ln1345_344_fu_1294_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1100(
    .din0(tmp_480_fu_1300_p4),
    .din1(mul_ln1345_345_fu_1314_p1),
    .dout(mul_ln1345_345_fu_1314_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1101(
    .din0(tmp_481_fu_1320_p4),
    .din1(mul_ln1345_346_fu_1334_p1),
    .dout(mul_ln1345_346_fu_1334_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1102(
    .din0(tmp_482_fu_1340_p4),
    .din1(mul_ln1345_347_fu_1354_p1),
    .dout(mul_ln1345_347_fu_1354_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1103(
    .din0(mul_ln1345_348_fu_1374_p0),
    .din1(mul_ln1345_348_fu_1374_p1),
    .dout(mul_ln1345_348_fu_1374_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1104(
    .din0(tmp_484_fu_1380_p4),
    .din1(mul_ln1345_349_fu_1394_p1),
    .dout(mul_ln1345_349_fu_1394_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1105(
    .din0(tmp_485_fu_1400_p4),
    .din1(mul_ln1345_350_fu_1414_p1),
    .dout(mul_ln1345_350_fu_1414_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1106(
    .din0(tmp_486_fu_1420_p4),
    .din1(mul_ln1345_351_fu_1434_p1),
    .dout(mul_ln1345_351_fu_1434_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1107(
    .din0(tmp_487_fu_1440_p4),
    .din1(mul_ln1345_352_fu_1454_p1),
    .dout(mul_ln1345_352_fu_1454_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1108(
    .din0(tmp_488_fu_1460_p4),
    .din1(mul_ln1345_353_fu_1474_p1),
    .dout(mul_ln1345_353_fu_1474_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1109(
    .din0(mul_ln1345_354_fu_1494_p0),
    .din1(mul_ln1345_354_fu_1494_p1),
    .dout(mul_ln1345_354_fu_1494_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1110(
    .din0(mul_ln1345_355_fu_1514_p0),
    .din1(mul_ln1345_355_fu_1514_p1),
    .dout(mul_ln1345_355_fu_1514_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1111(
    .din0(tmp_492_fu_1520_p4),
    .din1(mul_ln1345_356_fu_1534_p1),
    .dout(mul_ln1345_356_fu_1534_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1112(
    .din0(tmp_493_fu_1540_p4),
    .din1(mul_ln1345_357_fu_1554_p1),
    .dout(mul_ln1345_357_fu_1554_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1113(
    .din0(tmp_494_fu_1560_p4),
    .din1(mul_ln1345_358_fu_1574_p1),
    .dout(mul_ln1345_358_fu_1574_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1114(
    .din0(tmp_495_fu_1580_p4),
    .din1(mul_ln1345_359_fu_1594_p1),
    .dout(mul_ln1345_359_fu_1594_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1115(
    .din0(mul_ln1345_360_fu_1614_p0),
    .din1(mul_ln1345_360_fu_1614_p1),
    .dout(mul_ln1345_360_fu_1614_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1116(
    .din0(tmp_497_fu_1620_p4),
    .din1(mul_ln1345_361_fu_1634_p1),
    .dout(mul_ln1345_361_fu_1634_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1117(
    .din0(tmp_s_fu_1640_p4),
    .din1(mul_ln1345_362_fu_1654_p1),
    .dout(mul_ln1345_362_fu_1654_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1118(
    .din0(tmp_498_fu_1660_p4),
    .din1(mul_ln1345_363_fu_1674_p1),
    .dout(mul_ln1345_363_fu_1674_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1119(
    .din0(tmp_499_fu_1680_p4),
    .din1(mul_ln1345_364_fu_1694_p1),
    .dout(mul_ln1345_364_fu_1694_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1120(
    .din0(tmp_500_fu_1700_p4),
    .din1(mul_ln1345_365_fu_1714_p1),
    .dout(mul_ln1345_365_fu_1714_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1121(
    .din0(mul_ln1345_366_fu_1734_p0),
    .din1(mul_ln1345_366_fu_1734_p1),
    .dout(mul_ln1345_366_fu_1734_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1122(
    .din0(mul_ln1345_367_fu_1754_p0),
    .din1(mul_ln1345_367_fu_1754_p1),
    .dout(mul_ln1345_367_fu_1754_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1123(
    .din0(tmp_504_fu_1760_p4),
    .din1(mul_ln1345_368_fu_1774_p1),
    .dout(mul_ln1345_368_fu_1774_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1124(
    .din0(tmp_505_fu_1780_p4),
    .din1(mul_ln1345_369_fu_1794_p1),
    .dout(mul_ln1345_369_fu_1794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1125(
    .din0(tmp_506_fu_1800_p4),
    .din1(mul_ln1345_370_fu_1814_p1),
    .dout(mul_ln1345_370_fu_1814_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1126(
    .din0(tmp_507_fu_1820_p4),
    .din1(mul_ln1345_371_fu_1834_p1),
    .dout(mul_ln1345_371_fu_1834_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1127(
    .din0(mul_ln1345_372_fu_1854_p0),
    .din1(mul_ln1345_372_fu_1854_p1),
    .dout(mul_ln1345_372_fu_1854_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1128(
    .din0(tmp_509_fu_1860_p4),
    .din1(mul_ln1345_373_fu_1874_p1),
    .dout(mul_ln1345_373_fu_1874_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1129(
    .din0(tmp_510_fu_1880_p4),
    .din1(mul_ln1345_374_fu_1894_p1),
    .dout(mul_ln1345_374_fu_1894_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1130(
    .din0(tmp_511_fu_1900_p4),
    .din1(mul_ln1345_375_fu_1914_p1),
    .dout(mul_ln1345_375_fu_1914_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1131(
    .din0(tmp_512_fu_1920_p4),
    .din1(mul_ln1345_376_fu_1934_p1),
    .dout(mul_ln1345_376_fu_1934_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1132(
    .din0(tmp_513_fu_1940_p4),
    .din1(mul_ln1345_377_fu_1954_p1),
    .dout(mul_ln1345_377_fu_1954_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1133(
    .din0(mul_ln1345_378_fu_1974_p0),
    .din1(mul_ln1345_378_fu_1974_p1),
    .dout(mul_ln1345_378_fu_1974_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1134(
    .din0(mul_ln1345_379_fu_1994_p0),
    .din1(mul_ln1345_379_fu_1994_p1),
    .dout(mul_ln1345_379_fu_1994_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1135(
    .din0(mul_ln1345_384_fu_2054_p0),
    .din1(mul_ln1345_384_fu_2054_p1),
    .dout(mul_ln1345_384_fu_2054_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1136(
    .din0(mul_ln1345_390_fu_2124_p0),
    .din1(mul_ln1345_390_fu_2124_p1),
    .dout(mul_ln1345_390_fu_2124_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1137(
    .din0(mul_ln1345_391_fu_2144_p0),
    .din1(mul_ln1345_391_fu_2144_p1),
    .dout(mul_ln1345_391_fu_2144_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1138(
    .din0(mul_ln1345_396_fu_2204_p0),
    .din1(mul_ln1345_396_fu_2204_p1),
    .dout(mul_ln1345_396_fu_2204_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1139(
    .din0(mul_ln1345_402_fu_2264_p0),
    .din1(mul_ln1345_402_fu_2264_p1),
    .dout(mul_ln1345_402_fu_2264_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1140(
    .din0(mul_ln1345_403_fu_2274_p0),
    .din1(mul_ln1345_403_fu_2274_p1),
    .dout(mul_ln1345_403_fu_2274_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1141(
    .din0(mul_ln1345_408_fu_2284_p0),
    .din1(mul_ln1345_408_fu_2284_p1),
    .dout(mul_ln1345_408_fu_2284_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1142(
    .din0(mul_ln1345_414_fu_2290_p0),
    .din1(mul_ln1345_414_fu_2290_p1),
    .dout(mul_ln1345_414_fu_2290_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1143(
    .din0(mul_ln1345_415_fu_2296_p0),
    .din1(mul_ln1345_415_fu_2296_p1),
    .dout(mul_ln1345_415_fu_2296_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1144(
    .din0(mul_ln1345_420_fu_2302_p0),
    .din1(mul_ln1345_420_fu_2302_p1),
    .dout(mul_ln1345_420_fu_2302_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1145(
    .din0(mul_ln1345_426_fu_2308_p0),
    .din1(mul_ln1345_426_fu_2308_p1),
    .dout(mul_ln1345_426_fu_2308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1146(
    .din0(mul_ln1345_427_fu_2314_p0),
    .din1(mul_ln1345_427_fu_2314_p1),
    .dout(mul_ln1345_427_fu_2314_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1147(
    .din0(mul_ln1345_432_fu_2320_p0),
    .din1(mul_ln1345_432_fu_2320_p1),
    .dout(mul_ln1345_432_fu_2320_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1148(
    .din0(mul_ln1345_438_fu_2326_p0),
    .din1(mul_ln1345_438_fu_2326_p1),
    .dout(mul_ln1345_438_fu_2326_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1149(
    .din0(mul_ln1345_439_fu_2332_p0),
    .din1(mul_ln1345_439_fu_2332_p1),
    .dout(mul_ln1345_439_fu_2332_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1150(
    .din0(mul_ln1345_444_fu_2338_p0),
    .din1(mul_ln1345_444_fu_2338_p1),
    .dout(mul_ln1345_444_fu_2338_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1151(
    .din0(mul_ln1345_450_fu_2344_p0),
    .din1(mul_ln1345_450_fu_2344_p1),
    .dout(mul_ln1345_450_fu_2344_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1152(
    .din0(mul_ln1345_451_fu_2350_p0),
    .din1(mul_ln1345_451_fu_2350_p1),
    .dout(mul_ln1345_451_fu_2350_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1153(
    .din0(mul_ln1345_456_fu_2356_p0),
    .din1(mul_ln1345_456_fu_2356_p1),
    .dout(mul_ln1345_456_fu_2356_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1154(
    .din0(mul_ln1345_462_fu_2362_p0),
    .din1(mul_ln1345_462_fu_2362_p1),
    .dout(mul_ln1345_462_fu_2362_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1155(
    .din0(mul_ln1345_463_fu_2368_p0),
    .din1(mul_ln1345_463_fu_2368_p1),
    .dout(mul_ln1345_463_fu_2368_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1156(
    .din0(mul_ln1345_468_fu_2374_p0),
    .din1(mul_ln1345_468_fu_2374_p1),
    .dout(mul_ln1345_468_fu_2374_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1157(
    .din0(mul_ln1345_380_fu_2897_p0),
    .din1(mul_ln1345_380_fu_2897_p1),
    .dout(mul_ln1345_380_fu_2897_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1158(
    .din0(mul_ln1345_381_fu_2909_p0),
    .din1(mul_ln1345_381_fu_2909_p1),
    .dout(mul_ln1345_381_fu_2909_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1159(
    .din0(mul_ln1345_382_fu_2921_p0),
    .din1(mul_ln1345_382_fu_2921_p1),
    .dout(mul_ln1345_382_fu_2921_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1160(
    .din0(mul_ln1345_383_fu_2933_p0),
    .din1(mul_ln1345_383_fu_2933_p1),
    .dout(mul_ln1345_383_fu_2933_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1161(
    .din0(mul_ln1345_385_fu_2948_p0),
    .din1(mul_ln1345_385_fu_2948_p1),
    .dout(mul_ln1345_385_fu_2948_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1162(
    .din0(mul_ln1345_386_fu_2960_p0),
    .din1(mul_ln1345_386_fu_2960_p1),
    .dout(mul_ln1345_386_fu_2960_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1163(
    .din0(mul_ln1345_387_fu_2972_p0),
    .din1(mul_ln1345_387_fu_2972_p1),
    .dout(mul_ln1345_387_fu_2972_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1164(
    .din0(mul_ln1345_388_fu_2984_p0),
    .din1(mul_ln1345_388_fu_2984_p1),
    .dout(mul_ln1345_388_fu_2984_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1165(
    .din0(mul_ln1345_389_fu_2996_p0),
    .din1(mul_ln1345_389_fu_2996_p1),
    .dout(mul_ln1345_389_fu_2996_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1166(
    .din0(mul_ln1345_392_fu_3100_p0),
    .din1(mul_ln1345_392_fu_3100_p1),
    .dout(mul_ln1345_392_fu_3100_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1167(
    .din0(mul_ln1345_393_fu_3112_p0),
    .din1(mul_ln1345_393_fu_3112_p1),
    .dout(mul_ln1345_393_fu_3112_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1168(
    .din0(mul_ln1345_394_fu_3124_p0),
    .din1(mul_ln1345_394_fu_3124_p1),
    .dout(mul_ln1345_394_fu_3124_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1169(
    .din0(mul_ln1345_395_fu_3136_p0),
    .din1(mul_ln1345_395_fu_3136_p1),
    .dout(mul_ln1345_395_fu_3136_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1170(
    .din0(mul_ln1345_397_fu_3151_p0),
    .din1(mul_ln1345_397_fu_3151_p1),
    .dout(mul_ln1345_397_fu_3151_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1171(
    .din0(mul_ln1345_398_fu_3163_p0),
    .din1(mul_ln1345_398_fu_3163_p1),
    .dout(mul_ln1345_398_fu_3163_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1172(
    .din0(mul_ln1345_399_fu_3175_p0),
    .din1(mul_ln1345_399_fu_3175_p1),
    .dout(mul_ln1345_399_fu_3175_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1173(
    .din0(mul_ln1345_400_fu_3187_p0),
    .din1(mul_ln1345_400_fu_3187_p1),
    .dout(mul_ln1345_400_fu_3187_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1174(
    .din0(mul_ln1345_401_fu_3199_p0),
    .din1(mul_ln1345_401_fu_3199_p1),
    .dout(mul_ln1345_401_fu_3199_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1175(
    .din0(mul_ln1345_404_fu_3303_p0),
    .din1(mul_ln1345_404_fu_3303_p1),
    .dout(mul_ln1345_404_fu_3303_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1176(
    .din0(mul_ln1345_405_fu_3315_p0),
    .din1(mul_ln1345_405_fu_3315_p1),
    .dout(mul_ln1345_405_fu_3315_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1177(
    .din0(mul_ln1345_406_fu_3327_p0),
    .din1(mul_ln1345_406_fu_3327_p1),
    .dout(mul_ln1345_406_fu_3327_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1178(
    .din0(mul_ln1345_407_fu_3339_p0),
    .din1(mul_ln1345_407_fu_3339_p1),
    .dout(mul_ln1345_407_fu_3339_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1179(
    .din0(mul_ln1345_409_fu_3354_p0),
    .din1(mul_ln1345_409_fu_3354_p1),
    .dout(mul_ln1345_409_fu_3354_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1180(
    .din0(mul_ln1345_410_fu_3366_p0),
    .din1(mul_ln1345_410_fu_3366_p1),
    .dout(mul_ln1345_410_fu_3366_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1181(
    .din0(mul_ln1345_411_fu_3378_p0),
    .din1(mul_ln1345_411_fu_3378_p1),
    .dout(mul_ln1345_411_fu_3378_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1182(
    .din0(mul_ln1345_412_fu_3390_p0),
    .din1(mul_ln1345_412_fu_3390_p1),
    .dout(mul_ln1345_412_fu_3390_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1183(
    .din0(mul_ln1345_413_fu_3402_p0),
    .din1(mul_ln1345_413_fu_3402_p1),
    .dout(mul_ln1345_413_fu_3402_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1184(
    .din0(mul_ln1345_416_fu_3503_p0),
    .din1(mul_ln1345_416_fu_3503_p1),
    .dout(mul_ln1345_416_fu_3503_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1185(
    .din0(mul_ln1345_417_fu_3512_p0),
    .din1(mul_ln1345_417_fu_3512_p1),
    .dout(mul_ln1345_417_fu_3512_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1186(
    .din0(mul_ln1345_418_fu_3521_p0),
    .din1(mul_ln1345_418_fu_3521_p1),
    .dout(mul_ln1345_418_fu_3521_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1187(
    .din0(mul_ln1345_419_fu_3530_p0),
    .din1(mul_ln1345_419_fu_3530_p1),
    .dout(mul_ln1345_419_fu_3530_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1188(
    .din0(mul_ln1345_421_fu_3542_p0),
    .din1(mul_ln1345_421_fu_3542_p1),
    .dout(mul_ln1345_421_fu_3542_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1189(
    .din0(mul_ln1345_422_fu_3551_p0),
    .din1(mul_ln1345_422_fu_3551_p1),
    .dout(mul_ln1345_422_fu_3551_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1190(
    .din0(mul_ln1345_423_fu_3560_p0),
    .din1(mul_ln1345_423_fu_3560_p1),
    .dout(mul_ln1345_423_fu_3560_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1191(
    .din0(mul_ln1345_424_fu_3569_p0),
    .din1(mul_ln1345_424_fu_3569_p1),
    .dout(mul_ln1345_424_fu_3569_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1192(
    .din0(mul_ln1345_425_fu_3578_p0),
    .din1(mul_ln1345_425_fu_3578_p1),
    .dout(mul_ln1345_425_fu_3578_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1193(
    .din0(mul_ln1345_428_fu_3679_p0),
    .din1(mul_ln1345_428_fu_3679_p1),
    .dout(mul_ln1345_428_fu_3679_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1194(
    .din0(mul_ln1345_429_fu_3688_p0),
    .din1(mul_ln1345_429_fu_3688_p1),
    .dout(mul_ln1345_429_fu_3688_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1195(
    .din0(mul_ln1345_430_fu_3697_p0),
    .din1(mul_ln1345_430_fu_3697_p1),
    .dout(mul_ln1345_430_fu_3697_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1196(
    .din0(mul_ln1345_431_fu_3706_p0),
    .din1(mul_ln1345_431_fu_3706_p1),
    .dout(mul_ln1345_431_fu_3706_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1197(
    .din0(mul_ln1345_433_fu_3718_p0),
    .din1(mul_ln1345_433_fu_3718_p1),
    .dout(mul_ln1345_433_fu_3718_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1198(
    .din0(mul_ln1345_434_fu_3727_p0),
    .din1(mul_ln1345_434_fu_3727_p1),
    .dout(mul_ln1345_434_fu_3727_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1199(
    .din0(mul_ln1345_435_fu_3736_p0),
    .din1(mul_ln1345_435_fu_3736_p1),
    .dout(mul_ln1345_435_fu_3736_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1200(
    .din0(mul_ln1345_436_fu_3745_p0),
    .din1(mul_ln1345_436_fu_3745_p1),
    .dout(mul_ln1345_436_fu_3745_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1201(
    .din0(mul_ln1345_437_fu_3754_p0),
    .din1(mul_ln1345_437_fu_3754_p1),
    .dout(mul_ln1345_437_fu_3754_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1202(
    .din0(mul_ln1345_440_fu_3855_p0),
    .din1(mul_ln1345_440_fu_3855_p1),
    .dout(mul_ln1345_440_fu_3855_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1203(
    .din0(mul_ln1345_441_fu_3864_p0),
    .din1(mul_ln1345_441_fu_3864_p1),
    .dout(mul_ln1345_441_fu_3864_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1204(
    .din0(mul_ln1345_442_fu_3873_p0),
    .din1(mul_ln1345_442_fu_3873_p1),
    .dout(mul_ln1345_442_fu_3873_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1205(
    .din0(mul_ln1345_443_fu_3882_p0),
    .din1(mul_ln1345_443_fu_3882_p1),
    .dout(mul_ln1345_443_fu_3882_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1206(
    .din0(mul_ln1345_445_fu_3894_p0),
    .din1(mul_ln1345_445_fu_3894_p1),
    .dout(mul_ln1345_445_fu_3894_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1207(
    .din0(mul_ln1345_446_fu_3903_p0),
    .din1(mul_ln1345_446_fu_3903_p1),
    .dout(mul_ln1345_446_fu_3903_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1208(
    .din0(mul_ln1345_447_fu_3912_p0),
    .din1(mul_ln1345_447_fu_3912_p1),
    .dout(mul_ln1345_447_fu_3912_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1209(
    .din0(mul_ln1345_448_fu_3921_p0),
    .din1(mul_ln1345_448_fu_3921_p1),
    .dout(mul_ln1345_448_fu_3921_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1210(
    .din0(mul_ln1345_449_fu_3930_p0),
    .din1(mul_ln1345_449_fu_3930_p1),
    .dout(mul_ln1345_449_fu_3930_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1211(
    .din0(mul_ln1345_452_fu_4031_p0),
    .din1(mul_ln1345_452_fu_4031_p1),
    .dout(mul_ln1345_452_fu_4031_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1212(
    .din0(mul_ln1345_453_fu_4041_p0),
    .din1(mul_ln1345_453_fu_4041_p1),
    .dout(mul_ln1345_453_fu_4041_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1213(
    .din0(mul_ln1345_454_fu_4051_p0),
    .din1(mul_ln1345_454_fu_4051_p1),
    .dout(mul_ln1345_454_fu_4051_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1214(
    .din0(mul_ln1345_455_fu_4061_p0),
    .din1(mul_ln1345_455_fu_4061_p1),
    .dout(mul_ln1345_455_fu_4061_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1215(
    .din0(mul_ln1345_457_fu_4074_p0),
    .din1(mul_ln1345_457_fu_4074_p1),
    .dout(mul_ln1345_457_fu_4074_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1216(
    .din0(mul_ln1345_458_fu_4084_p0),
    .din1(mul_ln1345_458_fu_4084_p1),
    .dout(mul_ln1345_458_fu_4084_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1217(
    .din0(mul_ln1345_459_fu_4094_p0),
    .din1(mul_ln1345_459_fu_4094_p1),
    .dout(mul_ln1345_459_fu_4094_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1218(
    .din0(mul_ln1345_460_fu_4104_p0),
    .din1(mul_ln1345_460_fu_4104_p1),
    .dout(mul_ln1345_460_fu_4104_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1219(
    .din0(mul_ln1345_461_fu_4114_p0),
    .din1(mul_ln1345_461_fu_4114_p1),
    .dout(mul_ln1345_461_fu_4114_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1220(
    .din0(mul_ln1345_464_fu_4216_p0),
    .din1(mul_ln1345_464_fu_4216_p1),
    .dout(mul_ln1345_464_fu_4216_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1221(
    .din0(mul_ln1345_465_fu_4226_p0),
    .din1(mul_ln1345_465_fu_4226_p1),
    .dout(mul_ln1345_465_fu_4226_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1222(
    .din0(mul_ln1345_466_fu_4236_p0),
    .din1(mul_ln1345_466_fu_4236_p1),
    .dout(mul_ln1345_466_fu_4236_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1223(
    .din0(mul_ln1345_467_fu_4246_p0),
    .din1(mul_ln1345_467_fu_4246_p1),
    .dout(mul_ln1345_467_fu_4246_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1224(
    .din0(mul_ln1345_469_fu_4259_p0),
    .din1(mul_ln1345_469_fu_4259_p1),
    .dout(mul_ln1345_469_fu_4259_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1225(
    .din0(mul_ln1345_470_fu_4269_p0),
    .din1(mul_ln1345_470_fu_4269_p1),
    .dout(mul_ln1345_470_fu_4269_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1226(
    .din0(mul_ln1345_471_fu_4279_p0),
    .din1(mul_ln1345_471_fu_4279_p1),
    .dout(mul_ln1345_471_fu_4279_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1227(
    .din0(mul_ln1345_472_fu_4289_p0),
    .din1(mul_ln1345_472_fu_4289_p1),
    .dout(mul_ln1345_472_fu_4289_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U1228(
    .din0(mul_ln1345_473_fu_4299_p0),
    .din1(mul_ln1345_473_fu_4299_p1),
    .dout(mul_ln1345_473_fu_4299_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_553 <= add_ln122_reg_4770;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cit_reg_553 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_541 <= select_ln121_15_reg_4751;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cot_reg_541 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten20_reg_518 <= add_ln120_reg_4736;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten20_reg_518 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_530 <= select_ln121_16_reg_4775;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_530 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln120_reg_4736 <= add_ln120_fu_633_p2;
        attn_inst_matmul_gen_o_bias_arr_V_load_reg_4741 <= attn_inst_matmul_gen_o_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_569_p2 == 1'd0))) begin
        add_ln121_4_reg_4731 <= add_ln121_4_fu_627_p2;
        add_ln121_reg_4716 <= add_ln121_fu_607_p2;
        and_ln120_reg_4709 <= and_ln120_fu_601_p2;
        icmp_ln121_reg_4697 <= icmp_ln121_fu_575_p2;
        select_ln120_reg_4704 <= select_ln120_fu_581_p3;
        select_ln121_reg_4723 <= select_ln121_fu_619_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln122_reg_4770 <= add_ln122_fu_701_p2;
        select_ln121_15_reg_4751 <= select_ln121_15_fu_672_p3;
        select_ln121_16_reg_4775 <= select_ln121_16_fu_706_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_4693_pp0_iter1_reg == 1'd0))) begin
        add_ln691_332_reg_5515 <= add_ln691_332_fu_2446_p2;
        add_ln691_334_reg_5520 <= add_ln691_334_fu_2458_p2;
        add_ln691_341_reg_5525 <= add_ln691_341_fu_2506_p2;
        add_ln691_344_reg_5530 <= add_ln691_344_fu_2568_p2;
        add_ln691_346_reg_5535 <= add_ln691_346_fu_2580_p2;
        add_ln691_353_reg_5540 <= add_ln691_353_fu_2628_p2;
        add_ln691_356_reg_5545 <= add_ln691_356_fu_2690_p2;
        add_ln691_358_reg_5550 <= add_ln691_358_fu_2702_p2;
        add_ln691_365_reg_5555 <= add_ln691_365_fu_2750_p2;
        add_ln691_368_reg_5560 <= add_ln691_368_fu_2812_p2;
        add_ln691_370_reg_5565 <= add_ln691_370_fu_2824_p2;
        add_ln691_377_reg_5570 <= add_ln691_377_fu_2872_p2;
        add_ln691_380_reg_5575 <= add_ln691_380_fu_3015_p2;
        add_ln691_382_reg_5580 <= add_ln691_382_fu_3027_p2;
        add_ln691_389_reg_5585 <= add_ln691_389_fu_3075_p2;
        add_ln691_392_reg_5590 <= add_ln691_392_fu_3218_p2;
        add_ln691_394_reg_5595 <= add_ln691_394_fu_3230_p2;
        add_ln691_401_reg_5600 <= add_ln691_401_fu_3278_p2;
        add_ln691_404_reg_5605 <= add_ln691_404_fu_3421_p2;
        add_ln691_406_reg_5610 <= add_ln691_406_fu_3433_p2;
        add_ln691_413_reg_5615 <= add_ln691_413_fu_3481_p2;
        add_ln691_416_reg_5620 <= add_ln691_416_fu_3597_p2;
        add_ln691_418_reg_5625 <= add_ln691_418_fu_3609_p2;
        add_ln691_425_reg_5630 <= add_ln691_425_fu_3657_p2;
        add_ln691_428_reg_5635 <= add_ln691_428_fu_3773_p2;
        add_ln691_430_reg_5640 <= add_ln691_430_fu_3785_p2;
        add_ln691_437_reg_5645 <= add_ln691_437_fu_3833_p2;
        add_ln691_440_reg_5650 <= add_ln691_440_fu_3949_p2;
        add_ln691_442_reg_5655 <= add_ln691_442_fu_3961_p2;
        add_ln691_449_reg_5660 <= add_ln691_449_fu_4009_p2;
        add_ln691_452_reg_5665 <= add_ln691_452_fu_4134_p2;
        add_ln691_454_reg_5670 <= add_ln691_454_fu_4146_p2;
        add_ln691_461_reg_5675 <= add_ln691_461_fu_4194_p2;
        add_ln691_464_reg_5680 <= add_ln691_464_fu_4319_p2;
        add_ln691_466_reg_5685 <= add_ln691_466_fu_4331_p2;
        add_ln691_473_reg_5690 <= add_ln691_473_fu_4379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        attn_inst_matmul_gen_o_bias_arr_V_load_1_reg_4683 <= attn_inst_matmul_gen_o_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_4693 <= icmp_ln120_fu_569_p2;
        icmp_ln120_reg_4693_pp0_iter1_reg <= icmp_ln120_reg_4693;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln126_reg_4761 <= icmp_ln126_fu_691_p2;
        icmp_ln161_reg_4766 <= icmp_ln161_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln161_reg_4766_pp0_iter1_reg <= icmp_ln161_reg_4766;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln1345_331_reg_4836 <= mul_ln1345_331_fu_994_p2;
        mul_ln1345_332_reg_4852 <= mul_ln1345_332_fu_1018_p2;
        mul_ln1345_333_reg_4868 <= mul_ln1345_333_fu_1042_p2;
        mul_ln1345_334_reg_4884 <= mul_ln1345_334_fu_1066_p2;
        mul_ln1345_335_reg_4900 <= mul_ln1345_335_fu_1090_p2;
        mul_ln1345_336_reg_4905 <= mul_ln1345_336_fu_1114_p2;
        mul_ln1345_337_reg_4921 <= mul_ln1345_337_fu_1138_p2;
        mul_ln1345_338_reg_4937 <= mul_ln1345_338_fu_1162_p2;
        mul_ln1345_339_reg_4953 <= mul_ln1345_339_fu_1186_p2;
        mul_ln1345_340_reg_4969 <= mul_ln1345_340_fu_1210_p2;
        mul_ln1345_341_reg_4985 <= mul_ln1345_341_fu_1234_p2;
        mul_ln1345_342_reg_4990 <= mul_ln1345_342_fu_1254_p2;
        mul_ln1345_343_reg_4995 <= mul_ln1345_343_fu_1274_p2;
        mul_ln1345_344_reg_5005 <= mul_ln1345_344_fu_1294_p2;
        mul_ln1345_345_reg_5015 <= mul_ln1345_345_fu_1314_p2;
        mul_ln1345_346_reg_5025 <= mul_ln1345_346_fu_1334_p2;
        mul_ln1345_347_reg_5035 <= mul_ln1345_347_fu_1354_p2;
        mul_ln1345_348_reg_5040 <= mul_ln1345_348_fu_1374_p2;
        mul_ln1345_349_reg_5050 <= mul_ln1345_349_fu_1394_p2;
        mul_ln1345_350_reg_5060 <= mul_ln1345_350_fu_1414_p2;
        mul_ln1345_351_reg_5070 <= mul_ln1345_351_fu_1434_p2;
        mul_ln1345_352_reg_5080 <= mul_ln1345_352_fu_1454_p2;
        mul_ln1345_353_reg_5090 <= mul_ln1345_353_fu_1474_p2;
        mul_ln1345_354_reg_5095 <= mul_ln1345_354_fu_1494_p2;
        mul_ln1345_355_reg_5100 <= mul_ln1345_355_fu_1514_p2;
        mul_ln1345_356_reg_5110 <= mul_ln1345_356_fu_1534_p2;
        mul_ln1345_357_reg_5120 <= mul_ln1345_357_fu_1554_p2;
        mul_ln1345_358_reg_5130 <= mul_ln1345_358_fu_1574_p2;
        mul_ln1345_359_reg_5140 <= mul_ln1345_359_fu_1594_p2;
        mul_ln1345_360_reg_5145 <= mul_ln1345_360_fu_1614_p2;
        mul_ln1345_361_reg_5155 <= mul_ln1345_361_fu_1634_p2;
        mul_ln1345_362_reg_5165 <= mul_ln1345_362_fu_1654_p2;
        mul_ln1345_363_reg_5175 <= mul_ln1345_363_fu_1674_p2;
        mul_ln1345_364_reg_5185 <= mul_ln1345_364_fu_1694_p2;
        mul_ln1345_365_reg_5195 <= mul_ln1345_365_fu_1714_p2;
        mul_ln1345_366_reg_5200 <= mul_ln1345_366_fu_1734_p2;
        mul_ln1345_367_reg_5205 <= mul_ln1345_367_fu_1754_p2;
        mul_ln1345_368_reg_5215 <= mul_ln1345_368_fu_1774_p2;
        mul_ln1345_369_reg_5225 <= mul_ln1345_369_fu_1794_p2;
        mul_ln1345_370_reg_5235 <= mul_ln1345_370_fu_1814_p2;
        mul_ln1345_371_reg_5245 <= mul_ln1345_371_fu_1834_p2;
        mul_ln1345_372_reg_5250 <= mul_ln1345_372_fu_1854_p2;
        mul_ln1345_373_reg_5260 <= mul_ln1345_373_fu_1874_p2;
        mul_ln1345_374_reg_5270 <= mul_ln1345_374_fu_1894_p2;
        mul_ln1345_375_reg_5280 <= mul_ln1345_375_fu_1914_p2;
        mul_ln1345_376_reg_5290 <= mul_ln1345_376_fu_1934_p2;
        mul_ln1345_377_reg_5300 <= mul_ln1345_377_fu_1954_p2;
        mul_ln1345_378_reg_5305 <= mul_ln1345_378_fu_1974_p2;
        mul_ln1345_379_reg_5310 <= mul_ln1345_379_fu_1994_p2;
        mul_ln1345_384_reg_5335 <= mul_ln1345_384_fu_2054_p2;
        mul_ln1345_390_reg_5365 <= mul_ln1345_390_fu_2124_p2;
        mul_ln1345_391_reg_5370 <= mul_ln1345_391_fu_2144_p2;
        mul_ln1345_396_reg_5395 <= mul_ln1345_396_fu_2204_p2;
        mul_ln1345_402_reg_5425 <= mul_ln1345_402_fu_2264_p2;
        mul_ln1345_403_reg_5430 <= mul_ln1345_403_fu_2274_p2;
        mul_ln1345_408_reg_5435 <= mul_ln1345_408_fu_2284_p2;
        mul_ln1345_414_reg_5440 <= mul_ln1345_414_fu_2290_p2;
        mul_ln1345_415_reg_5445 <= mul_ln1345_415_fu_2296_p2;
        mul_ln1345_420_reg_5450 <= mul_ln1345_420_fu_2302_p2;
        mul_ln1345_426_reg_5455 <= mul_ln1345_426_fu_2308_p2;
        mul_ln1345_427_reg_5460 <= mul_ln1345_427_fu_2314_p2;
        mul_ln1345_432_reg_5465 <= mul_ln1345_432_fu_2320_p2;
        mul_ln1345_438_reg_5470 <= mul_ln1345_438_fu_2326_p2;
        mul_ln1345_439_reg_5475 <= mul_ln1345_439_fu_2332_p2;
        mul_ln1345_444_reg_5480 <= mul_ln1345_444_fu_2338_p2;
        mul_ln1345_450_reg_5485 <= mul_ln1345_450_fu_2344_p2;
        mul_ln1345_451_reg_5490 <= mul_ln1345_451_fu_2350_p2;
        mul_ln1345_456_reg_5495 <= mul_ln1345_456_fu_2356_p2;
        mul_ln1345_462_reg_5500 <= mul_ln1345_462_fu_2362_p2;
        mul_ln1345_463_reg_5505 <= mul_ln1345_463_fu_2368_p2;
        mul_ln1345_468_reg_5510 <= mul_ln1345_468_fu_2374_p2;
        mul_ln1345_reg_4831 <= mul_ln1345_fu_970_p2;
        sext_ln1345_190_reg_4841 <= sext_ln1345_190_fu_1010_p1;
        sext_ln1345_191_reg_4847 <= sext_ln1345_191_fu_1014_p1;
        sext_ln1345_192_reg_4857 <= sext_ln1345_192_fu_1034_p1;
        sext_ln1345_193_reg_4863 <= sext_ln1345_193_fu_1038_p1;
        sext_ln1345_194_reg_4873 <= sext_ln1345_194_fu_1058_p1;
        sext_ln1345_195_reg_4879 <= sext_ln1345_195_fu_1062_p1;
        sext_ln1345_196_reg_4889 <= sext_ln1345_196_fu_1082_p1;
        sext_ln1345_197_reg_4895 <= sext_ln1345_197_fu_1086_p1;
        sext_ln1345_200_reg_4910 <= sext_ln1345_200_fu_1130_p1;
        sext_ln1345_201_reg_4916 <= sext_ln1345_201_fu_1134_p1;
        sext_ln1345_202_reg_4926 <= sext_ln1345_202_fu_1154_p1;
        sext_ln1345_203_reg_4932 <= sext_ln1345_203_fu_1158_p1;
        sext_ln1345_204_reg_4942 <= sext_ln1345_204_fu_1178_p1;
        sext_ln1345_205_reg_4948 <= sext_ln1345_205_fu_1182_p1;
        sext_ln1345_206_reg_4958 <= sext_ln1345_206_fu_1202_p1;
        sext_ln1345_207_reg_4964 <= sext_ln1345_207_fu_1206_p1;
        sext_ln1345_208_reg_4974 <= sext_ln1345_208_fu_1226_p1;
        sext_ln1345_209_reg_4980 <= sext_ln1345_209_fu_1230_p1;
        sext_ln1345_212_reg_5000 <= sext_ln1345_212_fu_1290_p1;
        sext_ln1345_213_reg_5010 <= sext_ln1345_213_fu_1310_p1;
        sext_ln1345_214_reg_5020 <= sext_ln1345_214_fu_1330_p1;
        sext_ln1345_215_reg_5030 <= sext_ln1345_215_fu_1350_p1;
        sext_ln1345_217_reg_5045 <= sext_ln1345_217_fu_1390_p1;
        sext_ln1345_218_reg_5055 <= sext_ln1345_218_fu_1410_p1;
        sext_ln1345_219_reg_5065 <= sext_ln1345_219_fu_1430_p1;
        sext_ln1345_220_reg_5075 <= sext_ln1345_220_fu_1450_p1;
        sext_ln1345_221_reg_5085 <= sext_ln1345_221_fu_1470_p1;
        sext_ln1345_224_reg_5105 <= sext_ln1345_224_fu_1530_p1;
        sext_ln1345_225_reg_5115 <= sext_ln1345_225_fu_1550_p1;
        sext_ln1345_226_reg_5125 <= sext_ln1345_226_fu_1570_p1;
        sext_ln1345_227_reg_5135 <= sext_ln1345_227_fu_1590_p1;
        sext_ln1345_229_reg_5150 <= sext_ln1345_229_fu_1630_p1;
        sext_ln1345_230_reg_5160 <= sext_ln1345_230_fu_1650_p1;
        sext_ln1345_231_reg_5170 <= sext_ln1345_231_fu_1670_p1;
        sext_ln1345_232_reg_5180 <= sext_ln1345_232_fu_1690_p1;
        sext_ln1345_233_reg_5190 <= sext_ln1345_233_fu_1710_p1;
        sext_ln1345_236_reg_5210 <= sext_ln1345_236_fu_1770_p1;
        sext_ln1345_237_reg_5220 <= sext_ln1345_237_fu_1790_p1;
        sext_ln1345_238_reg_5230 <= sext_ln1345_238_fu_1810_p1;
        sext_ln1345_239_reg_5240 <= sext_ln1345_239_fu_1830_p1;
        sext_ln1345_241_reg_5255 <= sext_ln1345_241_fu_1870_p1;
        sext_ln1345_242_reg_5265 <= sext_ln1345_242_fu_1890_p1;
        sext_ln1345_243_reg_5275 <= sext_ln1345_243_fu_1910_p1;
        sext_ln1345_244_reg_5285 <= sext_ln1345_244_fu_1930_p1;
        sext_ln1345_245_reg_5295 <= sext_ln1345_245_fu_1950_p1;
        tmp_517_reg_5315 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[50:48]}};
        tmp_518_reg_5320 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[68:66]}};
        tmp_519_reg_5325 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[86:84]}};
        tmp_520_reg_5330 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[104:102]}};
        tmp_522_reg_5340 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[140:138]}};
        tmp_523_reg_5345 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[158:156]}};
        tmp_524_reg_5350 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[176:174]}};
        tmp_525_reg_5355 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[194:192]}};
        tmp_526_reg_5360 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[212:210]}};
        tmp_530_reg_5375 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[53:51]}};
        tmp_531_reg_5380 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[71:69]}};
        tmp_532_reg_5385 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[89:87]}};
        tmp_533_reg_5390 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[107:105]}};
        tmp_535_reg_5400 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[143:141]}};
        tmp_536_reg_5405 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[161:159]}};
        tmp_537_reg_5410 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[179:177]}};
        tmp_538_reg_5415 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[197:195]}};
        tmp_539_reg_5420 <= {{attn_inst_matmul_gen_o_weight_arr_V_q0[215:213]}};
        trunc_ln145_146_reg_4786 <= {{cache_window_sm_dout[114:112]}};
        trunc_ln145_147_reg_4791 <= {{cache_window_sm_dout[122:120]}};
        trunc_ln145_148_reg_4796 <= {{cache_window_sm_dout[130:128]}};
        trunc_ln145_149_reg_4801 <= {{cache_window_sm_dout[138:136]}};
        trunc_ln145_151_reg_4806 <= {{cache_window_sm_dout[154:152]}};
        trunc_ln145_152_reg_4811 <= {{cache_window_sm_dout[162:160]}};
        trunc_ln145_153_reg_4816 <= {{cache_window_sm_dout[170:168]}};
        trunc_ln145_154_reg_4821 <= {{cache_window_sm_dout[178:176]}};
        trunc_ln145_155_reg_4826 <= {{cache_window_sm_dout[186:184]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln126_reg_4761 == 1'd1))) begin
        select_ln121_14_reg_4780 <= select_ln121_14_fu_717_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_reg_4693_pp0_iter1_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_466 <= tmp_546_fu_4589_p13;
    end
end

always @ (*) begin
    if ((icmp_ln120_reg_4693 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_557_p4 = add_ln122_reg_4770;
    end else begin
        ap_phi_mux_cit_phi_fu_557_p4 = cit_reg_553;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_545_p4 = select_ln121_15_reg_4751;
    end else begin
        ap_phi_mux_cot_phi_fu_545_p4 = cot_reg_541;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten20_phi_fu_522_p4 = add_ln120_reg_4736;
    end else begin
        ap_phi_mux_indvar_flatten20_phi_fu_522_p4 = indvar_flatten20_reg_518;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_534_p4 = select_ln121_16_reg_4775;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_534_p4 = indvar_flatten_reg_530;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        attn_inst_matmul_gen_o_bias_arr_V_address0 = zext_ln121_4_fu_639_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        attn_inst_matmul_gen_o_bias_arr_V_address0 = zext_ln121_fu_564_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        attn_inst_matmul_gen_o_bias_arr_V_address0 = 5'd0;
    end else begin
        attn_inst_matmul_gen_o_bias_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        attn_inst_matmul_gen_o_bias_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_o_bias_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        attn_inst_matmul_gen_o_weight_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_o_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4693 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln120_reg_4693 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln120_reg_4693 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_633_p2 = (indvar_flatten20_reg_518 + 16'd1);

assign add_ln121_4_fu_627_p2 = (ap_phi_mux_indvar_flatten_phi_fu_534_p4 + 11'd1);

assign add_ln121_fu_607_p2 = (select_ln120_fu_581_p3 + 6'd1);

assign add_ln122_fu_701_p2 = (select_ln121_reg_4723 + 5'd1);

assign add_ln215_fu_680_p2 = (tmp_cast_fu_664_p3 + zext_ln215_fu_677_p1);

assign add_ln691_332_fu_2446_p2 = ($signed(sext_ln691_332_fu_2442_p1) + $signed(trunc_ln691_fu_2399_p1));

assign add_ln691_333_fu_2452_p2 = ($signed(sext_ln151_4_fu_2415_p1) + $signed(sext_ln151_6_fu_2421_p1));

assign add_ln691_334_fu_2458_p2 = ($signed(add_ln691_333_fu_2452_p2) + $signed(sext_ln151_7_fu_2424_p1));

assign add_ln691_335_fu_4388_p2 = ($signed(sext_ln691_333_fu_4385_p1) + $signed(add_ln691_332_reg_5515));

assign add_ln691_336_fu_2464_p2 = ($signed(sext_ln151_fu_2403_p1) + $signed(sext_ln691_fu_2396_p1));

assign add_ln691_337_fu_2470_p2 = ($signed(add_ln691_336_fu_2464_p2) + $signed(sext_ln151_5_fu_2418_p1));

assign add_ln691_338_fu_2480_p2 = ($signed(sext_ln151_1_fu_2406_p1) + $signed(sext_ln151_3_fu_2412_p1));

assign add_ln691_339_fu_2490_p2 = ($signed(sext_ln151_2_fu_2409_p1) + $signed(sext_ln691_331_fu_2433_p1));

assign add_ln691_340_fu_2500_p2 = ($signed(sext_ln691_336_fu_2496_p1) + $signed(sext_ln691_335_fu_2486_p1));

assign add_ln691_341_fu_2506_p2 = ($signed(add_ln691_340_fu_2500_p2) + $signed(sext_ln691_334_fu_2476_p1));

assign add_ln691_342_fu_4396_p2 = ($signed(sext_ln691_337_fu_4393_p1) + $signed(add_ln691_335_fu_4388_p2));

assign add_ln691_343_fu_2558_p2 = ($signed(sext_ln151_18_fu_2549_p1) + $signed(sext_ln151_19_fu_2552_p1));

assign add_ln691_344_fu_2568_p2 = ($signed(sext_ln691_340_fu_2564_p1) + $signed(tmp_477_fu_2515_p4));

assign add_ln691_345_fu_2574_p2 = ($signed(sext_ln151_14_fu_2537_p1) + $signed(sext_ln151_16_fu_2543_p1));

assign add_ln691_346_fu_2580_p2 = ($signed(add_ln691_345_fu_2574_p2) + $signed(sext_ln151_17_fu_2546_p1));

assign add_ln691_347_fu_4405_p2 = ($signed(sext_ln691_341_fu_4402_p1) + $signed(add_ln691_344_reg_5530));

assign add_ln691_348_fu_2586_p2 = ($signed(sext_ln151_10_fu_2525_p1) + $signed(sext_ln691_338_fu_2512_p1));

assign add_ln691_349_fu_2592_p2 = ($signed(add_ln691_348_fu_2586_p2) + $signed(sext_ln151_15_fu_2540_p1));

assign add_ln691_350_fu_2602_p2 = ($signed(sext_ln151_11_fu_2528_p1) + $signed(sext_ln151_13_fu_2534_p1));

assign add_ln691_351_fu_2612_p2 = ($signed(sext_ln151_12_fu_2531_p1) + $signed(sext_ln691_339_fu_2555_p1));

assign add_ln691_352_fu_2622_p2 = ($signed(sext_ln691_344_fu_2618_p1) + $signed(sext_ln691_343_fu_2608_p1));

assign add_ln691_353_fu_2628_p2 = ($signed(add_ln691_352_fu_2622_p2) + $signed(sext_ln691_342_fu_2598_p1));

assign add_ln691_354_fu_4413_p2 = ($signed(sext_ln691_345_fu_4410_p1) + $signed(add_ln691_347_fu_4405_p2));

assign add_ln691_355_fu_2680_p2 = ($signed(sext_ln151_28_fu_2671_p1) + $signed(sext_ln151_29_fu_2674_p1));

assign add_ln691_356_fu_2690_p2 = ($signed(sext_ln691_348_fu_2686_p1) + $signed(tmp_490_fu_2637_p4));

assign add_ln691_357_fu_2696_p2 = ($signed(sext_ln151_24_fu_2659_p1) + $signed(sext_ln151_26_fu_2665_p1));

assign add_ln691_358_fu_2702_p2 = ($signed(add_ln691_357_fu_2696_p2) + $signed(sext_ln151_27_fu_2668_p1));

assign add_ln691_359_fu_4422_p2 = ($signed(sext_ln691_349_fu_4419_p1) + $signed(add_ln691_356_reg_5545));

assign add_ln691_360_fu_2708_p2 = ($signed(sext_ln151_20_fu_2647_p1) + $signed(sext_ln691_346_fu_2634_p1));

assign add_ln691_361_fu_2714_p2 = ($signed(add_ln691_360_fu_2708_p2) + $signed(sext_ln151_25_fu_2662_p1));

assign add_ln691_362_fu_2724_p2 = ($signed(sext_ln151_21_fu_2650_p1) + $signed(sext_ln151_23_fu_2656_p1));

assign add_ln691_363_fu_2734_p2 = ($signed(sext_ln151_22_fu_2653_p1) + $signed(sext_ln691_347_fu_2677_p1));

assign add_ln691_364_fu_2744_p2 = ($signed(sext_ln691_352_fu_2740_p1) + $signed(sext_ln691_351_fu_2730_p1));

assign add_ln691_365_fu_2750_p2 = ($signed(add_ln691_364_fu_2744_p2) + $signed(sext_ln691_350_fu_2720_p1));

assign add_ln691_366_fu_4430_p2 = ($signed(sext_ln691_353_fu_4427_p1) + $signed(add_ln691_359_fu_4422_p2));

assign add_ln691_367_fu_2802_p2 = ($signed(sext_ln151_38_fu_2793_p1) + $signed(sext_ln151_39_fu_2796_p1));

assign add_ln691_368_fu_2812_p2 = ($signed(sext_ln691_356_fu_2808_p1) + $signed(tmp_502_fu_2759_p4));

assign add_ln691_369_fu_2818_p2 = ($signed(sext_ln151_34_fu_2781_p1) + $signed(sext_ln151_36_fu_2787_p1));

assign add_ln691_370_fu_2824_p2 = ($signed(add_ln691_369_fu_2818_p2) + $signed(sext_ln151_37_fu_2790_p1));

assign add_ln691_371_fu_4439_p2 = ($signed(sext_ln691_357_fu_4436_p1) + $signed(add_ln691_368_reg_5560));

assign add_ln691_372_fu_2830_p2 = ($signed(sext_ln151_30_fu_2769_p1) + $signed(sext_ln691_354_fu_2756_p1));

assign add_ln691_373_fu_2836_p2 = ($signed(add_ln691_372_fu_2830_p2) + $signed(sext_ln151_35_fu_2784_p1));

assign add_ln691_374_fu_2846_p2 = ($signed(sext_ln151_31_fu_2772_p1) + $signed(sext_ln151_33_fu_2778_p1));

assign add_ln691_375_fu_2856_p2 = ($signed(sext_ln151_32_fu_2775_p1) + $signed(sext_ln691_355_fu_2799_p1));

assign add_ln691_376_fu_2866_p2 = ($signed(sext_ln691_360_fu_2862_p1) + $signed(sext_ln691_359_fu_2852_p1));

assign add_ln691_377_fu_2872_p2 = ($signed(add_ln691_376_fu_2866_p2) + $signed(sext_ln691_358_fu_2842_p1));

assign add_ln691_378_fu_4447_p2 = ($signed(sext_ln691_361_fu_4444_p1) + $signed(add_ln691_371_fu_4439_p2));

assign add_ln691_379_fu_3005_p2 = ($signed(sext_ln151_48_fu_2977_p1) + $signed(sext_ln151_49_fu_2989_p1));

assign add_ln691_380_fu_3015_p2 = ($signed(sext_ln691_364_fu_3011_p1) + $signed(tmp_515_fu_2881_p4));

assign add_ln691_381_fu_3021_p2 = ($signed(sext_ln151_44_fu_2938_p1) + $signed(sext_ln151_46_fu_2953_p1));

assign add_ln691_382_fu_3027_p2 = ($signed(add_ln691_381_fu_3021_p2) + $signed(sext_ln151_47_fu_2965_p1));

assign add_ln691_383_fu_4456_p2 = ($signed(sext_ln691_365_fu_4453_p1) + $signed(add_ln691_380_reg_5575));

assign add_ln691_384_fu_3033_p2 = ($signed(sext_ln151_40_fu_2891_p1) + $signed(sext_ln691_362_fu_2878_p1));

assign add_ln691_385_fu_3039_p2 = ($signed(add_ln691_384_fu_3033_p2) + $signed(sext_ln151_45_fu_2942_p1));

assign add_ln691_386_fu_3049_p2 = ($signed(sext_ln151_41_fu_2902_p1) + $signed(sext_ln151_43_fu_2926_p1));

assign add_ln691_387_fu_3059_p2 = ($signed(sext_ln151_42_fu_2914_p1) + $signed(sext_ln691_363_fu_3001_p1));

assign add_ln691_388_fu_3069_p2 = ($signed(sext_ln691_368_fu_3065_p1) + $signed(sext_ln691_367_fu_3055_p1));

assign add_ln691_389_fu_3075_p2 = ($signed(add_ln691_388_fu_3069_p2) + $signed(sext_ln691_366_fu_3045_p1));

assign add_ln691_390_fu_4464_p2 = ($signed(sext_ln691_369_fu_4461_p1) + $signed(add_ln691_383_fu_4456_p2));

assign add_ln691_391_fu_3208_p2 = ($signed(sext_ln151_58_fu_3180_p1) + $signed(sext_ln151_59_fu_3192_p1));

assign add_ln691_392_fu_3218_p2 = ($signed(sext_ln691_372_fu_3214_p1) + $signed(tmp_528_fu_3084_p4));

assign add_ln691_393_fu_3224_p2 = ($signed(sext_ln151_54_fu_3141_p1) + $signed(sext_ln151_56_fu_3156_p1));

assign add_ln691_394_fu_3230_p2 = ($signed(add_ln691_393_fu_3224_p2) + $signed(sext_ln151_57_fu_3168_p1));

assign add_ln691_395_fu_4473_p2 = ($signed(sext_ln691_373_fu_4470_p1) + $signed(add_ln691_392_reg_5590));

assign add_ln691_396_fu_3236_p2 = ($signed(sext_ln151_50_fu_3094_p1) + $signed(sext_ln691_370_fu_3081_p1));

assign add_ln691_397_fu_3242_p2 = ($signed(add_ln691_396_fu_3236_p2) + $signed(sext_ln151_55_fu_3145_p1));

assign add_ln691_398_fu_3252_p2 = ($signed(sext_ln151_51_fu_3105_p1) + $signed(sext_ln151_53_fu_3129_p1));

assign add_ln691_399_fu_3262_p2 = ($signed(sext_ln151_52_fu_3117_p1) + $signed(sext_ln691_371_fu_3204_p1));

assign add_ln691_400_fu_3272_p2 = ($signed(sext_ln691_376_fu_3268_p1) + $signed(sext_ln691_375_fu_3258_p1));

assign add_ln691_401_fu_3278_p2 = ($signed(add_ln691_400_fu_3272_p2) + $signed(sext_ln691_374_fu_3248_p1));

assign add_ln691_402_fu_4481_p2 = ($signed(sext_ln691_377_fu_4478_p1) + $signed(add_ln691_395_fu_4473_p2));

assign add_ln691_403_fu_3411_p2 = ($signed(sext_ln151_68_fu_3383_p1) + $signed(sext_ln151_69_fu_3395_p1));

assign add_ln691_404_fu_3421_p2 = ($signed(sext_ln691_380_fu_3417_p1) + $signed(tmp_540_fu_3287_p4));

assign add_ln691_405_fu_3427_p2 = ($signed(sext_ln151_64_fu_3344_p1) + $signed(sext_ln151_66_fu_3359_p1));

assign add_ln691_406_fu_3433_p2 = ($signed(add_ln691_405_fu_3427_p2) + $signed(sext_ln151_67_fu_3371_p1));

assign add_ln691_407_fu_4490_p2 = ($signed(sext_ln691_381_fu_4487_p1) + $signed(add_ln691_404_reg_5605));

assign add_ln691_408_fu_3439_p2 = ($signed(sext_ln151_60_fu_3297_p1) + $signed(sext_ln691_378_fu_3284_p1));

assign add_ln691_409_fu_3445_p2 = ($signed(add_ln691_408_fu_3439_p2) + $signed(sext_ln151_65_fu_3348_p1));

assign add_ln691_410_fu_3455_p2 = ($signed(sext_ln151_61_fu_3308_p1) + $signed(sext_ln151_63_fu_3332_p1));

assign add_ln691_411_fu_3465_p2 = ($signed(sext_ln151_62_fu_3320_p1) + $signed(sext_ln691_379_fu_3407_p1));

assign add_ln691_412_fu_3475_p2 = ($signed(sext_ln691_384_fu_3471_p1) + $signed(sext_ln691_383_fu_3461_p1));

assign add_ln691_413_fu_3481_p2 = ($signed(add_ln691_412_fu_3475_p2) + $signed(sext_ln691_382_fu_3451_p1));

assign add_ln691_414_fu_4498_p2 = ($signed(sext_ln691_385_fu_4495_p1) + $signed(add_ln691_407_fu_4490_p2));

assign add_ln691_415_fu_3587_p2 = ($signed(sext_ln151_78_fu_3565_p1) + $signed(sext_ln151_79_fu_3574_p1));

assign add_ln691_416_fu_3597_p2 = ($signed(sext_ln691_388_fu_3593_p1) + $signed(tmp_541_fu_3490_p4));

assign add_ln691_417_fu_3603_p2 = ($signed(sext_ln151_74_fu_3535_p1) + $signed(sext_ln151_76_fu_3547_p1));

assign add_ln691_418_fu_3609_p2 = ($signed(add_ln691_417_fu_3603_p2) + $signed(sext_ln151_77_fu_3556_p1));

assign add_ln691_419_fu_4507_p2 = ($signed(sext_ln691_389_fu_4504_p1) + $signed(add_ln691_416_reg_5620));

assign add_ln691_420_fu_3615_p2 = ($signed(sext_ln151_70_fu_3500_p1) + $signed(sext_ln691_386_fu_3487_p1));

assign add_ln691_421_fu_3621_p2 = ($signed(add_ln691_420_fu_3615_p2) + $signed(sext_ln151_75_fu_3539_p1));

assign add_ln691_422_fu_3631_p2 = ($signed(sext_ln151_71_fu_3508_p1) + $signed(sext_ln151_73_fu_3526_p1));

assign add_ln691_423_fu_3641_p2 = ($signed(sext_ln151_72_fu_3517_p1) + $signed(sext_ln691_387_fu_3583_p1));

assign add_ln691_424_fu_3651_p2 = ($signed(sext_ln691_392_fu_3647_p1) + $signed(sext_ln691_391_fu_3637_p1));

assign add_ln691_425_fu_3657_p2 = ($signed(add_ln691_424_fu_3651_p2) + $signed(sext_ln691_390_fu_3627_p1));

assign add_ln691_426_fu_4515_p2 = ($signed(sext_ln691_393_fu_4512_p1) + $signed(add_ln691_419_fu_4507_p2));

assign add_ln691_427_fu_3763_p2 = ($signed(sext_ln151_88_fu_3741_p1) + $signed(sext_ln151_89_fu_3750_p1));

assign add_ln691_428_fu_3773_p2 = ($signed(sext_ln691_396_fu_3769_p1) + $signed(tmp_542_fu_3666_p4));

assign add_ln691_429_fu_3779_p2 = ($signed(sext_ln151_84_fu_3711_p1) + $signed(sext_ln151_86_fu_3723_p1));

assign add_ln691_430_fu_3785_p2 = ($signed(add_ln691_429_fu_3779_p2) + $signed(sext_ln151_87_fu_3732_p1));

assign add_ln691_431_fu_4524_p2 = ($signed(sext_ln691_397_fu_4521_p1) + $signed(add_ln691_428_reg_5635));

assign add_ln691_432_fu_3791_p2 = ($signed(sext_ln151_80_fu_3676_p1) + $signed(sext_ln691_394_fu_3663_p1));

assign add_ln691_433_fu_3797_p2 = ($signed(add_ln691_432_fu_3791_p2) + $signed(sext_ln151_85_fu_3715_p1));

assign add_ln691_434_fu_3807_p2 = ($signed(sext_ln151_81_fu_3684_p1) + $signed(sext_ln151_83_fu_3702_p1));

assign add_ln691_435_fu_3817_p2 = ($signed(sext_ln151_82_fu_3693_p1) + $signed(sext_ln691_395_fu_3759_p1));

assign add_ln691_436_fu_3827_p2 = ($signed(sext_ln691_400_fu_3823_p1) + $signed(sext_ln691_399_fu_3813_p1));

assign add_ln691_437_fu_3833_p2 = ($signed(add_ln691_436_fu_3827_p2) + $signed(sext_ln691_398_fu_3803_p1));

assign add_ln691_438_fu_4532_p2 = ($signed(sext_ln691_401_fu_4529_p1) + $signed(add_ln691_431_fu_4524_p2));

assign add_ln691_439_fu_3939_p2 = ($signed(sext_ln151_98_fu_3917_p1) + $signed(sext_ln151_99_fu_3926_p1));

assign add_ln691_440_fu_3949_p2 = ($signed(sext_ln691_404_fu_3945_p1) + $signed(tmp_543_fu_3842_p4));

assign add_ln691_441_fu_3955_p2 = ($signed(sext_ln151_94_fu_3887_p1) + $signed(sext_ln151_96_fu_3899_p1));

assign add_ln691_442_fu_3961_p2 = ($signed(add_ln691_441_fu_3955_p2) + $signed(sext_ln151_97_fu_3908_p1));

assign add_ln691_443_fu_4541_p2 = ($signed(sext_ln691_405_fu_4538_p1) + $signed(add_ln691_440_reg_5650));

assign add_ln691_444_fu_3967_p2 = ($signed(sext_ln151_90_fu_3852_p1) + $signed(sext_ln691_402_fu_3839_p1));

assign add_ln691_445_fu_3973_p2 = ($signed(add_ln691_444_fu_3967_p2) + $signed(sext_ln151_95_fu_3891_p1));

assign add_ln691_446_fu_3983_p2 = ($signed(sext_ln151_91_fu_3860_p1) + $signed(sext_ln151_93_fu_3878_p1));

assign add_ln691_447_fu_3993_p2 = ($signed(sext_ln151_92_fu_3869_p1) + $signed(sext_ln691_403_fu_3935_p1));

assign add_ln691_448_fu_4003_p2 = ($signed(sext_ln691_408_fu_3999_p1) + $signed(sext_ln691_407_fu_3989_p1));

assign add_ln691_449_fu_4009_p2 = ($signed(add_ln691_448_fu_4003_p2) + $signed(sext_ln691_406_fu_3979_p1));

assign add_ln691_450_fu_4549_p2 = ($signed(sext_ln691_409_fu_4546_p1) + $signed(add_ln691_443_fu_4541_p2));

assign add_ln691_451_fu_4124_p2 = ($signed(sext_ln151_108_fu_4100_p1) + $signed(sext_ln151_109_fu_4110_p1));

assign add_ln691_452_fu_4134_p2 = ($signed(sext_ln691_412_fu_4130_p1) + $signed(tmp_544_fu_4018_p4));

assign add_ln691_453_fu_4140_p2 = ($signed(sext_ln151_104_fu_4067_p1) + $signed(sext_ln151_106_fu_4080_p1));

assign add_ln691_454_fu_4146_p2 = ($signed(add_ln691_453_fu_4140_p2) + $signed(sext_ln151_107_fu_4090_p1));

assign add_ln691_455_fu_4558_p2 = ($signed(sext_ln691_413_fu_4555_p1) + $signed(add_ln691_452_reg_5665));

assign add_ln691_456_fu_4152_p2 = ($signed(sext_ln151_100_fu_4028_p1) + $signed(sext_ln691_410_fu_4015_p1));

assign add_ln691_457_fu_4158_p2 = ($signed(add_ln691_456_fu_4152_p2) + $signed(sext_ln151_105_fu_4071_p1));

assign add_ln691_458_fu_4168_p2 = ($signed(sext_ln151_101_fu_4037_p1) + $signed(sext_ln151_103_fu_4057_p1));

assign add_ln691_459_fu_4178_p2 = ($signed(sext_ln151_102_fu_4047_p1) + $signed(sext_ln691_411_fu_4120_p1));

assign add_ln691_460_fu_4188_p2 = ($signed(sext_ln691_416_fu_4184_p1) + $signed(sext_ln691_415_fu_4174_p1));

assign add_ln691_461_fu_4194_p2 = ($signed(add_ln691_460_fu_4188_p2) + $signed(sext_ln691_414_fu_4164_p1));

assign add_ln691_462_fu_4566_p2 = ($signed(sext_ln691_417_fu_4563_p1) + $signed(add_ln691_455_fu_4558_p2));

assign add_ln691_463_fu_4309_p2 = ($signed(sext_ln151_118_fu_4285_p1) + $signed(sext_ln151_119_fu_4295_p1));

assign add_ln691_464_fu_4319_p2 = ($signed(sext_ln691_420_fu_4315_p1) + $signed(tmp_545_fu_4203_p4));

assign add_ln691_465_fu_4325_p2 = ($signed(sext_ln151_114_fu_4252_p1) + $signed(sext_ln151_116_fu_4265_p1));

assign add_ln691_466_fu_4331_p2 = ($signed(add_ln691_465_fu_4325_p2) + $signed(sext_ln151_117_fu_4275_p1));

assign add_ln691_467_fu_4575_p2 = ($signed(sext_ln691_421_fu_4572_p1) + $signed(add_ln691_464_reg_5680));

assign add_ln691_468_fu_4337_p2 = ($signed(sext_ln151_110_fu_4213_p1) + $signed(sext_ln691_418_fu_4200_p1));

assign add_ln691_469_fu_4343_p2 = ($signed(add_ln691_468_fu_4337_p2) + $signed(sext_ln151_115_fu_4256_p1));

assign add_ln691_470_fu_4353_p2 = ($signed(sext_ln151_111_fu_4222_p1) + $signed(sext_ln151_113_fu_4242_p1));

assign add_ln691_471_fu_4363_p2 = ($signed(sext_ln151_112_fu_4232_p1) + $signed(sext_ln691_419_fu_4305_p1));

assign add_ln691_472_fu_4373_p2 = ($signed(sext_ln691_424_fu_4369_p1) + $signed(sext_ln691_423_fu_4359_p1));

assign add_ln691_473_fu_4379_p2 = ($signed(add_ln691_472_fu_4373_p2) + $signed(sext_ln691_422_fu_4349_p1));

assign add_ln691_474_fu_4583_p2 = ($signed(sext_ln691_425_fu_4580_p1) + $signed(add_ln691_467_fu_4575_p2));

assign add_ln691_fu_2436_p2 = ($signed(sext_ln151_8_fu_2427_p1) + $signed(sext_ln151_9_fu_2430_p1));

assign and_ln120_fu_601_p2 = (xor_ln120_fu_589_p2 & icmp_ln122_fu_595_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4693 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4693 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4693 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln120_reg_4693 == 1'd0) & (cache_window_sm_empty_n == 1'b0));
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter2 = ((icmp_ln161_reg_4766_pp0_iter1_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_o_weight_arr_V_address0 = zext_ln215_4_fu_686_p1;

assign icmp_ln120_fu_569_p2 = ((ap_phi_mux_indvar_flatten20_phi_fu_522_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_575_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_534_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_595_p2 = ((ap_phi_mux_cit_phi_fu_557_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_691_p2 = ((select_ln121_reg_4723 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_696_p2 = ((select_ln121_reg_4723 == 5'd15) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_547_fu_4622_p24;

assign mul_ln1345_331_fu_994_p0 = sext_ln1345_189_fu_990_p1;

assign mul_ln1345_331_fu_994_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_332_fu_1018_p1 = sext_ln1345_190_fu_1010_p1;

assign mul_ln1345_333_fu_1042_p1 = sext_ln1345_192_fu_1034_p1;

assign mul_ln1345_334_fu_1066_p1 = sext_ln1345_194_fu_1058_p1;

assign mul_ln1345_335_fu_1090_p1 = sext_ln1345_196_fu_1082_p1;

assign mul_ln1345_336_fu_1114_p0 = sext_ln1345_199_fu_1110_p1;

assign mul_ln1345_336_fu_1114_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_337_fu_1138_p1 = sext_ln1345_200_fu_1130_p1;

assign mul_ln1345_338_fu_1162_p1 = sext_ln1345_202_fu_1154_p1;

assign mul_ln1345_339_fu_1186_p1 = sext_ln1345_204_fu_1178_p1;

assign mul_ln1345_340_fu_1210_p1 = sext_ln1345_206_fu_1202_p1;

assign mul_ln1345_341_fu_1234_p1 = sext_ln1345_208_fu_1226_p1;

assign mul_ln1345_342_fu_1254_p0 = sext_ln1345_210_fu_1250_p1;

assign mul_ln1345_342_fu_1254_p1 = sext_ln1345_fu_962_p1;

assign mul_ln1345_343_fu_1274_p0 = sext_ln1345_211_fu_1270_p1;

assign mul_ln1345_343_fu_1274_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_344_fu_1294_p1 = sext_ln1345_190_fu_1010_p1;

assign mul_ln1345_345_fu_1314_p1 = sext_ln1345_192_fu_1034_p1;

assign mul_ln1345_346_fu_1334_p1 = sext_ln1345_194_fu_1058_p1;

assign mul_ln1345_347_fu_1354_p1 = sext_ln1345_196_fu_1082_p1;

assign mul_ln1345_348_fu_1374_p0 = sext_ln1345_216_fu_1370_p1;

assign mul_ln1345_348_fu_1374_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_349_fu_1394_p1 = sext_ln1345_200_fu_1130_p1;

assign mul_ln1345_350_fu_1414_p1 = sext_ln1345_202_fu_1154_p1;

assign mul_ln1345_351_fu_1434_p1 = sext_ln1345_204_fu_1178_p1;

assign mul_ln1345_352_fu_1454_p1 = sext_ln1345_206_fu_1202_p1;

assign mul_ln1345_353_fu_1474_p1 = sext_ln1345_208_fu_1226_p1;

assign mul_ln1345_354_fu_1494_p0 = sext_ln1345_222_fu_1490_p1;

assign mul_ln1345_354_fu_1494_p1 = sext_ln1345_fu_962_p1;

assign mul_ln1345_355_fu_1514_p0 = sext_ln1345_223_fu_1510_p1;

assign mul_ln1345_355_fu_1514_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_356_fu_1534_p1 = sext_ln1345_190_fu_1010_p1;

assign mul_ln1345_357_fu_1554_p1 = sext_ln1345_192_fu_1034_p1;

assign mul_ln1345_358_fu_1574_p1 = sext_ln1345_194_fu_1058_p1;

assign mul_ln1345_359_fu_1594_p1 = sext_ln1345_196_fu_1082_p1;

assign mul_ln1345_360_fu_1614_p0 = sext_ln1345_228_fu_1610_p1;

assign mul_ln1345_360_fu_1614_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_361_fu_1634_p1 = sext_ln1345_200_fu_1130_p1;

assign mul_ln1345_362_fu_1654_p1 = sext_ln1345_202_fu_1154_p1;

assign mul_ln1345_363_fu_1674_p1 = sext_ln1345_204_fu_1178_p1;

assign mul_ln1345_364_fu_1694_p1 = sext_ln1345_206_fu_1202_p1;

assign mul_ln1345_365_fu_1714_p1 = sext_ln1345_208_fu_1226_p1;

assign mul_ln1345_366_fu_1734_p0 = sext_ln1345_234_fu_1730_p1;

assign mul_ln1345_366_fu_1734_p1 = sext_ln1345_fu_962_p1;

assign mul_ln1345_367_fu_1754_p0 = sext_ln1345_235_fu_1750_p1;

assign mul_ln1345_367_fu_1754_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_368_fu_1774_p1 = sext_ln1345_190_fu_1010_p1;

assign mul_ln1345_369_fu_1794_p1 = sext_ln1345_192_fu_1034_p1;

assign mul_ln1345_370_fu_1814_p1 = sext_ln1345_194_fu_1058_p1;

assign mul_ln1345_371_fu_1834_p1 = sext_ln1345_196_fu_1082_p1;

assign mul_ln1345_372_fu_1854_p0 = sext_ln1345_240_fu_1850_p1;

assign mul_ln1345_372_fu_1854_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_373_fu_1874_p1 = sext_ln1345_200_fu_1130_p1;

assign mul_ln1345_374_fu_1894_p1 = sext_ln1345_202_fu_1154_p1;

assign mul_ln1345_375_fu_1914_p1 = sext_ln1345_204_fu_1178_p1;

assign mul_ln1345_376_fu_1934_p1 = sext_ln1345_206_fu_1202_p1;

assign mul_ln1345_377_fu_1954_p1 = sext_ln1345_208_fu_1226_p1;

assign mul_ln1345_378_fu_1974_p0 = sext_ln1345_246_fu_1970_p1;

assign mul_ln1345_378_fu_1974_p1 = sext_ln1345_fu_962_p1;

assign mul_ln1345_379_fu_1994_p0 = sext_ln1345_247_fu_1990_p1;

assign mul_ln1345_379_fu_1994_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_380_fu_2897_p0 = sext_ln1345_248_fu_2894_p1;

assign mul_ln1345_380_fu_2897_p1 = sext_ln1345_190_reg_4841;

assign mul_ln1345_381_fu_2909_p0 = sext_ln1345_249_fu_2906_p1;

assign mul_ln1345_381_fu_2909_p1 = sext_ln1345_192_reg_4857;

assign mul_ln1345_382_fu_2921_p0 = sext_ln1345_250_fu_2918_p1;

assign mul_ln1345_382_fu_2921_p1 = sext_ln1345_194_reg_4873;

assign mul_ln1345_383_fu_2933_p0 = sext_ln1345_251_fu_2930_p1;

assign mul_ln1345_383_fu_2933_p1 = sext_ln1345_196_reg_4889;

assign mul_ln1345_384_fu_2054_p0 = sext_ln1345_252_fu_2050_p1;

assign mul_ln1345_384_fu_2054_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_385_fu_2948_p0 = sext_ln1345_253_fu_2945_p1;

assign mul_ln1345_385_fu_2948_p1 = sext_ln1345_200_reg_4910;

assign mul_ln1345_386_fu_2960_p0 = sext_ln1345_254_fu_2957_p1;

assign mul_ln1345_386_fu_2960_p1 = sext_ln1345_202_reg_4926;

assign mul_ln1345_387_fu_2972_p0 = sext_ln1345_255_fu_2969_p1;

assign mul_ln1345_387_fu_2972_p1 = sext_ln1345_204_reg_4942;

assign mul_ln1345_388_fu_2984_p0 = sext_ln1345_256_fu_2981_p1;

assign mul_ln1345_388_fu_2984_p1 = sext_ln1345_206_reg_4958;

assign mul_ln1345_389_fu_2996_p0 = sext_ln1345_257_fu_2993_p1;

assign mul_ln1345_389_fu_2996_p1 = sext_ln1345_208_reg_4974;

assign mul_ln1345_390_fu_2124_p0 = sext_ln1345_258_fu_2120_p1;

assign mul_ln1345_390_fu_2124_p1 = sext_ln1345_fu_962_p1;

assign mul_ln1345_391_fu_2144_p0 = sext_ln1345_259_fu_2140_p1;

assign mul_ln1345_391_fu_2144_p1 = sext_ln1345_188_fu_986_p1;

assign mul_ln1345_392_fu_3100_p0 = sext_ln1345_260_fu_3097_p1;

assign mul_ln1345_392_fu_3100_p1 = sext_ln1345_190_reg_4841;

assign mul_ln1345_393_fu_3112_p0 = sext_ln1345_261_fu_3109_p1;

assign mul_ln1345_393_fu_3112_p1 = sext_ln1345_192_reg_4857;

assign mul_ln1345_394_fu_3124_p0 = sext_ln1345_262_fu_3121_p1;

assign mul_ln1345_394_fu_3124_p1 = sext_ln1345_194_reg_4873;

assign mul_ln1345_395_fu_3136_p0 = sext_ln1345_263_fu_3133_p1;

assign mul_ln1345_395_fu_3136_p1 = sext_ln1345_196_reg_4889;

assign mul_ln1345_396_fu_2204_p0 = sext_ln1345_264_fu_2200_p1;

assign mul_ln1345_396_fu_2204_p1 = sext_ln1345_198_fu_1106_p1;

assign mul_ln1345_397_fu_3151_p0 = sext_ln1345_265_fu_3148_p1;

assign mul_ln1345_397_fu_3151_p1 = sext_ln1345_200_reg_4910;

assign mul_ln1345_398_fu_3163_p0 = sext_ln1345_266_fu_3160_p1;

assign mul_ln1345_398_fu_3163_p1 = sext_ln1345_202_reg_4926;

assign mul_ln1345_399_fu_3175_p0 = sext_ln1345_267_fu_3172_p1;

assign mul_ln1345_399_fu_3175_p1 = sext_ln1345_204_reg_4942;

assign mul_ln1345_400_fu_3187_p0 = sext_ln1345_268_fu_3184_p1;

assign mul_ln1345_400_fu_3187_p1 = sext_ln1345_206_reg_4958;

assign mul_ln1345_401_fu_3199_p0 = sext_ln1345_269_fu_3196_p1;

assign mul_ln1345_401_fu_3199_p1 = sext_ln1345_208_reg_4974;

assign mul_ln1345_402_fu_2264_p0 = sext_ln1345_187_fu_966_p1;

assign mul_ln1345_402_fu_2264_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_403_fu_2274_p0 = sext_ln1345_189_fu_990_p1;

assign mul_ln1345_403_fu_2274_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_404_fu_3303_p0 = sext_ln1345_191_reg_4847;

assign mul_ln1345_404_fu_3303_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_405_fu_3315_p0 = sext_ln1345_193_reg_4863;

assign mul_ln1345_405_fu_3315_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_406_fu_3327_p0 = sext_ln1345_195_reg_4879;

assign mul_ln1345_406_fu_3327_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_407_fu_3339_p0 = sext_ln1345_197_reg_4895;

assign mul_ln1345_407_fu_3339_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_408_fu_2284_p0 = sext_ln1345_199_fu_1110_p1;

assign mul_ln1345_408_fu_2284_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_409_fu_3354_p0 = sext_ln1345_201_reg_4916;

assign mul_ln1345_409_fu_3354_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_410_fu_3366_p0 = sext_ln1345_203_reg_4932;

assign mul_ln1345_410_fu_3366_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_411_fu_3378_p0 = sext_ln1345_205_reg_4948;

assign mul_ln1345_411_fu_3378_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_412_fu_3390_p0 = sext_ln1345_207_reg_4964;

assign mul_ln1345_412_fu_3390_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_413_fu_3402_p0 = sext_ln1345_209_reg_4980;

assign mul_ln1345_413_fu_3402_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_414_fu_2290_p0 = sext_ln1345_210_fu_1250_p1;

assign mul_ln1345_414_fu_2290_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_415_fu_2296_p0 = sext_ln1345_211_fu_1270_p1;

assign mul_ln1345_415_fu_2296_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_416_fu_3503_p0 = sext_ln1345_212_reg_5000;

assign mul_ln1345_416_fu_3503_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_417_fu_3512_p0 = sext_ln1345_213_reg_5010;

assign mul_ln1345_417_fu_3512_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_418_fu_3521_p0 = sext_ln1345_214_reg_5020;

assign mul_ln1345_418_fu_3521_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_419_fu_3530_p0 = sext_ln1345_215_reg_5030;

assign mul_ln1345_419_fu_3530_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_420_fu_2302_p0 = sext_ln1345_216_fu_1370_p1;

assign mul_ln1345_420_fu_2302_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_421_fu_3542_p0 = sext_ln1345_217_reg_5045;

assign mul_ln1345_421_fu_3542_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_422_fu_3551_p0 = sext_ln1345_218_reg_5055;

assign mul_ln1345_422_fu_3551_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_423_fu_3560_p0 = sext_ln1345_219_reg_5065;

assign mul_ln1345_423_fu_3560_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_424_fu_3569_p0 = sext_ln1345_220_reg_5075;

assign mul_ln1345_424_fu_3569_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_425_fu_3578_p0 = sext_ln1345_221_reg_5085;

assign mul_ln1345_425_fu_3578_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_426_fu_2308_p0 = sext_ln1345_222_fu_1490_p1;

assign mul_ln1345_426_fu_2308_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_427_fu_2314_p0 = sext_ln1345_223_fu_1510_p1;

assign mul_ln1345_427_fu_2314_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_428_fu_3679_p0 = sext_ln1345_224_reg_5105;

assign mul_ln1345_428_fu_3679_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_429_fu_3688_p0 = sext_ln1345_225_reg_5115;

assign mul_ln1345_429_fu_3688_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_430_fu_3697_p0 = sext_ln1345_226_reg_5125;

assign mul_ln1345_430_fu_3697_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_431_fu_3706_p0 = sext_ln1345_227_reg_5135;

assign mul_ln1345_431_fu_3706_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_432_fu_2320_p0 = sext_ln1345_228_fu_1610_p1;

assign mul_ln1345_432_fu_2320_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_433_fu_3718_p0 = sext_ln1345_229_reg_5150;

assign mul_ln1345_433_fu_3718_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_434_fu_3727_p0 = sext_ln1345_230_reg_5160;

assign mul_ln1345_434_fu_3727_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_435_fu_3736_p0 = sext_ln1345_231_reg_5170;

assign mul_ln1345_435_fu_3736_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_436_fu_3745_p0 = sext_ln1345_232_reg_5180;

assign mul_ln1345_436_fu_3745_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_437_fu_3754_p0 = sext_ln1345_233_reg_5190;

assign mul_ln1345_437_fu_3754_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_438_fu_2326_p0 = sext_ln1345_234_fu_1730_p1;

assign mul_ln1345_438_fu_2326_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_439_fu_2332_p0 = sext_ln1345_235_fu_1750_p1;

assign mul_ln1345_439_fu_2332_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_440_fu_3855_p0 = sext_ln1345_236_reg_5210;

assign mul_ln1345_440_fu_3855_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_441_fu_3864_p0 = sext_ln1345_237_reg_5220;

assign mul_ln1345_441_fu_3864_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_442_fu_3873_p0 = sext_ln1345_238_reg_5230;

assign mul_ln1345_442_fu_3873_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_443_fu_3882_p0 = sext_ln1345_239_reg_5240;

assign mul_ln1345_443_fu_3882_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_444_fu_2338_p0 = sext_ln1345_240_fu_1850_p1;

assign mul_ln1345_444_fu_2338_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_445_fu_3894_p0 = sext_ln1345_241_reg_5255;

assign mul_ln1345_445_fu_3894_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_446_fu_3903_p0 = sext_ln1345_242_reg_5265;

assign mul_ln1345_446_fu_3903_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_447_fu_3912_p0 = sext_ln1345_243_reg_5275;

assign mul_ln1345_447_fu_3912_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_448_fu_3921_p0 = sext_ln1345_244_reg_5285;

assign mul_ln1345_448_fu_3921_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_449_fu_3930_p0 = sext_ln1345_245_reg_5295;

assign mul_ln1345_449_fu_3930_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_450_fu_2344_p0 = sext_ln1345_246_fu_1970_p1;

assign mul_ln1345_450_fu_2344_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_451_fu_2350_p0 = sext_ln1345_247_fu_1990_p1;

assign mul_ln1345_451_fu_2350_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_452_fu_4031_p0 = sext_ln1345_248_fu_2894_p1;

assign mul_ln1345_452_fu_4031_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_453_fu_4041_p0 = sext_ln1345_249_fu_2906_p1;

assign mul_ln1345_453_fu_4041_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_454_fu_4051_p0 = sext_ln1345_250_fu_2918_p1;

assign mul_ln1345_454_fu_4051_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_455_fu_4061_p0 = sext_ln1345_251_fu_2930_p1;

assign mul_ln1345_455_fu_4061_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_456_fu_2356_p0 = sext_ln1345_252_fu_2050_p1;

assign mul_ln1345_456_fu_2356_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_457_fu_4074_p0 = sext_ln1345_253_fu_2945_p1;

assign mul_ln1345_457_fu_4074_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_458_fu_4084_p0 = sext_ln1345_254_fu_2957_p1;

assign mul_ln1345_458_fu_4084_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_459_fu_4094_p0 = sext_ln1345_255_fu_2969_p1;

assign mul_ln1345_459_fu_4094_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_460_fu_4104_p0 = sext_ln1345_256_fu_2981_p1;

assign mul_ln1345_460_fu_4104_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_461_fu_4114_p0 = sext_ln1345_257_fu_2993_p1;

assign mul_ln1345_461_fu_4114_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_462_fu_2362_p0 = sext_ln1345_258_fu_2120_p1;

assign mul_ln1345_462_fu_2362_p1 = sext_ln1345_270_fu_2260_p1;

assign mul_ln1345_463_fu_2368_p0 = sext_ln1345_259_fu_2140_p1;

assign mul_ln1345_463_fu_2368_p1 = sext_ln1345_271_fu_2270_p1;

assign mul_ln1345_464_fu_4216_p0 = sext_ln1345_260_fu_3097_p1;

assign mul_ln1345_464_fu_4216_p1 = sext_ln1345_272_fu_3300_p1;

assign mul_ln1345_465_fu_4226_p0 = sext_ln1345_261_fu_3109_p1;

assign mul_ln1345_465_fu_4226_p1 = sext_ln1345_273_fu_3312_p1;

assign mul_ln1345_466_fu_4236_p0 = sext_ln1345_262_fu_3121_p1;

assign mul_ln1345_466_fu_4236_p1 = sext_ln1345_274_fu_3324_p1;

assign mul_ln1345_467_fu_4246_p0 = sext_ln1345_263_fu_3133_p1;

assign mul_ln1345_467_fu_4246_p1 = sext_ln1345_275_fu_3336_p1;

assign mul_ln1345_468_fu_2374_p0 = sext_ln1345_264_fu_2200_p1;

assign mul_ln1345_468_fu_2374_p1 = sext_ln1345_276_fu_2280_p1;

assign mul_ln1345_469_fu_4259_p0 = sext_ln1345_265_fu_3148_p1;

assign mul_ln1345_469_fu_4259_p1 = sext_ln1345_277_fu_3351_p1;

assign mul_ln1345_470_fu_4269_p0 = sext_ln1345_266_fu_3160_p1;

assign mul_ln1345_470_fu_4269_p1 = sext_ln1345_278_fu_3363_p1;

assign mul_ln1345_471_fu_4279_p0 = sext_ln1345_267_fu_3172_p1;

assign mul_ln1345_471_fu_4279_p1 = sext_ln1345_279_fu_3375_p1;

assign mul_ln1345_472_fu_4289_p0 = sext_ln1345_268_fu_3184_p1;

assign mul_ln1345_472_fu_4289_p1 = sext_ln1345_280_fu_3387_p1;

assign mul_ln1345_473_fu_4299_p0 = sext_ln1345_269_fu_3196_p1;

assign mul_ln1345_473_fu_4299_p1 = sext_ln1345_281_fu_3399_p1;

assign mul_ln1345_fu_970_p0 = sext_ln1345_187_fu_966_p1;

assign mul_ln1345_fu_970_p1 = sext_ln1345_fu_962_p1;

assign or_ln121_fu_613_p2 = (icmp_ln121_fu_575_p2 | and_ln120_fu_601_p2);

assign select_ln120_7_fu_712_p3 = ((icmp_ln121_reg_4697[0:0] == 1'b1) ? attn_inst_matmul_gen_o_bias_arr_V_load_1_reg_4683 : attn_inst_matmul_gen_o_bias_arr_V_load_reg_4741);

assign select_ln120_8_fu_650_p3 = ((icmp_ln121_reg_4697[0:0] == 1'b1) ? 5'd0 : trunc_ln215_7_fu_646_p1);

assign select_ln120_fu_581_p3 = ((icmp_ln121_fu_575_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cot_phi_fu_545_p4);

assign select_ln121_13_fu_657_p3 = ((and_ln120_reg_4709[0:0] == 1'b1) ? trunc_ln215_fu_643_p1 : select_ln120_8_fu_650_p3);

assign select_ln121_14_fu_717_p3 = ((and_ln120_reg_4709[0:0] == 1'b1) ? attn_inst_matmul_gen_o_bias_arr_V_q0 : select_ln120_7_fu_712_p3);

assign select_ln121_15_fu_672_p3 = ((and_ln120_reg_4709[0:0] == 1'b1) ? add_ln121_reg_4716 : select_ln120_reg_4704);

assign select_ln121_16_fu_706_p3 = ((icmp_ln121_reg_4697[0:0] == 1'b1) ? 11'd1 : add_ln121_4_reg_4731);

assign select_ln121_fu_619_p3 = ((or_ln121_fu_613_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cit_phi_fu_557_p4);

assign select_ln126_fu_2389_p3 = ((icmp_ln126_reg_4761[0:0] == 1'b1) ? vec_o_data_M_elems_V_fu_2383_p3 : vec_o_data_M_elems_V_2_fu_466);

assign sext_ln1345_187_fu_966_p1 = $signed(trunc_ln215_8_fu_958_p1);

assign sext_ln1345_188_fu_986_p1 = $signed(trunc_ln145_134_fu_728_p4);

assign sext_ln1345_189_fu_990_p1 = $signed(tmp_465_fu_976_p4);

assign sext_ln1345_190_fu_1010_p1 = $signed(trunc_ln145_135_fu_738_p4);

assign sext_ln1345_191_fu_1014_p1 = tmp_466_fu_1000_p4;

assign sext_ln1345_192_fu_1034_p1 = $signed(trunc_ln145_s_fu_748_p4);

assign sext_ln1345_193_fu_1038_p1 = tmp_467_fu_1024_p4;

assign sext_ln1345_194_fu_1058_p1 = $signed(trunc_ln145_136_fu_758_p4);

assign sext_ln1345_195_fu_1062_p1 = tmp_468_fu_1048_p4;

assign sext_ln1345_196_fu_1082_p1 = $signed(trunc_ln145_137_fu_768_p4);

assign sext_ln1345_197_fu_1086_p1 = tmp_469_fu_1072_p4;

assign sext_ln1345_198_fu_1106_p1 = $signed(trunc_ln145_138_fu_778_p4);

assign sext_ln1345_199_fu_1110_p1 = $signed(tmp_470_fu_1096_p4);

assign sext_ln1345_200_fu_1130_p1 = $signed(trunc_ln145_139_fu_788_p4);

assign sext_ln1345_201_fu_1134_p1 = tmp_471_fu_1120_p4;

assign sext_ln1345_202_fu_1154_p1 = $signed(trunc_ln145_140_fu_798_p4);

assign sext_ln1345_203_fu_1158_p1 = tmp_472_fu_1144_p4;

assign sext_ln1345_204_fu_1178_p1 = $signed(trunc_ln145_141_fu_808_p4);

assign sext_ln1345_205_fu_1182_p1 = tmp_473_fu_1168_p4;

assign sext_ln1345_206_fu_1202_p1 = $signed(trunc_ln145_142_fu_818_p4);

assign sext_ln1345_207_fu_1206_p1 = tmp_474_fu_1192_p4;

assign sext_ln1345_208_fu_1226_p1 = $signed(trunc_ln145_143_fu_828_p4);

assign sext_ln1345_209_fu_1230_p1 = tmp_475_fu_1216_p4;

assign sext_ln1345_210_fu_1250_p1 = $signed(tmp_476_fu_1240_p4);

assign sext_ln1345_211_fu_1270_p1 = $signed(tmp_478_fu_1260_p4);

assign sext_ln1345_212_fu_1290_p1 = tmp_479_fu_1280_p4;

assign sext_ln1345_213_fu_1310_p1 = tmp_480_fu_1300_p4;

assign sext_ln1345_214_fu_1330_p1 = tmp_481_fu_1320_p4;

assign sext_ln1345_215_fu_1350_p1 = tmp_482_fu_1340_p4;

assign sext_ln1345_216_fu_1370_p1 = $signed(tmp_483_fu_1360_p4);

assign sext_ln1345_217_fu_1390_p1 = tmp_484_fu_1380_p4;

assign sext_ln1345_218_fu_1410_p1 = tmp_485_fu_1400_p4;

assign sext_ln1345_219_fu_1430_p1 = tmp_486_fu_1420_p4;

assign sext_ln1345_220_fu_1450_p1 = tmp_487_fu_1440_p4;

assign sext_ln1345_221_fu_1470_p1 = tmp_488_fu_1460_p4;

assign sext_ln1345_222_fu_1490_p1 = $signed(tmp_489_fu_1480_p4);

assign sext_ln1345_223_fu_1510_p1 = $signed(tmp_491_fu_1500_p4);

assign sext_ln1345_224_fu_1530_p1 = tmp_492_fu_1520_p4;

assign sext_ln1345_225_fu_1550_p1 = tmp_493_fu_1540_p4;

assign sext_ln1345_226_fu_1570_p1 = tmp_494_fu_1560_p4;

assign sext_ln1345_227_fu_1590_p1 = tmp_495_fu_1580_p4;

assign sext_ln1345_228_fu_1610_p1 = $signed(tmp_496_fu_1600_p4);

assign sext_ln1345_229_fu_1630_p1 = tmp_497_fu_1620_p4;

assign sext_ln1345_230_fu_1650_p1 = tmp_s_fu_1640_p4;

assign sext_ln1345_231_fu_1670_p1 = tmp_498_fu_1660_p4;

assign sext_ln1345_232_fu_1690_p1 = tmp_499_fu_1680_p4;

assign sext_ln1345_233_fu_1710_p1 = tmp_500_fu_1700_p4;

assign sext_ln1345_234_fu_1730_p1 = $signed(tmp_501_fu_1720_p4);

assign sext_ln1345_235_fu_1750_p1 = $signed(tmp_503_fu_1740_p4);

assign sext_ln1345_236_fu_1770_p1 = tmp_504_fu_1760_p4;

assign sext_ln1345_237_fu_1790_p1 = tmp_505_fu_1780_p4;

assign sext_ln1345_238_fu_1810_p1 = tmp_506_fu_1800_p4;

assign sext_ln1345_239_fu_1830_p1 = tmp_507_fu_1820_p4;

assign sext_ln1345_240_fu_1850_p1 = $signed(tmp_508_fu_1840_p4);

assign sext_ln1345_241_fu_1870_p1 = tmp_509_fu_1860_p4;

assign sext_ln1345_242_fu_1890_p1 = tmp_510_fu_1880_p4;

assign sext_ln1345_243_fu_1910_p1 = tmp_511_fu_1900_p4;

assign sext_ln1345_244_fu_1930_p1 = tmp_512_fu_1920_p4;

assign sext_ln1345_245_fu_1950_p1 = tmp_513_fu_1940_p4;

assign sext_ln1345_246_fu_1970_p1 = $signed(tmp_514_fu_1960_p4);

assign sext_ln1345_247_fu_1990_p1 = $signed(tmp_516_fu_1980_p4);

assign sext_ln1345_248_fu_2894_p1 = $signed(tmp_517_reg_5315);

assign sext_ln1345_249_fu_2906_p1 = $signed(tmp_518_reg_5320);

assign sext_ln1345_250_fu_2918_p1 = $signed(tmp_519_reg_5325);

assign sext_ln1345_251_fu_2930_p1 = $signed(tmp_520_reg_5330);

assign sext_ln1345_252_fu_2050_p1 = $signed(tmp_521_fu_2040_p4);

assign sext_ln1345_253_fu_2945_p1 = $signed(tmp_522_reg_5340);

assign sext_ln1345_254_fu_2957_p1 = $signed(tmp_523_reg_5345);

assign sext_ln1345_255_fu_2969_p1 = $signed(tmp_524_reg_5350);

assign sext_ln1345_256_fu_2981_p1 = $signed(tmp_525_reg_5355);

assign sext_ln1345_257_fu_2993_p1 = $signed(tmp_526_reg_5360);

assign sext_ln1345_258_fu_2120_p1 = $signed(tmp_527_fu_2110_p4);

assign sext_ln1345_259_fu_2140_p1 = $signed(tmp_529_fu_2130_p4);

assign sext_ln1345_260_fu_3097_p1 = $signed(tmp_530_reg_5375);

assign sext_ln1345_261_fu_3109_p1 = $signed(tmp_531_reg_5380);

assign sext_ln1345_262_fu_3121_p1 = $signed(tmp_532_reg_5385);

assign sext_ln1345_263_fu_3133_p1 = $signed(tmp_533_reg_5390);

assign sext_ln1345_264_fu_2200_p1 = $signed(tmp_534_fu_2190_p4);

assign sext_ln1345_265_fu_3148_p1 = $signed(tmp_535_reg_5400);

assign sext_ln1345_266_fu_3160_p1 = $signed(tmp_536_reg_5405);

assign sext_ln1345_267_fu_3172_p1 = $signed(tmp_537_reg_5410);

assign sext_ln1345_268_fu_3184_p1 = $signed(tmp_538_reg_5415);

assign sext_ln1345_269_fu_3196_p1 = $signed(tmp_539_reg_5420);

assign sext_ln1345_270_fu_2260_p1 = $signed(trunc_ln145_144_fu_838_p4);

assign sext_ln1345_271_fu_2270_p1 = $signed(trunc_ln145_145_fu_848_p4);

assign sext_ln1345_272_fu_3300_p1 = $signed(trunc_ln145_146_reg_4786);

assign sext_ln1345_273_fu_3312_p1 = $signed(trunc_ln145_147_reg_4791);

assign sext_ln1345_274_fu_3324_p1 = $signed(trunc_ln145_148_reg_4796);

assign sext_ln1345_275_fu_3336_p1 = $signed(trunc_ln145_149_reg_4801);

assign sext_ln1345_276_fu_2280_p1 = $signed(trunc_ln145_150_fu_898_p4);

assign sext_ln1345_277_fu_3351_p1 = $signed(trunc_ln145_151_reg_4806);

assign sext_ln1345_278_fu_3363_p1 = $signed(trunc_ln145_152_reg_4811);

assign sext_ln1345_279_fu_3375_p1 = $signed(trunc_ln145_153_reg_4816);

assign sext_ln1345_280_fu_3387_p1 = $signed(trunc_ln145_154_reg_4821);

assign sext_ln1345_281_fu_3399_p1 = $signed(trunc_ln145_155_reg_4826);

assign sext_ln1345_fu_962_p1 = $signed(trunc_ln145_fu_724_p1);

assign sext_ln151_100_fu_4028_p1 = mul_ln1345_451_reg_5490;

assign sext_ln151_101_fu_4037_p1 = mul_ln1345_452_fu_4031_p2;

assign sext_ln151_102_fu_4047_p1 = mul_ln1345_453_fu_4041_p2;

assign sext_ln151_103_fu_4057_p1 = mul_ln1345_454_fu_4051_p2;

assign sext_ln151_104_fu_4067_p1 = mul_ln1345_455_fu_4061_p2;

assign sext_ln151_105_fu_4071_p1 = mul_ln1345_456_reg_5495;

assign sext_ln151_106_fu_4080_p1 = mul_ln1345_457_fu_4074_p2;

assign sext_ln151_107_fu_4090_p1 = mul_ln1345_458_fu_4084_p2;

assign sext_ln151_108_fu_4100_p1 = mul_ln1345_459_fu_4094_p2;

assign sext_ln151_109_fu_4110_p1 = mul_ln1345_460_fu_4104_p2;

assign sext_ln151_10_fu_2525_p1 = mul_ln1345_343_reg_4995;

assign sext_ln151_110_fu_4213_p1 = mul_ln1345_463_reg_5505;

assign sext_ln151_111_fu_4222_p1 = mul_ln1345_464_fu_4216_p2;

assign sext_ln151_112_fu_4232_p1 = mul_ln1345_465_fu_4226_p2;

assign sext_ln151_113_fu_4242_p1 = mul_ln1345_466_fu_4236_p2;

assign sext_ln151_114_fu_4252_p1 = mul_ln1345_467_fu_4246_p2;

assign sext_ln151_115_fu_4256_p1 = mul_ln1345_468_reg_5510;

assign sext_ln151_116_fu_4265_p1 = mul_ln1345_469_fu_4259_p2;

assign sext_ln151_117_fu_4275_p1 = mul_ln1345_470_fu_4269_p2;

assign sext_ln151_118_fu_4285_p1 = mul_ln1345_471_fu_4279_p2;

assign sext_ln151_119_fu_4295_p1 = mul_ln1345_472_fu_4289_p2;

assign sext_ln151_11_fu_2528_p1 = mul_ln1345_344_reg_5005;

assign sext_ln151_12_fu_2531_p1 = mul_ln1345_345_reg_5015;

assign sext_ln151_13_fu_2534_p1 = mul_ln1345_346_reg_5025;

assign sext_ln151_14_fu_2537_p1 = mul_ln1345_347_reg_5035;

assign sext_ln151_15_fu_2540_p1 = mul_ln1345_348_reg_5040;

assign sext_ln151_16_fu_2543_p1 = mul_ln1345_349_reg_5050;

assign sext_ln151_17_fu_2546_p1 = mul_ln1345_350_reg_5060;

assign sext_ln151_18_fu_2549_p1 = mul_ln1345_351_reg_5070;

assign sext_ln151_19_fu_2552_p1 = mul_ln1345_352_reg_5080;

assign sext_ln151_1_fu_2406_p1 = mul_ln1345_332_reg_4852;

assign sext_ln151_20_fu_2647_p1 = mul_ln1345_355_reg_5100;

assign sext_ln151_21_fu_2650_p1 = mul_ln1345_356_reg_5110;

assign sext_ln151_22_fu_2653_p1 = mul_ln1345_357_reg_5120;

assign sext_ln151_23_fu_2656_p1 = mul_ln1345_358_reg_5130;

assign sext_ln151_24_fu_2659_p1 = mul_ln1345_359_reg_5140;

assign sext_ln151_25_fu_2662_p1 = mul_ln1345_360_reg_5145;

assign sext_ln151_26_fu_2665_p1 = mul_ln1345_361_reg_5155;

assign sext_ln151_27_fu_2668_p1 = mul_ln1345_362_reg_5165;

assign sext_ln151_28_fu_2671_p1 = mul_ln1345_363_reg_5175;

assign sext_ln151_29_fu_2674_p1 = mul_ln1345_364_reg_5185;

assign sext_ln151_2_fu_2409_p1 = mul_ln1345_333_reg_4868;

assign sext_ln151_30_fu_2769_p1 = mul_ln1345_367_reg_5205;

assign sext_ln151_31_fu_2772_p1 = mul_ln1345_368_reg_5215;

assign sext_ln151_32_fu_2775_p1 = mul_ln1345_369_reg_5225;

assign sext_ln151_33_fu_2778_p1 = mul_ln1345_370_reg_5235;

assign sext_ln151_34_fu_2781_p1 = mul_ln1345_371_reg_5245;

assign sext_ln151_35_fu_2784_p1 = mul_ln1345_372_reg_5250;

assign sext_ln151_36_fu_2787_p1 = mul_ln1345_373_reg_5260;

assign sext_ln151_37_fu_2790_p1 = mul_ln1345_374_reg_5270;

assign sext_ln151_38_fu_2793_p1 = mul_ln1345_375_reg_5280;

assign sext_ln151_39_fu_2796_p1 = mul_ln1345_376_reg_5290;

assign sext_ln151_3_fu_2412_p1 = mul_ln1345_334_reg_4884;

assign sext_ln151_40_fu_2891_p1 = mul_ln1345_379_reg_5310;

assign sext_ln151_41_fu_2902_p1 = mul_ln1345_380_fu_2897_p2;

assign sext_ln151_42_fu_2914_p1 = mul_ln1345_381_fu_2909_p2;

assign sext_ln151_43_fu_2926_p1 = mul_ln1345_382_fu_2921_p2;

assign sext_ln151_44_fu_2938_p1 = mul_ln1345_383_fu_2933_p2;

assign sext_ln151_45_fu_2942_p1 = mul_ln1345_384_reg_5335;

assign sext_ln151_46_fu_2953_p1 = mul_ln1345_385_fu_2948_p2;

assign sext_ln151_47_fu_2965_p1 = mul_ln1345_386_fu_2960_p2;

assign sext_ln151_48_fu_2977_p1 = mul_ln1345_387_fu_2972_p2;

assign sext_ln151_49_fu_2989_p1 = mul_ln1345_388_fu_2984_p2;

assign sext_ln151_4_fu_2415_p1 = mul_ln1345_335_reg_4900;

assign sext_ln151_50_fu_3094_p1 = mul_ln1345_391_reg_5370;

assign sext_ln151_51_fu_3105_p1 = mul_ln1345_392_fu_3100_p2;

assign sext_ln151_52_fu_3117_p1 = mul_ln1345_393_fu_3112_p2;

assign sext_ln151_53_fu_3129_p1 = mul_ln1345_394_fu_3124_p2;

assign sext_ln151_54_fu_3141_p1 = mul_ln1345_395_fu_3136_p2;

assign sext_ln151_55_fu_3145_p1 = mul_ln1345_396_reg_5395;

assign sext_ln151_56_fu_3156_p1 = mul_ln1345_397_fu_3151_p2;

assign sext_ln151_57_fu_3168_p1 = mul_ln1345_398_fu_3163_p2;

assign sext_ln151_58_fu_3180_p1 = mul_ln1345_399_fu_3175_p2;

assign sext_ln151_59_fu_3192_p1 = mul_ln1345_400_fu_3187_p2;

assign sext_ln151_5_fu_2418_p1 = mul_ln1345_336_reg_4905;

assign sext_ln151_60_fu_3297_p1 = mul_ln1345_403_reg_5430;

assign sext_ln151_61_fu_3308_p1 = mul_ln1345_404_fu_3303_p2;

assign sext_ln151_62_fu_3320_p1 = mul_ln1345_405_fu_3315_p2;

assign sext_ln151_63_fu_3332_p1 = mul_ln1345_406_fu_3327_p2;

assign sext_ln151_64_fu_3344_p1 = mul_ln1345_407_fu_3339_p2;

assign sext_ln151_65_fu_3348_p1 = mul_ln1345_408_reg_5435;

assign sext_ln151_66_fu_3359_p1 = mul_ln1345_409_fu_3354_p2;

assign sext_ln151_67_fu_3371_p1 = mul_ln1345_410_fu_3366_p2;

assign sext_ln151_68_fu_3383_p1 = mul_ln1345_411_fu_3378_p2;

assign sext_ln151_69_fu_3395_p1 = mul_ln1345_412_fu_3390_p2;

assign sext_ln151_6_fu_2421_p1 = mul_ln1345_337_reg_4921;

assign sext_ln151_70_fu_3500_p1 = mul_ln1345_415_reg_5445;

assign sext_ln151_71_fu_3508_p1 = mul_ln1345_416_fu_3503_p2;

assign sext_ln151_72_fu_3517_p1 = mul_ln1345_417_fu_3512_p2;

assign sext_ln151_73_fu_3526_p1 = mul_ln1345_418_fu_3521_p2;

assign sext_ln151_74_fu_3535_p1 = mul_ln1345_419_fu_3530_p2;

assign sext_ln151_75_fu_3539_p1 = mul_ln1345_420_reg_5450;

assign sext_ln151_76_fu_3547_p1 = mul_ln1345_421_fu_3542_p2;

assign sext_ln151_77_fu_3556_p1 = mul_ln1345_422_fu_3551_p2;

assign sext_ln151_78_fu_3565_p1 = mul_ln1345_423_fu_3560_p2;

assign sext_ln151_79_fu_3574_p1 = mul_ln1345_424_fu_3569_p2;

assign sext_ln151_7_fu_2424_p1 = mul_ln1345_338_reg_4937;

assign sext_ln151_80_fu_3676_p1 = mul_ln1345_427_reg_5460;

assign sext_ln151_81_fu_3684_p1 = mul_ln1345_428_fu_3679_p2;

assign sext_ln151_82_fu_3693_p1 = mul_ln1345_429_fu_3688_p2;

assign sext_ln151_83_fu_3702_p1 = mul_ln1345_430_fu_3697_p2;

assign sext_ln151_84_fu_3711_p1 = mul_ln1345_431_fu_3706_p2;

assign sext_ln151_85_fu_3715_p1 = mul_ln1345_432_reg_5465;

assign sext_ln151_86_fu_3723_p1 = mul_ln1345_433_fu_3718_p2;

assign sext_ln151_87_fu_3732_p1 = mul_ln1345_434_fu_3727_p2;

assign sext_ln151_88_fu_3741_p1 = mul_ln1345_435_fu_3736_p2;

assign sext_ln151_89_fu_3750_p1 = mul_ln1345_436_fu_3745_p2;

assign sext_ln151_8_fu_2427_p1 = mul_ln1345_339_reg_4953;

assign sext_ln151_90_fu_3852_p1 = mul_ln1345_439_reg_5475;

assign sext_ln151_91_fu_3860_p1 = mul_ln1345_440_fu_3855_p2;

assign sext_ln151_92_fu_3869_p1 = mul_ln1345_441_fu_3864_p2;

assign sext_ln151_93_fu_3878_p1 = mul_ln1345_442_fu_3873_p2;

assign sext_ln151_94_fu_3887_p1 = mul_ln1345_443_fu_3882_p2;

assign sext_ln151_95_fu_3891_p1 = mul_ln1345_444_reg_5480;

assign sext_ln151_96_fu_3899_p1 = mul_ln1345_445_fu_3894_p2;

assign sext_ln151_97_fu_3908_p1 = mul_ln1345_446_fu_3903_p2;

assign sext_ln151_98_fu_3917_p1 = mul_ln1345_447_fu_3912_p2;

assign sext_ln151_99_fu_3926_p1 = mul_ln1345_448_fu_3921_p2;

assign sext_ln151_9_fu_2430_p1 = mul_ln1345_340_reg_4969;

assign sext_ln151_fu_2403_p1 = mul_ln1345_331_reg_4836;

assign sext_ln691_331_fu_2433_p1 = mul_ln1345_341_reg_4985;

assign sext_ln691_332_fu_2442_p1 = $signed(add_ln691_fu_2436_p2);

assign sext_ln691_333_fu_4385_p1 = $signed(add_ln691_334_reg_5520);

assign sext_ln691_334_fu_2476_p1 = $signed(add_ln691_337_fu_2470_p2);

assign sext_ln691_335_fu_2486_p1 = $signed(add_ln691_338_fu_2480_p2);

assign sext_ln691_336_fu_2496_p1 = $signed(add_ln691_339_fu_2490_p2);

assign sext_ln691_337_fu_4393_p1 = $signed(add_ln691_341_reg_5525);

assign sext_ln691_338_fu_2512_p1 = mul_ln1345_342_reg_4990;

assign sext_ln691_339_fu_2555_p1 = mul_ln1345_353_reg_5090;

assign sext_ln691_340_fu_2564_p1 = $signed(add_ln691_343_fu_2558_p2);

assign sext_ln691_341_fu_4402_p1 = $signed(add_ln691_346_reg_5535);

assign sext_ln691_342_fu_2598_p1 = $signed(add_ln691_349_fu_2592_p2);

assign sext_ln691_343_fu_2608_p1 = $signed(add_ln691_350_fu_2602_p2);

assign sext_ln691_344_fu_2618_p1 = $signed(add_ln691_351_fu_2612_p2);

assign sext_ln691_345_fu_4410_p1 = $signed(add_ln691_353_reg_5540);

assign sext_ln691_346_fu_2634_p1 = mul_ln1345_354_reg_5095;

assign sext_ln691_347_fu_2677_p1 = mul_ln1345_365_reg_5195;

assign sext_ln691_348_fu_2686_p1 = $signed(add_ln691_355_fu_2680_p2);

assign sext_ln691_349_fu_4419_p1 = $signed(add_ln691_358_reg_5550);

assign sext_ln691_350_fu_2720_p1 = $signed(add_ln691_361_fu_2714_p2);

assign sext_ln691_351_fu_2730_p1 = $signed(add_ln691_362_fu_2724_p2);

assign sext_ln691_352_fu_2740_p1 = $signed(add_ln691_363_fu_2734_p2);

assign sext_ln691_353_fu_4427_p1 = $signed(add_ln691_365_reg_5555);

assign sext_ln691_354_fu_2756_p1 = mul_ln1345_366_reg_5200;

assign sext_ln691_355_fu_2799_p1 = mul_ln1345_377_reg_5300;

assign sext_ln691_356_fu_2808_p1 = $signed(add_ln691_367_fu_2802_p2);

assign sext_ln691_357_fu_4436_p1 = $signed(add_ln691_370_reg_5565);

assign sext_ln691_358_fu_2842_p1 = $signed(add_ln691_373_fu_2836_p2);

assign sext_ln691_359_fu_2852_p1 = $signed(add_ln691_374_fu_2846_p2);

assign sext_ln691_360_fu_2862_p1 = $signed(add_ln691_375_fu_2856_p2);

assign sext_ln691_361_fu_4444_p1 = $signed(add_ln691_377_reg_5570);

assign sext_ln691_362_fu_2878_p1 = mul_ln1345_378_reg_5305;

assign sext_ln691_363_fu_3001_p1 = mul_ln1345_389_fu_2996_p2;

assign sext_ln691_364_fu_3011_p1 = $signed(add_ln691_379_fu_3005_p2);

assign sext_ln691_365_fu_4453_p1 = $signed(add_ln691_382_reg_5580);

assign sext_ln691_366_fu_3045_p1 = $signed(add_ln691_385_fu_3039_p2);

assign sext_ln691_367_fu_3055_p1 = $signed(add_ln691_386_fu_3049_p2);

assign sext_ln691_368_fu_3065_p1 = $signed(add_ln691_387_fu_3059_p2);

assign sext_ln691_369_fu_4461_p1 = $signed(add_ln691_389_reg_5585);

assign sext_ln691_370_fu_3081_p1 = mul_ln1345_390_reg_5365;

assign sext_ln691_371_fu_3204_p1 = mul_ln1345_401_fu_3199_p2;

assign sext_ln691_372_fu_3214_p1 = $signed(add_ln691_391_fu_3208_p2);

assign sext_ln691_373_fu_4470_p1 = $signed(add_ln691_394_reg_5595);

assign sext_ln691_374_fu_3248_p1 = $signed(add_ln691_397_fu_3242_p2);

assign sext_ln691_375_fu_3258_p1 = $signed(add_ln691_398_fu_3252_p2);

assign sext_ln691_376_fu_3268_p1 = $signed(add_ln691_399_fu_3262_p2);

assign sext_ln691_377_fu_4478_p1 = $signed(add_ln691_401_reg_5600);

assign sext_ln691_378_fu_3284_p1 = mul_ln1345_402_reg_5425;

assign sext_ln691_379_fu_3407_p1 = mul_ln1345_413_fu_3402_p2;

assign sext_ln691_380_fu_3417_p1 = $signed(add_ln691_403_fu_3411_p2);

assign sext_ln691_381_fu_4487_p1 = $signed(add_ln691_406_reg_5610);

assign sext_ln691_382_fu_3451_p1 = $signed(add_ln691_409_fu_3445_p2);

assign sext_ln691_383_fu_3461_p1 = $signed(add_ln691_410_fu_3455_p2);

assign sext_ln691_384_fu_3471_p1 = $signed(add_ln691_411_fu_3465_p2);

assign sext_ln691_385_fu_4495_p1 = $signed(add_ln691_413_reg_5615);

assign sext_ln691_386_fu_3487_p1 = mul_ln1345_414_reg_5440;

assign sext_ln691_387_fu_3583_p1 = mul_ln1345_425_fu_3578_p2;

assign sext_ln691_388_fu_3593_p1 = $signed(add_ln691_415_fu_3587_p2);

assign sext_ln691_389_fu_4504_p1 = $signed(add_ln691_418_reg_5625);

assign sext_ln691_390_fu_3627_p1 = $signed(add_ln691_421_fu_3621_p2);

assign sext_ln691_391_fu_3637_p1 = $signed(add_ln691_422_fu_3631_p2);

assign sext_ln691_392_fu_3647_p1 = $signed(add_ln691_423_fu_3641_p2);

assign sext_ln691_393_fu_4512_p1 = $signed(add_ln691_425_reg_5630);

assign sext_ln691_394_fu_3663_p1 = mul_ln1345_426_reg_5455;

assign sext_ln691_395_fu_3759_p1 = mul_ln1345_437_fu_3754_p2;

assign sext_ln691_396_fu_3769_p1 = $signed(add_ln691_427_fu_3763_p2);

assign sext_ln691_397_fu_4521_p1 = $signed(add_ln691_430_reg_5640);

assign sext_ln691_398_fu_3803_p1 = $signed(add_ln691_433_fu_3797_p2);

assign sext_ln691_399_fu_3813_p1 = $signed(add_ln691_434_fu_3807_p2);

assign sext_ln691_400_fu_3823_p1 = $signed(add_ln691_435_fu_3817_p2);

assign sext_ln691_401_fu_4529_p1 = $signed(add_ln691_437_reg_5645);

assign sext_ln691_402_fu_3839_p1 = mul_ln1345_438_reg_5470;

assign sext_ln691_403_fu_3935_p1 = mul_ln1345_449_fu_3930_p2;

assign sext_ln691_404_fu_3945_p1 = $signed(add_ln691_439_fu_3939_p2);

assign sext_ln691_405_fu_4538_p1 = $signed(add_ln691_442_reg_5655);

assign sext_ln691_406_fu_3979_p1 = $signed(add_ln691_445_fu_3973_p2);

assign sext_ln691_407_fu_3989_p1 = $signed(add_ln691_446_fu_3983_p2);

assign sext_ln691_408_fu_3999_p1 = $signed(add_ln691_447_fu_3993_p2);

assign sext_ln691_409_fu_4546_p1 = $signed(add_ln691_449_reg_5660);

assign sext_ln691_410_fu_4015_p1 = mul_ln1345_450_reg_5485;

assign sext_ln691_411_fu_4120_p1 = mul_ln1345_461_fu_4114_p2;

assign sext_ln691_412_fu_4130_p1 = $signed(add_ln691_451_fu_4124_p2);

assign sext_ln691_413_fu_4555_p1 = $signed(add_ln691_454_reg_5670);

assign sext_ln691_414_fu_4164_p1 = $signed(add_ln691_457_fu_4158_p2);

assign sext_ln691_415_fu_4174_p1 = $signed(add_ln691_458_fu_4168_p2);

assign sext_ln691_416_fu_4184_p1 = $signed(add_ln691_459_fu_4178_p2);

assign sext_ln691_417_fu_4563_p1 = $signed(add_ln691_461_reg_5675);

assign sext_ln691_418_fu_4200_p1 = mul_ln1345_462_reg_5500;

assign sext_ln691_419_fu_4305_p1 = mul_ln1345_473_fu_4299_p2;

assign sext_ln691_420_fu_4315_p1 = $signed(add_ln691_463_fu_4309_p2);

assign sext_ln691_421_fu_4572_p1 = $signed(add_ln691_466_reg_5685);

assign sext_ln691_422_fu_4349_p1 = $signed(add_ln691_469_fu_4343_p2);

assign sext_ln691_423_fu_4359_p1 = $signed(add_ln691_470_fu_4353_p2);

assign sext_ln691_424_fu_4369_p1 = $signed(add_ln691_471_fu_4363_p2);

assign sext_ln691_425_fu_4580_p1 = $signed(add_ln691_473_reg_5690);

assign sext_ln691_fu_2396_p1 = mul_ln1345_reg_4831;

assign start_out = real_start;

assign tmp_465_fu_976_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[20:18]}};

assign tmp_466_fu_1000_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[38:36]}};

assign tmp_467_fu_1024_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[56:54]}};

assign tmp_468_fu_1048_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[74:72]}};

assign tmp_469_fu_1072_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[92:90]}};

assign tmp_470_fu_1096_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[110:108]}};

assign tmp_471_fu_1120_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[128:126]}};

assign tmp_472_fu_1144_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[146:144]}};

assign tmp_473_fu_1168_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[164:162]}};

assign tmp_474_fu_1192_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[182:180]}};

assign tmp_475_fu_1216_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[200:198]}};

assign tmp_476_fu_1240_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[5:3]}};

assign tmp_477_fu_2515_p4 = {{select_ln126_fu_2389_p3[25:13]}};

assign tmp_478_fu_1260_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[23:21]}};

assign tmp_479_fu_1280_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[41:39]}};

assign tmp_480_fu_1300_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[59:57]}};

assign tmp_481_fu_1320_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[77:75]}};

assign tmp_482_fu_1340_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[95:93]}};

assign tmp_483_fu_1360_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[113:111]}};

assign tmp_484_fu_1380_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[131:129]}};

assign tmp_485_fu_1400_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[149:147]}};

assign tmp_486_fu_1420_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[167:165]}};

assign tmp_487_fu_1440_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[185:183]}};

assign tmp_488_fu_1460_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[203:201]}};

assign tmp_489_fu_1480_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[8:6]}};

assign tmp_490_fu_2637_p4 = {{select_ln126_fu_2389_p3[38:26]}};

assign tmp_491_fu_1500_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[26:24]}};

assign tmp_492_fu_1520_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[44:42]}};

assign tmp_493_fu_1540_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[62:60]}};

assign tmp_494_fu_1560_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[80:78]}};

assign tmp_495_fu_1580_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[98:96]}};

assign tmp_496_fu_1600_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[116:114]}};

assign tmp_497_fu_1620_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[134:132]}};

assign tmp_498_fu_1660_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[170:168]}};

assign tmp_499_fu_1680_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[188:186]}};

assign tmp_500_fu_1700_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[206:204]}};

assign tmp_501_fu_1720_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[11:9]}};

assign tmp_502_fu_2759_p4 = {{select_ln126_fu_2389_p3[51:39]}};

assign tmp_503_fu_1740_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[29:27]}};

assign tmp_504_fu_1760_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[47:45]}};

assign tmp_505_fu_1780_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[65:63]}};

assign tmp_506_fu_1800_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[83:81]}};

assign tmp_507_fu_1820_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[101:99]}};

assign tmp_508_fu_1840_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[119:117]}};

assign tmp_509_fu_1860_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[137:135]}};

assign tmp_510_fu_1880_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[155:153]}};

assign tmp_511_fu_1900_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[173:171]}};

assign tmp_512_fu_1920_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[191:189]}};

assign tmp_513_fu_1940_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[209:207]}};

assign tmp_514_fu_1960_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[14:12]}};

assign tmp_515_fu_2881_p4 = {{select_ln126_fu_2389_p3[64:52]}};

assign tmp_516_fu_1980_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[32:30]}};

assign tmp_521_fu_2040_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[122:120]}};

assign tmp_527_fu_2110_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[17:15]}};

assign tmp_528_fu_3084_p4 = {{select_ln126_fu_2389_p3[77:65]}};

assign tmp_529_fu_2130_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[35:33]}};

assign tmp_534_fu_2190_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[125:123]}};

assign tmp_540_fu_3287_p4 = {{select_ln126_fu_2389_p3[90:78]}};

assign tmp_541_fu_3490_p4 = {{select_ln126_fu_2389_p3[103:91]}};

assign tmp_542_fu_3666_p4 = {{select_ln126_fu_2389_p3[116:104]}};

assign tmp_543_fu_3842_p4 = {{select_ln126_fu_2389_p3[129:117]}};

assign tmp_544_fu_4018_p4 = {{select_ln126_fu_2389_p3[142:130]}};

assign tmp_545_fu_4203_p4 = {{select_ln126_fu_2389_p3[155:143]}};

assign tmp_546_fu_4589_p13 = {{{{{{{{{{{{add_ln691_474_fu_4583_p2}, {add_ln691_462_fu_4566_p2}}, {add_ln691_450_fu_4549_p2}}, {add_ln691_438_fu_4532_p2}}, {add_ln691_426_fu_4515_p2}}, {add_ln691_414_fu_4498_p2}}, {add_ln691_402_fu_4481_p2}}, {add_ln691_390_fu_4464_p2}}, {add_ln691_378_fu_4447_p2}}, {add_ln691_366_fu_4430_p2}}, {add_ln691_354_fu_4413_p2}}, {add_ln691_342_fu_4396_p2}};

assign tmp_547_fu_4622_p24 = {{{{{{{{{{{{{{{{{{{{{{{add_ln691_474_fu_4583_p2}, {3'd0}}, {add_ln691_462_fu_4566_p2}}, {3'd0}}, {add_ln691_450_fu_4549_p2}}, {3'd0}}, {add_ln691_438_fu_4532_p2}}, {3'd0}}, {add_ln691_426_fu_4515_p2}}, {3'd0}}, {add_ln691_414_fu_4498_p2}}, {3'd0}}, {add_ln691_402_fu_4481_p2}}, {3'd0}}, {add_ln691_390_fu_4464_p2}}, {3'd0}}, {add_ln691_378_fu_4447_p2}}, {3'd0}}, {add_ln691_366_fu_4430_p2}}, {3'd0}}, {add_ln691_354_fu_4413_p2}}, {3'd0}}, {add_ln691_342_fu_4396_p2}};

assign tmp_cast_fu_664_p3 = {{select_ln121_13_fu_657_p3}, {4'd0}};

assign tmp_s_fu_1640_p4 = {{attn_inst_matmul_gen_o_weight_arr_V_q0[152:150]}};

assign trunc_ln145_134_fu_728_p4 = {{cache_window_sm_dout[10:8]}};

assign trunc_ln145_135_fu_738_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_136_fu_758_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_137_fu_768_p4 = {{cache_window_sm_dout[42:40]}};

assign trunc_ln145_138_fu_778_p4 = {{cache_window_sm_dout[50:48]}};

assign trunc_ln145_139_fu_788_p4 = {{cache_window_sm_dout[58:56]}};

assign trunc_ln145_140_fu_798_p4 = {{cache_window_sm_dout[66:64]}};

assign trunc_ln145_141_fu_808_p4 = {{cache_window_sm_dout[74:72]}};

assign trunc_ln145_142_fu_818_p4 = {{cache_window_sm_dout[82:80]}};

assign trunc_ln145_143_fu_828_p4 = {{cache_window_sm_dout[90:88]}};

assign trunc_ln145_144_fu_838_p4 = {{cache_window_sm_dout[98:96]}};

assign trunc_ln145_145_fu_848_p4 = {{cache_window_sm_dout[106:104]}};

assign trunc_ln145_150_fu_898_p4 = {{cache_window_sm_dout[146:144]}};

assign trunc_ln145_fu_724_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_748_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln215_7_fu_646_p1 = cot_reg_541[4:0];

assign trunc_ln215_8_fu_958_p1 = attn_inst_matmul_gen_o_weight_arr_V_q0[2:0];

assign trunc_ln215_fu_643_p1 = add_ln121_reg_4716[4:0];

assign trunc_ln691_fu_2399_p1 = select_ln126_fu_2389_p3[12:0];

assign vec_o_data_M_elems_V_fu_2383_p3 = {{select_ln121_14_reg_4780}, {select_ln121_14_reg_4780}};

assign xor_ln120_fu_589_p2 = (icmp_ln121_fu_575_p2 ^ 1'd1);

assign zext_ln121_4_fu_639_p1 = add_ln121_reg_4716;

assign zext_ln121_fu_564_p1 = ap_phi_mux_cot_phi_fu_545_p4;

assign zext_ln215_4_fu_686_p1 = add_ln215_fu_680_p2;

assign zext_ln215_fu_677_p1 = select_ln121_reg_4723;

endmodule //ATTN0_matmul_step2_mac_2
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 78;
parameter AWIDTH = 5;
parameter MEM_SIZE = 32;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd78;
parameter AddressRange = 32'd32;
parameter AddressWidth = 32'd5;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V_rom ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_bias_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "block" *) module ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 216;
parameter AWIDTH = 9;
parameter MEM_SIZE = 512;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd216;
parameter AddressRange = 32'd512;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V_rom ATTN0_matmul_step2_mac_2_attn_inst_matmul_gen_o_weight_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_matmul_step2_mac_3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cache_window_sm_dout,
        cache_window_sm_empty_n,
        cache_window_sm_read,
        mac_sm_din,
        mac_sm_full_n,
        mac_sm_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [95:0] cache_window_sm_dout;
input   cache_window_sm_empty_n;
output   cache_window_sm_read;
output  [383:0] mac_sm_din;
input   mac_sm_full_n;
output   mac_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg cache_window_sm_read;
reg mac_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [3:0] attn_inst_matmul_gen_v_bias_arr_V_address0;
reg    attn_inst_matmul_gen_v_bias_arr_V_ce0;
wire   [131:0] attn_inst_matmul_gen_v_bias_arr_V_q0;
wire   [8:0] attn_inst_matmul_gen_v_weight_arr_V_address0;
reg    attn_inst_matmul_gen_v_weight_arr_V_ce0;
wire   [215:0] attn_inst_matmul_gen_v_weight_arr_V_q0;
reg    cache_window_sm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln120_reg_4807;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter1_reg;
reg    mac_sm_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln161_reg_4869;
reg   [0:0] icmp_ln161_reg_4869_pp0_iter1_reg;
reg   [15:0] indvar_flatten20_reg_548;
reg   [10:0] indvar_flatten_reg_560;
reg   [4:0] cot_reg_571;
reg   [5:0] cit_reg_583;
reg   [131:0] attn_inst_matmul_gen_v_bias_arr_V_load_1_reg_4802;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln120_fu_594_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_4807_pp0_iter2_reg;
wire   [0:0] icmp_ln121_fu_600_p2;
reg   [0:0] icmp_ln121_reg_4811;
reg   [0:0] icmp_ln121_reg_4811_pp0_iter1_reg;
wire   [4:0] select_ln120_fu_606_p3;
reg   [4:0] select_ln120_reg_4818;
wire   [0:0] and_ln120_fu_626_p2;
reg   [0:0] and_ln120_reg_4824;
reg   [0:0] and_ln120_reg_4824_pp0_iter1_reg;
wire   [5:0] select_ln121_fu_638_p3;
reg   [5:0] select_ln121_reg_4831;
wire   [10:0] add_ln121_3_fu_646_p2;
reg   [10:0] add_ln121_3_reg_4839;
wire   [15:0] add_ln120_fu_652_p2;
reg   [15:0] add_ln120_reg_4844;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state8_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] add_ln121_fu_658_p2;
reg   [4:0] add_ln121_reg_4849;
wire   [4:0] select_ln121_11_fu_693_p3;
reg   [4:0] select_ln121_11_reg_4854;
wire   [8:0] add_ln215_fu_702_p2;
reg   [8:0] add_ln215_reg_4859;
wire   [0:0] icmp_ln126_fu_708_p2;
reg   [0:0] icmp_ln126_reg_4864;
reg   [0:0] icmp_ln126_reg_4864_pp0_iter1_reg;
wire   [0:0] icmp_ln161_fu_713_p2;
wire   [5:0] add_ln122_fu_718_p2;
reg   [5:0] add_ln122_reg_4873;
wire   [10:0] select_ln121_12_fu_723_p3;
reg   [10:0] select_ln121_12_reg_4878;
reg   [131:0] attn_inst_matmul_gen_v_bias_arr_V_load_reg_4893;
reg   [2:0] trunc_ln145_129_reg_4903;
reg   [2:0] trunc_ln145_130_reg_4908;
reg   [2:0] trunc_ln145_131_reg_4913;
reg   [2:0] trunc_ln145_132_reg_4918;
reg   [2:0] trunc_ln145_133_reg_4923;
reg   [2:0] trunc_ln145_134_reg_4928;
wire  signed [5:0] sext_ln1345_291_fu_864_p1;
reg  signed [5:0] sext_ln1345_291_reg_4933;
wire  signed [5:0] mul_ln1345_fu_868_p2;
reg  signed [5:0] mul_ln1345_reg_4938;
wire  signed [5:0] sext_ln1345_293_fu_888_p1;
reg  signed [5:0] sext_ln1345_293_reg_4943;
wire  signed [5:0] mul_ln1345_507_fu_892_p2;
reg  signed [5:0] mul_ln1345_507_reg_4948;
wire  signed [5:0] sext_ln1345_295_fu_912_p1;
reg  signed [5:0] sext_ln1345_295_reg_4953;
wire  signed [5:0] mul_ln1345_508_fu_916_p2;
reg  signed [5:0] mul_ln1345_508_reg_4958;
wire  signed [5:0] sext_ln1345_297_fu_936_p1;
reg  signed [5:0] sext_ln1345_297_reg_4963;
wire  signed [5:0] mul_ln1345_509_fu_940_p2;
reg  signed [5:0] mul_ln1345_509_reg_4968;
wire  signed [5:0] sext_ln1345_299_fu_960_p1;
reg  signed [5:0] sext_ln1345_299_reg_4973;
wire  signed [5:0] mul_ln1345_510_fu_964_p2;
reg  signed [5:0] mul_ln1345_510_reg_4978;
wire  signed [5:0] sext_ln1345_301_fu_984_p1;
reg  signed [5:0] sext_ln1345_301_reg_4983;
wire  signed [5:0] mul_ln1345_511_fu_988_p2;
reg  signed [5:0] mul_ln1345_511_reg_4988;
wire  signed [5:0] sext_ln1345_302_fu_1004_p1;
reg  signed [5:0] sext_ln1345_302_reg_4993;
wire  signed [5:0] mul_ln1345_512_fu_1008_p2;
reg  signed [5:0] mul_ln1345_512_reg_4998;
wire  signed [5:0] sext_ln1345_303_fu_1024_p1;
reg  signed [5:0] sext_ln1345_303_reg_5003;
wire  signed [5:0] mul_ln1345_513_fu_1028_p2;
reg  signed [5:0] mul_ln1345_513_reg_5008;
wire  signed [5:0] sext_ln1345_304_fu_1044_p1;
reg  signed [5:0] sext_ln1345_304_reg_5013;
wire  signed [5:0] mul_ln1345_514_fu_1048_p2;
reg  signed [5:0] mul_ln1345_514_reg_5018;
wire  signed [5:0] sext_ln1345_305_fu_1064_p1;
reg  signed [5:0] sext_ln1345_305_reg_5023;
wire  signed [5:0] mul_ln1345_515_fu_1068_p2;
reg  signed [5:0] mul_ln1345_515_reg_5028;
wire  signed [5:0] sext_ln1345_306_fu_1084_p1;
reg  signed [5:0] sext_ln1345_306_reg_5033;
wire  signed [5:0] mul_ln1345_516_fu_1088_p2;
reg  signed [5:0] mul_ln1345_516_reg_5038;
wire  signed [5:0] sext_ln1345_307_fu_1104_p1;
reg  signed [5:0] sext_ln1345_307_reg_5043;
wire  signed [5:0] mul_ln1345_517_fu_1108_p2;
reg  signed [5:0] mul_ln1345_517_reg_5048;
wire  signed [5:0] sext_ln1345_308_fu_1124_p1;
reg  signed [5:0] sext_ln1345_308_reg_5053;
wire  signed [5:0] mul_ln1345_518_fu_1128_p2;
reg  signed [5:0] mul_ln1345_518_reg_5058;
wire  signed [5:0] sext_ln1345_309_fu_1144_p1;
reg  signed [5:0] sext_ln1345_309_reg_5063;
wire  signed [5:0] mul_ln1345_519_fu_1148_p2;
reg  signed [5:0] mul_ln1345_519_reg_5068;
wire  signed [5:0] sext_ln1345_310_fu_1164_p1;
reg  signed [5:0] sext_ln1345_310_reg_5073;
wire  signed [5:0] mul_ln1345_520_fu_1168_p2;
reg  signed [5:0] mul_ln1345_520_reg_5078;
wire  signed [5:0] sext_ln1345_311_fu_1184_p1;
reg  signed [5:0] sext_ln1345_311_reg_5083;
wire  signed [5:0] mul_ln1345_521_fu_1188_p2;
reg  signed [5:0] mul_ln1345_521_reg_5088;
wire  signed [5:0] sext_ln1345_312_fu_1204_p1;
reg  signed [5:0] sext_ln1345_312_reg_5093;
wire  signed [5:0] mul_ln1345_522_fu_1208_p2;
reg  signed [5:0] mul_ln1345_522_reg_5098;
wire  signed [5:0] sext_ln1345_313_fu_1224_p1;
reg  signed [5:0] sext_ln1345_313_reg_5103;
wire  signed [5:0] mul_ln1345_523_fu_1228_p2;
reg  signed [5:0] mul_ln1345_523_reg_5108;
wire  signed [5:0] sext_ln1345_314_fu_1244_p1;
reg  signed [5:0] sext_ln1345_314_reg_5113;
wire  signed [5:0] mul_ln1345_524_fu_1248_p2;
reg  signed [5:0] mul_ln1345_524_reg_5118;
wire  signed [5:0] sext_ln1345_315_fu_1264_p1;
reg  signed [5:0] sext_ln1345_315_reg_5123;
wire  signed [5:0] mul_ln1345_525_fu_1268_p2;
reg  signed [5:0] mul_ln1345_525_reg_5128;
wire  signed [5:0] sext_ln1345_316_fu_1284_p1;
reg  signed [5:0] sext_ln1345_316_reg_5133;
wire  signed [5:0] mul_ln1345_526_fu_1288_p2;
reg  signed [5:0] mul_ln1345_526_reg_5138;
wire  signed [5:0] sext_ln1345_317_fu_1304_p1;
reg  signed [5:0] sext_ln1345_317_reg_5143;
wire  signed [5:0] mul_ln1345_527_fu_1308_p2;
reg  signed [5:0] mul_ln1345_527_reg_5148;
wire  signed [5:0] sext_ln1345_318_fu_1324_p1;
reg  signed [5:0] sext_ln1345_318_reg_5153;
wire  signed [5:0] mul_ln1345_528_fu_1328_p2;
reg  signed [5:0] mul_ln1345_528_reg_5158;
wire  signed [5:0] sext_ln1345_319_fu_1344_p1;
reg  signed [5:0] sext_ln1345_319_reg_5163;
wire  signed [5:0] mul_ln1345_529_fu_1348_p2;
reg  signed [5:0] mul_ln1345_529_reg_5168;
wire  signed [5:0] sext_ln1345_320_fu_1364_p1;
reg  signed [5:0] sext_ln1345_320_reg_5173;
wire  signed [5:0] mul_ln1345_530_fu_1368_p2;
reg  signed [5:0] mul_ln1345_530_reg_5178;
wire  signed [5:0] sext_ln1345_321_fu_1384_p1;
reg  signed [5:0] sext_ln1345_321_reg_5183;
wire  signed [5:0] mul_ln1345_531_fu_1388_p2;
reg  signed [5:0] mul_ln1345_531_reg_5188;
wire  signed [5:0] sext_ln1345_322_fu_1404_p1;
reg  signed [5:0] sext_ln1345_322_reg_5193;
wire  signed [5:0] mul_ln1345_532_fu_1408_p2;
reg  signed [5:0] mul_ln1345_532_reg_5198;
wire  signed [5:0] sext_ln1345_323_fu_1424_p1;
reg  signed [5:0] sext_ln1345_323_reg_5203;
wire  signed [5:0] mul_ln1345_533_fu_1428_p2;
reg  signed [5:0] mul_ln1345_533_reg_5208;
wire  signed [5:0] sext_ln1345_324_fu_1444_p1;
reg  signed [5:0] sext_ln1345_324_reg_5213;
wire  signed [5:0] mul_ln1345_534_fu_1448_p2;
reg  signed [5:0] mul_ln1345_534_reg_5218;
wire  signed [5:0] sext_ln1345_325_fu_1464_p1;
reg  signed [5:0] sext_ln1345_325_reg_5223;
wire  signed [5:0] mul_ln1345_535_fu_1468_p2;
reg  signed [5:0] mul_ln1345_535_reg_5228;
wire  signed [5:0] sext_ln1345_326_fu_1484_p1;
reg  signed [5:0] sext_ln1345_326_reg_5233;
wire  signed [5:0] mul_ln1345_536_fu_1488_p2;
reg  signed [5:0] mul_ln1345_536_reg_5238;
wire  signed [5:0] sext_ln1345_327_fu_1504_p1;
reg  signed [5:0] sext_ln1345_327_reg_5243;
wire  signed [5:0] mul_ln1345_537_fu_1508_p2;
reg  signed [5:0] mul_ln1345_537_reg_5248;
wire  signed [5:0] sext_ln1345_328_fu_1524_p1;
reg  signed [5:0] sext_ln1345_328_reg_5253;
wire  signed [5:0] mul_ln1345_538_fu_1528_p2;
reg  signed [5:0] mul_ln1345_538_reg_5258;
wire  signed [5:0] sext_ln1345_329_fu_1544_p1;
reg  signed [5:0] sext_ln1345_329_reg_5263;
wire  signed [5:0] mul_ln1345_539_fu_1548_p2;
reg  signed [5:0] mul_ln1345_539_reg_5268;
wire  signed [5:0] sext_ln1345_330_fu_1564_p1;
reg  signed [5:0] sext_ln1345_330_reg_5273;
wire  signed [5:0] mul_ln1345_540_fu_1568_p2;
reg  signed [5:0] mul_ln1345_540_reg_5278;
wire  signed [5:0] sext_ln1345_331_fu_1584_p1;
reg  signed [5:0] sext_ln1345_331_reg_5283;
wire  signed [5:0] mul_ln1345_541_fu_1588_p2;
reg  signed [5:0] mul_ln1345_541_reg_5288;
wire  signed [5:0] sext_ln1345_332_fu_1604_p1;
reg  signed [5:0] sext_ln1345_332_reg_5293;
wire  signed [5:0] mul_ln1345_542_fu_1608_p2;
reg  signed [5:0] mul_ln1345_542_reg_5298;
wire  signed [5:0] sext_ln1345_333_fu_1624_p1;
reg  signed [5:0] sext_ln1345_333_reg_5303;
wire  signed [5:0] mul_ln1345_543_fu_1628_p2;
reg  signed [5:0] mul_ln1345_543_reg_5308;
wire  signed [5:0] sext_ln1345_334_fu_1644_p1;
reg  signed [5:0] sext_ln1345_334_reg_5313;
wire  signed [5:0] mul_ln1345_544_fu_1648_p2;
reg  signed [5:0] mul_ln1345_544_reg_5318;
wire  signed [5:0] sext_ln1345_335_fu_1664_p1;
reg  signed [5:0] sext_ln1345_335_reg_5323;
wire  signed [5:0] mul_ln1345_545_fu_1668_p2;
reg  signed [5:0] mul_ln1345_545_reg_5328;
wire  signed [5:0] sext_ln1345_336_fu_1684_p1;
reg  signed [5:0] sext_ln1345_336_reg_5333;
wire  signed [5:0] mul_ln1345_546_fu_1688_p2;
reg  signed [5:0] mul_ln1345_546_reg_5338;
wire  signed [5:0] sext_ln1345_337_fu_1704_p1;
reg  signed [5:0] sext_ln1345_337_reg_5343;
wire  signed [5:0] mul_ln1345_547_fu_1708_p2;
reg  signed [5:0] mul_ln1345_547_reg_5348;
wire  signed [5:0] sext_ln1345_338_fu_1724_p1;
reg  signed [5:0] sext_ln1345_338_reg_5353;
wire  signed [5:0] mul_ln1345_548_fu_1728_p2;
reg  signed [5:0] mul_ln1345_548_reg_5358;
wire  signed [5:0] sext_ln1345_339_fu_1744_p1;
reg  signed [5:0] sext_ln1345_339_reg_5363;
wire  signed [5:0] mul_ln1345_549_fu_1748_p2;
reg  signed [5:0] mul_ln1345_549_reg_5368;
wire  signed [5:0] sext_ln1345_340_fu_1764_p1;
reg  signed [5:0] sext_ln1345_340_reg_5373;
wire  signed [5:0] mul_ln1345_550_fu_1768_p2;
reg  signed [5:0] mul_ln1345_550_reg_5378;
wire  signed [5:0] sext_ln1345_341_fu_1784_p1;
reg  signed [5:0] sext_ln1345_341_reg_5383;
wire  signed [5:0] mul_ln1345_551_fu_1788_p2;
reg  signed [5:0] mul_ln1345_551_reg_5388;
wire  signed [5:0] sext_ln1345_342_fu_1804_p1;
reg  signed [5:0] sext_ln1345_342_reg_5393;
wire  signed [5:0] mul_ln1345_552_fu_1808_p2;
reg  signed [5:0] mul_ln1345_552_reg_5398;
wire  signed [5:0] sext_ln1345_343_fu_1824_p1;
reg  signed [5:0] sext_ln1345_343_reg_5403;
wire  signed [5:0] mul_ln1345_553_fu_1828_p2;
reg  signed [5:0] mul_ln1345_553_reg_5408;
wire  signed [5:0] sext_ln1345_344_fu_1844_p1;
reg  signed [5:0] sext_ln1345_344_reg_5413;
wire  signed [5:0] mul_ln1345_554_fu_1848_p2;
reg  signed [5:0] mul_ln1345_554_reg_5418;
wire  signed [5:0] sext_ln1345_345_fu_1864_p1;
reg  signed [5:0] sext_ln1345_345_reg_5423;
wire  signed [5:0] mul_ln1345_555_fu_1868_p2;
reg  signed [5:0] mul_ln1345_555_reg_5428;
wire  signed [5:0] sext_ln1345_346_fu_1884_p1;
reg  signed [5:0] sext_ln1345_346_reg_5433;
wire  signed [5:0] mul_ln1345_556_fu_1888_p2;
reg  signed [5:0] mul_ln1345_556_reg_5438;
wire  signed [5:0] sext_ln1345_347_fu_1904_p1;
reg  signed [5:0] sext_ln1345_347_reg_5443;
wire  signed [5:0] mul_ln1345_557_fu_1908_p2;
reg  signed [5:0] mul_ln1345_557_reg_5448;
wire  signed [5:0] sext_ln1345_348_fu_1924_p1;
reg  signed [5:0] sext_ln1345_348_reg_5453;
wire  signed [5:0] mul_ln1345_558_fu_1928_p2;
reg  signed [5:0] mul_ln1345_558_reg_5458;
wire  signed [5:0] sext_ln1345_349_fu_1944_p1;
reg  signed [5:0] sext_ln1345_349_reg_5463;
wire  signed [5:0] mul_ln1345_559_fu_1948_p2;
reg  signed [5:0] mul_ln1345_559_reg_5468;
wire  signed [5:0] sext_ln1345_350_fu_1964_p1;
reg  signed [5:0] sext_ln1345_350_reg_5473;
wire  signed [5:0] mul_ln1345_560_fu_1968_p2;
reg  signed [5:0] mul_ln1345_560_reg_5478;
wire  signed [5:0] sext_ln1345_351_fu_1984_p1;
reg  signed [5:0] sext_ln1345_351_reg_5483;
wire  signed [5:0] mul_ln1345_561_fu_1988_p2;
reg  signed [5:0] mul_ln1345_561_reg_5488;
wire  signed [5:0] sext_ln1345_352_fu_2004_p1;
reg  signed [5:0] sext_ln1345_352_reg_5493;
wire  signed [5:0] mul_ln1345_562_fu_2008_p2;
reg  signed [5:0] mul_ln1345_562_reg_5498;
wire  signed [5:0] sext_ln1345_353_fu_2024_p1;
reg  signed [5:0] sext_ln1345_353_reg_5503;
wire  signed [5:0] mul_ln1345_563_fu_2028_p2;
reg  signed [5:0] mul_ln1345_563_reg_5508;
wire  signed [5:0] sext_ln1345_354_fu_2044_p1;
reg  signed [5:0] sext_ln1345_354_reg_5513;
wire  signed [5:0] mul_ln1345_564_fu_2048_p2;
reg  signed [5:0] mul_ln1345_564_reg_5518;
wire  signed [5:0] sext_ln1345_355_fu_2064_p1;
reg  signed [5:0] sext_ln1345_355_reg_5523;
wire  signed [5:0] mul_ln1345_565_fu_2068_p2;
reg  signed [5:0] mul_ln1345_565_reg_5528;
wire  signed [5:0] sext_ln1345_356_fu_2084_p1;
reg  signed [5:0] sext_ln1345_356_reg_5533;
wire  signed [5:0] mul_ln1345_566_fu_2088_p2;
reg  signed [5:0] mul_ln1345_566_reg_5538;
wire  signed [5:0] sext_ln1345_357_fu_2104_p1;
reg  signed [5:0] sext_ln1345_357_reg_5543;
wire  signed [5:0] mul_ln1345_567_fu_2108_p2;
reg  signed [5:0] mul_ln1345_567_reg_5548;
wire  signed [5:0] sext_ln1345_358_fu_2124_p1;
reg  signed [5:0] sext_ln1345_358_reg_5553;
wire  signed [5:0] mul_ln1345_568_fu_2128_p2;
reg  signed [5:0] mul_ln1345_568_reg_5558;
wire  signed [5:0] sext_ln1345_359_fu_2144_p1;
reg  signed [5:0] sext_ln1345_359_reg_5563;
wire  signed [5:0] mul_ln1345_569_fu_2148_p2;
reg  signed [5:0] mul_ln1345_569_reg_5568;
wire  signed [5:0] sext_ln1345_360_fu_2164_p1;
reg  signed [5:0] sext_ln1345_360_reg_5573;
wire  signed [5:0] mul_ln1345_570_fu_2168_p2;
reg  signed [5:0] mul_ln1345_570_reg_5578;
wire  signed [5:0] sext_ln1345_361_fu_2184_p1;
reg  signed [5:0] sext_ln1345_361_reg_5583;
wire  signed [5:0] mul_ln1345_571_fu_2188_p2;
reg  signed [5:0] mul_ln1345_571_reg_5588;
wire  signed [5:0] sext_ln1345_362_fu_2204_p1;
reg  signed [5:0] sext_ln1345_362_reg_5593;
wire  signed [5:0] mul_ln1345_572_fu_2208_p2;
reg  signed [5:0] mul_ln1345_572_reg_5598;
wire  signed [5:0] sext_ln1345_363_fu_2224_p1;
reg  signed [5:0] sext_ln1345_363_reg_5603;
wire  signed [5:0] mul_ln1345_573_fu_2228_p2;
reg  signed [5:0] mul_ln1345_573_reg_5608;
wire  signed [5:0] sext_ln1345_364_fu_2244_p1;
reg  signed [5:0] sext_ln1345_364_reg_5613;
wire  signed [5:0] mul_ln1345_574_fu_2248_p2;
reg  signed [5:0] mul_ln1345_574_reg_5618;
wire  signed [5:0] sext_ln1345_365_fu_2264_p1;
reg  signed [5:0] sext_ln1345_365_reg_5623;
wire  signed [5:0] mul_ln1345_575_fu_2268_p2;
reg  signed [5:0] mul_ln1345_575_reg_5628;
wire  signed [5:0] sext_ln1345_366_fu_2284_p1;
reg  signed [5:0] sext_ln1345_366_reg_5633;
wire  signed [5:0] mul_ln1345_576_fu_2288_p2;
reg  signed [5:0] mul_ln1345_576_reg_5638;
wire  signed [5:0] sext_ln1345_367_fu_2304_p1;
reg  signed [5:0] sext_ln1345_367_reg_5643;
wire  signed [5:0] mul_ln1345_577_fu_2308_p2;
reg  signed [5:0] mul_ln1345_577_reg_5648;
wire   [10:0] trunc_ln691_fu_2347_p1;
reg   [10:0] trunc_ln691_reg_5653;
wire   [6:0] add_ln691_fu_2366_p2;
reg   [6:0] add_ln691_reg_5658;
wire   [7:0] add_ln691_510_fu_2392_p2;
reg   [7:0] add_ln691_510_reg_5663;
reg   [10:0] tmp_408_reg_5668;
wire   [6:0] add_ln691_512_fu_2426_p2;
reg   [6:0] add_ln691_512_reg_5673;
wire   [7:0] add_ln691_516_fu_2452_p2;
reg   [7:0] add_ln691_516_reg_5678;
reg   [10:0] tmp_415_reg_5683;
wire   [6:0] add_ln691_518_fu_2486_p2;
reg   [6:0] add_ln691_518_reg_5688;
wire   [7:0] add_ln691_522_fu_2512_p2;
reg   [7:0] add_ln691_522_reg_5693;
reg   [10:0] tmp_422_reg_5698;
wire   [6:0] add_ln691_524_fu_2546_p2;
reg   [6:0] add_ln691_524_reg_5703;
wire   [7:0] add_ln691_528_fu_2572_p2;
reg   [7:0] add_ln691_528_reg_5708;
reg   [10:0] tmp_429_reg_5713;
wire   [6:0] add_ln691_530_fu_2606_p2;
reg   [6:0] add_ln691_530_reg_5718;
wire   [7:0] add_ln691_534_fu_2632_p2;
reg   [7:0] add_ln691_534_reg_5723;
reg   [10:0] tmp_436_reg_5728;
wire   [6:0] add_ln691_536_fu_2666_p2;
reg   [6:0] add_ln691_536_reg_5733;
wire   [7:0] add_ln691_540_fu_2692_p2;
reg   [7:0] add_ln691_540_reg_5738;
reg   [10:0] tmp_443_reg_5743;
wire   [6:0] add_ln691_542_fu_2726_p2;
reg   [6:0] add_ln691_542_reg_5748;
wire   [7:0] add_ln691_546_fu_2752_p2;
reg   [7:0] add_ln691_546_reg_5753;
reg   [10:0] tmp_450_reg_5758;
wire   [6:0] add_ln691_548_fu_2786_p2;
reg   [6:0] add_ln691_548_reg_5763;
wire   [7:0] add_ln691_552_fu_2812_p2;
reg   [7:0] add_ln691_552_reg_5768;
reg   [10:0] tmp_457_reg_5773;
wire   [6:0] add_ln691_554_fu_2846_p2;
reg   [6:0] add_ln691_554_reg_5778;
wire   [7:0] add_ln691_558_fu_2872_p2;
reg   [7:0] add_ln691_558_reg_5783;
reg   [10:0] tmp_464_reg_5788;
wire   [6:0] add_ln691_560_fu_2906_p2;
reg   [6:0] add_ln691_560_reg_5793;
wire   [7:0] add_ln691_564_fu_2932_p2;
reg   [7:0] add_ln691_564_reg_5798;
reg   [10:0] tmp_471_reg_5803;
wire   [6:0] add_ln691_566_fu_2966_p2;
reg   [6:0] add_ln691_566_reg_5808;
wire   [7:0] add_ln691_570_fu_2992_p2;
reg   [7:0] add_ln691_570_reg_5813;
reg   [10:0] tmp_478_reg_5818;
wire   [6:0] add_ln691_572_fu_3026_p2;
reg   [6:0] add_ln691_572_reg_5823;
wire   [7:0] add_ln691_576_fu_3052_p2;
reg   [7:0] add_ln691_576_reg_5828;
reg   [10:0] tmp_484_reg_5833;
wire   [6:0] add_ln691_578_fu_3140_p2;
reg   [6:0] add_ln691_578_reg_5838;
wire   [7:0] add_ln691_582_fu_3166_p2;
reg   [7:0] add_ln691_582_reg_5843;
reg   [10:0] tmp_485_reg_5848;
wire   [6:0] add_ln691_584_fu_3236_p2;
reg   [6:0] add_ln691_584_reg_5853;
wire   [7:0] add_ln691_588_fu_3262_p2;
reg   [7:0] add_ln691_588_reg_5858;
reg   [10:0] tmp_486_reg_5863;
wire   [6:0] add_ln691_590_fu_3332_p2;
reg   [6:0] add_ln691_590_reg_5868;
wire   [7:0] add_ln691_594_fu_3358_p2;
reg   [7:0] add_ln691_594_reg_5873;
reg   [10:0] tmp_487_reg_5878;
wire   [6:0] add_ln691_596_fu_3428_p2;
reg   [6:0] add_ln691_596_reg_5883;
wire   [7:0] add_ln691_600_fu_3454_p2;
reg   [7:0] add_ln691_600_reg_5888;
reg   [10:0] tmp_488_reg_5893;
wire   [6:0] add_ln691_602_fu_3524_p2;
reg   [6:0] add_ln691_602_reg_5898;
wire   [7:0] add_ln691_606_fu_3550_p2;
reg   [7:0] add_ln691_606_reg_5903;
reg   [10:0] tmp_489_reg_5908;
wire   [6:0] add_ln691_608_fu_3620_p2;
reg   [6:0] add_ln691_608_reg_5913;
wire   [7:0] add_ln691_612_fu_3646_p2;
reg   [7:0] add_ln691_612_reg_5918;
reg   [10:0] tmp_490_reg_5923;
wire   [6:0] add_ln691_614_fu_3716_p2;
reg   [6:0] add_ln691_614_reg_5928;
wire   [7:0] add_ln691_618_fu_3742_p2;
reg   [7:0] add_ln691_618_reg_5933;
reg   [10:0] tmp_491_reg_5938;
wire   [6:0] add_ln691_620_fu_3812_p2;
reg   [6:0] add_ln691_620_reg_5943;
wire   [7:0] add_ln691_624_fu_3838_p2;
reg   [7:0] add_ln691_624_reg_5948;
reg   [10:0] tmp_492_reg_5953;
wire   [6:0] add_ln691_626_fu_3908_p2;
reg   [6:0] add_ln691_626_reg_5958;
wire   [7:0] add_ln691_630_fu_3934_p2;
reg   [7:0] add_ln691_630_reg_5963;
reg   [10:0] tmp_493_reg_5968;
wire   [6:0] add_ln691_632_fu_4004_p2;
reg   [6:0] add_ln691_632_reg_5973;
wire   [7:0] add_ln691_636_fu_4030_p2;
reg   [7:0] add_ln691_636_reg_5978;
reg   [10:0] tmp_494_reg_5983;
wire   [6:0] add_ln691_638_fu_4100_p2;
reg   [6:0] add_ln691_638_reg_5988;
wire   [7:0] add_ln691_642_fu_4126_p2;
reg   [7:0] add_ln691_642_reg_5993;
reg   [10:0] tmp_495_reg_5998;
wire   [6:0] add_ln691_644_fu_4196_p2;
reg   [6:0] add_ln691_644_reg_6003;
wire   [7:0] add_ln691_648_fu_4222_p2;
reg   [7:0] add_ln691_648_reg_6008;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state6;
reg   [15:0] ap_phi_mux_indvar_flatten20_phi_fu_552_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_564_p4;
reg   [4:0] ap_phi_mux_cot_phi_fu_575_p4;
reg   [5:0] ap_phi_mux_cit_phi_fu_587_p4;
wire   [63:0] zext_ln121_fu_729_p1;
wire   [63:0] zext_ln215_3_fu_734_p1;
wire   [63:0] zext_ln121_3_fu_738_p1;
reg   [263:0] vec_o_data_M_elems_V_2_fu_496;
wire   [263:0] tmp_496_fu_4636_p25;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state1;
wire   [0:0] icmp_ln122_fu_620_p2;
wire   [0:0] xor_ln120_fu_614_p2;
wire   [0:0] or_ln121_fu_632_p2;
wire   [3:0] trunc_ln215_5_fu_667_p1;
wire   [3:0] trunc_ln215_fu_663_p1;
wire   [3:0] select_ln120_6_fu_671_p3;
wire   [3:0] select_ln121_9_fu_678_p3;
wire   [8:0] tmp_cast_fu_685_p3;
wire   [8:0] zext_ln215_fu_699_p1;
wire   [2:0] trunc_ln145_fu_742_p1;
wire  signed [2:0] trunc_ln215_6_fu_856_p1;
wire  signed [2:0] mul_ln1345_fu_868_p1;
wire  signed [5:0] sext_ln1345_fu_860_p1;
wire   [2:0] trunc_ln145_s_fu_746_p4;
wire  signed [2:0] tmp_s_fu_874_p4;
wire  signed [2:0] mul_ln1345_507_fu_892_p1;
wire  signed [5:0] sext_ln1345_292_fu_884_p1;
wire   [2:0] trunc_ln145_125_fu_756_p4;
wire  signed [2:0] tmp_403_fu_898_p4;
wire  signed [2:0] mul_ln1345_508_fu_916_p1;
wire  signed [5:0] sext_ln1345_294_fu_908_p1;
wire   [2:0] trunc_ln145_126_fu_766_p4;
wire  signed [2:0] tmp_404_fu_922_p4;
wire  signed [2:0] mul_ln1345_509_fu_940_p1;
wire  signed [5:0] sext_ln1345_296_fu_932_p1;
wire   [2:0] trunc_ln145_127_fu_776_p4;
wire  signed [2:0] tmp_405_fu_946_p4;
wire  signed [2:0] mul_ln1345_510_fu_964_p1;
wire  signed [5:0] sext_ln1345_298_fu_956_p1;
wire   [2:0] trunc_ln145_128_fu_786_p4;
wire  signed [2:0] tmp_406_fu_970_p4;
wire  signed [2:0] mul_ln1345_511_fu_988_p1;
wire  signed [5:0] sext_ln1345_300_fu_980_p1;
wire  signed [2:0] tmp_407_fu_994_p4;
wire  signed [2:0] mul_ln1345_512_fu_1008_p1;
wire  signed [2:0] tmp_409_fu_1014_p4;
wire  signed [2:0] mul_ln1345_513_fu_1028_p1;
wire  signed [2:0] tmp_410_fu_1034_p4;
wire  signed [2:0] mul_ln1345_514_fu_1048_p1;
wire  signed [2:0] tmp_411_fu_1054_p4;
wire  signed [2:0] mul_ln1345_515_fu_1068_p1;
wire  signed [2:0] tmp_412_fu_1074_p4;
wire  signed [2:0] mul_ln1345_516_fu_1088_p1;
wire  signed [2:0] tmp_413_fu_1094_p4;
wire  signed [2:0] mul_ln1345_517_fu_1108_p1;
wire  signed [2:0] tmp_414_fu_1114_p4;
wire  signed [2:0] mul_ln1345_518_fu_1128_p1;
wire  signed [2:0] tmp_416_fu_1134_p4;
wire  signed [2:0] mul_ln1345_519_fu_1148_p1;
wire  signed [2:0] tmp_417_fu_1154_p4;
wire  signed [2:0] mul_ln1345_520_fu_1168_p1;
wire  signed [2:0] tmp_418_fu_1174_p4;
wire  signed [2:0] mul_ln1345_521_fu_1188_p1;
wire  signed [2:0] tmp_419_fu_1194_p4;
wire  signed [2:0] mul_ln1345_522_fu_1208_p1;
wire  signed [2:0] tmp_420_fu_1214_p4;
wire  signed [2:0] mul_ln1345_523_fu_1228_p1;
wire  signed [2:0] tmp_421_fu_1234_p4;
wire  signed [2:0] mul_ln1345_524_fu_1248_p1;
wire  signed [2:0] tmp_423_fu_1254_p4;
wire  signed [2:0] mul_ln1345_525_fu_1268_p1;
wire  signed [2:0] tmp_424_fu_1274_p4;
wire  signed [2:0] mul_ln1345_526_fu_1288_p1;
wire  signed [2:0] tmp_425_fu_1294_p4;
wire  signed [2:0] mul_ln1345_527_fu_1308_p1;
wire  signed [2:0] tmp_426_fu_1314_p4;
wire  signed [2:0] mul_ln1345_528_fu_1328_p1;
wire  signed [2:0] tmp_427_fu_1334_p4;
wire  signed [2:0] mul_ln1345_529_fu_1348_p1;
wire  signed [2:0] tmp_428_fu_1354_p4;
wire  signed [2:0] mul_ln1345_530_fu_1368_p1;
wire  signed [2:0] tmp_430_fu_1374_p4;
wire  signed [2:0] mul_ln1345_531_fu_1388_p1;
wire  signed [2:0] tmp_431_fu_1394_p4;
wire  signed [2:0] mul_ln1345_532_fu_1408_p1;
wire  signed [2:0] tmp_432_fu_1414_p4;
wire  signed [2:0] mul_ln1345_533_fu_1428_p1;
wire  signed [2:0] tmp_433_fu_1434_p4;
wire  signed [2:0] mul_ln1345_534_fu_1448_p1;
wire  signed [2:0] tmp_434_fu_1454_p4;
wire  signed [2:0] mul_ln1345_535_fu_1468_p1;
wire  signed [2:0] tmp_435_fu_1474_p4;
wire  signed [2:0] mul_ln1345_536_fu_1488_p1;
wire  signed [2:0] tmp_437_fu_1494_p4;
wire  signed [2:0] mul_ln1345_537_fu_1508_p1;
wire  signed [2:0] tmp_438_fu_1514_p4;
wire  signed [2:0] mul_ln1345_538_fu_1528_p1;
wire  signed [2:0] tmp_439_fu_1534_p4;
wire  signed [2:0] mul_ln1345_539_fu_1548_p1;
wire  signed [2:0] tmp_440_fu_1554_p4;
wire  signed [2:0] mul_ln1345_540_fu_1568_p1;
wire  signed [2:0] tmp_441_fu_1574_p4;
wire  signed [2:0] mul_ln1345_541_fu_1588_p1;
wire  signed [2:0] tmp_442_fu_1594_p4;
wire  signed [2:0] mul_ln1345_542_fu_1608_p1;
wire  signed [2:0] tmp_444_fu_1614_p4;
wire  signed [2:0] mul_ln1345_543_fu_1628_p1;
wire  signed [2:0] tmp_445_fu_1634_p4;
wire  signed [2:0] mul_ln1345_544_fu_1648_p1;
wire  signed [2:0] tmp_446_fu_1654_p4;
wire  signed [2:0] mul_ln1345_545_fu_1668_p1;
wire  signed [2:0] tmp_447_fu_1674_p4;
wire  signed [2:0] mul_ln1345_546_fu_1688_p1;
wire  signed [2:0] tmp_448_fu_1694_p4;
wire  signed [2:0] mul_ln1345_547_fu_1708_p1;
wire  signed [2:0] tmp_449_fu_1714_p4;
wire  signed [2:0] mul_ln1345_548_fu_1728_p1;
wire  signed [2:0] tmp_451_fu_1734_p4;
wire  signed [2:0] mul_ln1345_549_fu_1748_p1;
wire  signed [2:0] tmp_452_fu_1754_p4;
wire  signed [2:0] mul_ln1345_550_fu_1768_p1;
wire  signed [2:0] tmp_453_fu_1774_p4;
wire  signed [2:0] mul_ln1345_551_fu_1788_p1;
wire  signed [2:0] tmp_454_fu_1794_p4;
wire  signed [2:0] mul_ln1345_552_fu_1808_p1;
wire  signed [2:0] tmp_455_fu_1814_p4;
wire  signed [2:0] mul_ln1345_553_fu_1828_p1;
wire  signed [2:0] tmp_456_fu_1834_p4;
wire  signed [2:0] mul_ln1345_554_fu_1848_p1;
wire  signed [2:0] tmp_458_fu_1854_p4;
wire  signed [2:0] mul_ln1345_555_fu_1868_p1;
wire  signed [2:0] tmp_459_fu_1874_p4;
wire  signed [2:0] mul_ln1345_556_fu_1888_p1;
wire  signed [2:0] tmp_460_fu_1894_p4;
wire  signed [2:0] mul_ln1345_557_fu_1908_p1;
wire  signed [2:0] tmp_461_fu_1914_p4;
wire  signed [2:0] mul_ln1345_558_fu_1928_p1;
wire  signed [2:0] tmp_462_fu_1934_p4;
wire  signed [2:0] mul_ln1345_559_fu_1948_p1;
wire  signed [2:0] tmp_463_fu_1954_p4;
wire  signed [2:0] mul_ln1345_560_fu_1968_p1;
wire  signed [2:0] tmp_465_fu_1974_p4;
wire  signed [2:0] mul_ln1345_561_fu_1988_p1;
wire  signed [2:0] tmp_466_fu_1994_p4;
wire  signed [2:0] mul_ln1345_562_fu_2008_p1;
wire  signed [2:0] tmp_467_fu_2014_p4;
wire  signed [2:0] mul_ln1345_563_fu_2028_p1;
wire  signed [2:0] tmp_468_fu_2034_p4;
wire  signed [2:0] mul_ln1345_564_fu_2048_p1;
wire  signed [2:0] tmp_469_fu_2054_p4;
wire  signed [2:0] mul_ln1345_565_fu_2068_p1;
wire  signed [2:0] tmp_470_fu_2074_p4;
wire  signed [2:0] mul_ln1345_566_fu_2088_p1;
wire  signed [2:0] tmp_472_fu_2094_p4;
wire  signed [2:0] mul_ln1345_567_fu_2108_p1;
wire  signed [2:0] tmp_473_fu_2114_p4;
wire  signed [2:0] mul_ln1345_568_fu_2128_p1;
wire  signed [2:0] tmp_474_fu_2134_p4;
wire  signed [2:0] mul_ln1345_569_fu_2148_p1;
wire  signed [2:0] tmp_475_fu_2154_p4;
wire  signed [2:0] mul_ln1345_570_fu_2168_p1;
wire  signed [2:0] tmp_476_fu_2174_p4;
wire  signed [2:0] mul_ln1345_571_fu_2188_p1;
wire  signed [2:0] tmp_477_fu_2194_p4;
wire  signed [2:0] mul_ln1345_572_fu_2208_p1;
wire  signed [2:0] tmp_479_fu_2214_p4;
wire  signed [2:0] mul_ln1345_573_fu_2228_p1;
wire  signed [2:0] tmp_480_fu_2234_p4;
wire  signed [2:0] mul_ln1345_574_fu_2248_p1;
wire  signed [2:0] tmp_481_fu_2254_p4;
wire  signed [2:0] mul_ln1345_575_fu_2268_p1;
wire  signed [2:0] tmp_482_fu_2274_p4;
wire  signed [2:0] mul_ln1345_576_fu_2288_p1;
wire  signed [2:0] tmp_483_fu_2294_p4;
wire  signed [2:0] mul_ln1345_577_fu_2308_p1;
wire   [131:0] select_ln120_5_fu_2317_p3;
wire   [131:0] select_ln121_10_fu_2322_p3;
wire   [263:0] vec_o_data_M_elems_V_fu_2329_p3;
wire   [263:0] select_ln126_fu_2337_p3;
wire  signed [6:0] sext_ln151_192_fu_2357_p1;
wire  signed [6:0] sext_ln151_193_fu_2360_p1;
wire  signed [6:0] sext_ln151_191_fu_2354_p1;
wire  signed [6:0] sext_ln151_fu_2351_p1;
wire   [6:0] add_ln691_508_fu_2372_p2;
wire  signed [6:0] sext_ln691_fu_2344_p1;
wire  signed [6:0] sext_ln691_507_fu_2363_p1;
wire   [6:0] add_ln691_509_fu_2382_p2;
wire  signed [7:0] sext_ln691_510_fu_2388_p1;
wire  signed [7:0] sext_ln691_509_fu_2378_p1;
wire  signed [6:0] sext_ln151_196_fu_2417_p1;
wire  signed [6:0] sext_ln151_197_fu_2420_p1;
wire  signed [6:0] sext_ln151_195_fu_2414_p1;
wire  signed [6:0] sext_ln151_194_fu_2411_p1;
wire   [6:0] add_ln691_514_fu_2432_p2;
wire  signed [6:0] sext_ln691_512_fu_2398_p1;
wire  signed [6:0] sext_ln691_513_fu_2423_p1;
wire   [6:0] add_ln691_515_fu_2442_p2;
wire  signed [7:0] sext_ln691_516_fu_2448_p1;
wire  signed [7:0] sext_ln691_515_fu_2438_p1;
wire  signed [6:0] sext_ln151_200_fu_2477_p1;
wire  signed [6:0] sext_ln151_201_fu_2480_p1;
wire  signed [6:0] sext_ln151_199_fu_2474_p1;
wire  signed [6:0] sext_ln151_198_fu_2471_p1;
wire   [6:0] add_ln691_520_fu_2492_p2;
wire  signed [6:0] sext_ln691_518_fu_2458_p1;
wire  signed [6:0] sext_ln691_519_fu_2483_p1;
wire   [6:0] add_ln691_521_fu_2502_p2;
wire  signed [7:0] sext_ln691_522_fu_2508_p1;
wire  signed [7:0] sext_ln691_521_fu_2498_p1;
wire  signed [6:0] sext_ln151_204_fu_2537_p1;
wire  signed [6:0] sext_ln151_205_fu_2540_p1;
wire  signed [6:0] sext_ln151_203_fu_2534_p1;
wire  signed [6:0] sext_ln151_202_fu_2531_p1;
wire   [6:0] add_ln691_526_fu_2552_p2;
wire  signed [6:0] sext_ln691_524_fu_2518_p1;
wire  signed [6:0] sext_ln691_525_fu_2543_p1;
wire   [6:0] add_ln691_527_fu_2562_p2;
wire  signed [7:0] sext_ln691_528_fu_2568_p1;
wire  signed [7:0] sext_ln691_527_fu_2558_p1;
wire  signed [6:0] sext_ln151_208_fu_2597_p1;
wire  signed [6:0] sext_ln151_209_fu_2600_p1;
wire  signed [6:0] sext_ln151_207_fu_2594_p1;
wire  signed [6:0] sext_ln151_206_fu_2591_p1;
wire   [6:0] add_ln691_532_fu_2612_p2;
wire  signed [6:0] sext_ln691_530_fu_2578_p1;
wire  signed [6:0] sext_ln691_531_fu_2603_p1;
wire   [6:0] add_ln691_533_fu_2622_p2;
wire  signed [7:0] sext_ln691_534_fu_2628_p1;
wire  signed [7:0] sext_ln691_533_fu_2618_p1;
wire  signed [6:0] sext_ln151_212_fu_2657_p1;
wire  signed [6:0] sext_ln151_213_fu_2660_p1;
wire  signed [6:0] sext_ln151_211_fu_2654_p1;
wire  signed [6:0] sext_ln151_210_fu_2651_p1;
wire   [6:0] add_ln691_538_fu_2672_p2;
wire  signed [6:0] sext_ln691_536_fu_2638_p1;
wire  signed [6:0] sext_ln691_537_fu_2663_p1;
wire   [6:0] add_ln691_539_fu_2682_p2;
wire  signed [7:0] sext_ln691_540_fu_2688_p1;
wire  signed [7:0] sext_ln691_539_fu_2678_p1;
wire  signed [6:0] sext_ln151_216_fu_2717_p1;
wire  signed [6:0] sext_ln151_217_fu_2720_p1;
wire  signed [6:0] sext_ln151_215_fu_2714_p1;
wire  signed [6:0] sext_ln151_214_fu_2711_p1;
wire   [6:0] add_ln691_544_fu_2732_p2;
wire  signed [6:0] sext_ln691_542_fu_2698_p1;
wire  signed [6:0] sext_ln691_543_fu_2723_p1;
wire   [6:0] add_ln691_545_fu_2742_p2;
wire  signed [7:0] sext_ln691_546_fu_2748_p1;
wire  signed [7:0] sext_ln691_545_fu_2738_p1;
wire  signed [6:0] sext_ln151_220_fu_2777_p1;
wire  signed [6:0] sext_ln151_221_fu_2780_p1;
wire  signed [6:0] sext_ln151_219_fu_2774_p1;
wire  signed [6:0] sext_ln151_218_fu_2771_p1;
wire   [6:0] add_ln691_550_fu_2792_p2;
wire  signed [6:0] sext_ln691_548_fu_2758_p1;
wire  signed [6:0] sext_ln691_549_fu_2783_p1;
wire   [6:0] add_ln691_551_fu_2802_p2;
wire  signed [7:0] sext_ln691_552_fu_2808_p1;
wire  signed [7:0] sext_ln691_551_fu_2798_p1;
wire  signed [6:0] sext_ln151_224_fu_2837_p1;
wire  signed [6:0] sext_ln151_225_fu_2840_p1;
wire  signed [6:0] sext_ln151_223_fu_2834_p1;
wire  signed [6:0] sext_ln151_222_fu_2831_p1;
wire   [6:0] add_ln691_556_fu_2852_p2;
wire  signed [6:0] sext_ln691_554_fu_2818_p1;
wire  signed [6:0] sext_ln691_555_fu_2843_p1;
wire   [6:0] add_ln691_557_fu_2862_p2;
wire  signed [7:0] sext_ln691_558_fu_2868_p1;
wire  signed [7:0] sext_ln691_557_fu_2858_p1;
wire  signed [6:0] sext_ln151_228_fu_2897_p1;
wire  signed [6:0] sext_ln151_229_fu_2900_p1;
wire  signed [6:0] sext_ln151_227_fu_2894_p1;
wire  signed [6:0] sext_ln151_226_fu_2891_p1;
wire   [6:0] add_ln691_562_fu_2912_p2;
wire  signed [6:0] sext_ln691_560_fu_2878_p1;
wire  signed [6:0] sext_ln691_561_fu_2903_p1;
wire   [6:0] add_ln691_563_fu_2922_p2;
wire  signed [7:0] sext_ln691_564_fu_2928_p1;
wire  signed [7:0] sext_ln691_563_fu_2918_p1;
wire  signed [6:0] sext_ln151_232_fu_2957_p1;
wire  signed [6:0] sext_ln151_233_fu_2960_p1;
wire  signed [6:0] sext_ln151_231_fu_2954_p1;
wire  signed [6:0] sext_ln151_230_fu_2951_p1;
wire   [6:0] add_ln691_568_fu_2972_p2;
wire  signed [6:0] sext_ln691_566_fu_2938_p1;
wire  signed [6:0] sext_ln691_567_fu_2963_p1;
wire   [6:0] add_ln691_569_fu_2982_p2;
wire  signed [7:0] sext_ln691_570_fu_2988_p1;
wire  signed [7:0] sext_ln691_569_fu_2978_p1;
wire  signed [6:0] sext_ln151_236_fu_3017_p1;
wire  signed [6:0] sext_ln151_237_fu_3020_p1;
wire  signed [6:0] sext_ln151_235_fu_3014_p1;
wire  signed [6:0] sext_ln151_234_fu_3011_p1;
wire   [6:0] add_ln691_574_fu_3032_p2;
wire  signed [6:0] sext_ln691_572_fu_2998_p1;
wire  signed [6:0] sext_ln691_573_fu_3023_p1;
wire   [6:0] add_ln691_575_fu_3042_p2;
wire  signed [7:0] sext_ln691_576_fu_3048_p1;
wire  signed [7:0] sext_ln691_575_fu_3038_p1;
wire  signed [2:0] mul_ln1345_578_fu_3061_p0;
wire  signed [2:0] mul_ln1345_578_fu_3061_p1;
wire  signed [5:0] sext_ln1345_368_fu_3058_p1;
wire  signed [5:0] mul_ln1345_578_fu_3061_p2;
wire  signed [2:0] mul_ln1345_579_fu_3083_p0;
wire  signed [2:0] mul_ln1345_579_fu_3083_p1;
wire  signed [5:0] sext_ln1345_369_fu_3080_p1;
wire  signed [5:0] mul_ln1345_579_fu_3083_p2;
wire  signed [2:0] mul_ln1345_580_fu_3095_p0;
wire  signed [2:0] mul_ln1345_580_fu_3095_p1;
wire  signed [5:0] sext_ln1345_370_fu_3092_p1;
wire  signed [5:0] mul_ln1345_580_fu_3095_p2;
wire  signed [2:0] mul_ln1345_581_fu_3107_p0;
wire  signed [2:0] mul_ln1345_581_fu_3107_p1;
wire  signed [5:0] sext_ln1345_371_fu_3104_p1;
wire  signed [5:0] mul_ln1345_581_fu_3107_p2;
wire  signed [2:0] mul_ln1345_582_fu_3119_p0;
wire  signed [2:0] mul_ln1345_582_fu_3119_p1;
wire  signed [5:0] sext_ln1345_372_fu_3116_p1;
wire  signed [5:0] mul_ln1345_582_fu_3119_p2;
wire  signed [2:0] mul_ln1345_583_fu_3131_p0;
wire  signed [2:0] mul_ln1345_583_fu_3131_p1;
wire  signed [5:0] sext_ln1345_373_fu_3128_p1;
wire  signed [5:0] mul_ln1345_583_fu_3131_p2;
wire  signed [6:0] sext_ln151_240_fu_3112_p1;
wire  signed [6:0] sext_ln151_241_fu_3124_p1;
wire  signed [6:0] sext_ln151_239_fu_3100_p1;
wire  signed [6:0] sext_ln151_238_fu_3088_p1;
wire   [6:0] add_ln691_580_fu_3146_p2;
wire  signed [6:0] sext_ln691_578_fu_3066_p1;
wire  signed [6:0] sext_ln691_579_fu_3136_p1;
wire   [6:0] add_ln691_581_fu_3156_p2;
wire  signed [7:0] sext_ln691_582_fu_3162_p1;
wire  signed [7:0] sext_ln691_581_fu_3152_p1;
wire  signed [2:0] mul_ln1345_584_fu_3172_p0;
wire  signed [2:0] mul_ln1345_584_fu_3172_p1;
wire  signed [5:0] mul_ln1345_584_fu_3172_p2;
wire  signed [2:0] mul_ln1345_585_fu_3191_p0;
wire  signed [2:0] mul_ln1345_585_fu_3191_p1;
wire  signed [5:0] mul_ln1345_585_fu_3191_p2;
wire  signed [2:0] mul_ln1345_586_fu_3200_p0;
wire  signed [2:0] mul_ln1345_586_fu_3200_p1;
wire  signed [5:0] mul_ln1345_586_fu_3200_p2;
wire  signed [2:0] mul_ln1345_587_fu_3209_p0;
wire  signed [2:0] mul_ln1345_587_fu_3209_p1;
wire  signed [5:0] mul_ln1345_587_fu_3209_p2;
wire  signed [2:0] mul_ln1345_588_fu_3218_p0;
wire  signed [2:0] mul_ln1345_588_fu_3218_p1;
wire  signed [5:0] mul_ln1345_588_fu_3218_p2;
wire  signed [2:0] mul_ln1345_589_fu_3227_p0;
wire  signed [2:0] mul_ln1345_589_fu_3227_p1;
wire  signed [5:0] mul_ln1345_589_fu_3227_p2;
wire  signed [6:0] sext_ln151_244_fu_3214_p1;
wire  signed [6:0] sext_ln151_245_fu_3223_p1;
wire  signed [6:0] sext_ln151_243_fu_3205_p1;
wire  signed [6:0] sext_ln151_242_fu_3196_p1;
wire   [6:0] add_ln691_586_fu_3242_p2;
wire  signed [6:0] sext_ln691_584_fu_3177_p1;
wire  signed [6:0] sext_ln691_585_fu_3232_p1;
wire   [6:0] add_ln691_587_fu_3252_p2;
wire  signed [7:0] sext_ln691_588_fu_3258_p1;
wire  signed [7:0] sext_ln691_587_fu_3248_p1;
wire  signed [2:0] mul_ln1345_590_fu_3268_p0;
wire  signed [2:0] mul_ln1345_590_fu_3268_p1;
wire  signed [5:0] mul_ln1345_590_fu_3268_p2;
wire  signed [2:0] mul_ln1345_591_fu_3287_p0;
wire  signed [2:0] mul_ln1345_591_fu_3287_p1;
wire  signed [5:0] mul_ln1345_591_fu_3287_p2;
wire  signed [2:0] mul_ln1345_592_fu_3296_p0;
wire  signed [2:0] mul_ln1345_592_fu_3296_p1;
wire  signed [5:0] mul_ln1345_592_fu_3296_p2;
wire  signed [2:0] mul_ln1345_593_fu_3305_p0;
wire  signed [2:0] mul_ln1345_593_fu_3305_p1;
wire  signed [5:0] mul_ln1345_593_fu_3305_p2;
wire  signed [2:0] mul_ln1345_594_fu_3314_p0;
wire  signed [2:0] mul_ln1345_594_fu_3314_p1;
wire  signed [5:0] mul_ln1345_594_fu_3314_p2;
wire  signed [2:0] mul_ln1345_595_fu_3323_p0;
wire  signed [2:0] mul_ln1345_595_fu_3323_p1;
wire  signed [5:0] mul_ln1345_595_fu_3323_p2;
wire  signed [6:0] sext_ln151_248_fu_3310_p1;
wire  signed [6:0] sext_ln151_249_fu_3319_p1;
wire  signed [6:0] sext_ln151_247_fu_3301_p1;
wire  signed [6:0] sext_ln151_246_fu_3292_p1;
wire   [6:0] add_ln691_592_fu_3338_p2;
wire  signed [6:0] sext_ln691_590_fu_3273_p1;
wire  signed [6:0] sext_ln691_591_fu_3328_p1;
wire   [6:0] add_ln691_593_fu_3348_p2;
wire  signed [7:0] sext_ln691_594_fu_3354_p1;
wire  signed [7:0] sext_ln691_593_fu_3344_p1;
wire  signed [2:0] mul_ln1345_596_fu_3364_p0;
wire  signed [2:0] mul_ln1345_596_fu_3364_p1;
wire  signed [5:0] mul_ln1345_596_fu_3364_p2;
wire  signed [2:0] mul_ln1345_597_fu_3383_p0;
wire  signed [2:0] mul_ln1345_597_fu_3383_p1;
wire  signed [5:0] mul_ln1345_597_fu_3383_p2;
wire  signed [2:0] mul_ln1345_598_fu_3392_p0;
wire  signed [2:0] mul_ln1345_598_fu_3392_p1;
wire  signed [5:0] mul_ln1345_598_fu_3392_p2;
wire  signed [2:0] mul_ln1345_599_fu_3401_p0;
wire  signed [2:0] mul_ln1345_599_fu_3401_p1;
wire  signed [5:0] mul_ln1345_599_fu_3401_p2;
wire  signed [2:0] mul_ln1345_600_fu_3410_p0;
wire  signed [2:0] mul_ln1345_600_fu_3410_p1;
wire  signed [5:0] mul_ln1345_600_fu_3410_p2;
wire  signed [2:0] mul_ln1345_601_fu_3419_p0;
wire  signed [2:0] mul_ln1345_601_fu_3419_p1;
wire  signed [5:0] mul_ln1345_601_fu_3419_p2;
wire  signed [6:0] sext_ln151_252_fu_3406_p1;
wire  signed [6:0] sext_ln151_253_fu_3415_p1;
wire  signed [6:0] sext_ln151_251_fu_3397_p1;
wire  signed [6:0] sext_ln151_250_fu_3388_p1;
wire   [6:0] add_ln691_598_fu_3434_p2;
wire  signed [6:0] sext_ln691_596_fu_3369_p1;
wire  signed [6:0] sext_ln691_597_fu_3424_p1;
wire   [6:0] add_ln691_599_fu_3444_p2;
wire  signed [7:0] sext_ln691_600_fu_3450_p1;
wire  signed [7:0] sext_ln691_599_fu_3440_p1;
wire  signed [2:0] mul_ln1345_602_fu_3460_p0;
wire  signed [2:0] mul_ln1345_602_fu_3460_p1;
wire  signed [5:0] mul_ln1345_602_fu_3460_p2;
wire  signed [2:0] mul_ln1345_603_fu_3479_p0;
wire  signed [2:0] mul_ln1345_603_fu_3479_p1;
wire  signed [5:0] mul_ln1345_603_fu_3479_p2;
wire  signed [2:0] mul_ln1345_604_fu_3488_p0;
wire  signed [2:0] mul_ln1345_604_fu_3488_p1;
wire  signed [5:0] mul_ln1345_604_fu_3488_p2;
wire  signed [2:0] mul_ln1345_605_fu_3497_p0;
wire  signed [2:0] mul_ln1345_605_fu_3497_p1;
wire  signed [5:0] mul_ln1345_605_fu_3497_p2;
wire  signed [2:0] mul_ln1345_606_fu_3506_p0;
wire  signed [2:0] mul_ln1345_606_fu_3506_p1;
wire  signed [5:0] mul_ln1345_606_fu_3506_p2;
wire  signed [2:0] mul_ln1345_607_fu_3515_p0;
wire  signed [2:0] mul_ln1345_607_fu_3515_p1;
wire  signed [5:0] mul_ln1345_607_fu_3515_p2;
wire  signed [6:0] sext_ln151_256_fu_3502_p1;
wire  signed [6:0] sext_ln151_257_fu_3511_p1;
wire  signed [6:0] sext_ln151_255_fu_3493_p1;
wire  signed [6:0] sext_ln151_254_fu_3484_p1;
wire   [6:0] add_ln691_604_fu_3530_p2;
wire  signed [6:0] sext_ln691_602_fu_3465_p1;
wire  signed [6:0] sext_ln691_603_fu_3520_p1;
wire   [6:0] add_ln691_605_fu_3540_p2;
wire  signed [7:0] sext_ln691_606_fu_3546_p1;
wire  signed [7:0] sext_ln691_605_fu_3536_p1;
wire  signed [2:0] mul_ln1345_608_fu_3556_p0;
wire  signed [2:0] mul_ln1345_608_fu_3556_p1;
wire  signed [5:0] mul_ln1345_608_fu_3556_p2;
wire  signed [2:0] mul_ln1345_609_fu_3575_p0;
wire  signed [2:0] mul_ln1345_609_fu_3575_p1;
wire  signed [5:0] mul_ln1345_609_fu_3575_p2;
wire  signed [2:0] mul_ln1345_610_fu_3584_p0;
wire  signed [2:0] mul_ln1345_610_fu_3584_p1;
wire  signed [5:0] mul_ln1345_610_fu_3584_p2;
wire  signed [2:0] mul_ln1345_611_fu_3593_p0;
wire  signed [2:0] mul_ln1345_611_fu_3593_p1;
wire  signed [5:0] mul_ln1345_611_fu_3593_p2;
wire  signed [2:0] mul_ln1345_612_fu_3602_p0;
wire  signed [2:0] mul_ln1345_612_fu_3602_p1;
wire  signed [5:0] mul_ln1345_612_fu_3602_p2;
wire  signed [2:0] mul_ln1345_613_fu_3611_p0;
wire  signed [2:0] mul_ln1345_613_fu_3611_p1;
wire  signed [5:0] mul_ln1345_613_fu_3611_p2;
wire  signed [6:0] sext_ln151_260_fu_3598_p1;
wire  signed [6:0] sext_ln151_261_fu_3607_p1;
wire  signed [6:0] sext_ln151_259_fu_3589_p1;
wire  signed [6:0] sext_ln151_258_fu_3580_p1;
wire   [6:0] add_ln691_610_fu_3626_p2;
wire  signed [6:0] sext_ln691_608_fu_3561_p1;
wire  signed [6:0] sext_ln691_609_fu_3616_p1;
wire   [6:0] add_ln691_611_fu_3636_p2;
wire  signed [7:0] sext_ln691_612_fu_3642_p1;
wire  signed [7:0] sext_ln691_611_fu_3632_p1;
wire  signed [2:0] mul_ln1345_614_fu_3652_p0;
wire  signed [2:0] mul_ln1345_614_fu_3652_p1;
wire  signed [5:0] mul_ln1345_614_fu_3652_p2;
wire  signed [2:0] mul_ln1345_615_fu_3671_p0;
wire  signed [2:0] mul_ln1345_615_fu_3671_p1;
wire  signed [5:0] mul_ln1345_615_fu_3671_p2;
wire  signed [2:0] mul_ln1345_616_fu_3680_p0;
wire  signed [2:0] mul_ln1345_616_fu_3680_p1;
wire  signed [5:0] mul_ln1345_616_fu_3680_p2;
wire  signed [2:0] mul_ln1345_617_fu_3689_p0;
wire  signed [2:0] mul_ln1345_617_fu_3689_p1;
wire  signed [5:0] mul_ln1345_617_fu_3689_p2;
wire  signed [2:0] mul_ln1345_618_fu_3698_p0;
wire  signed [2:0] mul_ln1345_618_fu_3698_p1;
wire  signed [5:0] mul_ln1345_618_fu_3698_p2;
wire  signed [2:0] mul_ln1345_619_fu_3707_p0;
wire  signed [2:0] mul_ln1345_619_fu_3707_p1;
wire  signed [5:0] mul_ln1345_619_fu_3707_p2;
wire  signed [6:0] sext_ln151_264_fu_3694_p1;
wire  signed [6:0] sext_ln151_265_fu_3703_p1;
wire  signed [6:0] sext_ln151_263_fu_3685_p1;
wire  signed [6:0] sext_ln151_262_fu_3676_p1;
wire   [6:0] add_ln691_616_fu_3722_p2;
wire  signed [6:0] sext_ln691_614_fu_3657_p1;
wire  signed [6:0] sext_ln691_615_fu_3712_p1;
wire   [6:0] add_ln691_617_fu_3732_p2;
wire  signed [7:0] sext_ln691_618_fu_3738_p1;
wire  signed [7:0] sext_ln691_617_fu_3728_p1;
wire  signed [2:0] mul_ln1345_620_fu_3748_p0;
wire  signed [2:0] mul_ln1345_620_fu_3748_p1;
wire  signed [5:0] mul_ln1345_620_fu_3748_p2;
wire  signed [2:0] mul_ln1345_621_fu_3767_p0;
wire  signed [2:0] mul_ln1345_621_fu_3767_p1;
wire  signed [5:0] mul_ln1345_621_fu_3767_p2;
wire  signed [2:0] mul_ln1345_622_fu_3776_p0;
wire  signed [2:0] mul_ln1345_622_fu_3776_p1;
wire  signed [5:0] mul_ln1345_622_fu_3776_p2;
wire  signed [2:0] mul_ln1345_623_fu_3785_p0;
wire  signed [2:0] mul_ln1345_623_fu_3785_p1;
wire  signed [5:0] mul_ln1345_623_fu_3785_p2;
wire  signed [2:0] mul_ln1345_624_fu_3794_p0;
wire  signed [2:0] mul_ln1345_624_fu_3794_p1;
wire  signed [5:0] mul_ln1345_624_fu_3794_p2;
wire  signed [2:0] mul_ln1345_625_fu_3803_p0;
wire  signed [2:0] mul_ln1345_625_fu_3803_p1;
wire  signed [5:0] mul_ln1345_625_fu_3803_p2;
wire  signed [6:0] sext_ln151_268_fu_3790_p1;
wire  signed [6:0] sext_ln151_269_fu_3799_p1;
wire  signed [6:0] sext_ln151_267_fu_3781_p1;
wire  signed [6:0] sext_ln151_266_fu_3772_p1;
wire   [6:0] add_ln691_622_fu_3818_p2;
wire  signed [6:0] sext_ln691_620_fu_3753_p1;
wire  signed [6:0] sext_ln691_621_fu_3808_p1;
wire   [6:0] add_ln691_623_fu_3828_p2;
wire  signed [7:0] sext_ln691_624_fu_3834_p1;
wire  signed [7:0] sext_ln691_623_fu_3824_p1;
wire  signed [2:0] mul_ln1345_626_fu_3844_p0;
wire  signed [2:0] mul_ln1345_626_fu_3844_p1;
wire  signed [5:0] mul_ln1345_626_fu_3844_p2;
wire  signed [2:0] mul_ln1345_627_fu_3863_p0;
wire  signed [2:0] mul_ln1345_627_fu_3863_p1;
wire  signed [5:0] mul_ln1345_627_fu_3863_p2;
wire  signed [2:0] mul_ln1345_628_fu_3872_p0;
wire  signed [2:0] mul_ln1345_628_fu_3872_p1;
wire  signed [5:0] mul_ln1345_628_fu_3872_p2;
wire  signed [2:0] mul_ln1345_629_fu_3881_p0;
wire  signed [2:0] mul_ln1345_629_fu_3881_p1;
wire  signed [5:0] mul_ln1345_629_fu_3881_p2;
wire  signed [2:0] mul_ln1345_630_fu_3890_p0;
wire  signed [2:0] mul_ln1345_630_fu_3890_p1;
wire  signed [5:0] mul_ln1345_630_fu_3890_p2;
wire  signed [2:0] mul_ln1345_631_fu_3899_p0;
wire  signed [2:0] mul_ln1345_631_fu_3899_p1;
wire  signed [5:0] mul_ln1345_631_fu_3899_p2;
wire  signed [6:0] sext_ln151_272_fu_3886_p1;
wire  signed [6:0] sext_ln151_273_fu_3895_p1;
wire  signed [6:0] sext_ln151_271_fu_3877_p1;
wire  signed [6:0] sext_ln151_270_fu_3868_p1;
wire   [6:0] add_ln691_628_fu_3914_p2;
wire  signed [6:0] sext_ln691_626_fu_3849_p1;
wire  signed [6:0] sext_ln691_627_fu_3904_p1;
wire   [6:0] add_ln691_629_fu_3924_p2;
wire  signed [7:0] sext_ln691_630_fu_3930_p1;
wire  signed [7:0] sext_ln691_629_fu_3920_p1;
wire  signed [2:0] mul_ln1345_632_fu_3940_p0;
wire  signed [2:0] mul_ln1345_632_fu_3940_p1;
wire  signed [5:0] mul_ln1345_632_fu_3940_p2;
wire  signed [2:0] mul_ln1345_633_fu_3959_p0;
wire  signed [2:0] mul_ln1345_633_fu_3959_p1;
wire  signed [5:0] mul_ln1345_633_fu_3959_p2;
wire  signed [2:0] mul_ln1345_634_fu_3968_p0;
wire  signed [2:0] mul_ln1345_634_fu_3968_p1;
wire  signed [5:0] mul_ln1345_634_fu_3968_p2;
wire  signed [2:0] mul_ln1345_635_fu_3977_p0;
wire  signed [2:0] mul_ln1345_635_fu_3977_p1;
wire  signed [5:0] mul_ln1345_635_fu_3977_p2;
wire  signed [2:0] mul_ln1345_636_fu_3986_p0;
wire  signed [2:0] mul_ln1345_636_fu_3986_p1;
wire  signed [5:0] mul_ln1345_636_fu_3986_p2;
wire  signed [2:0] mul_ln1345_637_fu_3995_p0;
wire  signed [2:0] mul_ln1345_637_fu_3995_p1;
wire  signed [5:0] mul_ln1345_637_fu_3995_p2;
wire  signed [6:0] sext_ln151_276_fu_3982_p1;
wire  signed [6:0] sext_ln151_277_fu_3991_p1;
wire  signed [6:0] sext_ln151_275_fu_3973_p1;
wire  signed [6:0] sext_ln151_274_fu_3964_p1;
wire   [6:0] add_ln691_634_fu_4010_p2;
wire  signed [6:0] sext_ln691_632_fu_3945_p1;
wire  signed [6:0] sext_ln691_633_fu_4000_p1;
wire   [6:0] add_ln691_635_fu_4020_p2;
wire  signed [7:0] sext_ln691_636_fu_4026_p1;
wire  signed [7:0] sext_ln691_635_fu_4016_p1;
wire  signed [2:0] mul_ln1345_638_fu_4036_p0;
wire  signed [2:0] mul_ln1345_638_fu_4036_p1;
wire  signed [5:0] mul_ln1345_638_fu_4036_p2;
wire  signed [2:0] mul_ln1345_639_fu_4055_p0;
wire  signed [2:0] mul_ln1345_639_fu_4055_p1;
wire  signed [5:0] mul_ln1345_639_fu_4055_p2;
wire  signed [2:0] mul_ln1345_640_fu_4064_p0;
wire  signed [2:0] mul_ln1345_640_fu_4064_p1;
wire  signed [5:0] mul_ln1345_640_fu_4064_p2;
wire  signed [2:0] mul_ln1345_641_fu_4073_p0;
wire  signed [2:0] mul_ln1345_641_fu_4073_p1;
wire  signed [5:0] mul_ln1345_641_fu_4073_p2;
wire  signed [2:0] mul_ln1345_642_fu_4082_p0;
wire  signed [2:0] mul_ln1345_642_fu_4082_p1;
wire  signed [5:0] mul_ln1345_642_fu_4082_p2;
wire  signed [2:0] mul_ln1345_643_fu_4091_p0;
wire  signed [2:0] mul_ln1345_643_fu_4091_p1;
wire  signed [5:0] mul_ln1345_643_fu_4091_p2;
wire  signed [6:0] sext_ln151_280_fu_4078_p1;
wire  signed [6:0] sext_ln151_281_fu_4087_p1;
wire  signed [6:0] sext_ln151_279_fu_4069_p1;
wire  signed [6:0] sext_ln151_278_fu_4060_p1;
wire   [6:0] add_ln691_640_fu_4106_p2;
wire  signed [6:0] sext_ln691_638_fu_4041_p1;
wire  signed [6:0] sext_ln691_639_fu_4096_p1;
wire   [6:0] add_ln691_641_fu_4116_p2;
wire  signed [7:0] sext_ln691_642_fu_4122_p1;
wire  signed [7:0] sext_ln691_641_fu_4112_p1;
wire  signed [2:0] mul_ln1345_644_fu_4132_p0;
wire  signed [2:0] mul_ln1345_644_fu_4132_p1;
wire  signed [5:0] mul_ln1345_644_fu_4132_p2;
wire  signed [2:0] mul_ln1345_645_fu_4151_p0;
wire  signed [2:0] mul_ln1345_645_fu_4151_p1;
wire  signed [5:0] mul_ln1345_645_fu_4151_p2;
wire  signed [2:0] mul_ln1345_646_fu_4160_p0;
wire  signed [2:0] mul_ln1345_646_fu_4160_p1;
wire  signed [5:0] mul_ln1345_646_fu_4160_p2;
wire  signed [2:0] mul_ln1345_647_fu_4169_p0;
wire  signed [2:0] mul_ln1345_647_fu_4169_p1;
wire  signed [5:0] mul_ln1345_647_fu_4169_p2;
wire  signed [2:0] mul_ln1345_648_fu_4178_p0;
wire  signed [2:0] mul_ln1345_648_fu_4178_p1;
wire  signed [5:0] mul_ln1345_648_fu_4178_p2;
wire  signed [2:0] mul_ln1345_649_fu_4187_p0;
wire  signed [2:0] mul_ln1345_649_fu_4187_p1;
wire  signed [5:0] mul_ln1345_649_fu_4187_p2;
wire  signed [6:0] sext_ln151_284_fu_4174_p1;
wire  signed [6:0] sext_ln151_285_fu_4183_p1;
wire  signed [6:0] sext_ln151_283_fu_4165_p1;
wire  signed [6:0] sext_ln151_282_fu_4156_p1;
wire   [6:0] add_ln691_646_fu_4202_p2;
wire  signed [6:0] sext_ln691_644_fu_4137_p1;
wire  signed [6:0] sext_ln691_645_fu_4192_p1;
wire   [6:0] add_ln691_647_fu_4212_p2;
wire  signed [7:0] sext_ln691_648_fu_4218_p1;
wire  signed [7:0] sext_ln691_647_fu_4208_p1;
wire  signed [10:0] sext_ln691_508_fu_4228_p1;
wire  signed [10:0] sext_ln691_511_fu_4236_p1;
wire   [10:0] add_ln691_507_fu_4231_p2;
wire  signed [10:0] sext_ln691_514_fu_4245_p1;
wire  signed [10:0] sext_ln691_517_fu_4253_p1;
wire   [10:0] add_ln691_513_fu_4248_p2;
wire  signed [10:0] sext_ln691_520_fu_4262_p1;
wire  signed [10:0] sext_ln691_523_fu_4270_p1;
wire   [10:0] add_ln691_519_fu_4265_p2;
wire  signed [10:0] sext_ln691_526_fu_4279_p1;
wire  signed [10:0] sext_ln691_529_fu_4287_p1;
wire   [10:0] add_ln691_525_fu_4282_p2;
wire  signed [10:0] sext_ln691_532_fu_4296_p1;
wire  signed [10:0] sext_ln691_535_fu_4304_p1;
wire   [10:0] add_ln691_531_fu_4299_p2;
wire  signed [10:0] sext_ln691_538_fu_4313_p1;
wire  signed [10:0] sext_ln691_541_fu_4321_p1;
wire   [10:0] add_ln691_537_fu_4316_p2;
wire  signed [10:0] sext_ln691_544_fu_4330_p1;
wire  signed [10:0] sext_ln691_547_fu_4338_p1;
wire   [10:0] add_ln691_543_fu_4333_p2;
wire  signed [10:0] sext_ln691_550_fu_4347_p1;
wire  signed [10:0] sext_ln691_553_fu_4355_p1;
wire   [10:0] add_ln691_549_fu_4350_p2;
wire  signed [10:0] sext_ln691_556_fu_4364_p1;
wire  signed [10:0] sext_ln691_559_fu_4372_p1;
wire   [10:0] add_ln691_555_fu_4367_p2;
wire  signed [10:0] sext_ln691_562_fu_4381_p1;
wire  signed [10:0] sext_ln691_565_fu_4389_p1;
wire   [10:0] add_ln691_561_fu_4384_p2;
wire  signed [10:0] sext_ln691_568_fu_4398_p1;
wire  signed [10:0] sext_ln691_571_fu_4406_p1;
wire   [10:0] add_ln691_567_fu_4401_p2;
wire  signed [10:0] sext_ln691_574_fu_4415_p1;
wire  signed [10:0] sext_ln691_577_fu_4423_p1;
wire   [10:0] add_ln691_573_fu_4418_p2;
wire  signed [10:0] sext_ln691_580_fu_4432_p1;
wire  signed [10:0] sext_ln691_583_fu_4440_p1;
wire   [10:0] add_ln691_579_fu_4435_p2;
wire  signed [10:0] sext_ln691_586_fu_4449_p1;
wire  signed [10:0] sext_ln691_589_fu_4457_p1;
wire   [10:0] add_ln691_585_fu_4452_p2;
wire  signed [10:0] sext_ln691_592_fu_4466_p1;
wire  signed [10:0] sext_ln691_595_fu_4474_p1;
wire   [10:0] add_ln691_591_fu_4469_p2;
wire  signed [10:0] sext_ln691_598_fu_4483_p1;
wire  signed [10:0] sext_ln691_601_fu_4491_p1;
wire   [10:0] add_ln691_597_fu_4486_p2;
wire  signed [10:0] sext_ln691_604_fu_4500_p1;
wire  signed [10:0] sext_ln691_607_fu_4508_p1;
wire   [10:0] add_ln691_603_fu_4503_p2;
wire  signed [10:0] sext_ln691_610_fu_4517_p1;
wire  signed [10:0] sext_ln691_613_fu_4525_p1;
wire   [10:0] add_ln691_609_fu_4520_p2;
wire  signed [10:0] sext_ln691_616_fu_4534_p1;
wire  signed [10:0] sext_ln691_619_fu_4542_p1;
wire   [10:0] add_ln691_615_fu_4537_p2;
wire  signed [10:0] sext_ln691_622_fu_4551_p1;
wire  signed [10:0] sext_ln691_625_fu_4559_p1;
wire   [10:0] add_ln691_621_fu_4554_p2;
wire  signed [10:0] sext_ln691_628_fu_4568_p1;
wire  signed [10:0] sext_ln691_631_fu_4576_p1;
wire   [10:0] add_ln691_627_fu_4571_p2;
wire  signed [10:0] sext_ln691_634_fu_4585_p1;
wire  signed [10:0] sext_ln691_637_fu_4593_p1;
wire   [10:0] add_ln691_633_fu_4588_p2;
wire  signed [10:0] sext_ln691_640_fu_4602_p1;
wire  signed [10:0] sext_ln691_643_fu_4610_p1;
wire   [10:0] add_ln691_639_fu_4605_p2;
wire  signed [10:0] sext_ln691_646_fu_4619_p1;
wire  signed [10:0] sext_ln691_649_fu_4627_p1;
wire   [10:0] add_ln691_645_fu_4622_p2;
wire   [10:0] add_ln691_649_fu_4630_p2;
wire   [10:0] add_ln691_643_fu_4613_p2;
wire   [10:0] add_ln691_637_fu_4596_p2;
wire   [10:0] add_ln691_631_fu_4579_p2;
wire   [10:0] add_ln691_625_fu_4562_p2;
wire   [10:0] add_ln691_619_fu_4545_p2;
wire   [10:0] add_ln691_613_fu_4528_p2;
wire   [10:0] add_ln691_607_fu_4511_p2;
wire   [10:0] add_ln691_601_fu_4494_p2;
wire   [10:0] add_ln691_595_fu_4477_p2;
wire   [10:0] add_ln691_589_fu_4460_p2;
wire   [10:0] add_ln691_583_fu_4443_p2;
wire   [10:0] add_ln691_577_fu_4426_p2;
wire   [10:0] add_ln691_571_fu_4409_p2;
wire   [10:0] add_ln691_565_fu_4392_p2;
wire   [10:0] add_ln691_559_fu_4375_p2;
wire   [10:0] add_ln691_553_fu_4358_p2;
wire   [10:0] add_ln691_547_fu_4341_p2;
wire   [10:0] add_ln691_541_fu_4324_p2;
wire   [10:0] add_ln691_535_fu_4307_p2;
wire   [10:0] add_ln691_529_fu_4290_p2;
wire   [10:0] add_ln691_523_fu_4273_p2;
wire   [10:0] add_ln691_517_fu_4256_p2;
wire   [10:0] add_ln691_511_fu_4239_p2;
wire   [378:0] tmp_497_fu_4693_p48;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 5'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V #(
    .DataWidth( 132 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
attn_inst_matmul_gen_v_bias_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_v_bias_arr_V_address0),
    .ce0(attn_inst_matmul_gen_v_bias_arr_V_ce0),
    .q0(attn_inst_matmul_gen_v_bias_arr_V_q0)
);

ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V #(
    .DataWidth( 216 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
attn_inst_matmul_gen_v_weight_arr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(attn_inst_matmul_gen_v_weight_arr_V_address0),
    .ce0(attn_inst_matmul_gen_v_weight_arr_V_ce0),
    .q0(attn_inst_matmul_gen_v_weight_arr_V_q0)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U360(
    .din0(trunc_ln215_6_fu_856_p1),
    .din1(mul_ln1345_fu_868_p1),
    .dout(mul_ln1345_fu_868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U361(
    .din0(tmp_s_fu_874_p4),
    .din1(mul_ln1345_507_fu_892_p1),
    .dout(mul_ln1345_507_fu_892_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U362(
    .din0(tmp_403_fu_898_p4),
    .din1(mul_ln1345_508_fu_916_p1),
    .dout(mul_ln1345_508_fu_916_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U363(
    .din0(tmp_404_fu_922_p4),
    .din1(mul_ln1345_509_fu_940_p1),
    .dout(mul_ln1345_509_fu_940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U364(
    .din0(tmp_405_fu_946_p4),
    .din1(mul_ln1345_510_fu_964_p1),
    .dout(mul_ln1345_510_fu_964_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U365(
    .din0(tmp_406_fu_970_p4),
    .din1(mul_ln1345_511_fu_988_p1),
    .dout(mul_ln1345_511_fu_988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U366(
    .din0(tmp_407_fu_994_p4),
    .din1(mul_ln1345_512_fu_1008_p1),
    .dout(mul_ln1345_512_fu_1008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U367(
    .din0(tmp_409_fu_1014_p4),
    .din1(mul_ln1345_513_fu_1028_p1),
    .dout(mul_ln1345_513_fu_1028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U368(
    .din0(tmp_410_fu_1034_p4),
    .din1(mul_ln1345_514_fu_1048_p1),
    .dout(mul_ln1345_514_fu_1048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U369(
    .din0(tmp_411_fu_1054_p4),
    .din1(mul_ln1345_515_fu_1068_p1),
    .dout(mul_ln1345_515_fu_1068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U370(
    .din0(tmp_412_fu_1074_p4),
    .din1(mul_ln1345_516_fu_1088_p1),
    .dout(mul_ln1345_516_fu_1088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U371(
    .din0(tmp_413_fu_1094_p4),
    .din1(mul_ln1345_517_fu_1108_p1),
    .dout(mul_ln1345_517_fu_1108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U372(
    .din0(tmp_414_fu_1114_p4),
    .din1(mul_ln1345_518_fu_1128_p1),
    .dout(mul_ln1345_518_fu_1128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U373(
    .din0(tmp_416_fu_1134_p4),
    .din1(mul_ln1345_519_fu_1148_p1),
    .dout(mul_ln1345_519_fu_1148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U374(
    .din0(tmp_417_fu_1154_p4),
    .din1(mul_ln1345_520_fu_1168_p1),
    .dout(mul_ln1345_520_fu_1168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U375(
    .din0(tmp_418_fu_1174_p4),
    .din1(mul_ln1345_521_fu_1188_p1),
    .dout(mul_ln1345_521_fu_1188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U376(
    .din0(tmp_419_fu_1194_p4),
    .din1(mul_ln1345_522_fu_1208_p1),
    .dout(mul_ln1345_522_fu_1208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U377(
    .din0(tmp_420_fu_1214_p4),
    .din1(mul_ln1345_523_fu_1228_p1),
    .dout(mul_ln1345_523_fu_1228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U378(
    .din0(tmp_421_fu_1234_p4),
    .din1(mul_ln1345_524_fu_1248_p1),
    .dout(mul_ln1345_524_fu_1248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U379(
    .din0(tmp_423_fu_1254_p4),
    .din1(mul_ln1345_525_fu_1268_p1),
    .dout(mul_ln1345_525_fu_1268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U380(
    .din0(tmp_424_fu_1274_p4),
    .din1(mul_ln1345_526_fu_1288_p1),
    .dout(mul_ln1345_526_fu_1288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U381(
    .din0(tmp_425_fu_1294_p4),
    .din1(mul_ln1345_527_fu_1308_p1),
    .dout(mul_ln1345_527_fu_1308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U382(
    .din0(tmp_426_fu_1314_p4),
    .din1(mul_ln1345_528_fu_1328_p1),
    .dout(mul_ln1345_528_fu_1328_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U383(
    .din0(tmp_427_fu_1334_p4),
    .din1(mul_ln1345_529_fu_1348_p1),
    .dout(mul_ln1345_529_fu_1348_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U384(
    .din0(tmp_428_fu_1354_p4),
    .din1(mul_ln1345_530_fu_1368_p1),
    .dout(mul_ln1345_530_fu_1368_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U385(
    .din0(tmp_430_fu_1374_p4),
    .din1(mul_ln1345_531_fu_1388_p1),
    .dout(mul_ln1345_531_fu_1388_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U386(
    .din0(tmp_431_fu_1394_p4),
    .din1(mul_ln1345_532_fu_1408_p1),
    .dout(mul_ln1345_532_fu_1408_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U387(
    .din0(tmp_432_fu_1414_p4),
    .din1(mul_ln1345_533_fu_1428_p1),
    .dout(mul_ln1345_533_fu_1428_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U388(
    .din0(tmp_433_fu_1434_p4),
    .din1(mul_ln1345_534_fu_1448_p1),
    .dout(mul_ln1345_534_fu_1448_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U389(
    .din0(tmp_434_fu_1454_p4),
    .din1(mul_ln1345_535_fu_1468_p1),
    .dout(mul_ln1345_535_fu_1468_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U390(
    .din0(tmp_435_fu_1474_p4),
    .din1(mul_ln1345_536_fu_1488_p1),
    .dout(mul_ln1345_536_fu_1488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U391(
    .din0(tmp_437_fu_1494_p4),
    .din1(mul_ln1345_537_fu_1508_p1),
    .dout(mul_ln1345_537_fu_1508_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U392(
    .din0(tmp_438_fu_1514_p4),
    .din1(mul_ln1345_538_fu_1528_p1),
    .dout(mul_ln1345_538_fu_1528_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U393(
    .din0(tmp_439_fu_1534_p4),
    .din1(mul_ln1345_539_fu_1548_p1),
    .dout(mul_ln1345_539_fu_1548_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U394(
    .din0(tmp_440_fu_1554_p4),
    .din1(mul_ln1345_540_fu_1568_p1),
    .dout(mul_ln1345_540_fu_1568_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U395(
    .din0(tmp_441_fu_1574_p4),
    .din1(mul_ln1345_541_fu_1588_p1),
    .dout(mul_ln1345_541_fu_1588_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U396(
    .din0(tmp_442_fu_1594_p4),
    .din1(mul_ln1345_542_fu_1608_p1),
    .dout(mul_ln1345_542_fu_1608_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U397(
    .din0(tmp_444_fu_1614_p4),
    .din1(mul_ln1345_543_fu_1628_p1),
    .dout(mul_ln1345_543_fu_1628_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U398(
    .din0(tmp_445_fu_1634_p4),
    .din1(mul_ln1345_544_fu_1648_p1),
    .dout(mul_ln1345_544_fu_1648_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U399(
    .din0(tmp_446_fu_1654_p4),
    .din1(mul_ln1345_545_fu_1668_p1),
    .dout(mul_ln1345_545_fu_1668_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U400(
    .din0(tmp_447_fu_1674_p4),
    .din1(mul_ln1345_546_fu_1688_p1),
    .dout(mul_ln1345_546_fu_1688_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U401(
    .din0(tmp_448_fu_1694_p4),
    .din1(mul_ln1345_547_fu_1708_p1),
    .dout(mul_ln1345_547_fu_1708_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U402(
    .din0(tmp_449_fu_1714_p4),
    .din1(mul_ln1345_548_fu_1728_p1),
    .dout(mul_ln1345_548_fu_1728_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U403(
    .din0(tmp_451_fu_1734_p4),
    .din1(mul_ln1345_549_fu_1748_p1),
    .dout(mul_ln1345_549_fu_1748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U404(
    .din0(tmp_452_fu_1754_p4),
    .din1(mul_ln1345_550_fu_1768_p1),
    .dout(mul_ln1345_550_fu_1768_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U405(
    .din0(tmp_453_fu_1774_p4),
    .din1(mul_ln1345_551_fu_1788_p1),
    .dout(mul_ln1345_551_fu_1788_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U406(
    .din0(tmp_454_fu_1794_p4),
    .din1(mul_ln1345_552_fu_1808_p1),
    .dout(mul_ln1345_552_fu_1808_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U407(
    .din0(tmp_455_fu_1814_p4),
    .din1(mul_ln1345_553_fu_1828_p1),
    .dout(mul_ln1345_553_fu_1828_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U408(
    .din0(tmp_456_fu_1834_p4),
    .din1(mul_ln1345_554_fu_1848_p1),
    .dout(mul_ln1345_554_fu_1848_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U409(
    .din0(tmp_458_fu_1854_p4),
    .din1(mul_ln1345_555_fu_1868_p1),
    .dout(mul_ln1345_555_fu_1868_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U410(
    .din0(tmp_459_fu_1874_p4),
    .din1(mul_ln1345_556_fu_1888_p1),
    .dout(mul_ln1345_556_fu_1888_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U411(
    .din0(tmp_460_fu_1894_p4),
    .din1(mul_ln1345_557_fu_1908_p1),
    .dout(mul_ln1345_557_fu_1908_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U412(
    .din0(tmp_461_fu_1914_p4),
    .din1(mul_ln1345_558_fu_1928_p1),
    .dout(mul_ln1345_558_fu_1928_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U413(
    .din0(tmp_462_fu_1934_p4),
    .din1(mul_ln1345_559_fu_1948_p1),
    .dout(mul_ln1345_559_fu_1948_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U414(
    .din0(tmp_463_fu_1954_p4),
    .din1(mul_ln1345_560_fu_1968_p1),
    .dout(mul_ln1345_560_fu_1968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U415(
    .din0(tmp_465_fu_1974_p4),
    .din1(mul_ln1345_561_fu_1988_p1),
    .dout(mul_ln1345_561_fu_1988_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U416(
    .din0(tmp_466_fu_1994_p4),
    .din1(mul_ln1345_562_fu_2008_p1),
    .dout(mul_ln1345_562_fu_2008_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U417(
    .din0(tmp_467_fu_2014_p4),
    .din1(mul_ln1345_563_fu_2028_p1),
    .dout(mul_ln1345_563_fu_2028_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U418(
    .din0(tmp_468_fu_2034_p4),
    .din1(mul_ln1345_564_fu_2048_p1),
    .dout(mul_ln1345_564_fu_2048_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U419(
    .din0(tmp_469_fu_2054_p4),
    .din1(mul_ln1345_565_fu_2068_p1),
    .dout(mul_ln1345_565_fu_2068_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U420(
    .din0(tmp_470_fu_2074_p4),
    .din1(mul_ln1345_566_fu_2088_p1),
    .dout(mul_ln1345_566_fu_2088_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U421(
    .din0(tmp_472_fu_2094_p4),
    .din1(mul_ln1345_567_fu_2108_p1),
    .dout(mul_ln1345_567_fu_2108_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U422(
    .din0(tmp_473_fu_2114_p4),
    .din1(mul_ln1345_568_fu_2128_p1),
    .dout(mul_ln1345_568_fu_2128_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U423(
    .din0(tmp_474_fu_2134_p4),
    .din1(mul_ln1345_569_fu_2148_p1),
    .dout(mul_ln1345_569_fu_2148_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U424(
    .din0(tmp_475_fu_2154_p4),
    .din1(mul_ln1345_570_fu_2168_p1),
    .dout(mul_ln1345_570_fu_2168_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U425(
    .din0(tmp_476_fu_2174_p4),
    .din1(mul_ln1345_571_fu_2188_p1),
    .dout(mul_ln1345_571_fu_2188_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U426(
    .din0(tmp_477_fu_2194_p4),
    .din1(mul_ln1345_572_fu_2208_p1),
    .dout(mul_ln1345_572_fu_2208_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U427(
    .din0(tmp_479_fu_2214_p4),
    .din1(mul_ln1345_573_fu_2228_p1),
    .dout(mul_ln1345_573_fu_2228_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U428(
    .din0(tmp_480_fu_2234_p4),
    .din1(mul_ln1345_574_fu_2248_p1),
    .dout(mul_ln1345_574_fu_2248_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U429(
    .din0(tmp_481_fu_2254_p4),
    .din1(mul_ln1345_575_fu_2268_p1),
    .dout(mul_ln1345_575_fu_2268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U430(
    .din0(tmp_482_fu_2274_p4),
    .din1(mul_ln1345_576_fu_2288_p1),
    .dout(mul_ln1345_576_fu_2288_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U431(
    .din0(tmp_483_fu_2294_p4),
    .din1(mul_ln1345_577_fu_2308_p1),
    .dout(mul_ln1345_577_fu_2308_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U432(
    .din0(mul_ln1345_578_fu_3061_p0),
    .din1(mul_ln1345_578_fu_3061_p1),
    .dout(mul_ln1345_578_fu_3061_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U433(
    .din0(mul_ln1345_579_fu_3083_p0),
    .din1(mul_ln1345_579_fu_3083_p1),
    .dout(mul_ln1345_579_fu_3083_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U434(
    .din0(mul_ln1345_580_fu_3095_p0),
    .din1(mul_ln1345_580_fu_3095_p1),
    .dout(mul_ln1345_580_fu_3095_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U435(
    .din0(mul_ln1345_581_fu_3107_p0),
    .din1(mul_ln1345_581_fu_3107_p1),
    .dout(mul_ln1345_581_fu_3107_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U436(
    .din0(mul_ln1345_582_fu_3119_p0),
    .din1(mul_ln1345_582_fu_3119_p1),
    .dout(mul_ln1345_582_fu_3119_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U437(
    .din0(mul_ln1345_583_fu_3131_p0),
    .din1(mul_ln1345_583_fu_3131_p1),
    .dout(mul_ln1345_583_fu_3131_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U438(
    .din0(mul_ln1345_584_fu_3172_p0),
    .din1(mul_ln1345_584_fu_3172_p1),
    .dout(mul_ln1345_584_fu_3172_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U439(
    .din0(mul_ln1345_585_fu_3191_p0),
    .din1(mul_ln1345_585_fu_3191_p1),
    .dout(mul_ln1345_585_fu_3191_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U440(
    .din0(mul_ln1345_586_fu_3200_p0),
    .din1(mul_ln1345_586_fu_3200_p1),
    .dout(mul_ln1345_586_fu_3200_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U441(
    .din0(mul_ln1345_587_fu_3209_p0),
    .din1(mul_ln1345_587_fu_3209_p1),
    .dout(mul_ln1345_587_fu_3209_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U442(
    .din0(mul_ln1345_588_fu_3218_p0),
    .din1(mul_ln1345_588_fu_3218_p1),
    .dout(mul_ln1345_588_fu_3218_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U443(
    .din0(mul_ln1345_589_fu_3227_p0),
    .din1(mul_ln1345_589_fu_3227_p1),
    .dout(mul_ln1345_589_fu_3227_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U444(
    .din0(mul_ln1345_590_fu_3268_p0),
    .din1(mul_ln1345_590_fu_3268_p1),
    .dout(mul_ln1345_590_fu_3268_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U445(
    .din0(mul_ln1345_591_fu_3287_p0),
    .din1(mul_ln1345_591_fu_3287_p1),
    .dout(mul_ln1345_591_fu_3287_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U446(
    .din0(mul_ln1345_592_fu_3296_p0),
    .din1(mul_ln1345_592_fu_3296_p1),
    .dout(mul_ln1345_592_fu_3296_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U447(
    .din0(mul_ln1345_593_fu_3305_p0),
    .din1(mul_ln1345_593_fu_3305_p1),
    .dout(mul_ln1345_593_fu_3305_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U448(
    .din0(mul_ln1345_594_fu_3314_p0),
    .din1(mul_ln1345_594_fu_3314_p1),
    .dout(mul_ln1345_594_fu_3314_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U449(
    .din0(mul_ln1345_595_fu_3323_p0),
    .din1(mul_ln1345_595_fu_3323_p1),
    .dout(mul_ln1345_595_fu_3323_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U450(
    .din0(mul_ln1345_596_fu_3364_p0),
    .din1(mul_ln1345_596_fu_3364_p1),
    .dout(mul_ln1345_596_fu_3364_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U451(
    .din0(mul_ln1345_597_fu_3383_p0),
    .din1(mul_ln1345_597_fu_3383_p1),
    .dout(mul_ln1345_597_fu_3383_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U452(
    .din0(mul_ln1345_598_fu_3392_p0),
    .din1(mul_ln1345_598_fu_3392_p1),
    .dout(mul_ln1345_598_fu_3392_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U453(
    .din0(mul_ln1345_599_fu_3401_p0),
    .din1(mul_ln1345_599_fu_3401_p1),
    .dout(mul_ln1345_599_fu_3401_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U454(
    .din0(mul_ln1345_600_fu_3410_p0),
    .din1(mul_ln1345_600_fu_3410_p1),
    .dout(mul_ln1345_600_fu_3410_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U455(
    .din0(mul_ln1345_601_fu_3419_p0),
    .din1(mul_ln1345_601_fu_3419_p1),
    .dout(mul_ln1345_601_fu_3419_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U456(
    .din0(mul_ln1345_602_fu_3460_p0),
    .din1(mul_ln1345_602_fu_3460_p1),
    .dout(mul_ln1345_602_fu_3460_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U457(
    .din0(mul_ln1345_603_fu_3479_p0),
    .din1(mul_ln1345_603_fu_3479_p1),
    .dout(mul_ln1345_603_fu_3479_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U458(
    .din0(mul_ln1345_604_fu_3488_p0),
    .din1(mul_ln1345_604_fu_3488_p1),
    .dout(mul_ln1345_604_fu_3488_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U459(
    .din0(mul_ln1345_605_fu_3497_p0),
    .din1(mul_ln1345_605_fu_3497_p1),
    .dout(mul_ln1345_605_fu_3497_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U460(
    .din0(mul_ln1345_606_fu_3506_p0),
    .din1(mul_ln1345_606_fu_3506_p1),
    .dout(mul_ln1345_606_fu_3506_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U461(
    .din0(mul_ln1345_607_fu_3515_p0),
    .din1(mul_ln1345_607_fu_3515_p1),
    .dout(mul_ln1345_607_fu_3515_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U462(
    .din0(mul_ln1345_608_fu_3556_p0),
    .din1(mul_ln1345_608_fu_3556_p1),
    .dout(mul_ln1345_608_fu_3556_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U463(
    .din0(mul_ln1345_609_fu_3575_p0),
    .din1(mul_ln1345_609_fu_3575_p1),
    .dout(mul_ln1345_609_fu_3575_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U464(
    .din0(mul_ln1345_610_fu_3584_p0),
    .din1(mul_ln1345_610_fu_3584_p1),
    .dout(mul_ln1345_610_fu_3584_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U465(
    .din0(mul_ln1345_611_fu_3593_p0),
    .din1(mul_ln1345_611_fu_3593_p1),
    .dout(mul_ln1345_611_fu_3593_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U466(
    .din0(mul_ln1345_612_fu_3602_p0),
    .din1(mul_ln1345_612_fu_3602_p1),
    .dout(mul_ln1345_612_fu_3602_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U467(
    .din0(mul_ln1345_613_fu_3611_p0),
    .din1(mul_ln1345_613_fu_3611_p1),
    .dout(mul_ln1345_613_fu_3611_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U468(
    .din0(mul_ln1345_614_fu_3652_p0),
    .din1(mul_ln1345_614_fu_3652_p1),
    .dout(mul_ln1345_614_fu_3652_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U469(
    .din0(mul_ln1345_615_fu_3671_p0),
    .din1(mul_ln1345_615_fu_3671_p1),
    .dout(mul_ln1345_615_fu_3671_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U470(
    .din0(mul_ln1345_616_fu_3680_p0),
    .din1(mul_ln1345_616_fu_3680_p1),
    .dout(mul_ln1345_616_fu_3680_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U471(
    .din0(mul_ln1345_617_fu_3689_p0),
    .din1(mul_ln1345_617_fu_3689_p1),
    .dout(mul_ln1345_617_fu_3689_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U472(
    .din0(mul_ln1345_618_fu_3698_p0),
    .din1(mul_ln1345_618_fu_3698_p1),
    .dout(mul_ln1345_618_fu_3698_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U473(
    .din0(mul_ln1345_619_fu_3707_p0),
    .din1(mul_ln1345_619_fu_3707_p1),
    .dout(mul_ln1345_619_fu_3707_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U474(
    .din0(mul_ln1345_620_fu_3748_p0),
    .din1(mul_ln1345_620_fu_3748_p1),
    .dout(mul_ln1345_620_fu_3748_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U475(
    .din0(mul_ln1345_621_fu_3767_p0),
    .din1(mul_ln1345_621_fu_3767_p1),
    .dout(mul_ln1345_621_fu_3767_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U476(
    .din0(mul_ln1345_622_fu_3776_p0),
    .din1(mul_ln1345_622_fu_3776_p1),
    .dout(mul_ln1345_622_fu_3776_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U477(
    .din0(mul_ln1345_623_fu_3785_p0),
    .din1(mul_ln1345_623_fu_3785_p1),
    .dout(mul_ln1345_623_fu_3785_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U478(
    .din0(mul_ln1345_624_fu_3794_p0),
    .din1(mul_ln1345_624_fu_3794_p1),
    .dout(mul_ln1345_624_fu_3794_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U479(
    .din0(mul_ln1345_625_fu_3803_p0),
    .din1(mul_ln1345_625_fu_3803_p1),
    .dout(mul_ln1345_625_fu_3803_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U480(
    .din0(mul_ln1345_626_fu_3844_p0),
    .din1(mul_ln1345_626_fu_3844_p1),
    .dout(mul_ln1345_626_fu_3844_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U481(
    .din0(mul_ln1345_627_fu_3863_p0),
    .din1(mul_ln1345_627_fu_3863_p1),
    .dout(mul_ln1345_627_fu_3863_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U482(
    .din0(mul_ln1345_628_fu_3872_p0),
    .din1(mul_ln1345_628_fu_3872_p1),
    .dout(mul_ln1345_628_fu_3872_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U483(
    .din0(mul_ln1345_629_fu_3881_p0),
    .din1(mul_ln1345_629_fu_3881_p1),
    .dout(mul_ln1345_629_fu_3881_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U484(
    .din0(mul_ln1345_630_fu_3890_p0),
    .din1(mul_ln1345_630_fu_3890_p1),
    .dout(mul_ln1345_630_fu_3890_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U485(
    .din0(mul_ln1345_631_fu_3899_p0),
    .din1(mul_ln1345_631_fu_3899_p1),
    .dout(mul_ln1345_631_fu_3899_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U486(
    .din0(mul_ln1345_632_fu_3940_p0),
    .din1(mul_ln1345_632_fu_3940_p1),
    .dout(mul_ln1345_632_fu_3940_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U487(
    .din0(mul_ln1345_633_fu_3959_p0),
    .din1(mul_ln1345_633_fu_3959_p1),
    .dout(mul_ln1345_633_fu_3959_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U488(
    .din0(mul_ln1345_634_fu_3968_p0),
    .din1(mul_ln1345_634_fu_3968_p1),
    .dout(mul_ln1345_634_fu_3968_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U489(
    .din0(mul_ln1345_635_fu_3977_p0),
    .din1(mul_ln1345_635_fu_3977_p1),
    .dout(mul_ln1345_635_fu_3977_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U490(
    .din0(mul_ln1345_636_fu_3986_p0),
    .din1(mul_ln1345_636_fu_3986_p1),
    .dout(mul_ln1345_636_fu_3986_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U491(
    .din0(mul_ln1345_637_fu_3995_p0),
    .din1(mul_ln1345_637_fu_3995_p1),
    .dout(mul_ln1345_637_fu_3995_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U492(
    .din0(mul_ln1345_638_fu_4036_p0),
    .din1(mul_ln1345_638_fu_4036_p1),
    .dout(mul_ln1345_638_fu_4036_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U493(
    .din0(mul_ln1345_639_fu_4055_p0),
    .din1(mul_ln1345_639_fu_4055_p1),
    .dout(mul_ln1345_639_fu_4055_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U494(
    .din0(mul_ln1345_640_fu_4064_p0),
    .din1(mul_ln1345_640_fu_4064_p1),
    .dout(mul_ln1345_640_fu_4064_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U495(
    .din0(mul_ln1345_641_fu_4073_p0),
    .din1(mul_ln1345_641_fu_4073_p1),
    .dout(mul_ln1345_641_fu_4073_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U496(
    .din0(mul_ln1345_642_fu_4082_p0),
    .din1(mul_ln1345_642_fu_4082_p1),
    .dout(mul_ln1345_642_fu_4082_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U497(
    .din0(mul_ln1345_643_fu_4091_p0),
    .din1(mul_ln1345_643_fu_4091_p1),
    .dout(mul_ln1345_643_fu_4091_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U498(
    .din0(mul_ln1345_644_fu_4132_p0),
    .din1(mul_ln1345_644_fu_4132_p1),
    .dout(mul_ln1345_644_fu_4132_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U499(
    .din0(mul_ln1345_645_fu_4151_p0),
    .din1(mul_ln1345_645_fu_4151_p1),
    .dout(mul_ln1345_645_fu_4151_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U500(
    .din0(mul_ln1345_646_fu_4160_p0),
    .din1(mul_ln1345_646_fu_4160_p1),
    .dout(mul_ln1345_646_fu_4160_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U501(
    .din0(mul_ln1345_647_fu_4169_p0),
    .din1(mul_ln1345_647_fu_4169_p1),
    .dout(mul_ln1345_647_fu_4169_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U502(
    .din0(mul_ln1345_648_fu_4178_p0),
    .din1(mul_ln1345_648_fu_4178_p1),
    .dout(mul_ln1345_648_fu_4178_p2)
);

ATTN0_mul_3s_3s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mul_3s_3s_6_1_1_U503(
    .din0(mul_ln1345_649_fu_4187_p0),
    .din1(mul_ln1345_649_fu_4187_p1),
    .dout(mul_ln1345_649_fu_4187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter1_state6))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cit_reg_583 <= add_ln122_reg_4873;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cit_reg_583 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cot_reg_571 <= select_ln121_11_reg_4854;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cot_reg_571 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten20_reg_548 <= add_ln120_reg_4844;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten20_reg_548 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_560 <= select_ln121_12_reg_4878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_560 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln120_reg_4844 <= add_ln120_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_594_p2 == 1'd0))) begin
        add_ln121_3_reg_4839 <= add_ln121_3_fu_646_p2;
        and_ln120_reg_4824 <= and_ln120_fu_626_p2;
        icmp_ln121_reg_4811 <= icmp_ln121_fu_600_p2;
        select_ln120_reg_4818 <= select_ln120_fu_606_p3;
        select_ln121_reg_4831 <= select_ln121_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln121_reg_4849 <= add_ln121_fu_658_p2;
        add_ln215_reg_4859 <= add_ln215_fu_702_p2;
        icmp_ln126_reg_4864 <= icmp_ln126_fu_708_p2;
        icmp_ln161_reg_4869 <= icmp_ln161_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln122_reg_4873 <= add_ln122_fu_718_p2;
        select_ln121_11_reg_4854 <= select_ln121_11_fu_693_p3;
        select_ln121_12_reg_4878 <= select_ln121_12_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_510_reg_5663 <= add_ln691_510_fu_2392_p2;
        add_ln691_512_reg_5673 <= add_ln691_512_fu_2426_p2;
        add_ln691_516_reg_5678 <= add_ln691_516_fu_2452_p2;
        add_ln691_518_reg_5688 <= add_ln691_518_fu_2486_p2;
        add_ln691_522_reg_5693 <= add_ln691_522_fu_2512_p2;
        add_ln691_524_reg_5703 <= add_ln691_524_fu_2546_p2;
        add_ln691_528_reg_5708 <= add_ln691_528_fu_2572_p2;
        add_ln691_530_reg_5718 <= add_ln691_530_fu_2606_p2;
        add_ln691_534_reg_5723 <= add_ln691_534_fu_2632_p2;
        add_ln691_536_reg_5733 <= add_ln691_536_fu_2666_p2;
        add_ln691_540_reg_5738 <= add_ln691_540_fu_2692_p2;
        add_ln691_542_reg_5748 <= add_ln691_542_fu_2726_p2;
        add_ln691_546_reg_5753 <= add_ln691_546_fu_2752_p2;
        add_ln691_548_reg_5763 <= add_ln691_548_fu_2786_p2;
        add_ln691_552_reg_5768 <= add_ln691_552_fu_2812_p2;
        add_ln691_554_reg_5778 <= add_ln691_554_fu_2846_p2;
        add_ln691_558_reg_5783 <= add_ln691_558_fu_2872_p2;
        add_ln691_560_reg_5793 <= add_ln691_560_fu_2906_p2;
        add_ln691_564_reg_5798 <= add_ln691_564_fu_2932_p2;
        add_ln691_566_reg_5808 <= add_ln691_566_fu_2966_p2;
        add_ln691_570_reg_5813 <= add_ln691_570_fu_2992_p2;
        add_ln691_572_reg_5823 <= add_ln691_572_fu_3026_p2;
        add_ln691_576_reg_5828 <= add_ln691_576_fu_3052_p2;
        add_ln691_578_reg_5838 <= add_ln691_578_fu_3140_p2;
        add_ln691_582_reg_5843 <= add_ln691_582_fu_3166_p2;
        add_ln691_584_reg_5853 <= add_ln691_584_fu_3236_p2;
        add_ln691_588_reg_5858 <= add_ln691_588_fu_3262_p2;
        add_ln691_590_reg_5868 <= add_ln691_590_fu_3332_p2;
        add_ln691_594_reg_5873 <= add_ln691_594_fu_3358_p2;
        add_ln691_596_reg_5883 <= add_ln691_596_fu_3428_p2;
        add_ln691_600_reg_5888 <= add_ln691_600_fu_3454_p2;
        add_ln691_602_reg_5898 <= add_ln691_602_fu_3524_p2;
        add_ln691_606_reg_5903 <= add_ln691_606_fu_3550_p2;
        add_ln691_608_reg_5913 <= add_ln691_608_fu_3620_p2;
        add_ln691_612_reg_5918 <= add_ln691_612_fu_3646_p2;
        add_ln691_614_reg_5928 <= add_ln691_614_fu_3716_p2;
        add_ln691_618_reg_5933 <= add_ln691_618_fu_3742_p2;
        add_ln691_620_reg_5943 <= add_ln691_620_fu_3812_p2;
        add_ln691_624_reg_5948 <= add_ln691_624_fu_3838_p2;
        add_ln691_626_reg_5958 <= add_ln691_626_fu_3908_p2;
        add_ln691_630_reg_5963 <= add_ln691_630_fu_3934_p2;
        add_ln691_632_reg_5973 <= add_ln691_632_fu_4004_p2;
        add_ln691_636_reg_5978 <= add_ln691_636_fu_4030_p2;
        add_ln691_638_reg_5988 <= add_ln691_638_fu_4100_p2;
        add_ln691_642_reg_5993 <= add_ln691_642_fu_4126_p2;
        add_ln691_644_reg_6003 <= add_ln691_644_fu_4196_p2;
        add_ln691_648_reg_6008 <= add_ln691_648_fu_4222_p2;
        add_ln691_reg_5658 <= add_ln691_fu_2366_p2;
        tmp_408_reg_5668 <= {{select_ln126_fu_2337_p3[21:11]}};
        tmp_415_reg_5683 <= {{select_ln126_fu_2337_p3[32:22]}};
        tmp_422_reg_5698 <= {{select_ln126_fu_2337_p3[43:33]}};
        tmp_429_reg_5713 <= {{select_ln126_fu_2337_p3[54:44]}};
        tmp_436_reg_5728 <= {{select_ln126_fu_2337_p3[65:55]}};
        tmp_443_reg_5743 <= {{select_ln126_fu_2337_p3[76:66]}};
        tmp_450_reg_5758 <= {{select_ln126_fu_2337_p3[87:77]}};
        tmp_457_reg_5773 <= {{select_ln126_fu_2337_p3[98:88]}};
        tmp_464_reg_5788 <= {{select_ln126_fu_2337_p3[109:99]}};
        tmp_471_reg_5803 <= {{select_ln126_fu_2337_p3[120:110]}};
        tmp_478_reg_5818 <= {{select_ln126_fu_2337_p3[131:121]}};
        tmp_484_reg_5833 <= {{select_ln126_fu_2337_p3[142:132]}};
        tmp_485_reg_5848 <= {{select_ln126_fu_2337_p3[153:143]}};
        tmp_486_reg_5863 <= {{select_ln126_fu_2337_p3[164:154]}};
        tmp_487_reg_5878 <= {{select_ln126_fu_2337_p3[175:165]}};
        tmp_488_reg_5893 <= {{select_ln126_fu_2337_p3[186:176]}};
        tmp_489_reg_5908 <= {{select_ln126_fu_2337_p3[197:187]}};
        tmp_490_reg_5923 <= {{select_ln126_fu_2337_p3[208:198]}};
        tmp_491_reg_5938 <= {{select_ln126_fu_2337_p3[219:209]}};
        tmp_492_reg_5953 <= {{select_ln126_fu_2337_p3[230:220]}};
        tmp_493_reg_5968 <= {{select_ln126_fu_2337_p3[241:231]}};
        tmp_494_reg_5983 <= {{select_ln126_fu_2337_p3[252:242]}};
        tmp_495_reg_5998 <= {{select_ln126_fu_2337_p3[263:253]}};
        trunc_ln691_reg_5653 <= trunc_ln691_fu_2347_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln120_reg_4824_pp0_iter1_reg <= and_ln120_reg_4824;
        icmp_ln120_reg_4807 <= icmp_ln120_fu_594_p2;
        icmp_ln120_reg_4807_pp0_iter1_reg <= icmp_ln120_reg_4807;
        icmp_ln120_reg_4807_pp0_iter2_reg <= icmp_ln120_reg_4807_pp0_iter1_reg;
        icmp_ln121_reg_4811_pp0_iter1_reg <= icmp_ln121_reg_4811;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        attn_inst_matmul_gen_v_bias_arr_V_load_1_reg_4802 <= attn_inst_matmul_gen_v_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln120_reg_4824_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln126_reg_4864 == 1'd1) & (icmp_ln121_reg_4811_pp0_iter1_reg == 1'd0))) begin
        attn_inst_matmul_gen_v_bias_arr_V_load_reg_4893 <= attn_inst_matmul_gen_v_bias_arr_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln126_reg_4864_pp0_iter1_reg <= icmp_ln126_reg_4864;
        icmp_ln161_reg_4869_pp0_iter1_reg <= icmp_ln161_reg_4869;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln1345_507_reg_4948 <= mul_ln1345_507_fu_892_p2;
        mul_ln1345_508_reg_4958 <= mul_ln1345_508_fu_916_p2;
        mul_ln1345_509_reg_4968 <= mul_ln1345_509_fu_940_p2;
        mul_ln1345_510_reg_4978 <= mul_ln1345_510_fu_964_p2;
        mul_ln1345_511_reg_4988 <= mul_ln1345_511_fu_988_p2;
        mul_ln1345_512_reg_4998 <= mul_ln1345_512_fu_1008_p2;
        mul_ln1345_513_reg_5008 <= mul_ln1345_513_fu_1028_p2;
        mul_ln1345_514_reg_5018 <= mul_ln1345_514_fu_1048_p2;
        mul_ln1345_515_reg_5028 <= mul_ln1345_515_fu_1068_p2;
        mul_ln1345_516_reg_5038 <= mul_ln1345_516_fu_1088_p2;
        mul_ln1345_517_reg_5048 <= mul_ln1345_517_fu_1108_p2;
        mul_ln1345_518_reg_5058 <= mul_ln1345_518_fu_1128_p2;
        mul_ln1345_519_reg_5068 <= mul_ln1345_519_fu_1148_p2;
        mul_ln1345_520_reg_5078 <= mul_ln1345_520_fu_1168_p2;
        mul_ln1345_521_reg_5088 <= mul_ln1345_521_fu_1188_p2;
        mul_ln1345_522_reg_5098 <= mul_ln1345_522_fu_1208_p2;
        mul_ln1345_523_reg_5108 <= mul_ln1345_523_fu_1228_p2;
        mul_ln1345_524_reg_5118 <= mul_ln1345_524_fu_1248_p2;
        mul_ln1345_525_reg_5128 <= mul_ln1345_525_fu_1268_p2;
        mul_ln1345_526_reg_5138 <= mul_ln1345_526_fu_1288_p2;
        mul_ln1345_527_reg_5148 <= mul_ln1345_527_fu_1308_p2;
        mul_ln1345_528_reg_5158 <= mul_ln1345_528_fu_1328_p2;
        mul_ln1345_529_reg_5168 <= mul_ln1345_529_fu_1348_p2;
        mul_ln1345_530_reg_5178 <= mul_ln1345_530_fu_1368_p2;
        mul_ln1345_531_reg_5188 <= mul_ln1345_531_fu_1388_p2;
        mul_ln1345_532_reg_5198 <= mul_ln1345_532_fu_1408_p2;
        mul_ln1345_533_reg_5208 <= mul_ln1345_533_fu_1428_p2;
        mul_ln1345_534_reg_5218 <= mul_ln1345_534_fu_1448_p2;
        mul_ln1345_535_reg_5228 <= mul_ln1345_535_fu_1468_p2;
        mul_ln1345_536_reg_5238 <= mul_ln1345_536_fu_1488_p2;
        mul_ln1345_537_reg_5248 <= mul_ln1345_537_fu_1508_p2;
        mul_ln1345_538_reg_5258 <= mul_ln1345_538_fu_1528_p2;
        mul_ln1345_539_reg_5268 <= mul_ln1345_539_fu_1548_p2;
        mul_ln1345_540_reg_5278 <= mul_ln1345_540_fu_1568_p2;
        mul_ln1345_541_reg_5288 <= mul_ln1345_541_fu_1588_p2;
        mul_ln1345_542_reg_5298 <= mul_ln1345_542_fu_1608_p2;
        mul_ln1345_543_reg_5308 <= mul_ln1345_543_fu_1628_p2;
        mul_ln1345_544_reg_5318 <= mul_ln1345_544_fu_1648_p2;
        mul_ln1345_545_reg_5328 <= mul_ln1345_545_fu_1668_p2;
        mul_ln1345_546_reg_5338 <= mul_ln1345_546_fu_1688_p2;
        mul_ln1345_547_reg_5348 <= mul_ln1345_547_fu_1708_p2;
        mul_ln1345_548_reg_5358 <= mul_ln1345_548_fu_1728_p2;
        mul_ln1345_549_reg_5368 <= mul_ln1345_549_fu_1748_p2;
        mul_ln1345_550_reg_5378 <= mul_ln1345_550_fu_1768_p2;
        mul_ln1345_551_reg_5388 <= mul_ln1345_551_fu_1788_p2;
        mul_ln1345_552_reg_5398 <= mul_ln1345_552_fu_1808_p2;
        mul_ln1345_553_reg_5408 <= mul_ln1345_553_fu_1828_p2;
        mul_ln1345_554_reg_5418 <= mul_ln1345_554_fu_1848_p2;
        mul_ln1345_555_reg_5428 <= mul_ln1345_555_fu_1868_p2;
        mul_ln1345_556_reg_5438 <= mul_ln1345_556_fu_1888_p2;
        mul_ln1345_557_reg_5448 <= mul_ln1345_557_fu_1908_p2;
        mul_ln1345_558_reg_5458 <= mul_ln1345_558_fu_1928_p2;
        mul_ln1345_559_reg_5468 <= mul_ln1345_559_fu_1948_p2;
        mul_ln1345_560_reg_5478 <= mul_ln1345_560_fu_1968_p2;
        mul_ln1345_561_reg_5488 <= mul_ln1345_561_fu_1988_p2;
        mul_ln1345_562_reg_5498 <= mul_ln1345_562_fu_2008_p2;
        mul_ln1345_563_reg_5508 <= mul_ln1345_563_fu_2028_p2;
        mul_ln1345_564_reg_5518 <= mul_ln1345_564_fu_2048_p2;
        mul_ln1345_565_reg_5528 <= mul_ln1345_565_fu_2068_p2;
        mul_ln1345_566_reg_5538 <= mul_ln1345_566_fu_2088_p2;
        mul_ln1345_567_reg_5548 <= mul_ln1345_567_fu_2108_p2;
        mul_ln1345_568_reg_5558 <= mul_ln1345_568_fu_2128_p2;
        mul_ln1345_569_reg_5568 <= mul_ln1345_569_fu_2148_p2;
        mul_ln1345_570_reg_5578 <= mul_ln1345_570_fu_2168_p2;
        mul_ln1345_571_reg_5588 <= mul_ln1345_571_fu_2188_p2;
        mul_ln1345_572_reg_5598 <= mul_ln1345_572_fu_2208_p2;
        mul_ln1345_573_reg_5608 <= mul_ln1345_573_fu_2228_p2;
        mul_ln1345_574_reg_5618 <= mul_ln1345_574_fu_2248_p2;
        mul_ln1345_575_reg_5628 <= mul_ln1345_575_fu_2268_p2;
        mul_ln1345_576_reg_5638 <= mul_ln1345_576_fu_2288_p2;
        mul_ln1345_577_reg_5648 <= mul_ln1345_577_fu_2308_p2;
        mul_ln1345_reg_4938 <= mul_ln1345_fu_868_p2;
        sext_ln1345_291_reg_4933 <= sext_ln1345_291_fu_864_p1;
        sext_ln1345_293_reg_4943 <= sext_ln1345_293_fu_888_p1;
        sext_ln1345_295_reg_4953 <= sext_ln1345_295_fu_912_p1;
        sext_ln1345_297_reg_4963 <= sext_ln1345_297_fu_936_p1;
        sext_ln1345_299_reg_4973 <= sext_ln1345_299_fu_960_p1;
        sext_ln1345_301_reg_4983 <= sext_ln1345_301_fu_984_p1;
        sext_ln1345_302_reg_4993 <= sext_ln1345_302_fu_1004_p1;
        sext_ln1345_303_reg_5003 <= sext_ln1345_303_fu_1024_p1;
        sext_ln1345_304_reg_5013 <= sext_ln1345_304_fu_1044_p1;
        sext_ln1345_305_reg_5023 <= sext_ln1345_305_fu_1064_p1;
        sext_ln1345_306_reg_5033 <= sext_ln1345_306_fu_1084_p1;
        sext_ln1345_307_reg_5043 <= sext_ln1345_307_fu_1104_p1;
        sext_ln1345_308_reg_5053 <= sext_ln1345_308_fu_1124_p1;
        sext_ln1345_309_reg_5063 <= sext_ln1345_309_fu_1144_p1;
        sext_ln1345_310_reg_5073 <= sext_ln1345_310_fu_1164_p1;
        sext_ln1345_311_reg_5083 <= sext_ln1345_311_fu_1184_p1;
        sext_ln1345_312_reg_5093 <= sext_ln1345_312_fu_1204_p1;
        sext_ln1345_313_reg_5103 <= sext_ln1345_313_fu_1224_p1;
        sext_ln1345_314_reg_5113 <= sext_ln1345_314_fu_1244_p1;
        sext_ln1345_315_reg_5123 <= sext_ln1345_315_fu_1264_p1;
        sext_ln1345_316_reg_5133 <= sext_ln1345_316_fu_1284_p1;
        sext_ln1345_317_reg_5143 <= sext_ln1345_317_fu_1304_p1;
        sext_ln1345_318_reg_5153 <= sext_ln1345_318_fu_1324_p1;
        sext_ln1345_319_reg_5163 <= sext_ln1345_319_fu_1344_p1;
        sext_ln1345_320_reg_5173 <= sext_ln1345_320_fu_1364_p1;
        sext_ln1345_321_reg_5183 <= sext_ln1345_321_fu_1384_p1;
        sext_ln1345_322_reg_5193 <= sext_ln1345_322_fu_1404_p1;
        sext_ln1345_323_reg_5203 <= sext_ln1345_323_fu_1424_p1;
        sext_ln1345_324_reg_5213 <= sext_ln1345_324_fu_1444_p1;
        sext_ln1345_325_reg_5223 <= sext_ln1345_325_fu_1464_p1;
        sext_ln1345_326_reg_5233 <= sext_ln1345_326_fu_1484_p1;
        sext_ln1345_327_reg_5243 <= sext_ln1345_327_fu_1504_p1;
        sext_ln1345_328_reg_5253 <= sext_ln1345_328_fu_1524_p1;
        sext_ln1345_329_reg_5263 <= sext_ln1345_329_fu_1544_p1;
        sext_ln1345_330_reg_5273 <= sext_ln1345_330_fu_1564_p1;
        sext_ln1345_331_reg_5283 <= sext_ln1345_331_fu_1584_p1;
        sext_ln1345_332_reg_5293 <= sext_ln1345_332_fu_1604_p1;
        sext_ln1345_333_reg_5303 <= sext_ln1345_333_fu_1624_p1;
        sext_ln1345_334_reg_5313 <= sext_ln1345_334_fu_1644_p1;
        sext_ln1345_335_reg_5323 <= sext_ln1345_335_fu_1664_p1;
        sext_ln1345_336_reg_5333 <= sext_ln1345_336_fu_1684_p1;
        sext_ln1345_337_reg_5343 <= sext_ln1345_337_fu_1704_p1;
        sext_ln1345_338_reg_5353 <= sext_ln1345_338_fu_1724_p1;
        sext_ln1345_339_reg_5363 <= sext_ln1345_339_fu_1744_p1;
        sext_ln1345_340_reg_5373 <= sext_ln1345_340_fu_1764_p1;
        sext_ln1345_341_reg_5383 <= sext_ln1345_341_fu_1784_p1;
        sext_ln1345_342_reg_5393 <= sext_ln1345_342_fu_1804_p1;
        sext_ln1345_343_reg_5403 <= sext_ln1345_343_fu_1824_p1;
        sext_ln1345_344_reg_5413 <= sext_ln1345_344_fu_1844_p1;
        sext_ln1345_345_reg_5423 <= sext_ln1345_345_fu_1864_p1;
        sext_ln1345_346_reg_5433 <= sext_ln1345_346_fu_1884_p1;
        sext_ln1345_347_reg_5443 <= sext_ln1345_347_fu_1904_p1;
        sext_ln1345_348_reg_5453 <= sext_ln1345_348_fu_1924_p1;
        sext_ln1345_349_reg_5463 <= sext_ln1345_349_fu_1944_p1;
        sext_ln1345_350_reg_5473 <= sext_ln1345_350_fu_1964_p1;
        sext_ln1345_351_reg_5483 <= sext_ln1345_351_fu_1984_p1;
        sext_ln1345_352_reg_5493 <= sext_ln1345_352_fu_2004_p1;
        sext_ln1345_353_reg_5503 <= sext_ln1345_353_fu_2024_p1;
        sext_ln1345_354_reg_5513 <= sext_ln1345_354_fu_2044_p1;
        sext_ln1345_355_reg_5523 <= sext_ln1345_355_fu_2064_p1;
        sext_ln1345_356_reg_5533 <= sext_ln1345_356_fu_2084_p1;
        sext_ln1345_357_reg_5543 <= sext_ln1345_357_fu_2104_p1;
        sext_ln1345_358_reg_5553 <= sext_ln1345_358_fu_2124_p1;
        sext_ln1345_359_reg_5563 <= sext_ln1345_359_fu_2144_p1;
        sext_ln1345_360_reg_5573 <= sext_ln1345_360_fu_2164_p1;
        sext_ln1345_361_reg_5583 <= sext_ln1345_361_fu_2184_p1;
        sext_ln1345_362_reg_5593 <= sext_ln1345_362_fu_2204_p1;
        sext_ln1345_363_reg_5603 <= sext_ln1345_363_fu_2224_p1;
        sext_ln1345_364_reg_5613 <= sext_ln1345_364_fu_2244_p1;
        sext_ln1345_365_reg_5623 <= sext_ln1345_365_fu_2264_p1;
        sext_ln1345_366_reg_5633 <= sext_ln1345_366_fu_2284_p1;
        sext_ln1345_367_reg_5643 <= sext_ln1345_367_fu_2304_p1;
        trunc_ln145_129_reg_4903 <= {{cache_window_sm_dout[50:48]}};
        trunc_ln145_130_reg_4908 <= {{cache_window_sm_dout[58:56]}};
        trunc_ln145_131_reg_4913 <= {{cache_window_sm_dout[66:64]}};
        trunc_ln145_132_reg_4918 <= {{cache_window_sm_dout[74:72]}};
        trunc_ln145_133_reg_4923 <= {{cache_window_sm_dout[82:80]}};
        trunc_ln145_134_reg_4928 <= {{cache_window_sm_dout[90:88]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln120_reg_4807_pp0_iter2_reg == 1'd0))) begin
        vec_o_data_M_elems_V_2_fu_496 <= tmp_496_fu_4636_p25;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cit_phi_fu_587_p4 = add_ln122_reg_4873;
    end else begin
        ap_phi_mux_cit_phi_fu_587_p4 = cit_reg_583;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cot_phi_fu_575_p4 = select_ln121_11_reg_4854;
    end else begin
        ap_phi_mux_cot_phi_fu_575_p4 = cot_reg_571;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = add_ln120_reg_4844;
    end else begin
        ap_phi_mux_indvar_flatten20_phi_fu_552_p4 = indvar_flatten20_reg_548;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = select_ln121_12_reg_4878;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_564_p4 = indvar_flatten_reg_560;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        attn_inst_matmul_gen_v_bias_arr_V_address0 = zext_ln121_3_fu_738_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_v_bias_arr_V_address0 = zext_ln121_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        attn_inst_matmul_gen_v_bias_arr_V_address0 = 4'd0;
    end else begin
        attn_inst_matmul_gen_v_bias_arr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        attn_inst_matmul_gen_v_bias_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_v_bias_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        attn_inst_matmul_gen_v_weight_arr_V_ce0 = 1'b1;
    end else begin
        attn_inst_matmul_gen_v_weight_arr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_blk_n = cache_window_sm_empty_n;
    end else begin
        cache_window_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cache_window_sm_read = 1'b1;
    end else begin
        cache_window_sm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_blk_n = mac_sm_full_n;
    end else begin
        mac_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mac_sm_write = 1'b1;
    end else begin
        mac_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_652_p2 = (indvar_flatten20_reg_548 + 16'd1);

assign add_ln121_3_fu_646_p2 = (ap_phi_mux_indvar_flatten_phi_fu_564_p4 + 11'd1);

assign add_ln121_fu_658_p2 = (select_ln120_reg_4818 + 5'd1);

assign add_ln122_fu_718_p2 = (select_ln121_reg_4831 + 6'd1);

assign add_ln215_fu_702_p2 = (tmp_cast_fu_685_p3 + zext_ln215_fu_699_p1);

assign add_ln691_507_fu_4231_p2 = ($signed(sext_ln691_508_fu_4228_p1) + $signed(trunc_ln691_reg_5653));

assign add_ln691_508_fu_2372_p2 = ($signed(sext_ln151_191_fu_2354_p1) + $signed(sext_ln151_fu_2351_p1));

assign add_ln691_509_fu_2382_p2 = ($signed(sext_ln691_fu_2344_p1) + $signed(sext_ln691_507_fu_2363_p1));

assign add_ln691_510_fu_2392_p2 = ($signed(sext_ln691_510_fu_2388_p1) + $signed(sext_ln691_509_fu_2378_p1));

assign add_ln691_511_fu_4239_p2 = ($signed(sext_ln691_511_fu_4236_p1) + $signed(add_ln691_507_fu_4231_p2));

assign add_ln691_512_fu_2426_p2 = ($signed(sext_ln151_196_fu_2417_p1) + $signed(sext_ln151_197_fu_2420_p1));

assign add_ln691_513_fu_4248_p2 = ($signed(sext_ln691_514_fu_4245_p1) + $signed(tmp_408_reg_5668));

assign add_ln691_514_fu_2432_p2 = ($signed(sext_ln151_195_fu_2414_p1) + $signed(sext_ln151_194_fu_2411_p1));

assign add_ln691_515_fu_2442_p2 = ($signed(sext_ln691_512_fu_2398_p1) + $signed(sext_ln691_513_fu_2423_p1));

assign add_ln691_516_fu_2452_p2 = ($signed(sext_ln691_516_fu_2448_p1) + $signed(sext_ln691_515_fu_2438_p1));

assign add_ln691_517_fu_4256_p2 = ($signed(sext_ln691_517_fu_4253_p1) + $signed(add_ln691_513_fu_4248_p2));

assign add_ln691_518_fu_2486_p2 = ($signed(sext_ln151_200_fu_2477_p1) + $signed(sext_ln151_201_fu_2480_p1));

assign add_ln691_519_fu_4265_p2 = ($signed(sext_ln691_520_fu_4262_p1) + $signed(tmp_415_reg_5683));

assign add_ln691_520_fu_2492_p2 = ($signed(sext_ln151_199_fu_2474_p1) + $signed(sext_ln151_198_fu_2471_p1));

assign add_ln691_521_fu_2502_p2 = ($signed(sext_ln691_518_fu_2458_p1) + $signed(sext_ln691_519_fu_2483_p1));

assign add_ln691_522_fu_2512_p2 = ($signed(sext_ln691_522_fu_2508_p1) + $signed(sext_ln691_521_fu_2498_p1));

assign add_ln691_523_fu_4273_p2 = ($signed(sext_ln691_523_fu_4270_p1) + $signed(add_ln691_519_fu_4265_p2));

assign add_ln691_524_fu_2546_p2 = ($signed(sext_ln151_204_fu_2537_p1) + $signed(sext_ln151_205_fu_2540_p1));

assign add_ln691_525_fu_4282_p2 = ($signed(sext_ln691_526_fu_4279_p1) + $signed(tmp_422_reg_5698));

assign add_ln691_526_fu_2552_p2 = ($signed(sext_ln151_203_fu_2534_p1) + $signed(sext_ln151_202_fu_2531_p1));

assign add_ln691_527_fu_2562_p2 = ($signed(sext_ln691_524_fu_2518_p1) + $signed(sext_ln691_525_fu_2543_p1));

assign add_ln691_528_fu_2572_p2 = ($signed(sext_ln691_528_fu_2568_p1) + $signed(sext_ln691_527_fu_2558_p1));

assign add_ln691_529_fu_4290_p2 = ($signed(sext_ln691_529_fu_4287_p1) + $signed(add_ln691_525_fu_4282_p2));

assign add_ln691_530_fu_2606_p2 = ($signed(sext_ln151_208_fu_2597_p1) + $signed(sext_ln151_209_fu_2600_p1));

assign add_ln691_531_fu_4299_p2 = ($signed(sext_ln691_532_fu_4296_p1) + $signed(tmp_429_reg_5713));

assign add_ln691_532_fu_2612_p2 = ($signed(sext_ln151_207_fu_2594_p1) + $signed(sext_ln151_206_fu_2591_p1));

assign add_ln691_533_fu_2622_p2 = ($signed(sext_ln691_530_fu_2578_p1) + $signed(sext_ln691_531_fu_2603_p1));

assign add_ln691_534_fu_2632_p2 = ($signed(sext_ln691_534_fu_2628_p1) + $signed(sext_ln691_533_fu_2618_p1));

assign add_ln691_535_fu_4307_p2 = ($signed(sext_ln691_535_fu_4304_p1) + $signed(add_ln691_531_fu_4299_p2));

assign add_ln691_536_fu_2666_p2 = ($signed(sext_ln151_212_fu_2657_p1) + $signed(sext_ln151_213_fu_2660_p1));

assign add_ln691_537_fu_4316_p2 = ($signed(sext_ln691_538_fu_4313_p1) + $signed(tmp_436_reg_5728));

assign add_ln691_538_fu_2672_p2 = ($signed(sext_ln151_211_fu_2654_p1) + $signed(sext_ln151_210_fu_2651_p1));

assign add_ln691_539_fu_2682_p2 = ($signed(sext_ln691_536_fu_2638_p1) + $signed(sext_ln691_537_fu_2663_p1));

assign add_ln691_540_fu_2692_p2 = ($signed(sext_ln691_540_fu_2688_p1) + $signed(sext_ln691_539_fu_2678_p1));

assign add_ln691_541_fu_4324_p2 = ($signed(sext_ln691_541_fu_4321_p1) + $signed(add_ln691_537_fu_4316_p2));

assign add_ln691_542_fu_2726_p2 = ($signed(sext_ln151_216_fu_2717_p1) + $signed(sext_ln151_217_fu_2720_p1));

assign add_ln691_543_fu_4333_p2 = ($signed(sext_ln691_544_fu_4330_p1) + $signed(tmp_443_reg_5743));

assign add_ln691_544_fu_2732_p2 = ($signed(sext_ln151_215_fu_2714_p1) + $signed(sext_ln151_214_fu_2711_p1));

assign add_ln691_545_fu_2742_p2 = ($signed(sext_ln691_542_fu_2698_p1) + $signed(sext_ln691_543_fu_2723_p1));

assign add_ln691_546_fu_2752_p2 = ($signed(sext_ln691_546_fu_2748_p1) + $signed(sext_ln691_545_fu_2738_p1));

assign add_ln691_547_fu_4341_p2 = ($signed(sext_ln691_547_fu_4338_p1) + $signed(add_ln691_543_fu_4333_p2));

assign add_ln691_548_fu_2786_p2 = ($signed(sext_ln151_220_fu_2777_p1) + $signed(sext_ln151_221_fu_2780_p1));

assign add_ln691_549_fu_4350_p2 = ($signed(sext_ln691_550_fu_4347_p1) + $signed(tmp_450_reg_5758));

assign add_ln691_550_fu_2792_p2 = ($signed(sext_ln151_219_fu_2774_p1) + $signed(sext_ln151_218_fu_2771_p1));

assign add_ln691_551_fu_2802_p2 = ($signed(sext_ln691_548_fu_2758_p1) + $signed(sext_ln691_549_fu_2783_p1));

assign add_ln691_552_fu_2812_p2 = ($signed(sext_ln691_552_fu_2808_p1) + $signed(sext_ln691_551_fu_2798_p1));

assign add_ln691_553_fu_4358_p2 = ($signed(sext_ln691_553_fu_4355_p1) + $signed(add_ln691_549_fu_4350_p2));

assign add_ln691_554_fu_2846_p2 = ($signed(sext_ln151_224_fu_2837_p1) + $signed(sext_ln151_225_fu_2840_p1));

assign add_ln691_555_fu_4367_p2 = ($signed(sext_ln691_556_fu_4364_p1) + $signed(tmp_457_reg_5773));

assign add_ln691_556_fu_2852_p2 = ($signed(sext_ln151_223_fu_2834_p1) + $signed(sext_ln151_222_fu_2831_p1));

assign add_ln691_557_fu_2862_p2 = ($signed(sext_ln691_554_fu_2818_p1) + $signed(sext_ln691_555_fu_2843_p1));

assign add_ln691_558_fu_2872_p2 = ($signed(sext_ln691_558_fu_2868_p1) + $signed(sext_ln691_557_fu_2858_p1));

assign add_ln691_559_fu_4375_p2 = ($signed(sext_ln691_559_fu_4372_p1) + $signed(add_ln691_555_fu_4367_p2));

assign add_ln691_560_fu_2906_p2 = ($signed(sext_ln151_228_fu_2897_p1) + $signed(sext_ln151_229_fu_2900_p1));

assign add_ln691_561_fu_4384_p2 = ($signed(sext_ln691_562_fu_4381_p1) + $signed(tmp_464_reg_5788));

assign add_ln691_562_fu_2912_p2 = ($signed(sext_ln151_227_fu_2894_p1) + $signed(sext_ln151_226_fu_2891_p1));

assign add_ln691_563_fu_2922_p2 = ($signed(sext_ln691_560_fu_2878_p1) + $signed(sext_ln691_561_fu_2903_p1));

assign add_ln691_564_fu_2932_p2 = ($signed(sext_ln691_564_fu_2928_p1) + $signed(sext_ln691_563_fu_2918_p1));

assign add_ln691_565_fu_4392_p2 = ($signed(sext_ln691_565_fu_4389_p1) + $signed(add_ln691_561_fu_4384_p2));

assign add_ln691_566_fu_2966_p2 = ($signed(sext_ln151_232_fu_2957_p1) + $signed(sext_ln151_233_fu_2960_p1));

assign add_ln691_567_fu_4401_p2 = ($signed(sext_ln691_568_fu_4398_p1) + $signed(tmp_471_reg_5803));

assign add_ln691_568_fu_2972_p2 = ($signed(sext_ln151_231_fu_2954_p1) + $signed(sext_ln151_230_fu_2951_p1));

assign add_ln691_569_fu_2982_p2 = ($signed(sext_ln691_566_fu_2938_p1) + $signed(sext_ln691_567_fu_2963_p1));

assign add_ln691_570_fu_2992_p2 = ($signed(sext_ln691_570_fu_2988_p1) + $signed(sext_ln691_569_fu_2978_p1));

assign add_ln691_571_fu_4409_p2 = ($signed(sext_ln691_571_fu_4406_p1) + $signed(add_ln691_567_fu_4401_p2));

assign add_ln691_572_fu_3026_p2 = ($signed(sext_ln151_236_fu_3017_p1) + $signed(sext_ln151_237_fu_3020_p1));

assign add_ln691_573_fu_4418_p2 = ($signed(sext_ln691_574_fu_4415_p1) + $signed(tmp_478_reg_5818));

assign add_ln691_574_fu_3032_p2 = ($signed(sext_ln151_235_fu_3014_p1) + $signed(sext_ln151_234_fu_3011_p1));

assign add_ln691_575_fu_3042_p2 = ($signed(sext_ln691_572_fu_2998_p1) + $signed(sext_ln691_573_fu_3023_p1));

assign add_ln691_576_fu_3052_p2 = ($signed(sext_ln691_576_fu_3048_p1) + $signed(sext_ln691_575_fu_3038_p1));

assign add_ln691_577_fu_4426_p2 = ($signed(sext_ln691_577_fu_4423_p1) + $signed(add_ln691_573_fu_4418_p2));

assign add_ln691_578_fu_3140_p2 = ($signed(sext_ln151_240_fu_3112_p1) + $signed(sext_ln151_241_fu_3124_p1));

assign add_ln691_579_fu_4435_p2 = ($signed(sext_ln691_580_fu_4432_p1) + $signed(tmp_484_reg_5833));

assign add_ln691_580_fu_3146_p2 = ($signed(sext_ln151_239_fu_3100_p1) + $signed(sext_ln151_238_fu_3088_p1));

assign add_ln691_581_fu_3156_p2 = ($signed(sext_ln691_578_fu_3066_p1) + $signed(sext_ln691_579_fu_3136_p1));

assign add_ln691_582_fu_3166_p2 = ($signed(sext_ln691_582_fu_3162_p1) + $signed(sext_ln691_581_fu_3152_p1));

assign add_ln691_583_fu_4443_p2 = ($signed(sext_ln691_583_fu_4440_p1) + $signed(add_ln691_579_fu_4435_p2));

assign add_ln691_584_fu_3236_p2 = ($signed(sext_ln151_244_fu_3214_p1) + $signed(sext_ln151_245_fu_3223_p1));

assign add_ln691_585_fu_4452_p2 = ($signed(sext_ln691_586_fu_4449_p1) + $signed(tmp_485_reg_5848));

assign add_ln691_586_fu_3242_p2 = ($signed(sext_ln151_243_fu_3205_p1) + $signed(sext_ln151_242_fu_3196_p1));

assign add_ln691_587_fu_3252_p2 = ($signed(sext_ln691_584_fu_3177_p1) + $signed(sext_ln691_585_fu_3232_p1));

assign add_ln691_588_fu_3262_p2 = ($signed(sext_ln691_588_fu_3258_p1) + $signed(sext_ln691_587_fu_3248_p1));

assign add_ln691_589_fu_4460_p2 = ($signed(sext_ln691_589_fu_4457_p1) + $signed(add_ln691_585_fu_4452_p2));

assign add_ln691_590_fu_3332_p2 = ($signed(sext_ln151_248_fu_3310_p1) + $signed(sext_ln151_249_fu_3319_p1));

assign add_ln691_591_fu_4469_p2 = ($signed(sext_ln691_592_fu_4466_p1) + $signed(tmp_486_reg_5863));

assign add_ln691_592_fu_3338_p2 = ($signed(sext_ln151_247_fu_3301_p1) + $signed(sext_ln151_246_fu_3292_p1));

assign add_ln691_593_fu_3348_p2 = ($signed(sext_ln691_590_fu_3273_p1) + $signed(sext_ln691_591_fu_3328_p1));

assign add_ln691_594_fu_3358_p2 = ($signed(sext_ln691_594_fu_3354_p1) + $signed(sext_ln691_593_fu_3344_p1));

assign add_ln691_595_fu_4477_p2 = ($signed(sext_ln691_595_fu_4474_p1) + $signed(add_ln691_591_fu_4469_p2));

assign add_ln691_596_fu_3428_p2 = ($signed(sext_ln151_252_fu_3406_p1) + $signed(sext_ln151_253_fu_3415_p1));

assign add_ln691_597_fu_4486_p2 = ($signed(sext_ln691_598_fu_4483_p1) + $signed(tmp_487_reg_5878));

assign add_ln691_598_fu_3434_p2 = ($signed(sext_ln151_251_fu_3397_p1) + $signed(sext_ln151_250_fu_3388_p1));

assign add_ln691_599_fu_3444_p2 = ($signed(sext_ln691_596_fu_3369_p1) + $signed(sext_ln691_597_fu_3424_p1));

assign add_ln691_600_fu_3454_p2 = ($signed(sext_ln691_600_fu_3450_p1) + $signed(sext_ln691_599_fu_3440_p1));

assign add_ln691_601_fu_4494_p2 = ($signed(sext_ln691_601_fu_4491_p1) + $signed(add_ln691_597_fu_4486_p2));

assign add_ln691_602_fu_3524_p2 = ($signed(sext_ln151_256_fu_3502_p1) + $signed(sext_ln151_257_fu_3511_p1));

assign add_ln691_603_fu_4503_p2 = ($signed(sext_ln691_604_fu_4500_p1) + $signed(tmp_488_reg_5893));

assign add_ln691_604_fu_3530_p2 = ($signed(sext_ln151_255_fu_3493_p1) + $signed(sext_ln151_254_fu_3484_p1));

assign add_ln691_605_fu_3540_p2 = ($signed(sext_ln691_602_fu_3465_p1) + $signed(sext_ln691_603_fu_3520_p1));

assign add_ln691_606_fu_3550_p2 = ($signed(sext_ln691_606_fu_3546_p1) + $signed(sext_ln691_605_fu_3536_p1));

assign add_ln691_607_fu_4511_p2 = ($signed(sext_ln691_607_fu_4508_p1) + $signed(add_ln691_603_fu_4503_p2));

assign add_ln691_608_fu_3620_p2 = ($signed(sext_ln151_260_fu_3598_p1) + $signed(sext_ln151_261_fu_3607_p1));

assign add_ln691_609_fu_4520_p2 = ($signed(sext_ln691_610_fu_4517_p1) + $signed(tmp_489_reg_5908));

assign add_ln691_610_fu_3626_p2 = ($signed(sext_ln151_259_fu_3589_p1) + $signed(sext_ln151_258_fu_3580_p1));

assign add_ln691_611_fu_3636_p2 = ($signed(sext_ln691_608_fu_3561_p1) + $signed(sext_ln691_609_fu_3616_p1));

assign add_ln691_612_fu_3646_p2 = ($signed(sext_ln691_612_fu_3642_p1) + $signed(sext_ln691_611_fu_3632_p1));

assign add_ln691_613_fu_4528_p2 = ($signed(sext_ln691_613_fu_4525_p1) + $signed(add_ln691_609_fu_4520_p2));

assign add_ln691_614_fu_3716_p2 = ($signed(sext_ln151_264_fu_3694_p1) + $signed(sext_ln151_265_fu_3703_p1));

assign add_ln691_615_fu_4537_p2 = ($signed(sext_ln691_616_fu_4534_p1) + $signed(tmp_490_reg_5923));

assign add_ln691_616_fu_3722_p2 = ($signed(sext_ln151_263_fu_3685_p1) + $signed(sext_ln151_262_fu_3676_p1));

assign add_ln691_617_fu_3732_p2 = ($signed(sext_ln691_614_fu_3657_p1) + $signed(sext_ln691_615_fu_3712_p1));

assign add_ln691_618_fu_3742_p2 = ($signed(sext_ln691_618_fu_3738_p1) + $signed(sext_ln691_617_fu_3728_p1));

assign add_ln691_619_fu_4545_p2 = ($signed(sext_ln691_619_fu_4542_p1) + $signed(add_ln691_615_fu_4537_p2));

assign add_ln691_620_fu_3812_p2 = ($signed(sext_ln151_268_fu_3790_p1) + $signed(sext_ln151_269_fu_3799_p1));

assign add_ln691_621_fu_4554_p2 = ($signed(sext_ln691_622_fu_4551_p1) + $signed(tmp_491_reg_5938));

assign add_ln691_622_fu_3818_p2 = ($signed(sext_ln151_267_fu_3781_p1) + $signed(sext_ln151_266_fu_3772_p1));

assign add_ln691_623_fu_3828_p2 = ($signed(sext_ln691_620_fu_3753_p1) + $signed(sext_ln691_621_fu_3808_p1));

assign add_ln691_624_fu_3838_p2 = ($signed(sext_ln691_624_fu_3834_p1) + $signed(sext_ln691_623_fu_3824_p1));

assign add_ln691_625_fu_4562_p2 = ($signed(sext_ln691_625_fu_4559_p1) + $signed(add_ln691_621_fu_4554_p2));

assign add_ln691_626_fu_3908_p2 = ($signed(sext_ln151_272_fu_3886_p1) + $signed(sext_ln151_273_fu_3895_p1));

assign add_ln691_627_fu_4571_p2 = ($signed(sext_ln691_628_fu_4568_p1) + $signed(tmp_492_reg_5953));

assign add_ln691_628_fu_3914_p2 = ($signed(sext_ln151_271_fu_3877_p1) + $signed(sext_ln151_270_fu_3868_p1));

assign add_ln691_629_fu_3924_p2 = ($signed(sext_ln691_626_fu_3849_p1) + $signed(sext_ln691_627_fu_3904_p1));

assign add_ln691_630_fu_3934_p2 = ($signed(sext_ln691_630_fu_3930_p1) + $signed(sext_ln691_629_fu_3920_p1));

assign add_ln691_631_fu_4579_p2 = ($signed(sext_ln691_631_fu_4576_p1) + $signed(add_ln691_627_fu_4571_p2));

assign add_ln691_632_fu_4004_p2 = ($signed(sext_ln151_276_fu_3982_p1) + $signed(sext_ln151_277_fu_3991_p1));

assign add_ln691_633_fu_4588_p2 = ($signed(sext_ln691_634_fu_4585_p1) + $signed(tmp_493_reg_5968));

assign add_ln691_634_fu_4010_p2 = ($signed(sext_ln151_275_fu_3973_p1) + $signed(sext_ln151_274_fu_3964_p1));

assign add_ln691_635_fu_4020_p2 = ($signed(sext_ln691_632_fu_3945_p1) + $signed(sext_ln691_633_fu_4000_p1));

assign add_ln691_636_fu_4030_p2 = ($signed(sext_ln691_636_fu_4026_p1) + $signed(sext_ln691_635_fu_4016_p1));

assign add_ln691_637_fu_4596_p2 = ($signed(sext_ln691_637_fu_4593_p1) + $signed(add_ln691_633_fu_4588_p2));

assign add_ln691_638_fu_4100_p2 = ($signed(sext_ln151_280_fu_4078_p1) + $signed(sext_ln151_281_fu_4087_p1));

assign add_ln691_639_fu_4605_p2 = ($signed(sext_ln691_640_fu_4602_p1) + $signed(tmp_494_reg_5983));

assign add_ln691_640_fu_4106_p2 = ($signed(sext_ln151_279_fu_4069_p1) + $signed(sext_ln151_278_fu_4060_p1));

assign add_ln691_641_fu_4116_p2 = ($signed(sext_ln691_638_fu_4041_p1) + $signed(sext_ln691_639_fu_4096_p1));

assign add_ln691_642_fu_4126_p2 = ($signed(sext_ln691_642_fu_4122_p1) + $signed(sext_ln691_641_fu_4112_p1));

assign add_ln691_643_fu_4613_p2 = ($signed(sext_ln691_643_fu_4610_p1) + $signed(add_ln691_639_fu_4605_p2));

assign add_ln691_644_fu_4196_p2 = ($signed(sext_ln151_284_fu_4174_p1) + $signed(sext_ln151_285_fu_4183_p1));

assign add_ln691_645_fu_4622_p2 = ($signed(sext_ln691_646_fu_4619_p1) + $signed(tmp_495_reg_5998));

assign add_ln691_646_fu_4202_p2 = ($signed(sext_ln151_283_fu_4165_p1) + $signed(sext_ln151_282_fu_4156_p1));

assign add_ln691_647_fu_4212_p2 = ($signed(sext_ln691_644_fu_4137_p1) + $signed(sext_ln691_645_fu_4192_p1));

assign add_ln691_648_fu_4222_p2 = ($signed(sext_ln691_648_fu_4218_p1) + $signed(sext_ln691_647_fu_4208_p1));

assign add_ln691_649_fu_4630_p2 = ($signed(sext_ln691_649_fu_4627_p1) + $signed(add_ln691_645_fu_4622_p2));

assign add_ln691_fu_2366_p2 = ($signed(sext_ln151_192_fu_2357_p1) + $signed(sext_ln151_193_fu_2360_p1));

assign and_ln120_fu_626_p2 = (xor_ln120_fu_614_p2 & icmp_ln122_fu_620_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mac_sm_full_n == 1'b0)) | ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (cache_window_sm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((icmp_ln120_reg_4807_pp0_iter1_reg == 1'd0) & (cache_window_sm_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter2 = ((icmp_ln161_reg_4869_pp0_iter1_reg == 1'd1) & (mac_sm_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign attn_inst_matmul_gen_v_weight_arr_V_address0 = zext_ln215_3_fu_734_p1;

assign icmp_ln120_fu_594_p2 = ((ap_phi_mux_indvar_flatten20_phi_fu_552_p4 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_600_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_564_p4 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_620_p2 = ((ap_phi_mux_cit_phi_fu_587_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_708_p2 = ((select_ln121_reg_4831 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_713_p2 = ((select_ln121_reg_4831 == 6'd31) ? 1'b1 : 1'b0);

assign mac_sm_din = tmp_497_fu_4693_p48;

assign mul_ln1345_507_fu_892_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_508_fu_916_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_509_fu_940_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_510_fu_964_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_511_fu_988_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_512_fu_1008_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_513_fu_1028_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_514_fu_1048_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_515_fu_1068_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_516_fu_1088_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_517_fu_1108_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_518_fu_1128_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_519_fu_1148_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_520_fu_1168_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_521_fu_1188_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_522_fu_1208_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_523_fu_1228_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_524_fu_1248_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_525_fu_1268_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_526_fu_1288_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_527_fu_1308_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_528_fu_1328_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_529_fu_1348_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_530_fu_1368_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_531_fu_1388_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_532_fu_1408_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_533_fu_1428_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_534_fu_1448_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_535_fu_1468_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_536_fu_1488_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_537_fu_1508_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_538_fu_1528_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_539_fu_1548_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_540_fu_1568_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_541_fu_1588_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_542_fu_1608_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_543_fu_1628_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_544_fu_1648_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_545_fu_1668_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_546_fu_1688_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_547_fu_1708_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_548_fu_1728_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_549_fu_1748_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_550_fu_1768_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_551_fu_1788_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_552_fu_1808_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_553_fu_1828_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_554_fu_1848_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_555_fu_1868_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_556_fu_1888_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_557_fu_1908_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_558_fu_1928_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_559_fu_1948_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_560_fu_1968_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_561_fu_1988_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_562_fu_2008_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_563_fu_2028_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_564_fu_2048_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_565_fu_2068_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_566_fu_2088_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_567_fu_2108_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_568_fu_2128_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_569_fu_2148_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_570_fu_2168_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_571_fu_2188_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_572_fu_2208_p1 = sext_ln1345_fu_860_p1;

assign mul_ln1345_573_fu_2228_p1 = sext_ln1345_292_fu_884_p1;

assign mul_ln1345_574_fu_2248_p1 = sext_ln1345_294_fu_908_p1;

assign mul_ln1345_575_fu_2268_p1 = sext_ln1345_296_fu_932_p1;

assign mul_ln1345_576_fu_2288_p1 = sext_ln1345_298_fu_956_p1;

assign mul_ln1345_577_fu_2308_p1 = sext_ln1345_300_fu_980_p1;

assign mul_ln1345_578_fu_3061_p0 = sext_ln1345_291_reg_4933;

assign mul_ln1345_578_fu_3061_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_579_fu_3083_p0 = sext_ln1345_293_reg_4943;

assign mul_ln1345_579_fu_3083_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_580_fu_3095_p0 = sext_ln1345_295_reg_4953;

assign mul_ln1345_580_fu_3095_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_581_fu_3107_p0 = sext_ln1345_297_reg_4963;

assign mul_ln1345_581_fu_3107_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_582_fu_3119_p0 = sext_ln1345_299_reg_4973;

assign mul_ln1345_582_fu_3119_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_583_fu_3131_p0 = sext_ln1345_301_reg_4983;

assign mul_ln1345_583_fu_3131_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_584_fu_3172_p0 = sext_ln1345_302_reg_4993;

assign mul_ln1345_584_fu_3172_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_585_fu_3191_p0 = sext_ln1345_303_reg_5003;

assign mul_ln1345_585_fu_3191_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_586_fu_3200_p0 = sext_ln1345_304_reg_5013;

assign mul_ln1345_586_fu_3200_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_587_fu_3209_p0 = sext_ln1345_305_reg_5023;

assign mul_ln1345_587_fu_3209_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_588_fu_3218_p0 = sext_ln1345_306_reg_5033;

assign mul_ln1345_588_fu_3218_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_589_fu_3227_p0 = sext_ln1345_307_reg_5043;

assign mul_ln1345_589_fu_3227_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_590_fu_3268_p0 = sext_ln1345_308_reg_5053;

assign mul_ln1345_590_fu_3268_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_591_fu_3287_p0 = sext_ln1345_309_reg_5063;

assign mul_ln1345_591_fu_3287_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_592_fu_3296_p0 = sext_ln1345_310_reg_5073;

assign mul_ln1345_592_fu_3296_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_593_fu_3305_p0 = sext_ln1345_311_reg_5083;

assign mul_ln1345_593_fu_3305_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_594_fu_3314_p0 = sext_ln1345_312_reg_5093;

assign mul_ln1345_594_fu_3314_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_595_fu_3323_p0 = sext_ln1345_313_reg_5103;

assign mul_ln1345_595_fu_3323_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_596_fu_3364_p0 = sext_ln1345_314_reg_5113;

assign mul_ln1345_596_fu_3364_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_597_fu_3383_p0 = sext_ln1345_315_reg_5123;

assign mul_ln1345_597_fu_3383_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_598_fu_3392_p0 = sext_ln1345_316_reg_5133;

assign mul_ln1345_598_fu_3392_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_599_fu_3401_p0 = sext_ln1345_317_reg_5143;

assign mul_ln1345_599_fu_3401_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_600_fu_3410_p0 = sext_ln1345_318_reg_5153;

assign mul_ln1345_600_fu_3410_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_601_fu_3419_p0 = sext_ln1345_319_reg_5163;

assign mul_ln1345_601_fu_3419_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_602_fu_3460_p0 = sext_ln1345_320_reg_5173;

assign mul_ln1345_602_fu_3460_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_603_fu_3479_p0 = sext_ln1345_321_reg_5183;

assign mul_ln1345_603_fu_3479_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_604_fu_3488_p0 = sext_ln1345_322_reg_5193;

assign mul_ln1345_604_fu_3488_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_605_fu_3497_p0 = sext_ln1345_323_reg_5203;

assign mul_ln1345_605_fu_3497_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_606_fu_3506_p0 = sext_ln1345_324_reg_5213;

assign mul_ln1345_606_fu_3506_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_607_fu_3515_p0 = sext_ln1345_325_reg_5223;

assign mul_ln1345_607_fu_3515_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_608_fu_3556_p0 = sext_ln1345_326_reg_5233;

assign mul_ln1345_608_fu_3556_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_609_fu_3575_p0 = sext_ln1345_327_reg_5243;

assign mul_ln1345_609_fu_3575_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_610_fu_3584_p0 = sext_ln1345_328_reg_5253;

assign mul_ln1345_610_fu_3584_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_611_fu_3593_p0 = sext_ln1345_329_reg_5263;

assign mul_ln1345_611_fu_3593_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_612_fu_3602_p0 = sext_ln1345_330_reg_5273;

assign mul_ln1345_612_fu_3602_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_613_fu_3611_p0 = sext_ln1345_331_reg_5283;

assign mul_ln1345_613_fu_3611_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_614_fu_3652_p0 = sext_ln1345_332_reg_5293;

assign mul_ln1345_614_fu_3652_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_615_fu_3671_p0 = sext_ln1345_333_reg_5303;

assign mul_ln1345_615_fu_3671_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_616_fu_3680_p0 = sext_ln1345_334_reg_5313;

assign mul_ln1345_616_fu_3680_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_617_fu_3689_p0 = sext_ln1345_335_reg_5323;

assign mul_ln1345_617_fu_3689_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_618_fu_3698_p0 = sext_ln1345_336_reg_5333;

assign mul_ln1345_618_fu_3698_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_619_fu_3707_p0 = sext_ln1345_337_reg_5343;

assign mul_ln1345_619_fu_3707_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_620_fu_3748_p0 = sext_ln1345_338_reg_5353;

assign mul_ln1345_620_fu_3748_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_621_fu_3767_p0 = sext_ln1345_339_reg_5363;

assign mul_ln1345_621_fu_3767_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_622_fu_3776_p0 = sext_ln1345_340_reg_5373;

assign mul_ln1345_622_fu_3776_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_623_fu_3785_p0 = sext_ln1345_341_reg_5383;

assign mul_ln1345_623_fu_3785_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_624_fu_3794_p0 = sext_ln1345_342_reg_5393;

assign mul_ln1345_624_fu_3794_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_625_fu_3803_p0 = sext_ln1345_343_reg_5403;

assign mul_ln1345_625_fu_3803_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_626_fu_3844_p0 = sext_ln1345_344_reg_5413;

assign mul_ln1345_626_fu_3844_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_627_fu_3863_p0 = sext_ln1345_345_reg_5423;

assign mul_ln1345_627_fu_3863_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_628_fu_3872_p0 = sext_ln1345_346_reg_5433;

assign mul_ln1345_628_fu_3872_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_629_fu_3881_p0 = sext_ln1345_347_reg_5443;

assign mul_ln1345_629_fu_3881_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_630_fu_3890_p0 = sext_ln1345_348_reg_5453;

assign mul_ln1345_630_fu_3890_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_631_fu_3899_p0 = sext_ln1345_349_reg_5463;

assign mul_ln1345_631_fu_3899_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_632_fu_3940_p0 = sext_ln1345_350_reg_5473;

assign mul_ln1345_632_fu_3940_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_633_fu_3959_p0 = sext_ln1345_351_reg_5483;

assign mul_ln1345_633_fu_3959_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_634_fu_3968_p0 = sext_ln1345_352_reg_5493;

assign mul_ln1345_634_fu_3968_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_635_fu_3977_p0 = sext_ln1345_353_reg_5503;

assign mul_ln1345_635_fu_3977_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_636_fu_3986_p0 = sext_ln1345_354_reg_5513;

assign mul_ln1345_636_fu_3986_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_637_fu_3995_p0 = sext_ln1345_355_reg_5523;

assign mul_ln1345_637_fu_3995_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_638_fu_4036_p0 = sext_ln1345_356_reg_5533;

assign mul_ln1345_638_fu_4036_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_639_fu_4055_p0 = sext_ln1345_357_reg_5543;

assign mul_ln1345_639_fu_4055_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_640_fu_4064_p0 = sext_ln1345_358_reg_5553;

assign mul_ln1345_640_fu_4064_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_641_fu_4073_p0 = sext_ln1345_359_reg_5563;

assign mul_ln1345_641_fu_4073_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_642_fu_4082_p0 = sext_ln1345_360_reg_5573;

assign mul_ln1345_642_fu_4082_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_643_fu_4091_p0 = sext_ln1345_361_reg_5583;

assign mul_ln1345_643_fu_4091_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_644_fu_4132_p0 = sext_ln1345_362_reg_5593;

assign mul_ln1345_644_fu_4132_p1 = sext_ln1345_368_fu_3058_p1;

assign mul_ln1345_645_fu_4151_p0 = sext_ln1345_363_reg_5603;

assign mul_ln1345_645_fu_4151_p1 = sext_ln1345_369_fu_3080_p1;

assign mul_ln1345_646_fu_4160_p0 = sext_ln1345_364_reg_5613;

assign mul_ln1345_646_fu_4160_p1 = sext_ln1345_370_fu_3092_p1;

assign mul_ln1345_647_fu_4169_p0 = sext_ln1345_365_reg_5623;

assign mul_ln1345_647_fu_4169_p1 = sext_ln1345_371_fu_3104_p1;

assign mul_ln1345_648_fu_4178_p0 = sext_ln1345_366_reg_5633;

assign mul_ln1345_648_fu_4178_p1 = sext_ln1345_372_fu_3116_p1;

assign mul_ln1345_649_fu_4187_p0 = sext_ln1345_367_reg_5643;

assign mul_ln1345_649_fu_4187_p1 = sext_ln1345_373_fu_3128_p1;

assign mul_ln1345_fu_868_p1 = sext_ln1345_fu_860_p1;

assign or_ln121_fu_632_p2 = (icmp_ln121_fu_600_p2 | and_ln120_fu_626_p2);

assign select_ln120_5_fu_2317_p3 = ((icmp_ln121_reg_4811_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_v_bias_arr_V_load_1_reg_4802 : attn_inst_matmul_gen_v_bias_arr_V_load_reg_4893);

assign select_ln120_6_fu_671_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 4'd0 : trunc_ln215_5_fu_667_p1);

assign select_ln120_fu_606_p3 = ((icmp_ln121_fu_600_p2[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_cot_phi_fu_575_p4);

assign select_ln121_10_fu_2322_p3 = ((and_ln120_reg_4824_pp0_iter1_reg[0:0] == 1'b1) ? attn_inst_matmul_gen_v_bias_arr_V_q0 : select_ln120_5_fu_2317_p3);

assign select_ln121_11_fu_693_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? add_ln121_fu_658_p2 : select_ln120_reg_4818);

assign select_ln121_12_fu_723_p3 = ((icmp_ln121_reg_4811[0:0] == 1'b1) ? 11'd1 : add_ln121_3_reg_4839);

assign select_ln121_9_fu_678_p3 = ((and_ln120_reg_4824[0:0] == 1'b1) ? trunc_ln215_fu_663_p1 : select_ln120_6_fu_671_p3);

assign select_ln121_fu_638_p3 = ((or_ln121_fu_632_p2[0:0] == 1'b1) ? 6'd0 : ap_phi_mux_cit_phi_fu_587_p4);

assign select_ln126_fu_2337_p3 = ((icmp_ln126_reg_4864_pp0_iter1_reg[0:0] == 1'b1) ? vec_o_data_M_elems_V_fu_2329_p3 : vec_o_data_M_elems_V_2_fu_496);

assign sext_ln1345_291_fu_864_p1 = trunc_ln215_6_fu_856_p1;

assign sext_ln1345_292_fu_884_p1 = $signed(trunc_ln145_s_fu_746_p4);

assign sext_ln1345_293_fu_888_p1 = tmp_s_fu_874_p4;

assign sext_ln1345_294_fu_908_p1 = $signed(trunc_ln145_125_fu_756_p4);

assign sext_ln1345_295_fu_912_p1 = tmp_403_fu_898_p4;

assign sext_ln1345_296_fu_932_p1 = $signed(trunc_ln145_126_fu_766_p4);

assign sext_ln1345_297_fu_936_p1 = tmp_404_fu_922_p4;

assign sext_ln1345_298_fu_956_p1 = $signed(trunc_ln145_127_fu_776_p4);

assign sext_ln1345_299_fu_960_p1 = tmp_405_fu_946_p4;

assign sext_ln1345_300_fu_980_p1 = $signed(trunc_ln145_128_fu_786_p4);

assign sext_ln1345_301_fu_984_p1 = tmp_406_fu_970_p4;

assign sext_ln1345_302_fu_1004_p1 = tmp_407_fu_994_p4;

assign sext_ln1345_303_fu_1024_p1 = tmp_409_fu_1014_p4;

assign sext_ln1345_304_fu_1044_p1 = tmp_410_fu_1034_p4;

assign sext_ln1345_305_fu_1064_p1 = tmp_411_fu_1054_p4;

assign sext_ln1345_306_fu_1084_p1 = tmp_412_fu_1074_p4;

assign sext_ln1345_307_fu_1104_p1 = tmp_413_fu_1094_p4;

assign sext_ln1345_308_fu_1124_p1 = tmp_414_fu_1114_p4;

assign sext_ln1345_309_fu_1144_p1 = tmp_416_fu_1134_p4;

assign sext_ln1345_310_fu_1164_p1 = tmp_417_fu_1154_p4;

assign sext_ln1345_311_fu_1184_p1 = tmp_418_fu_1174_p4;

assign sext_ln1345_312_fu_1204_p1 = tmp_419_fu_1194_p4;

assign sext_ln1345_313_fu_1224_p1 = tmp_420_fu_1214_p4;

assign sext_ln1345_314_fu_1244_p1 = tmp_421_fu_1234_p4;

assign sext_ln1345_315_fu_1264_p1 = tmp_423_fu_1254_p4;

assign sext_ln1345_316_fu_1284_p1 = tmp_424_fu_1274_p4;

assign sext_ln1345_317_fu_1304_p1 = tmp_425_fu_1294_p4;

assign sext_ln1345_318_fu_1324_p1 = tmp_426_fu_1314_p4;

assign sext_ln1345_319_fu_1344_p1 = tmp_427_fu_1334_p4;

assign sext_ln1345_320_fu_1364_p1 = tmp_428_fu_1354_p4;

assign sext_ln1345_321_fu_1384_p1 = tmp_430_fu_1374_p4;

assign sext_ln1345_322_fu_1404_p1 = tmp_431_fu_1394_p4;

assign sext_ln1345_323_fu_1424_p1 = tmp_432_fu_1414_p4;

assign sext_ln1345_324_fu_1444_p1 = tmp_433_fu_1434_p4;

assign sext_ln1345_325_fu_1464_p1 = tmp_434_fu_1454_p4;

assign sext_ln1345_326_fu_1484_p1 = tmp_435_fu_1474_p4;

assign sext_ln1345_327_fu_1504_p1 = tmp_437_fu_1494_p4;

assign sext_ln1345_328_fu_1524_p1 = tmp_438_fu_1514_p4;

assign sext_ln1345_329_fu_1544_p1 = tmp_439_fu_1534_p4;

assign sext_ln1345_330_fu_1564_p1 = tmp_440_fu_1554_p4;

assign sext_ln1345_331_fu_1584_p1 = tmp_441_fu_1574_p4;

assign sext_ln1345_332_fu_1604_p1 = tmp_442_fu_1594_p4;

assign sext_ln1345_333_fu_1624_p1 = tmp_444_fu_1614_p4;

assign sext_ln1345_334_fu_1644_p1 = tmp_445_fu_1634_p4;

assign sext_ln1345_335_fu_1664_p1 = tmp_446_fu_1654_p4;

assign sext_ln1345_336_fu_1684_p1 = tmp_447_fu_1674_p4;

assign sext_ln1345_337_fu_1704_p1 = tmp_448_fu_1694_p4;

assign sext_ln1345_338_fu_1724_p1 = tmp_449_fu_1714_p4;

assign sext_ln1345_339_fu_1744_p1 = tmp_451_fu_1734_p4;

assign sext_ln1345_340_fu_1764_p1 = tmp_452_fu_1754_p4;

assign sext_ln1345_341_fu_1784_p1 = tmp_453_fu_1774_p4;

assign sext_ln1345_342_fu_1804_p1 = tmp_454_fu_1794_p4;

assign sext_ln1345_343_fu_1824_p1 = tmp_455_fu_1814_p4;

assign sext_ln1345_344_fu_1844_p1 = tmp_456_fu_1834_p4;

assign sext_ln1345_345_fu_1864_p1 = tmp_458_fu_1854_p4;

assign sext_ln1345_346_fu_1884_p1 = tmp_459_fu_1874_p4;

assign sext_ln1345_347_fu_1904_p1 = tmp_460_fu_1894_p4;

assign sext_ln1345_348_fu_1924_p1 = tmp_461_fu_1914_p4;

assign sext_ln1345_349_fu_1944_p1 = tmp_462_fu_1934_p4;

assign sext_ln1345_350_fu_1964_p1 = tmp_463_fu_1954_p4;

assign sext_ln1345_351_fu_1984_p1 = tmp_465_fu_1974_p4;

assign sext_ln1345_352_fu_2004_p1 = tmp_466_fu_1994_p4;

assign sext_ln1345_353_fu_2024_p1 = tmp_467_fu_2014_p4;

assign sext_ln1345_354_fu_2044_p1 = tmp_468_fu_2034_p4;

assign sext_ln1345_355_fu_2064_p1 = tmp_469_fu_2054_p4;

assign sext_ln1345_356_fu_2084_p1 = tmp_470_fu_2074_p4;

assign sext_ln1345_357_fu_2104_p1 = tmp_472_fu_2094_p4;

assign sext_ln1345_358_fu_2124_p1 = tmp_473_fu_2114_p4;

assign sext_ln1345_359_fu_2144_p1 = tmp_474_fu_2134_p4;

assign sext_ln1345_360_fu_2164_p1 = tmp_475_fu_2154_p4;

assign sext_ln1345_361_fu_2184_p1 = tmp_476_fu_2174_p4;

assign sext_ln1345_362_fu_2204_p1 = tmp_477_fu_2194_p4;

assign sext_ln1345_363_fu_2224_p1 = tmp_479_fu_2214_p4;

assign sext_ln1345_364_fu_2244_p1 = tmp_480_fu_2234_p4;

assign sext_ln1345_365_fu_2264_p1 = tmp_481_fu_2254_p4;

assign sext_ln1345_366_fu_2284_p1 = tmp_482_fu_2274_p4;

assign sext_ln1345_367_fu_2304_p1 = tmp_483_fu_2294_p4;

assign sext_ln1345_368_fu_3058_p1 = $signed(trunc_ln145_129_reg_4903);

assign sext_ln1345_369_fu_3080_p1 = $signed(trunc_ln145_130_reg_4908);

assign sext_ln1345_370_fu_3092_p1 = $signed(trunc_ln145_131_reg_4913);

assign sext_ln1345_371_fu_3104_p1 = $signed(trunc_ln145_132_reg_4918);

assign sext_ln1345_372_fu_3116_p1 = $signed(trunc_ln145_133_reg_4923);

assign sext_ln1345_373_fu_3128_p1 = $signed(trunc_ln145_134_reg_4928);

assign sext_ln1345_fu_860_p1 = $signed(trunc_ln145_fu_742_p1);

assign sext_ln151_191_fu_2354_p1 = mul_ln1345_508_reg_4958;

assign sext_ln151_192_fu_2357_p1 = mul_ln1345_509_reg_4968;

assign sext_ln151_193_fu_2360_p1 = mul_ln1345_510_reg_4978;

assign sext_ln151_194_fu_2411_p1 = mul_ln1345_513_reg_5008;

assign sext_ln151_195_fu_2414_p1 = mul_ln1345_514_reg_5018;

assign sext_ln151_196_fu_2417_p1 = mul_ln1345_515_reg_5028;

assign sext_ln151_197_fu_2420_p1 = mul_ln1345_516_reg_5038;

assign sext_ln151_198_fu_2471_p1 = mul_ln1345_519_reg_5068;

assign sext_ln151_199_fu_2474_p1 = mul_ln1345_520_reg_5078;

assign sext_ln151_200_fu_2477_p1 = mul_ln1345_521_reg_5088;

assign sext_ln151_201_fu_2480_p1 = mul_ln1345_522_reg_5098;

assign sext_ln151_202_fu_2531_p1 = mul_ln1345_525_reg_5128;

assign sext_ln151_203_fu_2534_p1 = mul_ln1345_526_reg_5138;

assign sext_ln151_204_fu_2537_p1 = mul_ln1345_527_reg_5148;

assign sext_ln151_205_fu_2540_p1 = mul_ln1345_528_reg_5158;

assign sext_ln151_206_fu_2591_p1 = mul_ln1345_531_reg_5188;

assign sext_ln151_207_fu_2594_p1 = mul_ln1345_532_reg_5198;

assign sext_ln151_208_fu_2597_p1 = mul_ln1345_533_reg_5208;

assign sext_ln151_209_fu_2600_p1 = mul_ln1345_534_reg_5218;

assign sext_ln151_210_fu_2651_p1 = mul_ln1345_537_reg_5248;

assign sext_ln151_211_fu_2654_p1 = mul_ln1345_538_reg_5258;

assign sext_ln151_212_fu_2657_p1 = mul_ln1345_539_reg_5268;

assign sext_ln151_213_fu_2660_p1 = mul_ln1345_540_reg_5278;

assign sext_ln151_214_fu_2711_p1 = mul_ln1345_543_reg_5308;

assign sext_ln151_215_fu_2714_p1 = mul_ln1345_544_reg_5318;

assign sext_ln151_216_fu_2717_p1 = mul_ln1345_545_reg_5328;

assign sext_ln151_217_fu_2720_p1 = mul_ln1345_546_reg_5338;

assign sext_ln151_218_fu_2771_p1 = mul_ln1345_549_reg_5368;

assign sext_ln151_219_fu_2774_p1 = mul_ln1345_550_reg_5378;

assign sext_ln151_220_fu_2777_p1 = mul_ln1345_551_reg_5388;

assign sext_ln151_221_fu_2780_p1 = mul_ln1345_552_reg_5398;

assign sext_ln151_222_fu_2831_p1 = mul_ln1345_555_reg_5428;

assign sext_ln151_223_fu_2834_p1 = mul_ln1345_556_reg_5438;

assign sext_ln151_224_fu_2837_p1 = mul_ln1345_557_reg_5448;

assign sext_ln151_225_fu_2840_p1 = mul_ln1345_558_reg_5458;

assign sext_ln151_226_fu_2891_p1 = mul_ln1345_561_reg_5488;

assign sext_ln151_227_fu_2894_p1 = mul_ln1345_562_reg_5498;

assign sext_ln151_228_fu_2897_p1 = mul_ln1345_563_reg_5508;

assign sext_ln151_229_fu_2900_p1 = mul_ln1345_564_reg_5518;

assign sext_ln151_230_fu_2951_p1 = mul_ln1345_567_reg_5548;

assign sext_ln151_231_fu_2954_p1 = mul_ln1345_568_reg_5558;

assign sext_ln151_232_fu_2957_p1 = mul_ln1345_569_reg_5568;

assign sext_ln151_233_fu_2960_p1 = mul_ln1345_570_reg_5578;

assign sext_ln151_234_fu_3011_p1 = mul_ln1345_573_reg_5608;

assign sext_ln151_235_fu_3014_p1 = mul_ln1345_574_reg_5618;

assign sext_ln151_236_fu_3017_p1 = mul_ln1345_575_reg_5628;

assign sext_ln151_237_fu_3020_p1 = mul_ln1345_576_reg_5638;

assign sext_ln151_238_fu_3088_p1 = mul_ln1345_579_fu_3083_p2;

assign sext_ln151_239_fu_3100_p1 = mul_ln1345_580_fu_3095_p2;

assign sext_ln151_240_fu_3112_p1 = mul_ln1345_581_fu_3107_p2;

assign sext_ln151_241_fu_3124_p1 = mul_ln1345_582_fu_3119_p2;

assign sext_ln151_242_fu_3196_p1 = mul_ln1345_585_fu_3191_p2;

assign sext_ln151_243_fu_3205_p1 = mul_ln1345_586_fu_3200_p2;

assign sext_ln151_244_fu_3214_p1 = mul_ln1345_587_fu_3209_p2;

assign sext_ln151_245_fu_3223_p1 = mul_ln1345_588_fu_3218_p2;

assign sext_ln151_246_fu_3292_p1 = mul_ln1345_591_fu_3287_p2;

assign sext_ln151_247_fu_3301_p1 = mul_ln1345_592_fu_3296_p2;

assign sext_ln151_248_fu_3310_p1 = mul_ln1345_593_fu_3305_p2;

assign sext_ln151_249_fu_3319_p1 = mul_ln1345_594_fu_3314_p2;

assign sext_ln151_250_fu_3388_p1 = mul_ln1345_597_fu_3383_p2;

assign sext_ln151_251_fu_3397_p1 = mul_ln1345_598_fu_3392_p2;

assign sext_ln151_252_fu_3406_p1 = mul_ln1345_599_fu_3401_p2;

assign sext_ln151_253_fu_3415_p1 = mul_ln1345_600_fu_3410_p2;

assign sext_ln151_254_fu_3484_p1 = mul_ln1345_603_fu_3479_p2;

assign sext_ln151_255_fu_3493_p1 = mul_ln1345_604_fu_3488_p2;

assign sext_ln151_256_fu_3502_p1 = mul_ln1345_605_fu_3497_p2;

assign sext_ln151_257_fu_3511_p1 = mul_ln1345_606_fu_3506_p2;

assign sext_ln151_258_fu_3580_p1 = mul_ln1345_609_fu_3575_p2;

assign sext_ln151_259_fu_3589_p1 = mul_ln1345_610_fu_3584_p2;

assign sext_ln151_260_fu_3598_p1 = mul_ln1345_611_fu_3593_p2;

assign sext_ln151_261_fu_3607_p1 = mul_ln1345_612_fu_3602_p2;

assign sext_ln151_262_fu_3676_p1 = mul_ln1345_615_fu_3671_p2;

assign sext_ln151_263_fu_3685_p1 = mul_ln1345_616_fu_3680_p2;

assign sext_ln151_264_fu_3694_p1 = mul_ln1345_617_fu_3689_p2;

assign sext_ln151_265_fu_3703_p1 = mul_ln1345_618_fu_3698_p2;

assign sext_ln151_266_fu_3772_p1 = mul_ln1345_621_fu_3767_p2;

assign sext_ln151_267_fu_3781_p1 = mul_ln1345_622_fu_3776_p2;

assign sext_ln151_268_fu_3790_p1 = mul_ln1345_623_fu_3785_p2;

assign sext_ln151_269_fu_3799_p1 = mul_ln1345_624_fu_3794_p2;

assign sext_ln151_270_fu_3868_p1 = mul_ln1345_627_fu_3863_p2;

assign sext_ln151_271_fu_3877_p1 = mul_ln1345_628_fu_3872_p2;

assign sext_ln151_272_fu_3886_p1 = mul_ln1345_629_fu_3881_p2;

assign sext_ln151_273_fu_3895_p1 = mul_ln1345_630_fu_3890_p2;

assign sext_ln151_274_fu_3964_p1 = mul_ln1345_633_fu_3959_p2;

assign sext_ln151_275_fu_3973_p1 = mul_ln1345_634_fu_3968_p2;

assign sext_ln151_276_fu_3982_p1 = mul_ln1345_635_fu_3977_p2;

assign sext_ln151_277_fu_3991_p1 = mul_ln1345_636_fu_3986_p2;

assign sext_ln151_278_fu_4060_p1 = mul_ln1345_639_fu_4055_p2;

assign sext_ln151_279_fu_4069_p1 = mul_ln1345_640_fu_4064_p2;

assign sext_ln151_280_fu_4078_p1 = mul_ln1345_641_fu_4073_p2;

assign sext_ln151_281_fu_4087_p1 = mul_ln1345_642_fu_4082_p2;

assign sext_ln151_282_fu_4156_p1 = mul_ln1345_645_fu_4151_p2;

assign sext_ln151_283_fu_4165_p1 = mul_ln1345_646_fu_4160_p2;

assign sext_ln151_284_fu_4174_p1 = mul_ln1345_647_fu_4169_p2;

assign sext_ln151_285_fu_4183_p1 = mul_ln1345_648_fu_4178_p2;

assign sext_ln151_fu_2351_p1 = mul_ln1345_507_reg_4948;

assign sext_ln691_507_fu_2363_p1 = mul_ln1345_511_reg_4988;

assign sext_ln691_508_fu_4228_p1 = $signed(add_ln691_reg_5658);

assign sext_ln691_509_fu_2378_p1 = $signed(add_ln691_508_fu_2372_p2);

assign sext_ln691_510_fu_2388_p1 = $signed(add_ln691_509_fu_2382_p2);

assign sext_ln691_511_fu_4236_p1 = $signed(add_ln691_510_reg_5663);

assign sext_ln691_512_fu_2398_p1 = mul_ln1345_512_reg_4998;

assign sext_ln691_513_fu_2423_p1 = mul_ln1345_517_reg_5048;

assign sext_ln691_514_fu_4245_p1 = $signed(add_ln691_512_reg_5673);

assign sext_ln691_515_fu_2438_p1 = $signed(add_ln691_514_fu_2432_p2);

assign sext_ln691_516_fu_2448_p1 = $signed(add_ln691_515_fu_2442_p2);

assign sext_ln691_517_fu_4253_p1 = $signed(add_ln691_516_reg_5678);

assign sext_ln691_518_fu_2458_p1 = mul_ln1345_518_reg_5058;

assign sext_ln691_519_fu_2483_p1 = mul_ln1345_523_reg_5108;

assign sext_ln691_520_fu_4262_p1 = $signed(add_ln691_518_reg_5688);

assign sext_ln691_521_fu_2498_p1 = $signed(add_ln691_520_fu_2492_p2);

assign sext_ln691_522_fu_2508_p1 = $signed(add_ln691_521_fu_2502_p2);

assign sext_ln691_523_fu_4270_p1 = $signed(add_ln691_522_reg_5693);

assign sext_ln691_524_fu_2518_p1 = mul_ln1345_524_reg_5118;

assign sext_ln691_525_fu_2543_p1 = mul_ln1345_529_reg_5168;

assign sext_ln691_526_fu_4279_p1 = $signed(add_ln691_524_reg_5703);

assign sext_ln691_527_fu_2558_p1 = $signed(add_ln691_526_fu_2552_p2);

assign sext_ln691_528_fu_2568_p1 = $signed(add_ln691_527_fu_2562_p2);

assign sext_ln691_529_fu_4287_p1 = $signed(add_ln691_528_reg_5708);

assign sext_ln691_530_fu_2578_p1 = mul_ln1345_530_reg_5178;

assign sext_ln691_531_fu_2603_p1 = mul_ln1345_535_reg_5228;

assign sext_ln691_532_fu_4296_p1 = $signed(add_ln691_530_reg_5718);

assign sext_ln691_533_fu_2618_p1 = $signed(add_ln691_532_fu_2612_p2);

assign sext_ln691_534_fu_2628_p1 = $signed(add_ln691_533_fu_2622_p2);

assign sext_ln691_535_fu_4304_p1 = $signed(add_ln691_534_reg_5723);

assign sext_ln691_536_fu_2638_p1 = mul_ln1345_536_reg_5238;

assign sext_ln691_537_fu_2663_p1 = mul_ln1345_541_reg_5288;

assign sext_ln691_538_fu_4313_p1 = $signed(add_ln691_536_reg_5733);

assign sext_ln691_539_fu_2678_p1 = $signed(add_ln691_538_fu_2672_p2);

assign sext_ln691_540_fu_2688_p1 = $signed(add_ln691_539_fu_2682_p2);

assign sext_ln691_541_fu_4321_p1 = $signed(add_ln691_540_reg_5738);

assign sext_ln691_542_fu_2698_p1 = mul_ln1345_542_reg_5298;

assign sext_ln691_543_fu_2723_p1 = mul_ln1345_547_reg_5348;

assign sext_ln691_544_fu_4330_p1 = $signed(add_ln691_542_reg_5748);

assign sext_ln691_545_fu_2738_p1 = $signed(add_ln691_544_fu_2732_p2);

assign sext_ln691_546_fu_2748_p1 = $signed(add_ln691_545_fu_2742_p2);

assign sext_ln691_547_fu_4338_p1 = $signed(add_ln691_546_reg_5753);

assign sext_ln691_548_fu_2758_p1 = mul_ln1345_548_reg_5358;

assign sext_ln691_549_fu_2783_p1 = mul_ln1345_553_reg_5408;

assign sext_ln691_550_fu_4347_p1 = $signed(add_ln691_548_reg_5763);

assign sext_ln691_551_fu_2798_p1 = $signed(add_ln691_550_fu_2792_p2);

assign sext_ln691_552_fu_2808_p1 = $signed(add_ln691_551_fu_2802_p2);

assign sext_ln691_553_fu_4355_p1 = $signed(add_ln691_552_reg_5768);

assign sext_ln691_554_fu_2818_p1 = mul_ln1345_554_reg_5418;

assign sext_ln691_555_fu_2843_p1 = mul_ln1345_559_reg_5468;

assign sext_ln691_556_fu_4364_p1 = $signed(add_ln691_554_reg_5778);

assign sext_ln691_557_fu_2858_p1 = $signed(add_ln691_556_fu_2852_p2);

assign sext_ln691_558_fu_2868_p1 = $signed(add_ln691_557_fu_2862_p2);

assign sext_ln691_559_fu_4372_p1 = $signed(add_ln691_558_reg_5783);

assign sext_ln691_560_fu_2878_p1 = mul_ln1345_560_reg_5478;

assign sext_ln691_561_fu_2903_p1 = mul_ln1345_565_reg_5528;

assign sext_ln691_562_fu_4381_p1 = $signed(add_ln691_560_reg_5793);

assign sext_ln691_563_fu_2918_p1 = $signed(add_ln691_562_fu_2912_p2);

assign sext_ln691_564_fu_2928_p1 = $signed(add_ln691_563_fu_2922_p2);

assign sext_ln691_565_fu_4389_p1 = $signed(add_ln691_564_reg_5798);

assign sext_ln691_566_fu_2938_p1 = mul_ln1345_566_reg_5538;

assign sext_ln691_567_fu_2963_p1 = mul_ln1345_571_reg_5588;

assign sext_ln691_568_fu_4398_p1 = $signed(add_ln691_566_reg_5808);

assign sext_ln691_569_fu_2978_p1 = $signed(add_ln691_568_fu_2972_p2);

assign sext_ln691_570_fu_2988_p1 = $signed(add_ln691_569_fu_2982_p2);

assign sext_ln691_571_fu_4406_p1 = $signed(add_ln691_570_reg_5813);

assign sext_ln691_572_fu_2998_p1 = mul_ln1345_572_reg_5598;

assign sext_ln691_573_fu_3023_p1 = mul_ln1345_577_reg_5648;

assign sext_ln691_574_fu_4415_p1 = $signed(add_ln691_572_reg_5823);

assign sext_ln691_575_fu_3038_p1 = $signed(add_ln691_574_fu_3032_p2);

assign sext_ln691_576_fu_3048_p1 = $signed(add_ln691_575_fu_3042_p2);

assign sext_ln691_577_fu_4423_p1 = $signed(add_ln691_576_reg_5828);

assign sext_ln691_578_fu_3066_p1 = mul_ln1345_578_fu_3061_p2;

assign sext_ln691_579_fu_3136_p1 = mul_ln1345_583_fu_3131_p2;

assign sext_ln691_580_fu_4432_p1 = $signed(add_ln691_578_reg_5838);

assign sext_ln691_581_fu_3152_p1 = $signed(add_ln691_580_fu_3146_p2);

assign sext_ln691_582_fu_3162_p1 = $signed(add_ln691_581_fu_3156_p2);

assign sext_ln691_583_fu_4440_p1 = $signed(add_ln691_582_reg_5843);

assign sext_ln691_584_fu_3177_p1 = mul_ln1345_584_fu_3172_p2;

assign sext_ln691_585_fu_3232_p1 = mul_ln1345_589_fu_3227_p2;

assign sext_ln691_586_fu_4449_p1 = $signed(add_ln691_584_reg_5853);

assign sext_ln691_587_fu_3248_p1 = $signed(add_ln691_586_fu_3242_p2);

assign sext_ln691_588_fu_3258_p1 = $signed(add_ln691_587_fu_3252_p2);

assign sext_ln691_589_fu_4457_p1 = $signed(add_ln691_588_reg_5858);

assign sext_ln691_590_fu_3273_p1 = mul_ln1345_590_fu_3268_p2;

assign sext_ln691_591_fu_3328_p1 = mul_ln1345_595_fu_3323_p2;

assign sext_ln691_592_fu_4466_p1 = $signed(add_ln691_590_reg_5868);

assign sext_ln691_593_fu_3344_p1 = $signed(add_ln691_592_fu_3338_p2);

assign sext_ln691_594_fu_3354_p1 = $signed(add_ln691_593_fu_3348_p2);

assign sext_ln691_595_fu_4474_p1 = $signed(add_ln691_594_reg_5873);

assign sext_ln691_596_fu_3369_p1 = mul_ln1345_596_fu_3364_p2;

assign sext_ln691_597_fu_3424_p1 = mul_ln1345_601_fu_3419_p2;

assign sext_ln691_598_fu_4483_p1 = $signed(add_ln691_596_reg_5883);

assign sext_ln691_599_fu_3440_p1 = $signed(add_ln691_598_fu_3434_p2);

assign sext_ln691_600_fu_3450_p1 = $signed(add_ln691_599_fu_3444_p2);

assign sext_ln691_601_fu_4491_p1 = $signed(add_ln691_600_reg_5888);

assign sext_ln691_602_fu_3465_p1 = mul_ln1345_602_fu_3460_p2;

assign sext_ln691_603_fu_3520_p1 = mul_ln1345_607_fu_3515_p2;

assign sext_ln691_604_fu_4500_p1 = $signed(add_ln691_602_reg_5898);

assign sext_ln691_605_fu_3536_p1 = $signed(add_ln691_604_fu_3530_p2);

assign sext_ln691_606_fu_3546_p1 = $signed(add_ln691_605_fu_3540_p2);

assign sext_ln691_607_fu_4508_p1 = $signed(add_ln691_606_reg_5903);

assign sext_ln691_608_fu_3561_p1 = mul_ln1345_608_fu_3556_p2;

assign sext_ln691_609_fu_3616_p1 = mul_ln1345_613_fu_3611_p2;

assign sext_ln691_610_fu_4517_p1 = $signed(add_ln691_608_reg_5913);

assign sext_ln691_611_fu_3632_p1 = $signed(add_ln691_610_fu_3626_p2);

assign sext_ln691_612_fu_3642_p1 = $signed(add_ln691_611_fu_3636_p2);

assign sext_ln691_613_fu_4525_p1 = $signed(add_ln691_612_reg_5918);

assign sext_ln691_614_fu_3657_p1 = mul_ln1345_614_fu_3652_p2;

assign sext_ln691_615_fu_3712_p1 = mul_ln1345_619_fu_3707_p2;

assign sext_ln691_616_fu_4534_p1 = $signed(add_ln691_614_reg_5928);

assign sext_ln691_617_fu_3728_p1 = $signed(add_ln691_616_fu_3722_p2);

assign sext_ln691_618_fu_3738_p1 = $signed(add_ln691_617_fu_3732_p2);

assign sext_ln691_619_fu_4542_p1 = $signed(add_ln691_618_reg_5933);

assign sext_ln691_620_fu_3753_p1 = mul_ln1345_620_fu_3748_p2;

assign sext_ln691_621_fu_3808_p1 = mul_ln1345_625_fu_3803_p2;

assign sext_ln691_622_fu_4551_p1 = $signed(add_ln691_620_reg_5943);

assign sext_ln691_623_fu_3824_p1 = $signed(add_ln691_622_fu_3818_p2);

assign sext_ln691_624_fu_3834_p1 = $signed(add_ln691_623_fu_3828_p2);

assign sext_ln691_625_fu_4559_p1 = $signed(add_ln691_624_reg_5948);

assign sext_ln691_626_fu_3849_p1 = mul_ln1345_626_fu_3844_p2;

assign sext_ln691_627_fu_3904_p1 = mul_ln1345_631_fu_3899_p2;

assign sext_ln691_628_fu_4568_p1 = $signed(add_ln691_626_reg_5958);

assign sext_ln691_629_fu_3920_p1 = $signed(add_ln691_628_fu_3914_p2);

assign sext_ln691_630_fu_3930_p1 = $signed(add_ln691_629_fu_3924_p2);

assign sext_ln691_631_fu_4576_p1 = $signed(add_ln691_630_reg_5963);

assign sext_ln691_632_fu_3945_p1 = mul_ln1345_632_fu_3940_p2;

assign sext_ln691_633_fu_4000_p1 = mul_ln1345_637_fu_3995_p2;

assign sext_ln691_634_fu_4585_p1 = $signed(add_ln691_632_reg_5973);

assign sext_ln691_635_fu_4016_p1 = $signed(add_ln691_634_fu_4010_p2);

assign sext_ln691_636_fu_4026_p1 = $signed(add_ln691_635_fu_4020_p2);

assign sext_ln691_637_fu_4593_p1 = $signed(add_ln691_636_reg_5978);

assign sext_ln691_638_fu_4041_p1 = mul_ln1345_638_fu_4036_p2;

assign sext_ln691_639_fu_4096_p1 = mul_ln1345_643_fu_4091_p2;

assign sext_ln691_640_fu_4602_p1 = $signed(add_ln691_638_reg_5988);

assign sext_ln691_641_fu_4112_p1 = $signed(add_ln691_640_fu_4106_p2);

assign sext_ln691_642_fu_4122_p1 = $signed(add_ln691_641_fu_4116_p2);

assign sext_ln691_643_fu_4610_p1 = $signed(add_ln691_642_reg_5993);

assign sext_ln691_644_fu_4137_p1 = mul_ln1345_644_fu_4132_p2;

assign sext_ln691_645_fu_4192_p1 = mul_ln1345_649_fu_4187_p2;

assign sext_ln691_646_fu_4619_p1 = $signed(add_ln691_644_reg_6003);

assign sext_ln691_647_fu_4208_p1 = $signed(add_ln691_646_fu_4202_p2);

assign sext_ln691_648_fu_4218_p1 = $signed(add_ln691_647_fu_4212_p2);

assign sext_ln691_649_fu_4627_p1 = $signed(add_ln691_648_reg_6008);

assign sext_ln691_fu_2344_p1 = mul_ln1345_reg_4938;

assign start_out = real_start;

assign tmp_403_fu_898_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[74:72]}};

assign tmp_404_fu_922_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[110:108]}};

assign tmp_405_fu_946_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[146:144]}};

assign tmp_406_fu_970_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[182:180]}};

assign tmp_407_fu_994_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[5:3]}};

assign tmp_409_fu_1014_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[41:39]}};

assign tmp_410_fu_1034_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[77:75]}};

assign tmp_411_fu_1054_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[113:111]}};

assign tmp_412_fu_1074_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[149:147]}};

assign tmp_413_fu_1094_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[185:183]}};

assign tmp_414_fu_1114_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[8:6]}};

assign tmp_416_fu_1134_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[44:42]}};

assign tmp_417_fu_1154_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[80:78]}};

assign tmp_418_fu_1174_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[116:114]}};

assign tmp_419_fu_1194_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[152:150]}};

assign tmp_420_fu_1214_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[188:186]}};

assign tmp_421_fu_1234_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[11:9]}};

assign tmp_423_fu_1254_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[47:45]}};

assign tmp_424_fu_1274_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[83:81]}};

assign tmp_425_fu_1294_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[119:117]}};

assign tmp_426_fu_1314_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[155:153]}};

assign tmp_427_fu_1334_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[191:189]}};

assign tmp_428_fu_1354_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[14:12]}};

assign tmp_430_fu_1374_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[50:48]}};

assign tmp_431_fu_1394_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[86:84]}};

assign tmp_432_fu_1414_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[122:120]}};

assign tmp_433_fu_1434_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[158:156]}};

assign tmp_434_fu_1454_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[194:192]}};

assign tmp_435_fu_1474_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[17:15]}};

assign tmp_437_fu_1494_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[53:51]}};

assign tmp_438_fu_1514_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[89:87]}};

assign tmp_439_fu_1534_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[125:123]}};

assign tmp_440_fu_1554_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[161:159]}};

assign tmp_441_fu_1574_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[197:195]}};

assign tmp_442_fu_1594_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[20:18]}};

assign tmp_444_fu_1614_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[56:54]}};

assign tmp_445_fu_1634_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[92:90]}};

assign tmp_446_fu_1654_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[128:126]}};

assign tmp_447_fu_1674_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[164:162]}};

assign tmp_448_fu_1694_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[200:198]}};

assign tmp_449_fu_1714_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[23:21]}};

assign tmp_451_fu_1734_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[59:57]}};

assign tmp_452_fu_1754_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[95:93]}};

assign tmp_453_fu_1774_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[131:129]}};

assign tmp_454_fu_1794_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[167:165]}};

assign tmp_455_fu_1814_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[203:201]}};

assign tmp_456_fu_1834_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[26:24]}};

assign tmp_458_fu_1854_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[62:60]}};

assign tmp_459_fu_1874_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[98:96]}};

assign tmp_460_fu_1894_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[134:132]}};

assign tmp_461_fu_1914_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[170:168]}};

assign tmp_462_fu_1934_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[206:204]}};

assign tmp_463_fu_1954_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[29:27]}};

assign tmp_465_fu_1974_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[65:63]}};

assign tmp_466_fu_1994_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[101:99]}};

assign tmp_467_fu_2014_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[137:135]}};

assign tmp_468_fu_2034_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[173:171]}};

assign tmp_469_fu_2054_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[209:207]}};

assign tmp_470_fu_2074_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[32:30]}};

assign tmp_472_fu_2094_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[68:66]}};

assign tmp_473_fu_2114_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[104:102]}};

assign tmp_474_fu_2134_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[140:138]}};

assign tmp_475_fu_2154_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[176:174]}};

assign tmp_476_fu_2174_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[212:210]}};

assign tmp_477_fu_2194_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[35:33]}};

assign tmp_479_fu_2214_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[71:69]}};

assign tmp_480_fu_2234_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[107:105]}};

assign tmp_481_fu_2254_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[143:141]}};

assign tmp_482_fu_2274_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[179:177]}};

assign tmp_483_fu_2294_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[215:213]}};

assign tmp_496_fu_4636_p25 = {{{{{{{{{{{{{{{{{{{{{{{{add_ln691_649_fu_4630_p2}, {add_ln691_643_fu_4613_p2}}, {add_ln691_637_fu_4596_p2}}, {add_ln691_631_fu_4579_p2}}, {add_ln691_625_fu_4562_p2}}, {add_ln691_619_fu_4545_p2}}, {add_ln691_613_fu_4528_p2}}, {add_ln691_607_fu_4511_p2}}, {add_ln691_601_fu_4494_p2}}, {add_ln691_595_fu_4477_p2}}, {add_ln691_589_fu_4460_p2}}, {add_ln691_583_fu_4443_p2}}, {add_ln691_577_fu_4426_p2}}, {add_ln691_571_fu_4409_p2}}, {add_ln691_565_fu_4392_p2}}, {add_ln691_559_fu_4375_p2}}, {add_ln691_553_fu_4358_p2}}, {add_ln691_547_fu_4341_p2}}, {add_ln691_541_fu_4324_p2}}, {add_ln691_535_fu_4307_p2}}, {add_ln691_529_fu_4290_p2}}, {add_ln691_523_fu_4273_p2}}, {add_ln691_517_fu_4256_p2}}, {add_ln691_511_fu_4239_p2}};

assign tmp_497_fu_4693_p48 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln691_649_fu_4630_p2}, {5'd0}}, {add_ln691_643_fu_4613_p2}}, {5'd0}}, {add_ln691_637_fu_4596_p2}}, {5'd0}}, {add_ln691_631_fu_4579_p2}}, {5'd0}}, {add_ln691_625_fu_4562_p2}}, {5'd0}}, {add_ln691_619_fu_4545_p2}}, {5'd0}}, {add_ln691_613_fu_4528_p2}}, {5'd0}}, {add_ln691_607_fu_4511_p2}}, {5'd0}}, {add_ln691_601_fu_4494_p2}}, {5'd0}}, {add_ln691_595_fu_4477_p2}}, {5'd0}}, {add_ln691_589_fu_4460_p2}}, {5'd0}}, {add_ln691_583_fu_4443_p2}}, {5'd0}}, {add_ln691_577_fu_4426_p2}}, {5'd0}}, {add_ln691_571_fu_4409_p2}}, {5'd0}}, {add_ln691_565_fu_4392_p2}}, {5'd0}}, {add_ln691_559_fu_4375_p2}}, {5'd0}}, {add_ln691_553_fu_4358_p2}}, {5'd0}}, {add_ln691_547_fu_4341_p2}}, {5'd0}}, {add_ln691_541_fu_4324_p2}}, {5'd0}}, {add_ln691_535_fu_4307_p2}}, {5'd0}}, {add_ln691_529_fu_4290_p2}}, {5'd0}}, {add_ln691_523_fu_4273_p2}}, {5'd0}}, {add_ln691_517_fu_4256_p2}}, {5'd0}}, {add_ln691_511_fu_4239_p2}};

assign tmp_cast_fu_685_p3 = {{select_ln121_9_fu_678_p3}, {5'd0}};

assign tmp_s_fu_874_p4 = {{attn_inst_matmul_gen_v_weight_arr_V_q0[38:36]}};

assign trunc_ln145_125_fu_756_p4 = {{cache_window_sm_dout[18:16]}};

assign trunc_ln145_126_fu_766_p4 = {{cache_window_sm_dout[26:24]}};

assign trunc_ln145_127_fu_776_p4 = {{cache_window_sm_dout[34:32]}};

assign trunc_ln145_128_fu_786_p4 = {{cache_window_sm_dout[42:40]}};

assign trunc_ln145_fu_742_p1 = cache_window_sm_dout[2:0];

assign trunc_ln145_s_fu_746_p4 = {{cache_window_sm_dout[10:8]}};

assign trunc_ln215_5_fu_667_p1 = cot_reg_571[3:0];

assign trunc_ln215_6_fu_856_p1 = attn_inst_matmul_gen_v_weight_arr_V_q0[2:0];

assign trunc_ln215_fu_663_p1 = add_ln121_fu_658_p2[3:0];

assign trunc_ln691_fu_2347_p1 = select_ln126_fu_2337_p3[10:0];

assign vec_o_data_M_elems_V_fu_2329_p3 = {{select_ln121_10_fu_2322_p3}, {select_ln121_10_fu_2322_p3}};

assign xor_ln120_fu_614_p2 = (icmp_ln121_fu_600_p2 ^ 1'd1);

assign zext_ln121_3_fu_738_p1 = add_ln121_reg_4849;

assign zext_ln121_fu_729_p1 = cot_reg_571;

assign zext_ln215_3_fu_734_p1 = add_ln215_reg_4859;

assign zext_ln215_fu_699_p1 = select_ln121_reg_4831;

endmodule //ATTN0_matmul_step2_mac_3
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "distributed" *) module ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 132;
parameter AWIDTH = 4;
parameter MEM_SIZE = 16;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd132;
parameter AddressRange = 32'd16;
parameter AddressWidth = 32'd4;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V_rom ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_bias_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
(* rom_style = "block" *) module ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V_rom (
addr0, ce0, q0, clk);

parameter DWIDTH = 216;
parameter AWIDTH = 9;
parameter MEM_SIZE = 512;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input clk;

(* ram_style = "block" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];

initial begin
    $readmemh("/mnt/f/master_MLsys/USTC_spring/EDA/Project/HG-PIPE/SPINAL/src/main/verilog/ATTN0/ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V_rom.dat", ram);
end



always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



endmodule

`timescale 1 ns / 1 ps
module ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V(
    reset,
    clk,
    address0,
    ce0,
    q0);

parameter DataWidth = 32'd216;
parameter AddressRange = 32'd512;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;



ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V_rom ATTN0_matmul_step2_mac_3_attn_inst_matmul_gen_v_weight_arr_V_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_mul_32ns_25s_38_7_1_Multiplier_0(clk, ce, a, b, p);
input clk;
input ce;
input[32 - 1 : 0] a; 
input[25 - 1 : 0] b; 
output[38 - 1 : 0] p;

reg [32 - 1 : 0] a_reg0;
reg signed [25 - 1 : 0] b_reg0;
wire signed [38 - 1 : 0] tmp_product;
reg signed [38 - 1 : 0] buff0;
reg signed [38 - 1 : 0] buff1;
reg signed [38 - 1 : 0] buff2;
reg signed [38 - 1 : 0] buff3;
reg signed [38 - 1 : 0] buff4;

assign p = buff4;
assign tmp_product = $signed({1'b0, a_reg0}) * b_reg0;
always @ (posedge clk) begin
    if (ce) begin
        a_reg0 <= a;
        b_reg0 <= b;
        buff0 <= tmp_product;
        buff1 <= buff0;
        buff2 <= buff1;
        buff3 <= buff2;
        buff4 <= buff3;
    end
end
endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_32ns_25s_38_7_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_32ns_25s_38_7_1_Multiplier_0 ATTN0_mul_32ns_25s_38_7_1_Multiplier_0_U(
    .clk( clk ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

(* use_dsp = "no" *) module ATTN0_mul_3ns_3s_6_1_1_Mul_LUT_2(a, b, p);
input[3 - 1 : 0] a; 
input[3 - 1 : 0] b; 
output[6 - 1 : 0] p;

assign p = $signed({1'b0, a}) * $signed(b);
endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_3ns_3s_6_1_1(
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_3ns_3s_6_1_1_Mul_LUT_2 ATTN0_mul_3ns_3s_6_1_1_Mul_LUT_2_U(
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

(* use_dsp = "no" *) module ATTN0_mul_3s_3ns_6_1_1_Mul_LUT_1(a, b, p);
input[3 - 1 : 0] a; 
input[3 - 1 : 0] b; 
output[6 - 1 : 0] p;

assign p = $signed(a) * $signed({1'b0, b});
endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_3s_3ns_6_1_1(
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_3s_3ns_6_1_1_Mul_LUT_1 ATTN0_mul_3s_3ns_6_1_1_Mul_LUT_1_U(
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

(* use_dsp = "no" *) module ATTN0_mul_3s_3s_6_1_1_Mul_LUT_0(a, b, p);
input[3 - 1 : 0] a; 
input[3 - 1 : 0] b; 
output[6 - 1 : 0] p;

assign p = $signed(a) * $signed(b);
endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_3s_3s_6_1_1(
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_3s_3s_6_1_1_Mul_LUT_0 ATTN0_mul_3s_3s_6_1_1_Mul_LUT_0_U(
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule


`timescale 1 ns / 1 ps

  module ATTN0_mul_mul_13s_12ns_25_4_1_DSP48_1(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input signed [13 - 1 : 0] a;
input [12 - 1 : 0] b;
output signed [25 - 1 : 0] p;

reg signed [25 - 1 : 0] p_reg; 

reg signed [13 - 1 : 0] a_reg; 
reg [12 - 1 : 0] b_reg; 

reg signed [25 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= $signed (a_reg) * $signed ({1'b0, b_reg});
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_mul_13s_12ns_25_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_mul_13s_12ns_25_4_1_DSP48_1 ATTN0_mul_mul_13s_12ns_25_4_1_DSP48_1_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule


`timescale 1 ns / 1 ps

  module ATTN0_mul_mul_13s_13s_26_4_1_DSP48_2(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input signed [13 - 1 : 0] a;
input signed [13 - 1 : 0] b;
output signed [26 - 1 : 0] p;

reg signed [26 - 1 : 0] p_reg; 

reg signed [13 - 1 : 0] a_reg; 
reg signed [13 - 1 : 0] b_reg; 

reg signed [26 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= $signed (a_reg) * $signed (b_reg);
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_mul_13s_13s_26_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_mul_13s_13s_26_4_1_DSP48_2 ATTN0_mul_mul_13s_13s_26_4_1_DSP48_2_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule


`timescale 1 ns / 1 ps

  module ATTN0_mul_mul_16ns_8ns_23_4_1_DSP48_3(clk, rst, ce, a, b, p);
input clk;
input rst;
input ce;
input [16 - 1 : 0] a;
input [8 - 1 : 0] b;
output [23 - 1 : 0] p;

reg [23 - 1 : 0] p_reg; 

reg [16 - 1 : 0] a_reg; 
reg [8 - 1 : 0] b_reg; 

reg [23 - 1 : 0] p_reg_tmp; 

always @ (posedge clk) begin
    if (ce) begin
        a_reg <= a;
        b_reg <= b;
        p_reg_tmp <= $unsigned (a_reg) * $unsigned (b_reg);
        p_reg <= p_reg_tmp;
    end
end

assign p = p_reg;

endmodule
`timescale 1 ns / 1 ps
module ATTN0_mul_mul_16ns_8ns_23_4_1(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



ATTN0_mul_mul_16ns_8ns_23_4_1_DSP48_3 ATTN0_mul_mul_16ns_8ns_23_4_1_DSP48_3_U(
    .clk( clk ),
    .rst( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder144 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1422;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1623;
reg   [0:0] and_ln99_reg_1623_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten87_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten49_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_6_fu_432_p2;
reg   [3:0] tt_6_reg_1408;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_6_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1426;
reg   [0:0] icmp_ln73_reg_1426_pp0_iter1_reg;
wire   [8:0] select_ln73_12_fu_468_p3;
wire   [2:0] select_ln72_6_fu_482_p3;
reg   [2:0] select_ln72_6_reg_1439;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1445;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1450;
reg   [2:0] tmp_reg_1455;
reg   [2:0] tmp_reg_1455_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1460;
wire   [6:0] select_ln73_11_fu_545_p3;
reg   [6:0] select_ln73_11_reg_1465;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_166_fu_555_p2;
reg   [3:0] empty_166_reg_1471;
wire   [9:0] add_ln85_6_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_168_fu_604_p2;
reg   [3:0] empty_168_reg_1481;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1487;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1491;
reg   [0:0] icmp_ln86_reg_1491_pp1_iter1_reg;
wire   [3:0] p_mid165_fu_644_p2;
reg   [3:0] p_mid165_reg_1501;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1507;
reg   [0:0] xor_ln85_reg_1507_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1513;
wire   [0:0] and_ln85_12_fu_662_p2;
reg   [0:0] and_ln85_12_reg_1518;
reg   [0:0] and_ln85_12_reg_1518_pp1_iter1_reg;
wire   [1:0] select_ln85_23_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1531;
wire   [5:0] add_ln87_6_fu_682_p2;
reg   [5:0] add_ln87_6_reg_1537;
wire   [9:0] select_ln86_24_fu_694_p3;
wire   [3:0] empty_169_fu_702_p1;
reg   [3:0] empty_169_reg_1547;
wire   [0:0] cmp45123_fu_727_p2;
reg   [0:0] cmp45123_reg_1552;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1557;
wire   [0:0] or_ln86_6_fu_762_p2;
reg   [0:0] or_ln86_6_reg_1562;
wire   [0:0] and_ln86_6_fu_767_p2;
reg   [0:0] and_ln86_6_reg_1567;
wire   [4:0] select_ln86_22_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1578;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1585;
wire   [3:0] select_ln86_23_fu_820_p3;
reg   [3:0] select_ln86_23_reg_1590;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1595;
wire   [2:0] select_ln87_23_fu_833_p3;
reg   [2:0] select_ln87_23_reg_1600;
reg   [2:0] select_ln87_23_reg_1600_pp1_iter2_reg;
wire   [1:0] trunc_ln93_fu_841_p1;
reg   [1:0] trunc_ln93_reg_1607;
reg   [1:0] trunc_ln93_reg_1607_pp1_iter2_reg;
wire   [5:0] select_ln87_24_fu_845_p3;
wire   [0:0] and_ln99_fu_930_p2;
wire   [2:0] add_ln88_fu_936_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1632;
reg    ap_enable_reg_pp1_iter3;
wire   [6:0] sub_ln93_fu_959_p2;
reg   [6:0] sub_ln93_reg_1637;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_176_cast_fu_920_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_6_fu_998_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_6_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_16_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_167_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_172_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_6_fu_628_p1;
wire   [9:0] add_ln86_6_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_11_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_6_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_21_fu_722_p3;
wire   [3:0] zext_ln87_6_fu_804_p1;
wire   [3:0] empty_170_fu_710_p2;
wire   [3:0] select_ln85_24_fu_814_p3;
wire   [5:0] tmp_169_fu_851_p3;
wire   [3:0] empty_173_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_22_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_21_fu_880_p3;
wire   [5:0] zext_ln88_fu_903_p1;
wire   [3:0] select_ln87_21_fu_892_p3;
wire   [5:0] empty_174_fu_906_p2;
wire   [9:0] tmp_170_fu_912_p3;
wire   [0:0] select_ln87_22_fu_897_p3;
wire   [0:0] icmp_ln99_fu_925_p2;
wire   [4:0] or_ln_fu_941_p3;
wire   [6:0] shl_ln_fu_951_p4;
wire   [6:0] zext_ln93_fu_947_p1;
wire   [83:0] zext_ln93_5_fu_968_p1;
wire   [83:0] shl_ln93_fu_971_p2;
wire   [83:0] xor_ln93_fu_977_p2;
wire   [83:0] zext_ln93_6_fu_989_p1;
wire   [83:0] and_ln93_fu_983_p2;
wire   [83:0] shl_ln93_3_fu_992_p2;
wire   [2:0] tmp_167_fu_1268_p4;
wire   [2:0] tmp_166_fu_1258_p4;
wire   [2:0] tmp_165_fu_1248_p4;
wire   [2:0] tmp_164_fu_1238_p4;
wire   [2:0] tmp_163_fu_1228_p4;
wire   [2:0] tmp_162_fu_1218_p4;
wire   [2:0] tmp_161_fu_1208_p4;
wire   [2:0] tmp_160_fu_1198_p4;
wire   [2:0] tmp_159_fu_1188_p4;
wire   [2:0] tmp_158_fu_1178_p4;
wire   [2:0] tmp_157_fu_1168_p4;
wire   [2:0] tmp_156_fu_1158_p4;
wire   [2:0] tmp_155_fu_1148_p4;
wire   [2:0] tmp_154_fu_1138_p4;
wire   [2:0] tmp_153_fu_1128_p4;
wire   [2:0] tmp_152_fu_1118_p4;
wire   [2:0] tmp_151_fu_1108_p4;
wire   [2:0] tmp_150_fu_1098_p4;
wire   [2:0] tmp_149_fu_1088_p4;
wire   [2:0] tmp_148_fu_1078_p4;
wire   [2:0] tmp_147_fu_1068_p4;
wire   [2:0] tmp_146_fu_1058_p4;
wire   [2:0] tmp_145_fu_1048_p4;
wire   [2:0] tmp_144_fu_1038_p4;
wire   [2:0] tmp_143_fu_1028_p4;
wire   [2:0] tmp_142_fu_1018_p4;
wire   [2:0] tmp_141_fu_1008_p4;
wire   [2:0] trunc_ln174_fu_1004_p1;
wire   [218:0] tmp_168_fu_1278_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1455_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_11_reg_1465;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        cot_reg_399 <= select_ln86_22_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_6_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_24_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten49_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten49_reg_377 <= select_ln86_24_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten87_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten87_reg_355 <= add_ln85_6_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_12_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1460;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_23_reg_1600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_6_reg_1439;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_23_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_6_reg_1408;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1460 <= add_ln74_fu_519_p2;
        select_ln72_6_reg_1439 <= select_ln72_6_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        add_ln86_reg_1557 <= add_ln86_fu_744_p2;
        and_ln86_6_reg_1567 <= and_ln86_6_fu_767_p2;
        cmp45123_reg_1552 <= cmp45123_fu_727_p2;
        cmp45_mid1_reg_1595 <= cmp45_mid1_fu_827_p2;
        or_ln86_6_reg_1562 <= or_ln86_6_fu_762_p2;
        p_mid122_reg_1585 <= p_mid122_fu_808_p2;
        select_ln86_23_reg_1590 <= select_ln86_23_fu_820_p3;
        select_ln87_reg_1578 <= select_ln87_fu_796_p3;
        trunc_ln93_reg_1607 <= trunc_ln93_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_6_reg_1537 <= add_ln87_6_fu_682_p2;
        and_ln85_12_reg_1518 <= and_ln85_12_fu_662_p2;
        icmp_ln86_reg_1491 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1513 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1531 <= or_ln86_fu_676_p2;
        p_mid165_reg_1501 <= p_mid165_fu_644_p2;
        xor_ln85_reg_1507 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1445 <= and_ln72_fu_500_p2;
        select_ln73_reg_1450 <= select_ln73_fu_511_p3;
        tmp_reg_1455 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_12_reg_1518_pp1_iter1_reg <= and_ln85_12_reg_1518;
        empty_168_reg_1481 <= empty_168_fu_604_p2;
        icmp_ln85_reg_1487 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1487_pp1_iter1_reg <= icmp_ln85_reg_1487;
        icmp_ln86_reg_1491_pp1_iter1_reg <= icmp_ln86_reg_1491;
        xor_ln85_reg_1507_pp1_iter1_reg <= xor_ln85_reg_1507;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1623 <= and_ln99_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1623_pp1_iter3_reg <= and_ln99_reg_1623;
        icmp_ln85_reg_1487_pp1_iter2_reg <= icmp_ln85_reg_1487_pp1_iter1_reg;
        icmp_ln85_reg_1487_pp1_iter3_reg <= icmp_ln85_reg_1487_pp1_iter2_reg;
        select_ln87_23_reg_1600_pp1_iter2_reg <= select_ln87_23_reg_1600;
        trunc_ln93_reg_1607_pp1_iter2_reg <= trunc_ln93_reg_1607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1632 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        empty_166_reg_1471 <= empty_166_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_12_reg_1518) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1491 == 1'd0))) begin
        empty_169_reg_1547 <= empty_169_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1422 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1422_pp0_iter1_reg <= icmp_ln72_reg_1422;
        icmp_ln73_reg_1426_pp0_iter1_reg <= icmp_ln73_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1422_pp0_iter2_reg <= icmp_ln72_reg_1422_pp0_iter1_reg;
        tmp_reg_1455_pp0_iter2_reg <= tmp_reg_1455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1426 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        select_ln73_11_reg_1465 <= select_ln73_11_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        select_ln87_23_reg_1600 <= select_ln87_23_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        sub_ln93_reg_1637 <= sub_ln93_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_6_reg_1408 <= tt_6_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_6_fu_998_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_11_reg_1465;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_936_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_24_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1460;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_23_reg_1600;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_6_reg_1439;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_6_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_6_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_16_cast_fu_561_p1);

assign add_ln85_6_fu_582_p2 = (indvar_flatten87_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_6_fu_688_p2 = (indvar_flatten49_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_6_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_936_p2 = (select_ln87_reg_1578 + 3'd1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_11_fu_739_p2 = (xor_ln85_reg_1507 & icmp_ln88_fu_733_p2);

assign and_ln85_12_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1507_pp1_iter1_reg & cmp45123_reg_1552);

assign and_ln86_6_fu_767_p2 = (or_ln86_6_fu_762_p2 & and_ln85_11_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_6_reg_1562 & and_ln85_fu_865_p2);

assign and_ln93_fu_983_p2 = (xor_ln93_fu_977_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_930_p2 = (select_ln87_22_fu_897_p3 & icmp_ln99_fu_925_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1422 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_176_cast_fu_920_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45123_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_166_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_167_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_168_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_169_fu_702_p1 = cot_reg_399[3:0];

assign empty_170_fu_710_p2 = (empty_168_reg_1481 + zext_ln87_fu_706_p1);

assign empty_172_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_173_fu_869_p1 = add_ln86_reg_1557[3:0];

assign empty_174_fu_906_p2 = (select_ln86_21_fu_880_p3 + zext_ln88_fu_903_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten87_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten49_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_925_p2 = ((select_ln87_reg_1578 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_168_fu_1278_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1426 | and_ln72_fu_500_p2);

assign or_ln86_6_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1491);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_12_fu_662_p2);

assign or_ln87_6_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1491);

assign or_ln87_fu_786_p2 = (and_ln86_6_fu_767_p2 | and_ln85_12_reg_1518);

assign or_ln_fu_941_p3 = {{select_ln87_23_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}};

assign p_mid122_fu_808_p2 = (select_ln85_21_fu_722_p3 + zext_ln87_6_fu_804_p1);

assign p_mid165_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_6_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_6_reg_1439}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_173_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_167_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_172_fu_632_p1}, {3'd0}};

assign select_ln72_6_fu_482_p3 = ((icmp_ln73_reg_1426[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1426_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_11_fu_545_p3 = ((and_ln72_reg_1445[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_12_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_6_fu_462_p2);

assign select_ln73_16_cast_fu_561_p1 = select_ln73_11_reg_1465;

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_21_fu_722_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_168_reg_1481);

assign select_ln85_22_fu_858_p3 = ((icmp_ln86_reg_1491_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_169_fu_851_p3);

assign select_ln85_23_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_24_fu_814_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_170_fu_710_p2);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_21_fu_880_p3 = ((and_ln85_12_reg_1518_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_22_fu_858_p3);

assign select_ln86_22_fu_773_p3 = ((and_ln85_12_reg_1518[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_23_fu_820_p3 = ((and_ln85_12_reg_1518[0:0] == 1'b1) ? select_ln85_21_fu_722_p3 : select_ln85_24_fu_814_p3);

assign select_ln86_24_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_6_fu_688_p2);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_21_fu_892_p3 = ((and_ln86_6_reg_1567[0:0] == 1'b1) ? p_mid122_reg_1585 : select_ln86_23_reg_1590);

assign select_ln87_22_fu_897_p3 = ((and_ln86_6_reg_1567[0:0] == 1'b1) ? cmp45_mid1_reg_1595 : and_ln86_fu_887_p2);

assign select_ln87_23_fu_833_p3 = ((and_ln86_6_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_24_fu_845_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 6'd1 : add_ln87_6_reg_1537);

assign select_ln87_fu_796_p3 = ((or_ln87_6_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln93_3_fu_992_p2 = zext_ln93_6_fu_989_p1 << zext_ln93_5_fu_968_p1;

assign shl_ln93_fu_971_p2 = 84'd7 << zext_ln93_5_fu_968_p1;

assign shl_ln_fu_951_p4 = {{{select_ln87_23_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}}, {2'd0}};

assign sub_ln93_fu_959_p2 = (shl_ln_fu_951_p4 - zext_ln93_fu_947_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1450;

assign tmp_141_fu_1008_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[5:3]}};

assign tmp_142_fu_1018_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[8:6]}};

assign tmp_143_fu_1028_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[11:9]}};

assign tmp_144_fu_1038_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[14:12]}};

assign tmp_145_fu_1048_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[17:15]}};

assign tmp_146_fu_1058_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[20:18]}};

assign tmp_147_fu_1068_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[23:21]}};

assign tmp_148_fu_1078_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[26:24]}};

assign tmp_149_fu_1088_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[29:27]}};

assign tmp_150_fu_1098_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[32:30]}};

assign tmp_151_fu_1108_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[35:33]}};

assign tmp_152_fu_1118_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[38:36]}};

assign tmp_153_fu_1128_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[41:39]}};

assign tmp_154_fu_1138_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[44:42]}};

assign tmp_155_fu_1148_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[47:45]}};

assign tmp_156_fu_1158_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[50:48]}};

assign tmp_157_fu_1168_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[53:51]}};

assign tmp_158_fu_1178_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[56:54]}};

assign tmp_159_fu_1188_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[59:57]}};

assign tmp_160_fu_1198_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[62:60]}};

assign tmp_161_fu_1208_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[65:63]}};

assign tmp_162_fu_1218_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[68:66]}};

assign tmp_163_fu_1228_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[71:69]}};

assign tmp_164_fu_1238_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[74:72]}};

assign tmp_165_fu_1248_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[77:75]}};

assign tmp_166_fu_1258_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[80:78]}};

assign tmp_167_fu_1268_p4 = {{vec_o_data_M_elems_V_6_fu_998_p2[83:81]}};

assign tmp_168_fu_1278_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_167_fu_1268_p4}, {5'd0}}, {tmp_166_fu_1258_p4}}, {5'd0}}, {tmp_165_fu_1248_p4}}, {5'd0}}, {tmp_164_fu_1238_p4}}, {5'd0}}, {tmp_163_fu_1228_p4}}, {5'd0}}, {tmp_162_fu_1218_p4}}, {5'd0}}, {tmp_161_fu_1208_p4}}, {5'd0}}, {tmp_160_fu_1198_p4}}, {5'd0}}, {tmp_159_fu_1188_p4}}, {5'd0}}, {tmp_158_fu_1178_p4}}, {5'd0}}, {tmp_157_fu_1168_p4}}, {5'd0}}, {tmp_156_fu_1158_p4}}, {5'd0}}, {tmp_155_fu_1148_p4}}, {5'd0}}, {tmp_154_fu_1138_p4}}, {5'd0}}, {tmp_153_fu_1128_p4}}, {5'd0}}, {tmp_152_fu_1118_p4}}, {5'd0}}, {tmp_151_fu_1108_p4}}, {5'd0}}, {tmp_150_fu_1098_p4}}, {5'd0}}, {tmp_149_fu_1088_p4}}, {5'd0}}, {tmp_148_fu_1078_p4}}, {5'd0}}, {tmp_147_fu_1068_p4}}, {5'd0}}, {tmp_146_fu_1058_p4}}, {5'd0}}, {tmp_145_fu_1048_p4}}, {5'd0}}, {tmp_144_fu_1038_p4}}, {5'd0}}, {tmp_143_fu_1028_p4}}, {5'd0}}, {tmp_142_fu_1018_p4}}, {5'd0}}, {tmp_141_fu_1008_p4}}, {5'd0}}, {trunc_ln174_fu_1004_p1}};

assign tmp_169_fu_851_p3 = {{empty_169_reg_1547}, {2'd0}};

assign tmp_170_fu_912_p3 = {{select_ln87_21_fu_892_p3}, {empty_174_fu_906_p2}};

assign tmp_176_cast_fu_920_p1 = tmp_170_fu_912_p3;

assign tmp_s_fu_564_p3 = {{empty_166_reg_1471}, {6'd0}};

assign trunc_ln174_fu_1004_p1 = vec_o_data_M_elems_V_6_fu_998_p2[2:0];

assign trunc_ln93_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_6_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_6_fu_998_p2 = (shl_ln93_3_fu_992_p2 | and_ln93_fu_983_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1426 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1513 ^ 1'd1);

assign xor_ln93_fu_977_p2 = (shl_ln93_fu_971_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_6_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_6_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_903_p1 = select_ln87_reg_1578;

assign zext_ln93_5_fu_968_p1 = sub_ln93_reg_1637;

assign zext_ln93_6_fu_989_p1 = buffer_V_load_reg_1632;

assign zext_ln93_fu_947_p1 = or_ln_fu_941_p3;

endmodule //ATTN0_reorder144
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
`timescale 1 ns / 1 ps
module ATTN0_reorder144_buffer_V_ram (addr0, ce0, q0, addr1, ce1, d1, we1,  clk);

parameter DWIDTH = 3;
parameter AWIDTH = 10;
parameter MEM_SIZE = 896;

input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
input[DWIDTH-1:0] d1;
input we1;
input clk;

(* ram_style = "distributed" *)reg [DWIDTH-1:0] ram[0:MEM_SIZE-1];




always @(posedge clk)  
begin 
    if (ce0) begin
        q0 <= ram[addr0];
    end
end


always @(posedge clk)  
begin 
    if (ce1) begin
        if (we1) 
            ram[addr1] <= d1; 
    end
end


endmodule

`timescale 1 ns / 1 ps
module ATTN0_reorder144_buffer_V(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    we1,
    d1);

parameter DataWidth = 32'd3;
parameter AddressRange = 32'd896;
parameter AddressWidth = 32'd10;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
input we1;
input[DataWidth - 1:0] d1;



ATTN0_reorder144_buffer_V_ram ATTN0_reorder144_buffer_V_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .we1( we1 ),
    .d1( d1 ));

endmodule

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder146 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1422;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1623;
reg   [0:0] and_ln99_reg_1623_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten87_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten49_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_5_fu_432_p2;
reg   [3:0] tt_5_reg_1408;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_5_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1426;
reg   [0:0] icmp_ln73_reg_1426_pp0_iter1_reg;
wire   [8:0] select_ln73_10_fu_468_p3;
wire   [2:0] select_ln72_5_fu_482_p3;
reg   [2:0] select_ln72_5_reg_1439;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1445;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1450;
reg   [2:0] tmp_reg_1455;
reg   [2:0] tmp_reg_1455_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1460;
wire   [6:0] select_ln73_9_fu_545_p3;
reg   [6:0] select_ln73_9_reg_1465;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_156_fu_555_p2;
reg   [3:0] empty_156_reg_1471;
wire   [9:0] add_ln85_5_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_158_fu_604_p2;
reg   [3:0] empty_158_reg_1481;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1487;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1491;
reg   [0:0] icmp_ln86_reg_1491_pp1_iter1_reg;
wire   [3:0] p_mid165_fu_644_p2;
reg   [3:0] p_mid165_reg_1501;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1507;
reg   [0:0] xor_ln85_reg_1507_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1513;
wire   [0:0] and_ln85_10_fu_662_p2;
reg   [0:0] and_ln85_10_reg_1518;
reg   [0:0] and_ln85_10_reg_1518_pp1_iter1_reg;
wire   [1:0] select_ln85_19_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1531;
wire   [5:0] add_ln87_5_fu_682_p2;
reg   [5:0] add_ln87_5_reg_1537;
wire   [9:0] select_ln86_20_fu_694_p3;
wire   [3:0] empty_159_fu_702_p1;
reg   [3:0] empty_159_reg_1547;
wire   [0:0] cmp45123_fu_727_p2;
reg   [0:0] cmp45123_reg_1552;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1557;
wire   [0:0] or_ln86_5_fu_762_p2;
reg   [0:0] or_ln86_5_reg_1562;
wire   [0:0] and_ln86_5_fu_767_p2;
reg   [0:0] and_ln86_5_reg_1567;
wire   [4:0] select_ln86_18_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1578;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1585;
wire   [3:0] select_ln86_19_fu_820_p3;
reg   [3:0] select_ln86_19_reg_1590;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1595;
wire   [2:0] select_ln87_19_fu_833_p3;
reg   [2:0] select_ln87_19_reg_1600;
reg   [2:0] select_ln87_19_reg_1600_pp1_iter2_reg;
wire   [1:0] trunc_ln93_fu_841_p1;
reg   [1:0] trunc_ln93_reg_1607;
reg   [1:0] trunc_ln93_reg_1607_pp1_iter2_reg;
wire   [5:0] select_ln87_20_fu_845_p3;
wire   [0:0] and_ln99_fu_930_p2;
wire   [2:0] add_ln88_fu_936_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1632;
reg    ap_enable_reg_pp1_iter3;
wire   [6:0] sub_ln93_fu_959_p2;
reg   [6:0] sub_ln93_reg_1637;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_148_cast_fu_920_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_5_fu_998_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_5_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_13_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_157_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_162_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_5_fu_628_p1;
wire   [9:0] add_ln86_5_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_9_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_5_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_17_fu_722_p3;
wire   [3:0] zext_ln87_5_fu_804_p1;
wire   [3:0] empty_160_fu_710_p2;
wire   [3:0] select_ln85_20_fu_814_p3;
wire   [5:0] tmp_141_fu_851_p3;
wire   [3:0] empty_163_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_18_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_17_fu_880_p3;
wire   [5:0] zext_ln88_fu_903_p1;
wire   [3:0] select_ln87_17_fu_892_p3;
wire   [5:0] empty_164_fu_906_p2;
wire   [9:0] tmp_142_fu_912_p3;
wire   [0:0] select_ln87_18_fu_897_p3;
wire   [0:0] icmp_ln99_fu_925_p2;
wire   [4:0] or_ln_fu_941_p3;
wire   [6:0] shl_ln_fu_951_p4;
wire   [6:0] zext_ln93_fu_947_p1;
wire   [83:0] zext_ln93_3_fu_968_p1;
wire   [83:0] shl_ln93_fu_971_p2;
wire   [83:0] xor_ln93_fu_977_p2;
wire   [83:0] zext_ln93_4_fu_989_p1;
wire   [83:0] and_ln93_fu_983_p2;
wire   [83:0] shl_ln93_2_fu_992_p2;
wire   [2:0] tmp_139_fu_1268_p4;
wire   [2:0] tmp_138_fu_1258_p4;
wire   [2:0] tmp_137_fu_1248_p4;
wire   [2:0] tmp_136_fu_1238_p4;
wire   [2:0] tmp_135_fu_1228_p4;
wire   [2:0] tmp_134_fu_1218_p4;
wire   [2:0] tmp_133_fu_1208_p4;
wire   [2:0] tmp_132_fu_1198_p4;
wire   [2:0] tmp_131_fu_1188_p4;
wire   [2:0] tmp_130_fu_1178_p4;
wire   [2:0] tmp_129_fu_1168_p4;
wire   [2:0] tmp_128_fu_1158_p4;
wire   [2:0] tmp_127_fu_1148_p4;
wire   [2:0] tmp_126_fu_1138_p4;
wire   [2:0] tmp_125_fu_1128_p4;
wire   [2:0] tmp_124_fu_1118_p4;
wire   [2:0] tmp_123_fu_1108_p4;
wire   [2:0] tmp_122_fu_1098_p4;
wire   [2:0] tmp_121_fu_1088_p4;
wire   [2:0] tmp_120_fu_1078_p4;
wire   [2:0] tmp_119_fu_1068_p4;
wire   [2:0] tmp_118_fu_1058_p4;
wire   [2:0] tmp_117_fu_1048_p4;
wire   [2:0] tmp_116_fu_1038_p4;
wire   [2:0] tmp_115_fu_1028_p4;
wire   [2:0] tmp_114_fu_1018_p4;
wire   [2:0] tmp_113_fu_1008_p4;
wire   [2:0] trunc_ln174_fu_1004_p1;
wire   [218:0] tmp_140_fu_1278_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1455_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_9_reg_1465;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        cot_reg_399 <= select_ln86_18_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_5_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_20_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten49_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten49_reg_377 <= select_ln86_20_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten87_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten87_reg_355 <= add_ln85_5_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_10_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1460;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_19_reg_1600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_5_reg_1439;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_19_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_5_reg_1408;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1460 <= add_ln74_fu_519_p2;
        select_ln72_5_reg_1439 <= select_ln72_5_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        add_ln86_reg_1557 <= add_ln86_fu_744_p2;
        and_ln86_5_reg_1567 <= and_ln86_5_fu_767_p2;
        cmp45123_reg_1552 <= cmp45123_fu_727_p2;
        cmp45_mid1_reg_1595 <= cmp45_mid1_fu_827_p2;
        or_ln86_5_reg_1562 <= or_ln86_5_fu_762_p2;
        p_mid122_reg_1585 <= p_mid122_fu_808_p2;
        select_ln86_19_reg_1590 <= select_ln86_19_fu_820_p3;
        select_ln87_reg_1578 <= select_ln87_fu_796_p3;
        trunc_ln93_reg_1607 <= trunc_ln93_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_5_reg_1537 <= add_ln87_5_fu_682_p2;
        and_ln85_10_reg_1518 <= and_ln85_10_fu_662_p2;
        icmp_ln86_reg_1491 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1513 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1531 <= or_ln86_fu_676_p2;
        p_mid165_reg_1501 <= p_mid165_fu_644_p2;
        xor_ln85_reg_1507 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1445 <= and_ln72_fu_500_p2;
        select_ln73_reg_1450 <= select_ln73_fu_511_p3;
        tmp_reg_1455 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_10_reg_1518_pp1_iter1_reg <= and_ln85_10_reg_1518;
        empty_158_reg_1481 <= empty_158_fu_604_p2;
        icmp_ln85_reg_1487 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1487_pp1_iter1_reg <= icmp_ln85_reg_1487;
        icmp_ln86_reg_1491_pp1_iter1_reg <= icmp_ln86_reg_1491;
        xor_ln85_reg_1507_pp1_iter1_reg <= xor_ln85_reg_1507;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1623 <= and_ln99_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1623_pp1_iter3_reg <= and_ln99_reg_1623;
        icmp_ln85_reg_1487_pp1_iter2_reg <= icmp_ln85_reg_1487_pp1_iter1_reg;
        icmp_ln85_reg_1487_pp1_iter3_reg <= icmp_ln85_reg_1487_pp1_iter2_reg;
        select_ln87_19_reg_1600_pp1_iter2_reg <= select_ln87_19_reg_1600;
        trunc_ln93_reg_1607_pp1_iter2_reg <= trunc_ln93_reg_1607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1632 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        empty_156_reg_1471 <= empty_156_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_10_reg_1518) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1491 == 1'd0))) begin
        empty_159_reg_1547 <= empty_159_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1422 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1422_pp0_iter1_reg <= icmp_ln72_reg_1422;
        icmp_ln73_reg_1426_pp0_iter1_reg <= icmp_ln73_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1422_pp0_iter2_reg <= icmp_ln72_reg_1422_pp0_iter1_reg;
        tmp_reg_1455_pp0_iter2_reg <= tmp_reg_1455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1426 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        select_ln73_9_reg_1465 <= select_ln73_9_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        select_ln87_19_reg_1600 <= select_ln87_19_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        sub_ln93_reg_1637 <= sub_ln93_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_5_reg_1408 <= tt_5_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_5_fu_998_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_9_reg_1465;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_936_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_20_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1460;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_19_reg_1600;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_5_reg_1439;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_5_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_5_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_13_cast_fu_561_p1);

assign add_ln85_5_fu_582_p2 = (indvar_flatten87_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_5_fu_688_p2 = (indvar_flatten49_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_5_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_936_p2 = (select_ln87_reg_1578 + 3'd1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_10_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_9_fu_739_p2 = (xor_ln85_reg_1507 & icmp_ln88_fu_733_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1507_pp1_iter1_reg & cmp45123_reg_1552);

assign and_ln86_5_fu_767_p2 = (or_ln86_5_fu_762_p2 & and_ln85_9_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_5_reg_1562 & and_ln85_fu_865_p2);

assign and_ln93_fu_983_p2 = (xor_ln93_fu_977_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_930_p2 = (select_ln87_18_fu_897_p3 & icmp_ln99_fu_925_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1422 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_148_cast_fu_920_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45123_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_156_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_157_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_158_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_159_fu_702_p1 = cot_reg_399[3:0];

assign empty_160_fu_710_p2 = (empty_158_reg_1481 + zext_ln87_fu_706_p1);

assign empty_162_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_163_fu_869_p1 = add_ln86_reg_1557[3:0];

assign empty_164_fu_906_p2 = (select_ln86_17_fu_880_p3 + zext_ln88_fu_903_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten87_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten49_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_925_p2 = ((select_ln87_reg_1578 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_140_fu_1278_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1426 | and_ln72_fu_500_p2);

assign or_ln86_5_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1491);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_10_fu_662_p2);

assign or_ln87_5_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1491);

assign or_ln87_fu_786_p2 = (and_ln86_5_fu_767_p2 | and_ln85_10_reg_1518);

assign or_ln_fu_941_p3 = {{select_ln87_19_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}};

assign p_mid122_fu_808_p2 = (select_ln85_17_fu_722_p3 + zext_ln87_5_fu_804_p1);

assign p_mid165_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_5_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_5_reg_1439}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_163_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_157_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_162_fu_632_p1}, {3'd0}};

assign select_ln72_5_fu_482_p3 = ((icmp_ln73_reg_1426[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1426_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_10_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_5_fu_462_p2);

assign select_ln73_13_cast_fu_561_p1 = select_ln73_9_reg_1465;

assign select_ln73_9_fu_545_p3 = ((and_ln72_reg_1445[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_17_fu_722_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_158_reg_1481);

assign select_ln85_18_fu_858_p3 = ((icmp_ln86_reg_1491_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_141_fu_851_p3);

assign select_ln85_19_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_20_fu_814_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_160_fu_710_p2);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_17_fu_880_p3 = ((and_ln85_10_reg_1518_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_18_fu_858_p3);

assign select_ln86_18_fu_773_p3 = ((and_ln85_10_reg_1518[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_19_fu_820_p3 = ((and_ln85_10_reg_1518[0:0] == 1'b1) ? select_ln85_17_fu_722_p3 : select_ln85_20_fu_814_p3);

assign select_ln86_20_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_5_fu_688_p2);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_17_fu_892_p3 = ((and_ln86_5_reg_1567[0:0] == 1'b1) ? p_mid122_reg_1585 : select_ln86_19_reg_1590);

assign select_ln87_18_fu_897_p3 = ((and_ln86_5_reg_1567[0:0] == 1'b1) ? cmp45_mid1_reg_1595 : and_ln86_fu_887_p2);

assign select_ln87_19_fu_833_p3 = ((and_ln86_5_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_20_fu_845_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 6'd1 : add_ln87_5_reg_1537);

assign select_ln87_fu_796_p3 = ((or_ln87_5_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln93_2_fu_992_p2 = zext_ln93_4_fu_989_p1 << zext_ln93_3_fu_968_p1;

assign shl_ln93_fu_971_p2 = 84'd7 << zext_ln93_3_fu_968_p1;

assign shl_ln_fu_951_p4 = {{{select_ln87_19_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}}, {2'd0}};

assign sub_ln93_fu_959_p2 = (shl_ln_fu_951_p4 - zext_ln93_fu_947_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1450;

assign tmp_113_fu_1008_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[5:3]}};

assign tmp_114_fu_1018_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[8:6]}};

assign tmp_115_fu_1028_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[11:9]}};

assign tmp_116_fu_1038_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[14:12]}};

assign tmp_117_fu_1048_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[17:15]}};

assign tmp_118_fu_1058_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[20:18]}};

assign tmp_119_fu_1068_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[23:21]}};

assign tmp_120_fu_1078_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[26:24]}};

assign tmp_121_fu_1088_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[29:27]}};

assign tmp_122_fu_1098_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[32:30]}};

assign tmp_123_fu_1108_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[35:33]}};

assign tmp_124_fu_1118_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[38:36]}};

assign tmp_125_fu_1128_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[41:39]}};

assign tmp_126_fu_1138_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[44:42]}};

assign tmp_127_fu_1148_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[47:45]}};

assign tmp_128_fu_1158_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[50:48]}};

assign tmp_129_fu_1168_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[53:51]}};

assign tmp_130_fu_1178_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[56:54]}};

assign tmp_131_fu_1188_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[59:57]}};

assign tmp_132_fu_1198_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[62:60]}};

assign tmp_133_fu_1208_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[65:63]}};

assign tmp_134_fu_1218_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[68:66]}};

assign tmp_135_fu_1228_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[71:69]}};

assign tmp_136_fu_1238_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[74:72]}};

assign tmp_137_fu_1248_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[77:75]}};

assign tmp_138_fu_1258_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[80:78]}};

assign tmp_139_fu_1268_p4 = {{vec_o_data_M_elems_V_5_fu_998_p2[83:81]}};

assign tmp_140_fu_1278_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_139_fu_1268_p4}, {5'd0}}, {tmp_138_fu_1258_p4}}, {5'd0}}, {tmp_137_fu_1248_p4}}, {5'd0}}, {tmp_136_fu_1238_p4}}, {5'd0}}, {tmp_135_fu_1228_p4}}, {5'd0}}, {tmp_134_fu_1218_p4}}, {5'd0}}, {tmp_133_fu_1208_p4}}, {5'd0}}, {tmp_132_fu_1198_p4}}, {5'd0}}, {tmp_131_fu_1188_p4}}, {5'd0}}, {tmp_130_fu_1178_p4}}, {5'd0}}, {tmp_129_fu_1168_p4}}, {5'd0}}, {tmp_128_fu_1158_p4}}, {5'd0}}, {tmp_127_fu_1148_p4}}, {5'd0}}, {tmp_126_fu_1138_p4}}, {5'd0}}, {tmp_125_fu_1128_p4}}, {5'd0}}, {tmp_124_fu_1118_p4}}, {5'd0}}, {tmp_123_fu_1108_p4}}, {5'd0}}, {tmp_122_fu_1098_p4}}, {5'd0}}, {tmp_121_fu_1088_p4}}, {5'd0}}, {tmp_120_fu_1078_p4}}, {5'd0}}, {tmp_119_fu_1068_p4}}, {5'd0}}, {tmp_118_fu_1058_p4}}, {5'd0}}, {tmp_117_fu_1048_p4}}, {5'd0}}, {tmp_116_fu_1038_p4}}, {5'd0}}, {tmp_115_fu_1028_p4}}, {5'd0}}, {tmp_114_fu_1018_p4}}, {5'd0}}, {tmp_113_fu_1008_p4}}, {5'd0}}, {trunc_ln174_fu_1004_p1}};

assign tmp_141_fu_851_p3 = {{empty_159_reg_1547}, {2'd0}};

assign tmp_142_fu_912_p3 = {{select_ln87_17_fu_892_p3}, {empty_164_fu_906_p2}};

assign tmp_148_cast_fu_920_p1 = tmp_142_fu_912_p3;

assign tmp_s_fu_564_p3 = {{empty_156_reg_1471}, {6'd0}};

assign trunc_ln174_fu_1004_p1 = vec_o_data_M_elems_V_5_fu_998_p2[2:0];

assign trunc_ln93_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_5_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_5_fu_998_p2 = (shl_ln93_2_fu_992_p2 | and_ln93_fu_983_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1426 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1513 ^ 1'd1);

assign xor_ln93_fu_977_p2 = (shl_ln93_fu_971_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_5_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_5_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_903_p1 = select_ln87_reg_1578;

assign zext_ln93_3_fu_968_p1 = sub_ln93_reg_1637;

assign zext_ln93_4_fu_989_p1 = buffer_V_load_reg_1632;

assign zext_ln93_fu_947_p1 = or_ln_fu_941_p3;

endmodule //ATTN0_reorder146
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder148 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1422;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1623;
reg   [0:0] and_ln99_reg_1623_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten87_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten49_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_4_fu_432_p2;
reg   [3:0] tt_4_reg_1408;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_4_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1422_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1426;
reg   [0:0] icmp_ln73_reg_1426_pp0_iter1_reg;
wire   [8:0] select_ln73_8_fu_468_p3;
wire   [2:0] select_ln72_4_fu_482_p3;
reg   [2:0] select_ln72_4_reg_1439;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1445;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1450;
reg   [2:0] tmp_reg_1455;
reg   [2:0] tmp_reg_1455_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1460;
wire   [6:0] select_ln73_7_fu_545_p3;
reg   [6:0] select_ln73_7_reg_1465;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_146_fu_555_p2;
reg   [3:0] empty_146_reg_1471;
wire   [9:0] add_ln85_4_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_148_fu_604_p2;
reg   [3:0] empty_148_reg_1481;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1487;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1487_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1491;
reg   [0:0] icmp_ln86_reg_1491_pp1_iter1_reg;
wire   [3:0] p_mid165_fu_644_p2;
reg   [3:0] p_mid165_reg_1501;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1507;
reg   [0:0] xor_ln85_reg_1507_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1513;
wire   [0:0] and_ln85_8_fu_662_p2;
reg   [0:0] and_ln85_8_reg_1518;
reg   [0:0] and_ln85_8_reg_1518_pp1_iter1_reg;
wire   [1:0] select_ln85_15_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1531;
wire   [5:0] add_ln87_4_fu_682_p2;
reg   [5:0] add_ln87_4_reg_1537;
wire   [9:0] select_ln86_16_fu_694_p3;
wire   [3:0] empty_149_fu_702_p1;
reg   [3:0] empty_149_reg_1547;
wire   [0:0] cmp45123_fu_727_p2;
reg   [0:0] cmp45123_reg_1552;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1557;
wire   [0:0] or_ln86_4_fu_762_p2;
reg   [0:0] or_ln86_4_reg_1562;
wire   [0:0] and_ln86_4_fu_767_p2;
reg   [0:0] and_ln86_4_reg_1567;
wire   [4:0] select_ln86_14_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1578;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1585;
wire   [3:0] select_ln86_15_fu_820_p3;
reg   [3:0] select_ln86_15_reg_1590;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1595;
wire   [2:0] select_ln87_15_fu_833_p3;
reg   [2:0] select_ln87_15_reg_1600;
reg   [2:0] select_ln87_15_reg_1600_pp1_iter2_reg;
wire   [1:0] trunc_ln93_fu_841_p1;
reg   [1:0] trunc_ln93_reg_1607;
reg   [1:0] trunc_ln93_reg_1607_pp1_iter2_reg;
wire   [5:0] select_ln87_16_fu_845_p3;
wire   [0:0] and_ln99_fu_930_p2;
wire   [2:0] add_ln88_fu_936_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1632;
reg    ap_enable_reg_pp1_iter3;
wire   [6:0] sub_ln93_fu_959_p2;
reg   [6:0] sub_ln93_reg_1637;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_120_cast_fu_920_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_4_fu_998_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_4_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_10_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_147_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_152_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_4_fu_628_p1;
wire   [9:0] add_ln86_4_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_7_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_4_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_13_fu_722_p3;
wire   [3:0] zext_ln87_4_fu_804_p1;
wire   [3:0] empty_150_fu_710_p2;
wire   [3:0] select_ln85_16_fu_814_p3;
wire   [5:0] tmp_113_fu_851_p3;
wire   [3:0] empty_153_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_14_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_13_fu_880_p3;
wire   [5:0] zext_ln88_fu_903_p1;
wire   [3:0] select_ln87_13_fu_892_p3;
wire   [5:0] empty_154_fu_906_p2;
wire   [9:0] tmp_114_fu_912_p3;
wire   [0:0] select_ln87_14_fu_897_p3;
wire   [0:0] icmp_ln99_fu_925_p2;
wire   [4:0] or_ln_fu_941_p3;
wire   [6:0] shl_ln_fu_951_p4;
wire   [6:0] zext_ln93_fu_947_p1;
wire   [83:0] zext_ln93_1_fu_968_p1;
wire   [83:0] shl_ln93_fu_971_p2;
wire   [83:0] xor_ln93_fu_977_p2;
wire   [83:0] zext_ln93_2_fu_989_p1;
wire   [83:0] and_ln93_fu_983_p2;
wire   [83:0] shl_ln93_1_fu_992_p2;
wire   [2:0] tmp_111_fu_1268_p4;
wire   [2:0] tmp_110_fu_1258_p4;
wire   [2:0] tmp_109_fu_1248_p4;
wire   [2:0] tmp_108_fu_1238_p4;
wire   [2:0] tmp_107_fu_1228_p4;
wire   [2:0] tmp_106_fu_1218_p4;
wire   [2:0] tmp_105_fu_1208_p4;
wire   [2:0] tmp_104_fu_1198_p4;
wire   [2:0] tmp_103_fu_1188_p4;
wire   [2:0] tmp_102_fu_1178_p4;
wire   [2:0] tmp_101_fu_1168_p4;
wire   [2:0] tmp_100_fu_1158_p4;
wire   [2:0] tmp_99_fu_1148_p4;
wire   [2:0] tmp_98_fu_1138_p4;
wire   [2:0] tmp_97_fu_1128_p4;
wire   [2:0] tmp_96_fu_1118_p4;
wire   [2:0] tmp_95_fu_1108_p4;
wire   [2:0] tmp_94_fu_1098_p4;
wire   [2:0] tmp_93_fu_1088_p4;
wire   [2:0] tmp_92_fu_1078_p4;
wire   [2:0] tmp_91_fu_1068_p4;
wire   [2:0] tmp_90_fu_1058_p4;
wire   [2:0] tmp_89_fu_1048_p4;
wire   [2:0] tmp_88_fu_1038_p4;
wire   [2:0] tmp_87_fu_1028_p4;
wire   [2:0] tmp_86_fu_1018_p4;
wire   [2:0] tmp_85_fu_1008_p4;
wire   [2:0] trunc_ln174_fu_1004_p1;
wire   [218:0] tmp_112_fu_1278_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1455_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_7_reg_1465;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        cot_reg_399 <= select_ln86_14_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_4_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_16_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten49_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten49_reg_377 <= select_ln86_16_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten87_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten87_reg_355 <= add_ln85_4_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_8_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1460;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_15_reg_1600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_4_reg_1439;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_15_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_4_reg_1408;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1460 <= add_ln74_fu_519_p2;
        select_ln72_4_reg_1439 <= select_ln72_4_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        add_ln86_reg_1557 <= add_ln86_fu_744_p2;
        and_ln86_4_reg_1567 <= and_ln86_4_fu_767_p2;
        cmp45123_reg_1552 <= cmp45123_fu_727_p2;
        cmp45_mid1_reg_1595 <= cmp45_mid1_fu_827_p2;
        or_ln86_4_reg_1562 <= or_ln86_4_fu_762_p2;
        p_mid122_reg_1585 <= p_mid122_fu_808_p2;
        select_ln86_15_reg_1590 <= select_ln86_15_fu_820_p3;
        select_ln87_reg_1578 <= select_ln87_fu_796_p3;
        trunc_ln93_reg_1607 <= trunc_ln93_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_4_reg_1537 <= add_ln87_4_fu_682_p2;
        and_ln85_8_reg_1518 <= and_ln85_8_fu_662_p2;
        icmp_ln86_reg_1491 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1513 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1531 <= or_ln86_fu_676_p2;
        p_mid165_reg_1501 <= p_mid165_fu_644_p2;
        xor_ln85_reg_1507 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1445 <= and_ln72_fu_500_p2;
        select_ln73_reg_1450 <= select_ln73_fu_511_p3;
        tmp_reg_1455 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_8_reg_1518_pp1_iter1_reg <= and_ln85_8_reg_1518;
        empty_148_reg_1481 <= empty_148_fu_604_p2;
        icmp_ln85_reg_1487 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1487_pp1_iter1_reg <= icmp_ln85_reg_1487;
        icmp_ln86_reg_1491_pp1_iter1_reg <= icmp_ln86_reg_1491;
        xor_ln85_reg_1507_pp1_iter1_reg <= xor_ln85_reg_1507;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1623 <= and_ln99_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1623_pp1_iter3_reg <= and_ln99_reg_1623;
        icmp_ln85_reg_1487_pp1_iter2_reg <= icmp_ln85_reg_1487_pp1_iter1_reg;
        icmp_ln85_reg_1487_pp1_iter3_reg <= icmp_ln85_reg_1487_pp1_iter2_reg;
        select_ln87_15_reg_1600_pp1_iter2_reg <= select_ln87_15_reg_1600;
        trunc_ln93_reg_1607_pp1_iter2_reg <= trunc_ln93_reg_1607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1632 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        empty_146_reg_1471 <= empty_146_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_8_reg_1518) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1491 == 1'd0))) begin
        empty_149_reg_1547 <= empty_149_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1422 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1422_pp0_iter1_reg <= icmp_ln72_reg_1422;
        icmp_ln73_reg_1426_pp0_iter1_reg <= icmp_ln73_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1422_pp0_iter2_reg <= icmp_ln72_reg_1422_pp0_iter1_reg;
        tmp_reg_1455_pp0_iter2_reg <= tmp_reg_1455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1426 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        select_ln73_7_reg_1465 <= select_ln73_7_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        select_ln87_15_reg_1600 <= select_ln87_15_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter2_reg == 1'd0))) begin
        sub_ln93_reg_1637 <= sub_ln93_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_4_reg_1408 <= tt_4_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1487_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_4_fu_998_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_7_reg_1465;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_936_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1487 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_16_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1460;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1487_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_15_reg_1600;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_4_reg_1439;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1422_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1422 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_4_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_4_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_10_cast_fu_561_p1);

assign add_ln85_4_fu_582_p2 = (indvar_flatten87_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_4_fu_688_p2 = (indvar_flatten49_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_4_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_936_p2 = (select_ln87_reg_1578 + 3'd1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_7_fu_739_p2 = (xor_ln85_reg_1507 & icmp_ln88_fu_733_p2);

assign and_ln85_8_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1507_pp1_iter1_reg & cmp45123_reg_1552);

assign and_ln86_4_fu_767_p2 = (or_ln86_4_fu_762_p2 & and_ln85_7_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_4_reg_1562 & and_ln85_fu_865_p2);

assign and_ln93_fu_983_p2 = (xor_ln93_fu_977_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_930_p2 = (select_ln87_14_fu_897_p3 & icmp_ln99_fu_925_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1422 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1623_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1422 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_120_cast_fu_920_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45123_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_146_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_147_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_148_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_149_fu_702_p1 = cot_reg_399[3:0];

assign empty_150_fu_710_p2 = (empty_148_reg_1481 + zext_ln87_fu_706_p1);

assign empty_152_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_153_fu_869_p1 = add_ln86_reg_1557[3:0];

assign empty_154_fu_906_p2 = (select_ln86_13_fu_880_p3 + zext_ln88_fu_903_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten87_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten49_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_925_p2 = ((select_ln87_reg_1578 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_112_fu_1278_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1426 | and_ln72_fu_500_p2);

assign or_ln86_4_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1491);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_8_fu_662_p2);

assign or_ln87_4_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1491);

assign or_ln87_fu_786_p2 = (and_ln86_4_fu_767_p2 | and_ln85_8_reg_1518);

assign or_ln_fu_941_p3 = {{select_ln87_15_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}};

assign p_mid122_fu_808_p2 = (select_ln85_13_fu_722_p3 + zext_ln87_4_fu_804_p1);

assign p_mid165_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_4_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_4_reg_1439}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_153_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_147_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_152_fu_632_p1}, {3'd0}};

assign select_ln72_4_fu_482_p3 = ((icmp_ln73_reg_1426[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1426_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_10_cast_fu_561_p1 = select_ln73_7_reg_1465;

assign select_ln73_7_fu_545_p3 = ((and_ln72_reg_1445[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_8_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_4_fu_462_p2);

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_13_fu_722_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_148_reg_1481);

assign select_ln85_14_fu_858_p3 = ((icmp_ln86_reg_1491_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_113_fu_851_p3);

assign select_ln85_15_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_16_fu_814_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? p_mid165_reg_1501 : empty_150_fu_710_p2);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1491[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_13_fu_880_p3 = ((and_ln85_8_reg_1518_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_14_fu_858_p3);

assign select_ln86_14_fu_773_p3 = ((and_ln85_8_reg_1518[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_15_fu_820_p3 = ((and_ln85_8_reg_1518[0:0] == 1'b1) ? select_ln85_13_fu_722_p3 : select_ln85_16_fu_814_p3);

assign select_ln86_16_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_4_fu_688_p2);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_13_fu_892_p3 = ((and_ln86_4_reg_1567[0:0] == 1'b1) ? p_mid122_reg_1585 : select_ln86_15_reg_1590);

assign select_ln87_14_fu_897_p3 = ((and_ln86_4_reg_1567[0:0] == 1'b1) ? cmp45_mid1_reg_1595 : and_ln86_fu_887_p2);

assign select_ln87_15_fu_833_p3 = ((and_ln86_4_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_16_fu_845_p3 = ((or_ln86_reg_1531[0:0] == 1'b1) ? 6'd1 : add_ln87_4_reg_1537);

assign select_ln87_fu_796_p3 = ((or_ln87_4_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln93_1_fu_992_p2 = zext_ln93_2_fu_989_p1 << zext_ln93_1_fu_968_p1;

assign shl_ln93_fu_971_p2 = 84'd7 << zext_ln93_1_fu_968_p1;

assign shl_ln_fu_951_p4 = {{{select_ln87_15_reg_1600_pp1_iter2_reg}, {trunc_ln93_reg_1607_pp1_iter2_reg}}, {2'd0}};

assign sub_ln93_fu_959_p2 = (shl_ln_fu_951_p4 - zext_ln93_fu_947_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1450;

assign tmp_100_fu_1158_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[50:48]}};

assign tmp_101_fu_1168_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[53:51]}};

assign tmp_102_fu_1178_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[56:54]}};

assign tmp_103_fu_1188_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[59:57]}};

assign tmp_104_fu_1198_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[62:60]}};

assign tmp_105_fu_1208_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[65:63]}};

assign tmp_106_fu_1218_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[68:66]}};

assign tmp_107_fu_1228_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[71:69]}};

assign tmp_108_fu_1238_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[74:72]}};

assign tmp_109_fu_1248_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[77:75]}};

assign tmp_110_fu_1258_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[80:78]}};

assign tmp_111_fu_1268_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[83:81]}};

assign tmp_112_fu_1278_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_111_fu_1268_p4}, {5'd0}}, {tmp_110_fu_1258_p4}}, {5'd0}}, {tmp_109_fu_1248_p4}}, {5'd0}}, {tmp_108_fu_1238_p4}}, {5'd0}}, {tmp_107_fu_1228_p4}}, {5'd0}}, {tmp_106_fu_1218_p4}}, {5'd0}}, {tmp_105_fu_1208_p4}}, {5'd0}}, {tmp_104_fu_1198_p4}}, {5'd0}}, {tmp_103_fu_1188_p4}}, {5'd0}}, {tmp_102_fu_1178_p4}}, {5'd0}}, {tmp_101_fu_1168_p4}}, {5'd0}}, {tmp_100_fu_1158_p4}}, {5'd0}}, {tmp_99_fu_1148_p4}}, {5'd0}}, {tmp_98_fu_1138_p4}}, {5'd0}}, {tmp_97_fu_1128_p4}}, {5'd0}}, {tmp_96_fu_1118_p4}}, {5'd0}}, {tmp_95_fu_1108_p4}}, {5'd0}}, {tmp_94_fu_1098_p4}}, {5'd0}}, {tmp_93_fu_1088_p4}}, {5'd0}}, {tmp_92_fu_1078_p4}}, {5'd0}}, {tmp_91_fu_1068_p4}}, {5'd0}}, {tmp_90_fu_1058_p4}}, {5'd0}}, {tmp_89_fu_1048_p4}}, {5'd0}}, {tmp_88_fu_1038_p4}}, {5'd0}}, {tmp_87_fu_1028_p4}}, {5'd0}}, {tmp_86_fu_1018_p4}}, {5'd0}}, {tmp_85_fu_1008_p4}}, {5'd0}}, {trunc_ln174_fu_1004_p1}};

assign tmp_113_fu_851_p3 = {{empty_149_reg_1547}, {2'd0}};

assign tmp_114_fu_912_p3 = {{select_ln87_13_fu_892_p3}, {empty_154_fu_906_p2}};

assign tmp_120_cast_fu_920_p1 = tmp_114_fu_912_p3;

assign tmp_85_fu_1008_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[5:3]}};

assign tmp_86_fu_1018_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[8:6]}};

assign tmp_87_fu_1028_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[11:9]}};

assign tmp_88_fu_1038_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[14:12]}};

assign tmp_89_fu_1048_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[17:15]}};

assign tmp_90_fu_1058_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[20:18]}};

assign tmp_91_fu_1068_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[23:21]}};

assign tmp_92_fu_1078_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[26:24]}};

assign tmp_93_fu_1088_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[29:27]}};

assign tmp_94_fu_1098_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[32:30]}};

assign tmp_95_fu_1108_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[35:33]}};

assign tmp_96_fu_1118_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[38:36]}};

assign tmp_97_fu_1128_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[41:39]}};

assign tmp_98_fu_1138_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[44:42]}};

assign tmp_99_fu_1148_p4 = {{vec_o_data_M_elems_V_4_fu_998_p2[47:45]}};

assign tmp_s_fu_564_p3 = {{empty_146_reg_1471}, {6'd0}};

assign trunc_ln174_fu_1004_p1 = vec_o_data_M_elems_V_4_fu_998_p2[2:0];

assign trunc_ln93_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_4_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_4_fu_998_p2 = (shl_ln93_1_fu_992_p2 | and_ln93_fu_983_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1426 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1513 ^ 1'd1);

assign xor_ln93_fu_977_p2 = (shl_ln93_fu_971_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_4_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_4_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_903_p1 = select_ln87_reg_1578;

assign zext_ln93_1_fu_968_p1 = sub_ln93_reg_1637;

assign zext_ln93_2_fu_989_p1 = buffer_V_load_reg_1632;

assign zext_ln93_fu_947_p1 = or_ln_fu_941_p3;

endmodule //ATTN0_reorder148
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder160 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1446;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1650;
reg   [0:0] and_ln99_reg_1650_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten91_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten51_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_3_fu_432_p2;
reg   [3:0] tt_3_reg_1432;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_3_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1450;
reg   [0:0] icmp_ln73_reg_1450_pp0_iter1_reg;
wire   [8:0] select_ln73_6_fu_468_p3;
wire   [2:0] select_ln72_3_fu_482_p3;
reg   [2:0] select_ln72_3_reg_1463;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1469;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1474;
reg   [2:0] tmp_reg_1479;
reg   [2:0] tmp_reg_1479_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1484;
wire   [6:0] select_ln73_5_fu_545_p3;
reg   [6:0] select_ln73_5_reg_1489;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_136_fu_555_p2;
reg   [3:0] empty_136_reg_1495;
wire   [9:0] add_ln85_3_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_138_fu_604_p2;
reg   [3:0] empty_138_reg_1505;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1511;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1515;
reg   [0:0] icmp_ln86_reg_1515_pp1_iter1_reg;
wire   [3:0] p_mid167_fu_644_p2;
reg   [3:0] p_mid167_reg_1525;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1531;
reg   [0:0] xor_ln85_reg_1531_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1537;
wire   [0:0] and_ln85_6_fu_662_p2;
reg   [0:0] and_ln85_6_reg_1542;
reg   [0:0] and_ln85_6_reg_1542_pp1_iter1_reg;
wire   [1:0] select_ln85_11_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1555;
wire   [5:0] add_ln87_3_fu_682_p2;
reg   [5:0] add_ln87_3_reg_1561;
wire   [9:0] select_ln86_12_fu_694_p3;
wire   [3:0] empty_139_fu_702_p1;
reg   [3:0] empty_139_reg_1571;
wire   [0:0] cmp45129_fu_727_p2;
reg   [0:0] cmp45129_reg_1576;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1581;
wire   [0:0] or_ln86_3_fu_762_p2;
reg   [0:0] or_ln86_3_reg_1586;
wire   [0:0] and_ln86_3_fu_767_p2;
reg   [0:0] and_ln86_3_reg_1591;
wire   [4:0] select_ln86_10_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1602;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1609;
wire   [3:0] select_ln86_11_fu_820_p3;
reg   [3:0] select_ln86_11_reg_1614;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1619;
wire   [2:0] select_ln87_11_fu_833_p3;
reg   [2:0] select_ln87_11_reg_1624;
wire   [1:0] trunc_ln96_fu_841_p1;
reg   [1:0] trunc_ln96_reg_1630;
wire   [5:0] select_ln87_12_fu_845_p3;
wire   [6:0] sub_ln96_3_fu_967_p2;
reg   [6:0] sub_ln96_3_reg_1645;
reg   [6:0] sub_ln96_3_reg_1645_pp1_iter3_reg;
wire   [0:0] and_ln99_fu_978_p2;
wire   [2:0] add_ln88_fu_984_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1659;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_92_cast_fu_923_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_3_fu_1022_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_3_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_7_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_137_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_142_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_3_fu_628_p1;
wire   [9:0] add_ln86_3_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_5_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_3_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_9_fu_722_p3;
wire   [3:0] zext_ln87_3_fu_804_p1;
wire   [3:0] empty_140_fu_710_p2;
wire   [3:0] select_ln85_12_fu_814_p3;
wire   [5:0] tmp_85_fu_851_p3;
wire   [3:0] empty_143_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_10_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_9_fu_880_p3;
wire   [5:0] zext_ln88_fu_906_p1;
wire   [3:0] select_ln87_9_fu_892_p3;
wire   [5:0] empty_144_fu_909_p2;
wire   [9:0] tmp_86_fu_915_p3;
wire   [4:0] shl_ln_fu_928_p3;
wire   [5:0] zext_ln96_3_fu_935_p1;
wire   [5:0] sub_ln96_fu_939_p2;
wire   [5:0] zext_ln87_4_fu_903_p1;
wire   [5:0] add_ln96_fu_945_p2;
wire   [4:0] trunc_ln96_3_fu_951_p1;
wire   [6:0] tmp_87_fu_955_p3;
wire   [6:0] zext_ln96_fu_963_p1;
wire   [0:0] select_ln87_10_fu_897_p3;
wire   [0:0] icmp_ln99_fu_973_p2;
wire   [83:0] zext_ln96_6_fu_992_p1;
wire   [83:0] shl_ln96_fu_995_p2;
wire   [83:0] xor_ln96_fu_1001_p2;
wire   [83:0] zext_ln96_7_fu_1013_p1;
wire   [83:0] and_ln96_fu_1007_p2;
wire   [83:0] shl_ln96_3_fu_1016_p2;
wire   [2:0] tmp_83_fu_1292_p4;
wire   [2:0] tmp_82_fu_1282_p4;
wire   [2:0] tmp_81_fu_1272_p4;
wire   [2:0] tmp_80_fu_1262_p4;
wire   [2:0] tmp_79_fu_1252_p4;
wire   [2:0] tmp_78_fu_1242_p4;
wire   [2:0] tmp_77_fu_1232_p4;
wire   [2:0] tmp_76_fu_1222_p4;
wire   [2:0] tmp_75_fu_1212_p4;
wire   [2:0] tmp_74_fu_1202_p4;
wire   [2:0] tmp_73_fu_1192_p4;
wire   [2:0] tmp_72_fu_1182_p4;
wire   [2:0] tmp_71_fu_1172_p4;
wire   [2:0] tmp_70_fu_1162_p4;
wire   [2:0] tmp_69_fu_1152_p4;
wire   [2:0] tmp_68_fu_1142_p4;
wire   [2:0] tmp_67_fu_1132_p4;
wire   [2:0] tmp_66_fu_1122_p4;
wire   [2:0] tmp_65_fu_1112_p4;
wire   [2:0] tmp_64_fu_1102_p4;
wire   [2:0] tmp_63_fu_1092_p4;
wire   [2:0] tmp_62_fu_1082_p4;
wire   [2:0] tmp_61_fu_1072_p4;
wire   [2:0] tmp_60_fu_1062_p4;
wire   [2:0] tmp_59_fu_1052_p4;
wire   [2:0] tmp_58_fu_1042_p4;
wire   [2:0] tmp_57_fu_1032_p4;
wire   [2:0] trunc_ln174_fu_1028_p1;
wire   [218:0] tmp_84_fu_1302_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1479_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_5_reg_1489;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        cot_reg_399 <= select_ln86_10_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_3_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_12_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten51_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten51_reg_377 <= select_ln86_12_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten91_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten91_reg_355 <= add_ln85_3_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_6_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1484;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_11_reg_1624;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_3_reg_1463;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_11_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_3_reg_1432;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1484 <= add_ln74_fu_519_p2;
        select_ln72_3_reg_1463 <= select_ln72_3_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        add_ln86_reg_1581 <= add_ln86_fu_744_p2;
        and_ln86_3_reg_1591 <= and_ln86_3_fu_767_p2;
        cmp45129_reg_1576 <= cmp45129_fu_727_p2;
        cmp45_mid1_reg_1619 <= cmp45_mid1_fu_827_p2;
        or_ln86_3_reg_1586 <= or_ln86_3_fu_762_p2;
        p_mid122_reg_1609 <= p_mid122_fu_808_p2;
        select_ln86_11_reg_1614 <= select_ln86_11_fu_820_p3;
        select_ln87_reg_1602 <= select_ln87_fu_796_p3;
        trunc_ln96_reg_1630 <= trunc_ln96_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_3_reg_1561 <= add_ln87_3_fu_682_p2;
        and_ln85_6_reg_1542 <= and_ln85_6_fu_662_p2;
        icmp_ln86_reg_1515 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1537 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1555 <= or_ln86_fu_676_p2;
        p_mid167_reg_1525 <= p_mid167_fu_644_p2;
        xor_ln85_reg_1531 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1469 <= and_ln72_fu_500_p2;
        select_ln73_reg_1474 <= select_ln73_fu_511_p3;
        tmp_reg_1479 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_6_reg_1542_pp1_iter1_reg <= and_ln85_6_reg_1542;
        empty_138_reg_1505 <= empty_138_fu_604_p2;
        icmp_ln85_reg_1511 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1511_pp1_iter1_reg <= icmp_ln85_reg_1511;
        icmp_ln86_reg_1515_pp1_iter1_reg <= icmp_ln86_reg_1515;
        xor_ln85_reg_1531_pp1_iter1_reg <= xor_ln85_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1650 <= and_ln99_fu_978_p2;
        sub_ln96_3_reg_1645 <= sub_ln96_3_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1650_pp1_iter3_reg <= and_ln99_reg_1650;
        icmp_ln85_reg_1511_pp1_iter2_reg <= icmp_ln85_reg_1511_pp1_iter1_reg;
        icmp_ln85_reg_1511_pp1_iter3_reg <= icmp_ln85_reg_1511_pp1_iter2_reg;
        sub_ln96_3_reg_1645_pp1_iter3_reg <= sub_ln96_3_reg_1645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1659 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        empty_136_reg_1495 <= empty_136_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_6_reg_1542) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1515 == 1'd0))) begin
        empty_139_reg_1571 <= empty_139_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1446 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1446_pp0_iter1_reg <= icmp_ln72_reg_1446;
        icmp_ln73_reg_1450_pp0_iter1_reg <= icmp_ln73_reg_1450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1446_pp0_iter2_reg <= icmp_ln72_reg_1446_pp0_iter1_reg;
        tmp_reg_1479_pp0_iter2_reg <= tmp_reg_1479;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1450 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        select_ln73_5_reg_1489 <= select_ln73_5_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        select_ln87_11_reg_1624 <= select_ln87_11_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_3_reg_1432 <= tt_3_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_3_fu_1022_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_5_reg_1489;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_984_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_12_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1484;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_11_reg_1624;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_3_reg_1463;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_3_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_3_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_7_cast_fu_561_p1);

assign add_ln85_3_fu_582_p2 = (indvar_flatten91_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_3_fu_688_p2 = (indvar_flatten51_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_3_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_984_p2 = (select_ln87_reg_1602 + 3'd1);

assign add_ln96_fu_945_p2 = (sub_ln96_fu_939_p2 + zext_ln87_4_fu_903_p1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_5_fu_739_p2 = (xor_ln85_reg_1531 & icmp_ln88_fu_733_p2);

assign and_ln85_6_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1531_pp1_iter1_reg & cmp45129_reg_1576);

assign and_ln86_3_fu_767_p2 = (or_ln86_3_fu_762_p2 & and_ln85_5_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_3_reg_1586 & and_ln85_fu_865_p2);

assign and_ln96_fu_1007_p2 = (xor_ln96_fu_1001_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_978_p2 = (select_ln87_10_fu_897_p3 & icmp_ln99_fu_973_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1446 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_92_cast_fu_923_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45129_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_136_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_137_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_138_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_139_fu_702_p1 = cot_reg_399[3:0];

assign empty_140_fu_710_p2 = (empty_138_reg_1505 + zext_ln87_fu_706_p1);

assign empty_142_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_143_fu_869_p1 = add_ln86_reg_1581[3:0];

assign empty_144_fu_909_p2 = (select_ln86_9_fu_880_p3 + zext_ln88_fu_906_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten91_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten51_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_973_p2 = ((select_ln87_reg_1602 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_84_fu_1302_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1450 | and_ln72_fu_500_p2);

assign or_ln86_3_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1515);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_6_fu_662_p2);

assign or_ln87_3_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1515);

assign or_ln87_fu_786_p2 = (and_ln86_3_fu_767_p2 | and_ln85_6_reg_1542);

assign p_mid122_fu_808_p2 = (select_ln85_9_fu_722_p3 + zext_ln87_3_fu_804_p1);

assign p_mid167_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_3_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_3_reg_1463}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_143_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_137_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_142_fu_632_p1}, {3'd0}};

assign select_ln72_3_fu_482_p3 = ((icmp_ln73_reg_1450[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1450_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_5_fu_545_p3 = ((and_ln72_reg_1469[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_6_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_3_fu_462_p2);

assign select_ln73_7_cast_fu_561_p1 = select_ln73_5_reg_1489;

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_10_fu_858_p3 = ((icmp_ln86_reg_1515_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_85_fu_851_p3);

assign select_ln85_11_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_12_fu_814_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_140_fu_710_p2);

assign select_ln85_9_fu_722_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_138_reg_1505);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_10_fu_773_p3 = ((and_ln85_6_reg_1542[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_11_fu_820_p3 = ((and_ln85_6_reg_1542[0:0] == 1'b1) ? select_ln85_9_fu_722_p3 : select_ln85_12_fu_814_p3);

assign select_ln86_12_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_3_fu_688_p2);

assign select_ln86_9_fu_880_p3 = ((and_ln85_6_reg_1542_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_10_fu_858_p3);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_10_fu_897_p3 = ((and_ln86_3_reg_1591[0:0] == 1'b1) ? cmp45_mid1_reg_1619 : and_ln86_fu_887_p2);

assign select_ln87_11_fu_833_p3 = ((and_ln86_3_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_12_fu_845_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 6'd1 : add_ln87_3_reg_1561);

assign select_ln87_9_fu_892_p3 = ((and_ln86_3_reg_1591[0:0] == 1'b1) ? p_mid122_reg_1609 : select_ln86_11_reg_1614);

assign select_ln87_fu_796_p3 = ((or_ln87_3_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln96_3_fu_1016_p2 = zext_ln96_7_fu_1013_p1 << zext_ln96_6_fu_992_p1;

assign shl_ln96_fu_995_p2 = 84'd7 << zext_ln96_6_fu_992_p1;

assign shl_ln_fu_928_p3 = {{trunc_ln96_reg_1630}, {3'd0}};

assign sub_ln96_3_fu_967_p2 = (tmp_87_fu_955_p3 - zext_ln96_fu_963_p1);

assign sub_ln96_fu_939_p2 = (zext_ln96_3_fu_935_p1 - zext_ln88_fu_906_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1474;

assign tmp_57_fu_1032_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[5:3]}};

assign tmp_58_fu_1042_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[8:6]}};

assign tmp_59_fu_1052_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[11:9]}};

assign tmp_60_fu_1062_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[14:12]}};

assign tmp_61_fu_1072_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[17:15]}};

assign tmp_62_fu_1082_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[20:18]}};

assign tmp_63_fu_1092_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[23:21]}};

assign tmp_64_fu_1102_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[26:24]}};

assign tmp_65_fu_1112_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[29:27]}};

assign tmp_66_fu_1122_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[32:30]}};

assign tmp_67_fu_1132_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[35:33]}};

assign tmp_68_fu_1142_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[38:36]}};

assign tmp_69_fu_1152_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[41:39]}};

assign tmp_70_fu_1162_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[44:42]}};

assign tmp_71_fu_1172_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[47:45]}};

assign tmp_72_fu_1182_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[50:48]}};

assign tmp_73_fu_1192_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[53:51]}};

assign tmp_74_fu_1202_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[56:54]}};

assign tmp_75_fu_1212_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[59:57]}};

assign tmp_76_fu_1222_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[62:60]}};

assign tmp_77_fu_1232_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[65:63]}};

assign tmp_78_fu_1242_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[68:66]}};

assign tmp_79_fu_1252_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[71:69]}};

assign tmp_80_fu_1262_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[74:72]}};

assign tmp_81_fu_1272_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[77:75]}};

assign tmp_82_fu_1282_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[80:78]}};

assign tmp_83_fu_1292_p4 = {{vec_o_data_M_elems_V_3_fu_1022_p2[83:81]}};

assign tmp_84_fu_1302_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_83_fu_1292_p4}, {5'd0}}, {tmp_82_fu_1282_p4}}, {5'd0}}, {tmp_81_fu_1272_p4}}, {5'd0}}, {tmp_80_fu_1262_p4}}, {5'd0}}, {tmp_79_fu_1252_p4}}, {5'd0}}, {tmp_78_fu_1242_p4}}, {5'd0}}, {tmp_77_fu_1232_p4}}, {5'd0}}, {tmp_76_fu_1222_p4}}, {5'd0}}, {tmp_75_fu_1212_p4}}, {5'd0}}, {tmp_74_fu_1202_p4}}, {5'd0}}, {tmp_73_fu_1192_p4}}, {5'd0}}, {tmp_72_fu_1182_p4}}, {5'd0}}, {tmp_71_fu_1172_p4}}, {5'd0}}, {tmp_70_fu_1162_p4}}, {5'd0}}, {tmp_69_fu_1152_p4}}, {5'd0}}, {tmp_68_fu_1142_p4}}, {5'd0}}, {tmp_67_fu_1132_p4}}, {5'd0}}, {tmp_66_fu_1122_p4}}, {5'd0}}, {tmp_65_fu_1112_p4}}, {5'd0}}, {tmp_64_fu_1102_p4}}, {5'd0}}, {tmp_63_fu_1092_p4}}, {5'd0}}, {tmp_62_fu_1082_p4}}, {5'd0}}, {tmp_61_fu_1072_p4}}, {5'd0}}, {tmp_60_fu_1062_p4}}, {5'd0}}, {tmp_59_fu_1052_p4}}, {5'd0}}, {tmp_58_fu_1042_p4}}, {5'd0}}, {tmp_57_fu_1032_p4}}, {5'd0}}, {trunc_ln174_fu_1028_p1}};

assign tmp_85_fu_851_p3 = {{empty_139_reg_1571}, {2'd0}};

assign tmp_86_fu_915_p3 = {{select_ln87_9_fu_892_p3}, {empty_144_fu_909_p2}};

assign tmp_87_fu_955_p3 = {{trunc_ln96_3_fu_951_p1}, {2'd0}};

assign tmp_92_cast_fu_923_p1 = tmp_86_fu_915_p3;

assign tmp_s_fu_564_p3 = {{empty_136_reg_1495}, {6'd0}};

assign trunc_ln174_fu_1028_p1 = vec_o_data_M_elems_V_3_fu_1022_p2[2:0];

assign trunc_ln96_3_fu_951_p1 = add_ln96_fu_945_p2[4:0];

assign trunc_ln96_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_3_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_3_fu_1022_p2 = (shl_ln96_3_fu_1016_p2 | and_ln96_fu_1007_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1450 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1537 ^ 1'd1);

assign xor_ln96_fu_1001_p2 = (shl_ln96_fu_995_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_3_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_3_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_4_fu_903_p1 = select_ln87_11_reg_1624;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_906_p1 = select_ln87_reg_1602;

assign zext_ln96_3_fu_935_p1 = shl_ln_fu_928_p3;

assign zext_ln96_6_fu_992_p1 = sub_ln96_3_reg_1645_pp1_iter3_reg;

assign zext_ln96_7_fu_1013_p1 = buffer_V_load_reg_1659;

assign zext_ln96_fu_963_p1 = add_ln96_fu_945_p2;

endmodule //ATTN0_reorder160
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder162 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1446;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1650;
reg   [0:0] and_ln99_reg_1650_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten91_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten51_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_2_fu_432_p2;
reg   [3:0] tt_2_reg_1432;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_2_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1450;
reg   [0:0] icmp_ln73_reg_1450_pp0_iter1_reg;
wire   [8:0] select_ln73_4_fu_468_p3;
wire   [2:0] select_ln72_2_fu_482_p3;
reg   [2:0] select_ln72_2_reg_1463;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1469;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1474;
reg   [2:0] tmp_reg_1479;
reg   [2:0] tmp_reg_1479_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1484;
wire   [6:0] select_ln73_3_fu_545_p3;
reg   [6:0] select_ln73_3_reg_1489;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_126_fu_555_p2;
reg   [3:0] empty_126_reg_1495;
wire   [9:0] add_ln85_2_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_128_fu_604_p2;
reg   [3:0] empty_128_reg_1505;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1511;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1515;
reg   [0:0] icmp_ln86_reg_1515_pp1_iter1_reg;
wire   [3:0] p_mid167_fu_644_p2;
reg   [3:0] p_mid167_reg_1525;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1531;
reg   [0:0] xor_ln85_reg_1531_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1537;
wire   [0:0] and_ln85_4_fu_662_p2;
reg   [0:0] and_ln85_4_reg_1542;
reg   [0:0] and_ln85_4_reg_1542_pp1_iter1_reg;
wire   [1:0] select_ln85_7_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1555;
wire   [5:0] add_ln87_2_fu_682_p2;
reg   [5:0] add_ln87_2_reg_1561;
wire   [9:0] select_ln86_8_fu_694_p3;
wire   [3:0] empty_129_fu_702_p1;
reg   [3:0] empty_129_reg_1571;
wire   [0:0] cmp45129_fu_727_p2;
reg   [0:0] cmp45129_reg_1576;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1581;
wire   [0:0] or_ln86_2_fu_762_p2;
reg   [0:0] or_ln86_2_reg_1586;
wire   [0:0] and_ln86_2_fu_767_p2;
reg   [0:0] and_ln86_2_reg_1591;
wire   [4:0] select_ln86_6_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1602;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1609;
wire   [3:0] select_ln86_7_fu_820_p3;
reg   [3:0] select_ln86_7_reg_1614;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1619;
wire   [2:0] select_ln87_7_fu_833_p3;
reg   [2:0] select_ln87_7_reg_1624;
wire   [1:0] trunc_ln96_fu_841_p1;
reg   [1:0] trunc_ln96_reg_1630;
wire   [5:0] select_ln87_8_fu_845_p3;
wire   [6:0] sub_ln96_2_fu_967_p2;
reg   [6:0] sub_ln96_2_reg_1645;
reg   [6:0] sub_ln96_2_reg_1645_pp1_iter3_reg;
wire   [0:0] and_ln99_fu_978_p2;
wire   [2:0] add_ln88_fu_984_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1659;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_64_cast_fu_923_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_2_fu_1022_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_2_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_4_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_127_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_132_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_2_fu_628_p1;
wire   [9:0] add_ln86_2_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_3_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_2_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_5_fu_722_p3;
wire   [3:0] zext_ln87_2_fu_804_p1;
wire   [3:0] empty_130_fu_710_p2;
wire   [3:0] select_ln85_8_fu_814_p3;
wire   [5:0] tmp_57_fu_851_p3;
wire   [3:0] empty_133_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_6_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_5_fu_880_p3;
wire   [5:0] zext_ln88_fu_906_p1;
wire   [3:0] select_ln87_5_fu_892_p3;
wire   [5:0] empty_134_fu_909_p2;
wire   [9:0] tmp_58_fu_915_p3;
wire   [4:0] shl_ln_fu_928_p3;
wire   [5:0] zext_ln96_2_fu_935_p1;
wire   [5:0] sub_ln96_fu_939_p2;
wire   [5:0] zext_ln87_3_fu_903_p1;
wire   [5:0] add_ln96_fu_945_p2;
wire   [4:0] trunc_ln96_2_fu_951_p1;
wire   [6:0] tmp_59_fu_955_p3;
wire   [6:0] zext_ln96_fu_963_p1;
wire   [0:0] select_ln87_6_fu_897_p3;
wire   [0:0] icmp_ln99_fu_973_p2;
wire   [83:0] zext_ln96_4_fu_992_p1;
wire   [83:0] shl_ln96_fu_995_p2;
wire   [83:0] xor_ln96_fu_1001_p2;
wire   [83:0] zext_ln96_5_fu_1013_p1;
wire   [83:0] and_ln96_fu_1007_p2;
wire   [83:0] shl_ln96_2_fu_1016_p2;
wire   [2:0] tmp_55_fu_1292_p4;
wire   [2:0] tmp_54_fu_1282_p4;
wire   [2:0] tmp_53_fu_1272_p4;
wire   [2:0] tmp_52_fu_1262_p4;
wire   [2:0] tmp_51_fu_1252_p4;
wire   [2:0] tmp_50_fu_1242_p4;
wire   [2:0] tmp_49_fu_1232_p4;
wire   [2:0] tmp_48_fu_1222_p4;
wire   [2:0] tmp_47_fu_1212_p4;
wire   [2:0] tmp_46_fu_1202_p4;
wire   [2:0] tmp_45_fu_1192_p4;
wire   [2:0] tmp_44_fu_1182_p4;
wire   [2:0] tmp_43_fu_1172_p4;
wire   [2:0] tmp_42_fu_1162_p4;
wire   [2:0] tmp_41_fu_1152_p4;
wire   [2:0] tmp_40_fu_1142_p4;
wire   [2:0] tmp_39_fu_1132_p4;
wire   [2:0] tmp_38_fu_1122_p4;
wire   [2:0] tmp_37_fu_1112_p4;
wire   [2:0] tmp_36_fu_1102_p4;
wire   [2:0] tmp_35_fu_1092_p4;
wire   [2:0] tmp_34_fu_1082_p4;
wire   [2:0] tmp_33_fu_1072_p4;
wire   [2:0] tmp_32_fu_1062_p4;
wire   [2:0] tmp_31_fu_1052_p4;
wire   [2:0] tmp_30_fu_1042_p4;
wire   [2:0] tmp_29_fu_1032_p4;
wire   [2:0] trunc_ln174_fu_1028_p1;
wire   [218:0] tmp_56_fu_1302_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1479_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_3_reg_1489;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        cot_reg_399 <= select_ln86_6_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_2_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_8_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten51_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten51_reg_377 <= select_ln86_8_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten91_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten91_reg_355 <= add_ln85_2_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_4_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1484;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_7_reg_1624;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_2_reg_1463;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_7_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_2_reg_1432;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1484 <= add_ln74_fu_519_p2;
        select_ln72_2_reg_1463 <= select_ln72_2_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        add_ln86_reg_1581 <= add_ln86_fu_744_p2;
        and_ln86_2_reg_1591 <= and_ln86_2_fu_767_p2;
        cmp45129_reg_1576 <= cmp45129_fu_727_p2;
        cmp45_mid1_reg_1619 <= cmp45_mid1_fu_827_p2;
        or_ln86_2_reg_1586 <= or_ln86_2_fu_762_p2;
        p_mid122_reg_1609 <= p_mid122_fu_808_p2;
        select_ln86_7_reg_1614 <= select_ln86_7_fu_820_p3;
        select_ln87_reg_1602 <= select_ln87_fu_796_p3;
        trunc_ln96_reg_1630 <= trunc_ln96_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_2_reg_1561 <= add_ln87_2_fu_682_p2;
        and_ln85_4_reg_1542 <= and_ln85_4_fu_662_p2;
        icmp_ln86_reg_1515 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1537 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1555 <= or_ln86_fu_676_p2;
        p_mid167_reg_1525 <= p_mid167_fu_644_p2;
        xor_ln85_reg_1531 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1469 <= and_ln72_fu_500_p2;
        select_ln73_reg_1474 <= select_ln73_fu_511_p3;
        tmp_reg_1479 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_4_reg_1542_pp1_iter1_reg <= and_ln85_4_reg_1542;
        empty_128_reg_1505 <= empty_128_fu_604_p2;
        icmp_ln85_reg_1511 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1511_pp1_iter1_reg <= icmp_ln85_reg_1511;
        icmp_ln86_reg_1515_pp1_iter1_reg <= icmp_ln86_reg_1515;
        xor_ln85_reg_1531_pp1_iter1_reg <= xor_ln85_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1650 <= and_ln99_fu_978_p2;
        sub_ln96_2_reg_1645 <= sub_ln96_2_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1650_pp1_iter3_reg <= and_ln99_reg_1650;
        icmp_ln85_reg_1511_pp1_iter2_reg <= icmp_ln85_reg_1511_pp1_iter1_reg;
        icmp_ln85_reg_1511_pp1_iter3_reg <= icmp_ln85_reg_1511_pp1_iter2_reg;
        sub_ln96_2_reg_1645_pp1_iter3_reg <= sub_ln96_2_reg_1645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1659 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        empty_126_reg_1495 <= empty_126_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_4_reg_1542) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1515 == 1'd0))) begin
        empty_129_reg_1571 <= empty_129_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1446 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1446_pp0_iter1_reg <= icmp_ln72_reg_1446;
        icmp_ln73_reg_1450_pp0_iter1_reg <= icmp_ln73_reg_1450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1446_pp0_iter2_reg <= icmp_ln72_reg_1446_pp0_iter1_reg;
        tmp_reg_1479_pp0_iter2_reg <= tmp_reg_1479;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1450 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        select_ln73_3_reg_1489 <= select_ln73_3_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        select_ln87_7_reg_1624 <= select_ln87_7_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_2_reg_1432 <= tt_2_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_2_fu_1022_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_3_reg_1489;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_984_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_8_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1484;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_7_reg_1624;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_2_reg_1463;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_2_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_2_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_4_cast_fu_561_p1);

assign add_ln85_2_fu_582_p2 = (indvar_flatten91_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_2_fu_688_p2 = (indvar_flatten51_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_2_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_984_p2 = (select_ln87_reg_1602 + 3'd1);

assign add_ln96_fu_945_p2 = (sub_ln96_fu_939_p2 + zext_ln87_3_fu_903_p1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_3_fu_739_p2 = (xor_ln85_reg_1531 & icmp_ln88_fu_733_p2);

assign and_ln85_4_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1531_pp1_iter1_reg & cmp45129_reg_1576);

assign and_ln86_2_fu_767_p2 = (or_ln86_2_fu_762_p2 & and_ln85_3_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_2_reg_1586 & and_ln85_fu_865_p2);

assign and_ln96_fu_1007_p2 = (xor_ln96_fu_1001_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_978_p2 = (select_ln87_6_fu_897_p3 & icmp_ln99_fu_973_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1446 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_64_cast_fu_923_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45129_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_126_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_127_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_128_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_129_fu_702_p1 = cot_reg_399[3:0];

assign empty_130_fu_710_p2 = (empty_128_reg_1505 + zext_ln87_fu_706_p1);

assign empty_132_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_133_fu_869_p1 = add_ln86_reg_1581[3:0];

assign empty_134_fu_909_p2 = (select_ln86_5_fu_880_p3 + zext_ln88_fu_906_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten91_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten51_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_973_p2 = ((select_ln87_reg_1602 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_56_fu_1302_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1450 | and_ln72_fu_500_p2);

assign or_ln86_2_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1515);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_4_fu_662_p2);

assign or_ln87_2_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1515);

assign or_ln87_fu_786_p2 = (and_ln86_2_fu_767_p2 | and_ln85_4_reg_1542);

assign p_mid122_fu_808_p2 = (select_ln85_5_fu_722_p3 + zext_ln87_2_fu_804_p1);

assign p_mid167_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_2_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_2_reg_1463}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_133_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_127_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_132_fu_632_p1}, {3'd0}};

assign select_ln72_2_fu_482_p3 = ((icmp_ln73_reg_1450[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1450_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_3_fu_545_p3 = ((and_ln72_reg_1469[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_4_cast_fu_561_p1 = select_ln73_3_reg_1489;

assign select_ln73_4_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_2_fu_462_p2);

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_5_fu_722_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_128_reg_1505);

assign select_ln85_6_fu_858_p3 = ((icmp_ln86_reg_1515_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_57_fu_851_p3);

assign select_ln85_7_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_8_fu_814_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_130_fu_710_p2);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_5_fu_880_p3 = ((and_ln85_4_reg_1542_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_6_fu_858_p3);

assign select_ln86_6_fu_773_p3 = ((and_ln85_4_reg_1542[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_7_fu_820_p3 = ((and_ln85_4_reg_1542[0:0] == 1'b1) ? select_ln85_5_fu_722_p3 : select_ln85_8_fu_814_p3);

assign select_ln86_8_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_2_fu_688_p2);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_5_fu_892_p3 = ((and_ln86_2_reg_1591[0:0] == 1'b1) ? p_mid122_reg_1609 : select_ln86_7_reg_1614);

assign select_ln87_6_fu_897_p3 = ((and_ln86_2_reg_1591[0:0] == 1'b1) ? cmp45_mid1_reg_1619 : and_ln86_fu_887_p2);

assign select_ln87_7_fu_833_p3 = ((and_ln86_2_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_8_fu_845_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 6'd1 : add_ln87_2_reg_1561);

assign select_ln87_fu_796_p3 = ((or_ln87_2_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln96_2_fu_1016_p2 = zext_ln96_5_fu_1013_p1 << zext_ln96_4_fu_992_p1;

assign shl_ln96_fu_995_p2 = 84'd7 << zext_ln96_4_fu_992_p1;

assign shl_ln_fu_928_p3 = {{trunc_ln96_reg_1630}, {3'd0}};

assign sub_ln96_2_fu_967_p2 = (tmp_59_fu_955_p3 - zext_ln96_fu_963_p1);

assign sub_ln96_fu_939_p2 = (zext_ln96_2_fu_935_p1 - zext_ln88_fu_906_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1474;

assign tmp_29_fu_1032_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[5:3]}};

assign tmp_30_fu_1042_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[8:6]}};

assign tmp_31_fu_1052_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[11:9]}};

assign tmp_32_fu_1062_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[14:12]}};

assign tmp_33_fu_1072_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[17:15]}};

assign tmp_34_fu_1082_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[20:18]}};

assign tmp_35_fu_1092_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[23:21]}};

assign tmp_36_fu_1102_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[26:24]}};

assign tmp_37_fu_1112_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[29:27]}};

assign tmp_38_fu_1122_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[32:30]}};

assign tmp_39_fu_1132_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[35:33]}};

assign tmp_40_fu_1142_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[38:36]}};

assign tmp_41_fu_1152_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[41:39]}};

assign tmp_42_fu_1162_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[44:42]}};

assign tmp_43_fu_1172_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[47:45]}};

assign tmp_44_fu_1182_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[50:48]}};

assign tmp_45_fu_1192_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[53:51]}};

assign tmp_46_fu_1202_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[56:54]}};

assign tmp_47_fu_1212_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[59:57]}};

assign tmp_48_fu_1222_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[62:60]}};

assign tmp_49_fu_1232_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[65:63]}};

assign tmp_50_fu_1242_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[68:66]}};

assign tmp_51_fu_1252_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[71:69]}};

assign tmp_52_fu_1262_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[74:72]}};

assign tmp_53_fu_1272_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[77:75]}};

assign tmp_54_fu_1282_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[80:78]}};

assign tmp_55_fu_1292_p4 = {{vec_o_data_M_elems_V_2_fu_1022_p2[83:81]}};

assign tmp_56_fu_1302_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_55_fu_1292_p4}, {5'd0}}, {tmp_54_fu_1282_p4}}, {5'd0}}, {tmp_53_fu_1272_p4}}, {5'd0}}, {tmp_52_fu_1262_p4}}, {5'd0}}, {tmp_51_fu_1252_p4}}, {5'd0}}, {tmp_50_fu_1242_p4}}, {5'd0}}, {tmp_49_fu_1232_p4}}, {5'd0}}, {tmp_48_fu_1222_p4}}, {5'd0}}, {tmp_47_fu_1212_p4}}, {5'd0}}, {tmp_46_fu_1202_p4}}, {5'd0}}, {tmp_45_fu_1192_p4}}, {5'd0}}, {tmp_44_fu_1182_p4}}, {5'd0}}, {tmp_43_fu_1172_p4}}, {5'd0}}, {tmp_42_fu_1162_p4}}, {5'd0}}, {tmp_41_fu_1152_p4}}, {5'd0}}, {tmp_40_fu_1142_p4}}, {5'd0}}, {tmp_39_fu_1132_p4}}, {5'd0}}, {tmp_38_fu_1122_p4}}, {5'd0}}, {tmp_37_fu_1112_p4}}, {5'd0}}, {tmp_36_fu_1102_p4}}, {5'd0}}, {tmp_35_fu_1092_p4}}, {5'd0}}, {tmp_34_fu_1082_p4}}, {5'd0}}, {tmp_33_fu_1072_p4}}, {5'd0}}, {tmp_32_fu_1062_p4}}, {5'd0}}, {tmp_31_fu_1052_p4}}, {5'd0}}, {tmp_30_fu_1042_p4}}, {5'd0}}, {tmp_29_fu_1032_p4}}, {5'd0}}, {trunc_ln174_fu_1028_p1}};

assign tmp_57_fu_851_p3 = {{empty_129_reg_1571}, {2'd0}};

assign tmp_58_fu_915_p3 = {{select_ln87_5_fu_892_p3}, {empty_134_fu_909_p2}};

assign tmp_59_fu_955_p3 = {{trunc_ln96_2_fu_951_p1}, {2'd0}};

assign tmp_64_cast_fu_923_p1 = tmp_58_fu_915_p3;

assign tmp_s_fu_564_p3 = {{empty_126_reg_1495}, {6'd0}};

assign trunc_ln174_fu_1028_p1 = vec_o_data_M_elems_V_2_fu_1022_p2[2:0];

assign trunc_ln96_2_fu_951_p1 = add_ln96_fu_945_p2[4:0];

assign trunc_ln96_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_2_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_2_fu_1022_p2 = (shl_ln96_2_fu_1016_p2 | and_ln96_fu_1007_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1450 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1537 ^ 1'd1);

assign xor_ln96_fu_1001_p2 = (shl_ln96_fu_995_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_2_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_2_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_3_fu_903_p1 = select_ln87_7_reg_1624;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_906_p1 = select_ln87_reg_1602;

assign zext_ln96_2_fu_935_p1 = shl_ln_fu_928_p3;

assign zext_ln96_4_fu_992_p1 = sub_ln96_2_reg_1645_pp1_iter3_reg;

assign zext_ln96_5_fu_1013_p1 = buffer_V_load_reg_1659;

assign zext_ln96_fu_963_p1 = add_ln96_fu_945_p2;

endmodule //ATTN0_reorder162
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_reorder164 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        unpacked_stream1_dout,
        unpacked_stream1_empty_n,
        unpacked_stream1_read,
        kq_sm_reshape_head1_din,
        kq_sm_reshape_head1_full_n,
        kq_sm_reshape_head1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state7 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] unpacked_stream1_dout;
input   unpacked_stream1_empty_n;
output   unpacked_stream1_read;
output  [223:0] kq_sm_reshape_head1_din;
input   kq_sm_reshape_head1_full_n;
output   kq_sm_reshape_head1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg unpacked_stream1_read;
reg kq_sm_reshape_head1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    unpacked_stream1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln72_reg_1446;
reg    kq_sm_reshape_head1_blk_n;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] and_ln99_reg_1650;
reg   [0:0] and_ln99_reg_1650_pp1_iter3_reg;
reg   [9:0] indvar_flatten13_reg_297;
reg   [2:0] tp_tip_reg_308;
reg   [8:0] indvar_flatten_reg_320;
reg   [6:0] cit_reg_331;
reg   [1:0] tip_reg_343;
reg   [9:0] indvar_flatten91_reg_355;
reg   [1:0] tp_ATTN0_reg_366;
reg   [9:0] indvar_flatten51_reg_377;
reg   [5:0] indvar_flatten24_reg_388;
reg   [4:0] cot_reg_399;
reg   [2:0] ATTN0_1_reg_410;
reg   [2:0] cop_reg_421;
wire   [3:0] tt_1_fu_432_p2;
reg   [3:0] tt_1_reg_1432;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_438_p2;
wire   [9:0] add_ln72_1_fu_444_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln72_fu_450_p2;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1446_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_456_p2;
reg   [0:0] icmp_ln73_reg_1450;
reg   [0:0] icmp_ln73_reg_1450_pp0_iter1_reg;
wire   [8:0] select_ln73_2_fu_468_p3;
wire   [2:0] select_ln72_1_fu_482_p3;
reg   [2:0] select_ln72_1_reg_1463;
wire   [0:0] and_ln72_fu_500_p2;
reg   [0:0] and_ln72_reg_1469;
wire   [1:0] select_ln73_fu_511_p3;
reg   [1:0] select_ln73_reg_1474;
reg   [2:0] tmp_reg_1479;
reg   [2:0] tmp_reg_1479_pp0_iter2_reg;
wire   [1:0] add_ln74_fu_519_p2;
reg   [1:0] add_ln74_reg_1484;
wire   [6:0] select_ln73_1_fu_545_p3;
reg   [6:0] select_ln73_1_reg_1489;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] empty_116_fu_555_p2;
reg   [3:0] empty_116_reg_1495;
wire   [9:0] add_ln85_1_fu_582_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
reg    ap_block_state12_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] empty_118_fu_604_p2;
reg   [3:0] empty_118_reg_1505;
wire   [0:0] icmp_ln85_fu_610_p2;
reg   [0:0] icmp_ln85_reg_1511;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter1_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter2_reg;
reg   [0:0] icmp_ln85_reg_1511_pp1_iter3_reg;
wire   [0:0] icmp_ln86_fu_622_p2;
reg   [0:0] icmp_ln86_reg_1515;
reg   [0:0] icmp_ln86_reg_1515_pp1_iter1_reg;
wire   [3:0] p_mid167_fu_644_p2;
reg   [3:0] p_mid167_reg_1525;
wire   [0:0] xor_ln85_fu_650_p2;
reg   [0:0] xor_ln85_reg_1531;
reg   [0:0] xor_ln85_reg_1531_pp1_iter1_reg;
wire   [0:0] icmp_ln87_fu_656_p2;
reg   [0:0] icmp_ln87_reg_1537;
wire   [0:0] and_ln85_2_fu_662_p2;
reg   [0:0] and_ln85_2_reg_1542;
reg   [0:0] and_ln85_2_reg_1542_pp1_iter1_reg;
wire   [1:0] select_ln85_3_fu_668_p3;
wire   [0:0] or_ln86_fu_676_p2;
reg   [0:0] or_ln86_reg_1555;
wire   [5:0] add_ln87_1_fu_682_p2;
reg   [5:0] add_ln87_1_reg_1561;
wire   [9:0] select_ln86_4_fu_694_p3;
wire   [3:0] empty_119_fu_702_p1;
reg   [3:0] empty_119_reg_1571;
wire   [0:0] cmp45129_fu_727_p2;
reg   [0:0] cmp45129_reg_1576;
wire   [4:0] add_ln86_fu_744_p2;
reg   [4:0] add_ln86_reg_1581;
wire   [0:0] or_ln86_1_fu_762_p2;
reg   [0:0] or_ln86_1_reg_1586;
wire   [0:0] and_ln86_1_fu_767_p2;
reg   [0:0] and_ln86_1_reg_1591;
wire   [4:0] select_ln86_2_fu_773_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] select_ln87_fu_796_p3;
reg   [2:0] select_ln87_reg_1602;
wire   [3:0] p_mid122_fu_808_p2;
reg   [3:0] p_mid122_reg_1609;
wire   [3:0] select_ln86_3_fu_820_p3;
reg   [3:0] select_ln86_3_reg_1614;
wire   [0:0] cmp45_mid1_fu_827_p2;
reg   [0:0] cmp45_mid1_reg_1619;
wire   [2:0] select_ln87_3_fu_833_p3;
reg   [2:0] select_ln87_3_reg_1624;
wire   [1:0] trunc_ln96_fu_841_p1;
reg   [1:0] trunc_ln96_reg_1630;
wire   [5:0] select_ln87_4_fu_845_p3;
wire   [6:0] sub_ln96_1_fu_967_p2;
reg   [6:0] sub_ln96_1_reg_1645;
reg   [6:0] sub_ln96_1_reg_1645_pp1_iter3_reg;
wire   [0:0] and_ln99_fu_978_p2;
wire   [2:0] add_ln88_fu_984_p2;
reg    ap_enable_reg_pp1_iter2;
wire   [2:0] buffer_V_q0;
reg   [2:0] buffer_V_load_reg_1659;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter2_state10;
wire   [9:0] buffer_V_address0;
reg    buffer_V_ce0;
wire   [9:0] buffer_V_address1;
reg    buffer_V_ce1;
reg    buffer_V_we1;
reg   [3:0] tt_reg_286;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
reg   [2:0] ap_phi_mux_tp_tip_phi_fu_312_p4;
reg   [6:0] ap_phi_mux_cit_phi_fu_335_p4;
reg   [1:0] ap_phi_mux_tip_phi_fu_347_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_392_p4;
reg   [2:0] ap_phi_mux_ATTN0_1_phi_fu_414_p4;
reg   [2:0] ap_phi_mux_cop_phi_fu_425_p4;
wire   [63:0] zext_ln78_fu_577_p1;
wire   [63:0] tmp_36_cast_fu_923_p1;
reg   [83:0] vec_o_data_M_elems_V_fu_242;
wire   [83:0] vec_o_data_M_elems_V_1_fu_1022_p2;
reg    ap_block_pp1_stage0_01001;
wire   [8:0] add_ln73_1_fu_462_p2;
wire   [2:0] add_ln72_fu_476_p2;
wire   [0:0] icmp_ln74_fu_494_p2;
wire   [0:0] xor_ln72_fu_489_p2;
wire   [0:0] or_ln73_fu_506_p2;
wire   [6:0] select_ln72_fu_525_p3;
wire   [6:0] add_ln73_fu_539_p2;
wire   [3:0] p_mid2_fu_532_p3;
wire   [3:0] tip_cast_fu_552_p1;
wire   [9:0] tmp_s_fu_564_p3;
wire   [9:0] select_ln73_1_cast_fu_561_p1;
wire   [9:0] add_ln78_fu_571_p2;
wire   [0:0] empty_117_fu_592_p1;
wire   [3:0] p_shl_fu_596_p3;
wire   [3:0] zext_ln85_fu_588_p1;
wire   [1:0] add_ln85_fu_616_p2;
wire   [0:0] empty_122_fu_632_p1;
wire   [3:0] p_shl_mid1_fu_636_p3;
wire   [3:0] zext_ln85_1_fu_628_p1;
wire   [9:0] add_ln86_1_fu_688_p2;
wire   [3:0] zext_ln87_fu_706_p1;
wire   [0:0] icmp_ln88_fu_733_p2;
wire   [4:0] select_ln85_fu_715_p3;
wire   [0:0] xor_ln86_fu_757_p2;
wire   [0:0] and_ln85_1_fu_739_p2;
wire   [2:0] select_ln86_fu_750_p3;
wire   [0:0] or_ln87_fu_786_p2;
wire   [0:0] or_ln87_1_fu_791_p2;
wire   [2:0] add_ln87_fu_780_p2;
wire   [3:0] select_ln85_1_fu_722_p3;
wire   [3:0] zext_ln87_1_fu_804_p1;
wire   [3:0] empty_120_fu_710_p2;
wire   [3:0] select_ln85_4_fu_814_p3;
wire   [5:0] tmp_29_fu_851_p3;
wire   [3:0] empty_123_fu_869_p1;
wire   [5:0] p_mid_fu_872_p3;
wire   [5:0] select_ln85_2_fu_858_p3;
wire   [0:0] and_ln85_fu_865_p2;
wire   [0:0] and_ln86_fu_887_p2;
wire   [5:0] select_ln86_1_fu_880_p3;
wire   [5:0] zext_ln88_fu_906_p1;
wire   [3:0] select_ln87_1_fu_892_p3;
wire   [5:0] empty_124_fu_909_p2;
wire   [9:0] tmp_30_fu_915_p3;
wire   [4:0] shl_ln_fu_928_p3;
wire   [5:0] zext_ln96_fu_935_p1;
wire   [5:0] sub_ln96_fu_939_p2;
wire   [5:0] zext_ln87_2_fu_903_p1;
wire   [5:0] add_ln96_fu_945_p2;
wire   [4:0] trunc_ln96_1_fu_951_p1;
wire   [6:0] tmp_31_fu_955_p3;
wire   [6:0] zext_ln96_1_fu_963_p1;
wire   [0:0] select_ln87_2_fu_897_p3;
wire   [0:0] icmp_ln99_fu_973_p2;
wire   [83:0] zext_ln96_2_fu_992_p1;
wire   [83:0] shl_ln96_fu_995_p2;
wire   [83:0] xor_ln96_fu_1001_p2;
wire   [83:0] zext_ln96_3_fu_1013_p1;
wire   [83:0] and_ln96_fu_1007_p2;
wire   [83:0] shl_ln96_1_fu_1016_p2;
wire   [2:0] tmp_27_fu_1292_p4;
wire   [2:0] tmp_26_fu_1282_p4;
wire   [2:0] tmp_25_fu_1272_p4;
wire   [2:0] tmp_24_fu_1262_p4;
wire   [2:0] tmp_23_fu_1252_p4;
wire   [2:0] tmp_22_fu_1242_p4;
wire   [2:0] tmp_21_fu_1232_p4;
wire   [2:0] tmp_20_fu_1222_p4;
wire   [2:0] tmp_19_fu_1212_p4;
wire   [2:0] tmp_18_fu_1202_p4;
wire   [2:0] tmp_17_fu_1192_p4;
wire   [2:0] tmp_16_fu_1182_p4;
wire   [2:0] tmp_15_fu_1172_p4;
wire   [2:0] tmp_14_fu_1162_p4;
wire   [2:0] tmp_13_fu_1152_p4;
wire   [2:0] tmp_12_fu_1142_p4;
wire   [2:0] tmp_11_fu_1132_p4;
wire   [2:0] tmp_10_fu_1122_p4;
wire   [2:0] tmp_1_fu_1112_p4;
wire   [2:0] tmp_9_fu_1102_p4;
wire   [2:0] tmp_8_fu_1092_p4;
wire   [2:0] tmp_7_fu_1082_p4;
wire   [2:0] tmp_6_fu_1072_p4;
wire   [2:0] tmp_5_fu_1062_p4;
wire   [2:0] tmp_4_fu_1052_p4;
wire   [2:0] tmp_3_fu_1042_p4;
wire   [2:0] tmp_2_fu_1032_p4;
wire   [2:0] trunc_ln174_fu_1028_p1;
wire   [218:0] tmp_28_fu_1302_p56;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 6'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter0 = 1'b0;
//#0 ap_enable_reg_pp1_iter1 = 1'b0;
//#0 ap_enable_reg_pp1_iter2 = 1'b0;
//#0 ap_enable_reg_pp1_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ATTN0_reorder144_buffer_V #(
    .DataWidth( 3 ),
    .AddressRange( 896 ),
    .AddressWidth( 10 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .q0(buffer_V_q0),
    .address1(buffer_V_address1),
    .ce1(buffer_V_ce1),
    .we1(buffer_V_we1),
    .d1(tmp_reg_1479_pp0_iter2_reg)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter2_state10)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        cit_reg_331 <= select_ln73_1_reg_1489;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cit_reg_331 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cop_reg_421 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        cop_reg_421 <= add_ln88_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cot_reg_399 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        cot_reg_399 <= select_ln86_2_fu_773_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten13_reg_297 <= add_ln72_1_fu_444_p2;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten13_reg_297 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten24_reg_388 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        indvar_flatten24_reg_388 <= select_ln87_4_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten51_reg_377 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten51_reg_377 <= select_ln86_4_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten91_reg_355 <= 10'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten91_reg_355 <= add_ln85_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_320 <= select_ln73_2_fu_468_p3;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_320 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tip_reg_343 <= add_ln74_reg_1484;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tip_reg_343 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ATTN0_1_reg_410 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ATTN0_1_reg_410 <= select_ln87_3_reg_1624;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        tp_tip_reg_308 <= select_ln72_1_reg_1463;
    end else if (((icmp_ln69_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tp_tip_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tp_ATTN0_reg_366 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tp_ATTN0_reg_366 <= select_ln85_3_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tt_reg_286 <= tt_1_reg_1432;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tt_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_reg_1484 <= add_ln74_fu_519_p2;
        select_ln72_1_reg_1463 <= select_ln72_1_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        add_ln86_reg_1581 <= add_ln86_fu_744_p2;
        and_ln86_1_reg_1591 <= and_ln86_1_fu_767_p2;
        cmp45129_reg_1576 <= cmp45129_fu_727_p2;
        cmp45_mid1_reg_1619 <= cmp45_mid1_fu_827_p2;
        or_ln86_1_reg_1586 <= or_ln86_1_fu_762_p2;
        p_mid122_reg_1609 <= p_mid122_fu_808_p2;
        select_ln86_3_reg_1614 <= select_ln86_3_fu_820_p3;
        select_ln87_reg_1602 <= select_ln87_fu_796_p3;
        trunc_ln96_reg_1630 <= trunc_ln96_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd0))) begin
        add_ln87_1_reg_1561 <= add_ln87_1_fu_682_p2;
        and_ln85_2_reg_1542 <= and_ln85_2_fu_662_p2;
        icmp_ln86_reg_1515 <= icmp_ln86_fu_622_p2;
        icmp_ln87_reg_1537 <= icmp_ln87_fu_656_p2;
        or_ln86_reg_1555 <= or_ln86_fu_676_p2;
        p_mid167_reg_1525 <= p_mid167_fu_644_p2;
        xor_ln85_reg_1531 <= xor_ln85_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln72_reg_1469 <= and_ln72_fu_500_p2;
        select_ln73_reg_1474 <= select_ln73_fu_511_p3;
        tmp_reg_1479 <= unpacked_stream1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln85_2_reg_1542_pp1_iter1_reg <= and_ln85_2_reg_1542;
        empty_118_reg_1505 <= empty_118_fu_604_p2;
        icmp_ln85_reg_1511 <= icmp_ln85_fu_610_p2;
        icmp_ln85_reg_1511_pp1_iter1_reg <= icmp_ln85_reg_1511;
        icmp_ln86_reg_1515_pp1_iter1_reg <= icmp_ln86_reg_1515;
        xor_ln85_reg_1531_pp1_iter1_reg <= xor_ln85_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        and_ln99_reg_1650 <= and_ln99_fu_978_p2;
        sub_ln96_1_reg_1645 <= sub_ln96_1_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        and_ln99_reg_1650_pp1_iter3_reg <= and_ln99_reg_1650;
        icmp_ln85_reg_1511_pp1_iter2_reg <= icmp_ln85_reg_1511_pp1_iter1_reg;
        icmp_ln85_reg_1511_pp1_iter3_reg <= icmp_ln85_reg_1511_pp1_iter2_reg;
        sub_ln96_1_reg_1645_pp1_iter3_reg <= sub_ln96_1_reg_1645;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter2_reg == 1'd0))) begin
        buffer_V_load_reg_1659 <= buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        empty_116_reg_1495 <= empty_116_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln85_2_reg_1542) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln86_reg_1515 == 1'd0))) begin
        empty_119_reg_1571 <= empty_119_fu_702_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_reg_1446 <= icmp_ln72_fu_450_p2;
        icmp_ln72_reg_1446_pp0_iter1_reg <= icmp_ln72_reg_1446;
        icmp_ln73_reg_1450_pp0_iter1_reg <= icmp_ln73_reg_1450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln72_reg_1446_pp0_iter2_reg <= icmp_ln72_reg_1446_pp0_iter1_reg;
        tmp_reg_1479_pp0_iter2_reg <= tmp_reg_1479;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln72_fu_450_p2 == 1'd0))) begin
        icmp_ln73_reg_1450 <= icmp_ln73_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        select_ln73_1_reg_1489 <= select_ln73_1_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        select_ln87_3_reg_1624 <= select_ln87_3_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tt_1_reg_1432 <= tt_1_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln85_reg_1511_pp1_iter3_reg == 1'd0))) begin
        vec_o_data_M_elems_V_fu_242 <= vec_o_data_M_elems_V_1_fu_1022_p2;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_condition_pp1_exit_iter2_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter2_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_fu_610_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_cit_phi_fu_335_p4 = select_ln73_1_reg_1489;
    end else begin
        ap_phi_mux_cit_phi_fu_335_p4 = cit_reg_331;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_cop_phi_fu_425_p4 = add_ln88_fu_984_p2;
    end else begin
        ap_phi_mux_cop_phi_fu_425_p4 = cop_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln85_reg_1511 == 1'd0))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = select_ln87_4_fu_845_p3;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_392_p4 = indvar_flatten24_reg_388;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tip_phi_fu_347_p4 = add_ln74_reg_1484;
    end else begin
        ap_phi_mux_tip_phi_fu_347_p4 = tip_reg_343;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln85_reg_1511_pp1_iter1_reg == 1'd0))) begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = select_ln87_3_reg_1624;
    end else begin
        ap_phi_mux_ATTN0_1_phi_fu_414_p4 = ATTN0_1_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = select_ln72_1_reg_1463;
    end else begin
        ap_phi_mux_tp_tip_phi_fu_312_p4 = tp_tip_reg_308;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_V_ce1 = 1'b1;
    end else begin
        buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1446_pp0_iter2_reg == 1'd0))) begin
        buffer_V_we1 = 1'b1;
    end else begin
        buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        kq_sm_reshape_head1_blk_n = kq_sm_reshape_head1_full_n;
    end else begin
        kq_sm_reshape_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        kq_sm_reshape_head1_write = 1'b1;
    end else begin
        kq_sm_reshape_head1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_empty_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_1446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        unpacked_stream1_read = 1'b1;
    end else begin
        unpacked_stream1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln69_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln72_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_1_fu_444_p2 = (indvar_flatten13_reg_297 + 10'd1);

assign add_ln72_fu_476_p2 = (ap_phi_mux_tp_tip_phi_fu_312_p4 + 3'd1);

assign add_ln73_1_fu_462_p2 = (indvar_flatten_reg_320 + 9'd1);

assign add_ln73_fu_539_p2 = (select_ln72_fu_525_p3 + 7'd1);

assign add_ln74_fu_519_p2 = (select_ln73_fu_511_p3 + 2'd1);

assign add_ln78_fu_571_p2 = (tmp_s_fu_564_p3 + select_ln73_1_cast_fu_561_p1);

assign add_ln85_1_fu_582_p2 = (indvar_flatten91_reg_355 + 10'd1);

assign add_ln85_fu_616_p2 = (tp_ATTN0_reg_366 + 2'd1);

assign add_ln86_1_fu_688_p2 = (indvar_flatten51_reg_377 + 10'd1);

assign add_ln86_fu_744_p2 = (select_ln85_fu_715_p3 + 5'd1);

assign add_ln87_1_fu_682_p2 = (ap_phi_mux_indvar_flatten24_phi_fu_392_p4 + 6'd1);

assign add_ln87_fu_780_p2 = (select_ln86_fu_750_p3 + 3'd1);

assign add_ln88_fu_984_p2 = (select_ln87_reg_1602 + 3'd1);

assign add_ln96_fu_945_p2 = (sub_ln96_fu_939_p2 + zext_ln87_2_fu_903_p1);

assign and_ln72_fu_500_p2 = (xor_ln72_fu_489_p2 & icmp_ln74_fu_494_p2);

assign and_ln85_1_fu_739_p2 = (xor_ln85_reg_1531 & icmp_ln88_fu_733_p2);

assign and_ln85_2_fu_662_p2 = (xor_ln85_fu_650_p2 & icmp_ln87_fu_656_p2);

assign and_ln85_fu_865_p2 = (xor_ln85_reg_1531_pp1_iter1_reg & cmp45129_reg_1576);

assign and_ln86_1_fu_767_p2 = (or_ln86_1_fu_762_p2 & and_ln85_1_fu_739_p2);

assign and_ln86_fu_887_p2 = (or_ln86_1_reg_1586 & and_ln85_fu_865_p2);

assign and_ln96_fu_1007_p2 = (xor_ln96_fu_1001_p2 & vec_o_data_M_elems_V_fu_242);

assign and_ln99_fu_978_p2 = (select_ln87_2_fu_897_p3 & icmp_ln99_fu_973_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln72_reg_1446 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (ap_enable_reg_pp1_iter4 == 1'b1) & (kq_sm_reshape_head1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter4 = ((1'd1 == and_ln99_reg_1650_pp1_iter3_reg) & (kq_sm_reshape_head1_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln72_reg_1446 == 1'd0) & (unpacked_stream1_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_V_address0 = tmp_36_cast_fu_923_p1;

assign buffer_V_address1 = zext_ln78_fu_577_p1;

assign cmp45129_fu_727_p2 = ((ap_phi_mux_ATTN0_1_phi_fu_414_p4 == 3'd6) ? 1'b1 : 1'b0);

assign cmp45_mid1_fu_827_p2 = ((add_ln87_fu_780_p2 == 3'd6) ? 1'b1 : 1'b0);

assign empty_116_fu_555_p2 = (p_mid2_fu_532_p3 + tip_cast_fu_552_p1);

assign empty_117_fu_592_p1 = tp_ATTN0_reg_366[0:0];

assign empty_118_fu_604_p2 = (p_shl_fu_596_p3 - zext_ln85_fu_588_p1);

assign empty_119_fu_702_p1 = cot_reg_399[3:0];

assign empty_120_fu_710_p2 = (empty_118_reg_1505 + zext_ln87_fu_706_p1);

assign empty_122_fu_632_p1 = add_ln85_fu_616_p2[0:0];

assign empty_123_fu_869_p1 = add_ln86_reg_1581[3:0];

assign empty_124_fu_909_p2 = (select_ln86_1_fu_880_p3 + zext_ln88_fu_906_p1);

assign icmp_ln69_fu_438_p2 = ((tt_reg_286 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_450_p2 = ((indvar_flatten13_reg_297 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_456_p2 = ((indvar_flatten_reg_320 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_494_p2 = ((ap_phi_mux_tip_phi_fu_347_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_610_p2 = ((indvar_flatten91_reg_355 == 10'd896) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_622_p2 = ((indvar_flatten51_reg_377 == 10'd448) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_656_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_392_p4 == 6'd28) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_733_p2 = ((ap_phi_mux_cop_phi_fu_425_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_973_p2 = ((select_ln87_reg_1602 == 3'd3) ? 1'b1 : 1'b0);

assign kq_sm_reshape_head1_din = tmp_28_fu_1302_p56;

assign or_ln73_fu_506_p2 = (icmp_ln73_reg_1450 | and_ln72_fu_500_p2);

assign or_ln86_1_fu_762_p2 = (xor_ln86_fu_757_p2 | icmp_ln86_reg_1515);

assign or_ln86_fu_676_p2 = (icmp_ln86_fu_622_p2 | and_ln85_2_fu_662_p2);

assign or_ln87_1_fu_791_p2 = (or_ln87_fu_786_p2 | icmp_ln86_reg_1515);

assign or_ln87_fu_786_p2 = (and_ln86_1_fu_767_p2 | and_ln85_2_reg_1542);

assign p_mid122_fu_808_p2 = (select_ln85_1_fu_722_p3 + zext_ln87_1_fu_804_p1);

assign p_mid167_fu_644_p2 = (p_shl_mid1_fu_636_p3 - zext_ln85_1_fu_628_p1);

assign p_mid2_fu_532_p3 = {{select_ln72_1_reg_1463}, {1'd0}};

assign p_mid_fu_872_p3 = {{empty_123_fu_869_p1}, {2'd0}};

assign p_shl_fu_596_p3 = {{empty_117_fu_592_p1}, {3'd0}};

assign p_shl_mid1_fu_636_p3 = {{empty_122_fu_632_p1}, {3'd0}};

assign select_ln72_1_fu_482_p3 = ((icmp_ln73_reg_1450[0:0] == 1'b1) ? add_ln72_fu_476_p2 : ap_phi_mux_tp_tip_phi_fu_312_p4);

assign select_ln72_fu_525_p3 = ((icmp_ln73_reg_1450_pp0_iter1_reg[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_cit_phi_fu_335_p4);

assign select_ln73_1_cast_fu_561_p1 = select_ln73_1_reg_1489;

assign select_ln73_1_fu_545_p3 = ((and_ln72_reg_1469[0:0] == 1'b1) ? add_ln73_fu_539_p2 : select_ln72_fu_525_p3);

assign select_ln73_2_fu_468_p3 = ((icmp_ln73_fu_456_p2[0:0] == 1'b1) ? 9'd1 : add_ln73_1_fu_462_p2);

assign select_ln73_fu_511_p3 = ((or_ln73_fu_506_p2[0:0] == 1'b1) ? 2'd0 : ap_phi_mux_tip_phi_fu_347_p4);

assign select_ln85_1_fu_722_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_118_reg_1505);

assign select_ln85_2_fu_858_p3 = ((icmp_ln86_reg_1515_pp1_iter1_reg[0:0] == 1'b1) ? 6'd0 : tmp_29_fu_851_p3);

assign select_ln85_3_fu_668_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? add_ln85_fu_616_p2 : tp_ATTN0_reg_366);

assign select_ln85_4_fu_814_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? p_mid167_reg_1525 : empty_120_fu_710_p2);

assign select_ln85_fu_715_p3 = ((icmp_ln86_reg_1515[0:0] == 1'b1) ? 5'd0 : cot_reg_399);

assign select_ln86_1_fu_880_p3 = ((and_ln85_2_reg_1542_pp1_iter1_reg[0:0] == 1'b1) ? p_mid_fu_872_p3 : select_ln85_2_fu_858_p3);

assign select_ln86_2_fu_773_p3 = ((and_ln85_2_reg_1542[0:0] == 1'b1) ? add_ln86_fu_744_p2 : select_ln85_fu_715_p3);

assign select_ln86_3_fu_820_p3 = ((and_ln85_2_reg_1542[0:0] == 1'b1) ? select_ln85_1_fu_722_p3 : select_ln85_4_fu_814_p3);

assign select_ln86_4_fu_694_p3 = ((icmp_ln86_fu_622_p2[0:0] == 1'b1) ? 10'd1 : add_ln86_1_fu_688_p2);

assign select_ln86_fu_750_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_ATTN0_1_phi_fu_414_p4);

assign select_ln87_1_fu_892_p3 = ((and_ln86_1_reg_1591[0:0] == 1'b1) ? p_mid122_reg_1609 : select_ln86_3_reg_1614);

assign select_ln87_2_fu_897_p3 = ((and_ln86_1_reg_1591[0:0] == 1'b1) ? cmp45_mid1_reg_1619 : and_ln86_fu_887_p2);

assign select_ln87_3_fu_833_p3 = ((and_ln86_1_fu_767_p2[0:0] == 1'b1) ? add_ln87_fu_780_p2 : select_ln86_fu_750_p3);

assign select_ln87_4_fu_845_p3 = ((or_ln86_reg_1555[0:0] == 1'b1) ? 6'd1 : add_ln87_1_reg_1561);

assign select_ln87_fu_796_p3 = ((or_ln87_1_fu_791_p2[0:0] == 1'b1) ? 3'd0 : ap_phi_mux_cop_phi_fu_425_p4);

assign shl_ln96_1_fu_1016_p2 = zext_ln96_3_fu_1013_p1 << zext_ln96_2_fu_992_p1;

assign shl_ln96_fu_995_p2 = 84'd7 << zext_ln96_2_fu_992_p1;

assign shl_ln_fu_928_p3 = {{trunc_ln96_reg_1630}, {3'd0}};

assign sub_ln96_1_fu_967_p2 = (tmp_31_fu_955_p3 - zext_ln96_1_fu_963_p1);

assign sub_ln96_fu_939_p2 = (zext_ln96_fu_935_p1 - zext_ln88_fu_906_p1);

assign tip_cast_fu_552_p1 = select_ln73_reg_1474;

assign tmp_10_fu_1122_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[32:30]}};

assign tmp_11_fu_1132_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[35:33]}};

assign tmp_12_fu_1142_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[38:36]}};

assign tmp_13_fu_1152_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[41:39]}};

assign tmp_14_fu_1162_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[44:42]}};

assign tmp_15_fu_1172_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[47:45]}};

assign tmp_16_fu_1182_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[50:48]}};

assign tmp_17_fu_1192_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[53:51]}};

assign tmp_18_fu_1202_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[56:54]}};

assign tmp_19_fu_1212_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[59:57]}};

assign tmp_1_fu_1112_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[29:27]}};

assign tmp_20_fu_1222_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[62:60]}};

assign tmp_21_fu_1232_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[65:63]}};

assign tmp_22_fu_1242_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[68:66]}};

assign tmp_23_fu_1252_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[71:69]}};

assign tmp_24_fu_1262_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[74:72]}};

assign tmp_25_fu_1272_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[77:75]}};

assign tmp_26_fu_1282_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[80:78]}};

assign tmp_27_fu_1292_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[83:81]}};

assign tmp_28_fu_1302_p56 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_27_fu_1292_p4}, {5'd0}}, {tmp_26_fu_1282_p4}}, {5'd0}}, {tmp_25_fu_1272_p4}}, {5'd0}}, {tmp_24_fu_1262_p4}}, {5'd0}}, {tmp_23_fu_1252_p4}}, {5'd0}}, {tmp_22_fu_1242_p4}}, {5'd0}}, {tmp_21_fu_1232_p4}}, {5'd0}}, {tmp_20_fu_1222_p4}}, {5'd0}}, {tmp_19_fu_1212_p4}}, {5'd0}}, {tmp_18_fu_1202_p4}}, {5'd0}}, {tmp_17_fu_1192_p4}}, {5'd0}}, {tmp_16_fu_1182_p4}}, {5'd0}}, {tmp_15_fu_1172_p4}}, {5'd0}}, {tmp_14_fu_1162_p4}}, {5'd0}}, {tmp_13_fu_1152_p4}}, {5'd0}}, {tmp_12_fu_1142_p4}}, {5'd0}}, {tmp_11_fu_1132_p4}}, {5'd0}}, {tmp_10_fu_1122_p4}}, {5'd0}}, {tmp_1_fu_1112_p4}}, {5'd0}}, {tmp_9_fu_1102_p4}}, {5'd0}}, {tmp_8_fu_1092_p4}}, {5'd0}}, {tmp_7_fu_1082_p4}}, {5'd0}}, {tmp_6_fu_1072_p4}}, {5'd0}}, {tmp_5_fu_1062_p4}}, {5'd0}}, {tmp_4_fu_1052_p4}}, {5'd0}}, {tmp_3_fu_1042_p4}}, {5'd0}}, {tmp_2_fu_1032_p4}}, {5'd0}}, {trunc_ln174_fu_1028_p1}};

assign tmp_29_fu_851_p3 = {{empty_119_reg_1571}, {2'd0}};

assign tmp_2_fu_1032_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[5:3]}};

assign tmp_30_fu_915_p3 = {{select_ln87_1_fu_892_p3}, {empty_124_fu_909_p2}};

assign tmp_31_fu_955_p3 = {{trunc_ln96_1_fu_951_p1}, {2'd0}};

assign tmp_36_cast_fu_923_p1 = tmp_30_fu_915_p3;

assign tmp_3_fu_1042_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[8:6]}};

assign tmp_4_fu_1052_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[11:9]}};

assign tmp_5_fu_1062_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[14:12]}};

assign tmp_6_fu_1072_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[17:15]}};

assign tmp_7_fu_1082_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[20:18]}};

assign tmp_8_fu_1092_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[23:21]}};

assign tmp_9_fu_1102_p4 = {{vec_o_data_M_elems_V_1_fu_1022_p2[26:24]}};

assign tmp_s_fu_564_p3 = {{empty_116_reg_1495}, {6'd0}};

assign trunc_ln174_fu_1028_p1 = vec_o_data_M_elems_V_1_fu_1022_p2[2:0];

assign trunc_ln96_1_fu_951_p1 = add_ln96_fu_945_p2[4:0];

assign trunc_ln96_fu_841_p1 = select_ln87_fu_796_p3[1:0];

assign tt_1_fu_432_p2 = (tt_reg_286 + 4'd1);

assign vec_o_data_M_elems_V_1_fu_1022_p2 = (shl_ln96_1_fu_1016_p2 | and_ln96_fu_1007_p2);

assign xor_ln72_fu_489_p2 = (icmp_ln73_reg_1450 ^ 1'd1);

assign xor_ln85_fu_650_p2 = (icmp_ln86_fu_622_p2 ^ 1'd1);

assign xor_ln86_fu_757_p2 = (icmp_ln87_reg_1537 ^ 1'd1);

assign xor_ln96_fu_1001_p2 = (shl_ln96_fu_995_p2 ^ 84'd19342813113834066795298815);

assign zext_ln78_fu_577_p1 = add_ln78_fu_571_p2;

assign zext_ln85_1_fu_628_p1 = add_ln85_fu_616_p2;

assign zext_ln85_fu_588_p1 = tp_ATTN0_reg_366;

assign zext_ln87_1_fu_804_p1 = add_ln87_fu_780_p2;

assign zext_ln87_2_fu_903_p1 = select_ln87_3_reg_1624;

assign zext_ln87_fu_706_p1 = ap_phi_mux_ATTN0_1_phi_fu_414_p4;

assign zext_ln88_fu_906_p1 = select_ln87_reg_1602;

assign zext_ln96_1_fu_963_p1 = add_ln96_fu_945_p2;

assign zext_ln96_2_fu_992_p1 = sub_ln96_1_reg_1645_pp1_iter3_reg;

assign zext_ln96_3_fu_1013_p1 = buffer_V_load_reg_1659;

assign zext_ln96_fu_935_p1 = shl_ln_fu_928_p3;

endmodule //ATTN0_reorder164
// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt138_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt138_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt138_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt138_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt142_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt142_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt142_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt142_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt153_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt153_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt153_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt153_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt158_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt158_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt158_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt158_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt169_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt169_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt169_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt169_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt174_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt174_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt174_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt174_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_4_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_4_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_4_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_4_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_5_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_5_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_5_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_5_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_6_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_6_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_6_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_6_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_7_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_7_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_7_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_7_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_8_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_8_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_8_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_8_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_adapt_9_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_adapt_9_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_adapt_9_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_adapt_9_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_layernorm_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_layernorm_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_layernorm_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_layernorm_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul117_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul117_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul117_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul117_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul118_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul118_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul118_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul118_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul126_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul126_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul126_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul126_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul127_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul127_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul127_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul127_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul133_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd4;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul133_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd4;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul133_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul133_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul134_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd4;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul134_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd4;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul134_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul134_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul_1_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul_1_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul_1_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul_1_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul_2_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul_2_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul_2_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul_2_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul_3_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul_3_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul_3_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul_3_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_matmul_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd4;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_matmul_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd4;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_matmul_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_matmul_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_merge_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_merge_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_merge_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_merge_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_quant119_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_quant119_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_quant119_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_quant119_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_quant120_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_quant120_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_quant120_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_quant120_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_quant_1_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_quant_1_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_quant_1_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_quant_1_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_quant_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_quant_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_quant_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_quant_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape123_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape123_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape123_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape123_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape124_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape124_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape124_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape124_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape125_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape125_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape125_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape125_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape130_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape130_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape130_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape130_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape131_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape131_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape131_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape131_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_reshape132_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_reshape132_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_reshape132_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_reshape132_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_softmax128_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_softmax128_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_softmax128_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_softmax128_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_softmax129_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_softmax129_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_softmax129_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_softmax129_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_softmax_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_softmax_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_softmax_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_softmax_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_split121_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_split121_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_split121_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_split121_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_split122_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_split122_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_split122_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_split122_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_do_split_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_do_split_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_do_split_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_do_split_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window136_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window136_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window136_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window136_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window140_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window140_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window140_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window140_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window150_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window150_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window150_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window150_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window155_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window155_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window155_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window155_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window166_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window166_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window166_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window166_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window171_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window171_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window171_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window171_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window_1_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window_1_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window_1_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window_1_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window_2_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window_2_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window_2_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window_2_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window_3_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window_3_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window_3_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window_3_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step1_cache_window_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step1_cache_window_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step1_cache_window_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step1_cache_window_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac137_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac137_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac137_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac137_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac141_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac141_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac141_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac141_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac152_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac152_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac152_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac152_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac157_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac157_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac157_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac157_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac168_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac168_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac168_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac168_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac173_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac173_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac173_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac173_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac_1_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac_1_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac_1_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac_1_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac_2_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac_2_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac_2_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac_2_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac_3_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac_3_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac_3_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac_3_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_matmul_step2_mac_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd2;
parameter DEPTH = 3'd3;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_matmul_step2_mac_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd2;
parameter DEPTH       = 3'd3;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 3'd1;
            if (mOutPtr == 3'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 3'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 3'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_matmul_step2_mac_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_matmul_step2_mac_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder144_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder144_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder144_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder144_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder146_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder146_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder146_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder146_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder148_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder148_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder148_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder148_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder160_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder160_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder160_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder160_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder162_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder162_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder162_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder162_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_reorder164_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_reorder164_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_reorder164_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_reorder164_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_stream_copy3_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd1;
parameter DEPTH = 2'd2;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_stream_copy3_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd1;
parameter DEPTH       = 2'd2;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 2'd1;
            if (mOutPtr == 2'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 2'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 2'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_stream_copy3_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_stream_copy3_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps

module ATTN0_start_for_stream_merge_U0_shiftReg (
    clk,
    data,
    ce,
    a,
    q);

parameter DATA_WIDTH = 32'd1;
parameter ADDR_WIDTH = 32'd4;
parameter DEPTH = 5'd12;

input clk;
input [DATA_WIDTH-1:0] data;
input ce;
input [ADDR_WIDTH-1:0] a;
output [DATA_WIDTH-1:0] q;

reg[DATA_WIDTH-1:0] SRL_SIG [0:DEPTH-1];
integer i;

always @ (posedge clk)
    begin
        if (ce)
        begin
            for (i=0;i<DEPTH-1;i=i+1)
                SRL_SIG[i+1] <= SRL_SIG[i];
            SRL_SIG[0] <= data;
        end
    end

assign q = SRL_SIG[a];

endmodule

module ATTN0_start_for_stream_merge_U0 (
    clk,
    reset,
    if_empty_n,
    if_read_ce,
    if_read,
    if_dout,
    if_full_n,
    if_write_ce,
    if_write,
    if_din);

parameter MEM_STYLE   = "shiftreg";
parameter DATA_WIDTH  = 32'd1;
parameter ADDR_WIDTH  = 32'd4;
parameter DEPTH       = 5'd12;

input clk;
input reset;
output if_empty_n;
input if_read_ce;
input if_read;
output[DATA_WIDTH - 1:0] if_dout;
output if_full_n;
input if_write_ce;
input if_write;
input[DATA_WIDTH - 1:0] if_din;

wire[ADDR_WIDTH - 1:0] shiftReg_addr ;
wire[DATA_WIDTH - 1:0] shiftReg_data, shiftReg_q;
wire                     shiftReg_ce;
reg[ADDR_WIDTH:0] mOutPtr = ~{(ADDR_WIDTH+1){1'b0}};
reg internal_empty_n = 0;
reg internal_full_n = 1;

assign if_full_n = internal_full_n;
assign if_empty_n = internal_empty_n;
assign shiftReg_data = if_din;
assign if_dout = shiftReg_q;

always @ (posedge clk) begin
    if (reset == 1'b1)
    begin
        mOutPtr <= ~{ADDR_WIDTH+1{1'b0}};
        internal_empty_n <= 1'b0;
        internal_full_n <= 1'b1;
    end
    else begin
        if (((if_read & if_read_ce) == 1 & internal_empty_n == 1) && 
            ((if_write & if_write_ce) == 0 | internal_full_n == 0))
        begin
            mOutPtr <= mOutPtr - 5'd1;
            if (mOutPtr == 5'd0)
                internal_empty_n <= 1'b0;
            internal_full_n <= 1'b1;
        end 
        else if (((if_read & if_read_ce) == 0 | internal_empty_n == 0) && 
            ((if_write & if_write_ce) == 1 & internal_full_n == 1))
        begin
            mOutPtr <= mOutPtr + 5'd1;
            internal_empty_n <= 1'b1;
            if (mOutPtr == DEPTH - 5'd2)
                internal_full_n <= 1'b0;
        end 
    end
end

assign shiftReg_addr = mOutPtr[ADDR_WIDTH] == 1'b0 ? mOutPtr[ADDR_WIDTH-1:0]:{ADDR_WIDTH{1'b0}};
assign shiftReg_ce = (if_write & if_write_ce) & internal_full_n;

ATTN0_start_for_stream_merge_U0_shiftReg 
#(
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH),
    .DEPTH(DEPTH))
U_ATTN0_start_for_stream_merge_U0_ram (
    .clk(clk),
    .data(shiftReg_data),
    .ce(shiftReg_ce),
    .a(shiftReg_addr),
    .q(shiftReg_q));

endmodule  

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_stream_copy2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        i_stream_V_TDATA,
        i_stream_V_TVALID,
        i_stream_V_TREADY,
        main_sm_din,
        main_sm_full_n,
        main_sm_write,
        resi_i_sm_din,
        resi_i_sm_full_n,
        resi_i_sm_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] i_stream_V_TDATA;
input   i_stream_V_TVALID;
output   i_stream_V_TREADY;
output  [31:0] main_sm_din;
input   main_sm_full_n;
output   main_sm_write;
output  [31:0] resi_i_sm_din;
input   resi_i_sm_full_n;
output   resi_i_sm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg i_stream_V_TREADY;
reg main_sm_write;
reg resi_i_sm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    i_stream_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln308_fu_79_p2;
reg    main_sm_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln308_reg_90;
reg    resi_i_sm_blk_n;
reg   [14:0] indvar_flatten_reg_62;
wire   [14:0] add_ln308_fu_73_p2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] tmp_reg_94;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln308_fu_79_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_62 <= add_ln308_fu_73_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_62 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln308_reg_90 <= icmp_ln308_fu_79_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln308_fu_79_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_94 <= i_stream_V_TDATA;
    end
end

always @ (*) begin
    if ((icmp_ln308_fu_79_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln308_fu_79_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_V_TDATA_blk_n = i_stream_V_TVALID;
    end else begin
        i_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln308_fu_79_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_V_TREADY = 1'b1;
    end else begin
        i_stream_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln308_reg_90 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_blk_n = main_sm_full_n;
    end else begin
        main_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln308_reg_90 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        main_sm_write = 1'b1;
    end else begin
        main_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln308_reg_90 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_blk_n = resi_i_sm_full_n;
    end else begin
        resi_i_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln308_reg_90 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_i_sm_write = 1'b1;
    end else begin
        resi_i_sm_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln308_fu_79_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln308_fu_79_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln308_fu_73_p2 = (indvar_flatten_reg_62 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln308_reg_90 == 1'd0) & (resi_i_sm_full_n == 1'b0)) | ((icmp_ln308_reg_90 == 1'd0) & (main_sm_full_n == 1'b0)))) | ((icmp_ln308_fu_79_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln308_reg_90 == 1'd0) & (resi_i_sm_full_n == 1'b0)) | ((icmp_ln308_reg_90 == 1'd0) & (main_sm_full_n == 1'b0)))) | ((icmp_ln308_fu_79_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln308_reg_90 == 1'd0) & (resi_i_sm_full_n == 1'b0)) | ((icmp_ln308_reg_90 == 1'd0) & (main_sm_full_n == 1'b0)))) | ((icmp_ln308_fu_79_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (i_stream_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln308_fu_79_p2 == 1'd0) & (i_stream_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln308_reg_90 == 1'd0) & (resi_i_sm_full_n == 1'b0)) | ((icmp_ln308_reg_90 == 1'd0) & (main_sm_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln308_fu_79_p2 = ((indvar_flatten_reg_62 == 15'd18816) ? 1'b1 : 1'b0);

assign main_sm_din = tmp_reg_94;

assign resi_i_sm_din = tmp_reg_94;

assign start_out = real_start;

endmodule //ATTN0_stream_copy2
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_stream_copy3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        lnq_sm_dout,
        lnq_sm_empty_n,
        lnq_sm_read,
        lnq_sm_cp1_din,
        lnq_sm_cp1_full_n,
        lnq_sm_cp1_write,
        lnq_sm_cp2_din,
        lnq_sm_cp2_full_n,
        lnq_sm_cp2_write,
        lnq_sm_cp3_din,
        lnq_sm_cp3_full_n,
        lnq_sm_cp3_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] lnq_sm_dout;
input   lnq_sm_empty_n;
output   lnq_sm_read;
output  [15:0] lnq_sm_cp1_din;
input   lnq_sm_cp1_full_n;
output   lnq_sm_cp1_write;
output  [15:0] lnq_sm_cp2_din;
input   lnq_sm_cp2_full_n;
output   lnq_sm_cp2_write;
output  [15:0] lnq_sm_cp3_din;
input   lnq_sm_cp3_full_n;
output   lnq_sm_cp3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg lnq_sm_read;
reg lnq_sm_cp1_write;
reg lnq_sm_cp2_write;
reg lnq_sm_cp3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    lnq_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln327_reg_98;
reg    lnq_sm_cp1_blk_n;
reg    lnq_sm_cp2_blk_n;
reg    lnq_sm_cp3_blk_n;
reg   [14:0] indvar_flatten_reg_70;
wire   [14:0] add_ln327_fu_81_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln327_fu_87_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln327_fu_87_p2 == 1'd0))) begin
        indvar_flatten_reg_70 <= add_ln327_fu_81_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_70 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln327_reg_98 <= icmp_ln327_fu_87_p2;
    end
end

always @ (*) begin
    if ((icmp_ln327_fu_87_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_blk_n = lnq_sm_empty_n;
    end else begin
        lnq_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_blk_n = lnq_sm_cp1_full_n;
    end else begin
        lnq_sm_cp1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp1_write = 1'b1;
    end else begin
        lnq_sm_cp1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_blk_n = lnq_sm_cp2_full_n;
    end else begin
        lnq_sm_cp2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp2_write = 1'b1;
    end else begin
        lnq_sm_cp2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_blk_n = lnq_sm_cp3_full_n;
    end else begin
        lnq_sm_cp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_cp3_write = 1'b1;
    end else begin
        lnq_sm_cp3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln327_reg_98 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lnq_sm_read = 1'b1;
    end else begin
        lnq_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln327_fu_87_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln327_fu_87_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln327_fu_81_p2 = (indvar_flatten_reg_70 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp3_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp2_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp1_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp3_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp2_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp1_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp3_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp2_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp1_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp3_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp2_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_cp1_full_n == 1'b0)) | ((icmp_ln327_reg_98 == 1'd0) & (lnq_sm_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln327_fu_87_p2 = ((indvar_flatten_reg_70 == 15'd18816) ? 1'b1 : 1'b0);

assign lnq_sm_cp1_din = lnq_sm_dout;

assign lnq_sm_cp2_din = lnq_sm_dout;

assign lnq_sm_cp3_din = lnq_sm_dout;

assign start_out = real_start;

endmodule //ATTN0_stream_copy3
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_stream_merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        resi_o_sm_dout,
        resi_o_sm_empty_n,
        resi_o_sm_read,
        o_sm_dout,
        o_sm_empty_n,
        o_sm_read,
        o_stream_V_TDATA,
        o_stream_V_TVALID,
        o_stream_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] resi_o_sm_dout;
input   resi_o_sm_empty_n;
output   resi_o_sm_read;
input  [31:0] o_sm_dout;
input   o_sm_empty_n;
output   o_sm_read;
output  [31:0] o_stream_V_TDATA;
output   o_stream_V_TVALID;
input   o_stream_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg resi_o_sm_read;
reg o_sm_read;
reg o_stream_V_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    resi_o_sm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln345_reg_210;
reg    o_sm_blk_n;
reg    o_stream_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln345_reg_210_pp0_iter5_reg;
reg   [14:0] indvar_flatten_reg_81;
wire   [14:0] add_ln345_fu_92_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln345_fu_98_p2;
reg   [0:0] icmp_ln345_reg_210_pp0_iter1_reg;
reg   [0:0] icmp_ln345_reg_210_pp0_iter2_reg;
reg   [0:0] icmp_ln345_reg_210_pp0_iter3_reg;
reg   [0:0] icmp_ln345_reg_210_pp0_iter4_reg;
wire   [12:0] lhs_fu_104_p1;
reg  signed [12:0] lhs_reg_214;
reg  signed [12:0] lhs_1_reg_219;
wire   [12:0] trunc_ln145_2_fu_118_p1;
reg   [12:0] trunc_ln145_2_reg_224;
reg   [12:0] trunc_ln145_2_reg_224_pp0_iter2_reg;
reg   [12:0] trunc_ln145_2_reg_224_pp0_iter3_reg;
reg   [12:0] trunc_ln145_2_reg_224_pp0_iter4_reg;
reg   [12:0] trunc_ln145_2_reg_224_pp0_iter5_reg;
reg   [12:0] trunc_ln145_1_reg_229;
reg   [12:0] trunc_ln145_1_reg_229_pp0_iter2_reg;
reg   [12:0] trunc_ln145_1_reg_229_pp0_iter3_reg;
reg   [12:0] trunc_ln145_1_reg_229_pp0_iter4_reg;
reg   [12:0] trunc_ln145_1_reg_229_pp0_iter5_reg;
reg   [14:0] trunc_ln_reg_244;
reg   [14:0] trunc_ln1497_s_reg_249;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_01001;
wire  signed [32:0] grp_fu_187_p3;
wire  signed [32:0] grp_fu_196_p3;
wire  signed [14:0] sext_ln69_fu_156_p1;
wire  signed [14:0] sext_ln69_1_fu_164_p1;
wire   [14:0] add_ln69_1_fu_167_p2;
wire   [14:0] add_ln69_fu_159_p2;
wire   [30:0] tmp_fu_172_p4;
wire   [20:0] grp_fu_187_p1;
wire   [18:0] grp_fu_187_p2;
wire   [20:0] grp_fu_196_p1;
wire   [18:0] grp_fu_196_p2;
reg    grp_fu_187_ce;
reg    grp_fu_196_ce;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter6 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter3 = 1'b0;
//#0 ap_enable_reg_pp0_iter4 = 1'b0;
//#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

ATTN0_mac_muladd_13s_21ns_19ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 21 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mac_muladd_13s_21ns_19ns_33_4_1_U1243(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_reg_214),
    .din1(grp_fu_187_p1),
    .din2(grp_fu_187_p2),
    .ce(grp_fu_187_ce),
    .dout(grp_fu_187_p3)
);

ATTN0_mac_muladd_13s_21ns_19ns_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 21 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 33 ))
mac_muladd_13s_21ns_19ns_33_4_1_U1244(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_1_reg_219),
    .din1(grp_fu_196_p1),
    .din2(grp_fu_196_p2),
    .ce(grp_fu_196_ce),
    .dout(grp_fu_196_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln345_fu_98_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_81 <= add_ln345_fu_92_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_81 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln345_reg_210 <= icmp_ln345_fu_98_p2;
        icmp_ln345_reg_210_pp0_iter1_reg <= icmp_ln345_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln345_reg_210_pp0_iter2_reg <= icmp_ln345_reg_210_pp0_iter1_reg;
        icmp_ln345_reg_210_pp0_iter3_reg <= icmp_ln345_reg_210_pp0_iter2_reg;
        icmp_ln345_reg_210_pp0_iter4_reg <= icmp_ln345_reg_210_pp0_iter3_reg;
        icmp_ln345_reg_210_pp0_iter5_reg <= icmp_ln345_reg_210_pp0_iter4_reg;
        trunc_ln145_1_reg_229_pp0_iter2_reg <= trunc_ln145_1_reg_229;
        trunc_ln145_1_reg_229_pp0_iter3_reg <= trunc_ln145_1_reg_229_pp0_iter2_reg;
        trunc_ln145_1_reg_229_pp0_iter4_reg <= trunc_ln145_1_reg_229_pp0_iter3_reg;
        trunc_ln145_1_reg_229_pp0_iter5_reg <= trunc_ln145_1_reg_229_pp0_iter4_reg;
        trunc_ln145_2_reg_224_pp0_iter2_reg <= trunc_ln145_2_reg_224;
        trunc_ln145_2_reg_224_pp0_iter3_reg <= trunc_ln145_2_reg_224_pp0_iter2_reg;
        trunc_ln145_2_reg_224_pp0_iter4_reg <= trunc_ln145_2_reg_224_pp0_iter3_reg;
        trunc_ln145_2_reg_224_pp0_iter5_reg <= trunc_ln145_2_reg_224_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln345_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_1_reg_219 <= {{resi_o_sm_dout[28:16]}};
        lhs_reg_214 <= lhs_fu_104_p1;
        trunc_ln145_1_reg_229 <= {{o_sm_dout[28:16]}};
        trunc_ln145_2_reg_224 <= trunc_ln145_2_fu_118_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln345_reg_210_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln1497_s_reg_249 <= {{grp_fu_196_p3[32:18]}};
        trunc_ln_reg_244 <= {{grp_fu_187_p3[32:18]}};
    end
end

always @ (*) begin
    if ((icmp_ln345_fu_98_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_187_ce = 1'b1;
    end else begin
        grp_fu_187_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_196_ce = 1'b1;
    end else begin
        grp_fu_196_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_sm_blk_n = o_sm_empty_n;
    end else begin
        o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o_sm_read = 1'b1;
    end else begin
        o_sm_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        o_stream_V_TDATA_blk_n = o_stream_V_TREADY;
    end else begin
        o_stream_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_stream_V_TVALID = 1'b1;
    end else begin
        o_stream_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_o_sm_blk_n = resi_o_sm_empty_n;
    end else begin
        resi_o_sm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln345_reg_210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resi_o_sm_read = 1'b1;
    end else begin
        resi_o_sm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln345_fu_98_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)) | ((icmp_ln345_fu_98_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln345_fu_92_p2 = (indvar_flatten_reg_81 + 15'd1);

assign add_ln69_1_fu_167_p2 = ($signed(trunc_ln1497_s_reg_249) + $signed(sext_ln69_1_fu_164_p1));

assign add_ln69_fu_159_p2 = ($signed(trunc_ln_reg_244) + $signed(sext_ln69_fu_156_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (o_stream_V_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln345_reg_210 == 1'd0) & (o_sm_empty_n == 1'b0)) | ((icmp_ln345_reg_210 == 1'd0) & (resi_o_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (o_stream_V_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln345_reg_210 == 1'd0) & (o_sm_empty_n == 1'b0)) | ((icmp_ln345_reg_210 == 1'd0) & (resi_o_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (o_stream_V_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln345_reg_210 == 1'd0) & (o_sm_empty_n == 1'b0)) | ((icmp_ln345_reg_210 == 1'd0) & (resi_o_sm_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln345_reg_210 == 1'd0) & (o_sm_empty_n == 1'b0)) | ((icmp_ln345_reg_210 == 1'd0) & (resi_o_sm_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (o_stream_V_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter6 = ((icmp_ln345_reg_210_pp0_iter5_reg == 1'd0) & (o_stream_V_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_187_p1 = 33'd986673;

assign grp_fu_187_p2 = 33'd131072;

assign grp_fu_196_p1 = 33'd986673;

assign grp_fu_196_p2 = 33'd131072;

assign icmp_ln345_fu_98_p2 = ((indvar_flatten_reg_81 == 15'd18816) ? 1'b1 : 1'b0);

assign lhs_fu_104_p1 = resi_o_sm_dout[12:0];

assign o_stream_V_TDATA = tmp_fu_172_p4;

assign sext_ln69_1_fu_164_p1 = $signed(trunc_ln145_1_reg_229_pp0_iter5_reg);

assign sext_ln69_fu_156_p1 = $signed(trunc_ln145_2_reg_224_pp0_iter5_reg);

assign tmp_fu_172_p4 = {{{add_ln69_1_fu_167_p2}, {1'd0}}, {add_ln69_fu_159_p2}};

assign trunc_ln145_2_fu_118_p1 = o_sm_dout[12:0];

endmodule //ATTN0_stream_merge
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack143 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_6_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_2_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_6_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_6_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_2_fu_66 >> zext_ln174_6_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_6_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_6_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack143
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack145 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_5_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_2_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_5_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_5_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_2_fu_66 >> zext_ln174_5_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_5_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_5_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack145
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack147 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_4_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_2_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_4_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_4_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_2_fu_66 >> zext_ln174_4_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_4_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_4_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack147
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack159 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_3_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_2_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_3_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_3_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_2_fu_66 >> zext_ln174_3_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_3_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_3_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack159
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack161 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_2_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_2_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_2_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_2_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_2_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_2_fu_66 >> zext_ln174_2_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_2_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_2_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack161
// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ATTN0_unpack163 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        kq_sm_head1_dout,
        kq_sm_head1_empty_n,
        kq_sm_head1_read,
        unpacked_stream1_din,
        unpacked_stream1_full_n,
        unpacked_stream1_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] kq_sm_head1_dout;
input   kq_sm_head1_empty_n;
output   kq_sm_head1_read;
output  [2:0] unpacked_stream1_din;
input   unpacked_stream1_full_n;
output   unpacked_stream1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg kq_sm_head1_read;
reg unpacked_stream1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    kq_sm_head1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp5_reg_277;
reg    unpacked_stream1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln42_reg_268;
reg   [0:0] icmp_ln42_reg_268_pp0_iter1_reg;
reg   [13:0] indvar_flatten13_reg_83;
reg   [8:0] indvar_flatten_reg_94;
reg   [1:0] tip_reg_105;
wire   [13:0] add_ln42_fu_116_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln42_fu_122_p2;
wire   [1:0] select_ln43_fu_158_p3;
reg   [1:0] select_ln43_reg_272;
wire   [0:0] cmp5_fu_166_p2;
wire   [1:0] add_ln44_fu_172_p2;
wire   [8:0] select_ln43_1_fu_184_p3;
wire   [2:0] sub_ln174_fu_234_p2;
reg   [2:0] sub_ln174_reg_291;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] vec_i_data_M_elems_V_1_fu_66;
wire   [5:0] vec_i_data_M_elems_V_fu_206_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln43_fu_128_p2;
wire   [0:0] icmp_ln44_fu_140_p2;
wire   [0:0] xor_ln42_fu_134_p2;
wire   [0:0] and_ln42_fu_146_p2;
wire   [0:0] or_ln43_fu_152_p2;
wire   [8:0] add_ln43_fu_178_p2;
wire   [2:0] trunc_ln49_1_fu_196_p4;
wire   [2:0] trunc_ln49_fu_192_p1;
wire   [0:0] trunc_ln174_fu_219_p1;
wire   [2:0] p_shl_fu_226_p3;
wire   [2:0] zext_ln174_fu_222_p1;
wire   [5:0] zext_ln174_1_fu_243_p1;
wire   [5:0] lshr_ln174_fu_246_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
//#0 start_once_reg = 1'b0;
//#0 ap_done_reg = 1'b0;
//#0 ap_CS_fsm = 3'd1;
//#0 ap_enable_reg_pp0_iter1 = 1'b0;
//#0 ap_enable_reg_pp0_iter2 = 1'b0;
//#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_83 <= add_ln42_fu_116_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_83 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= select_ln43_1_fu_184_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_94 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tip_reg_105 <= add_ln44_fu_172_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tip_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp5_reg_277 <= cmp5_fu_166_p2;
        select_ln43_reg_272 <= select_ln43_fu_158_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_268 <= icmp_ln42_fu_122_p2;
        icmp_ln42_reg_268_pp0_iter1_reg <= icmp_ln42_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_268 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_ln174_reg_291 <= sub_ln174_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vec_i_data_M_elems_V_1_fu_66 <= vec_i_data_M_elems_V_fu_206_p3;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_122_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_blk_n = kq_sm_head1_empty_n;
    end else begin
        kq_sm_head1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((cmp5_reg_277 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kq_sm_head1_read = 1'b1;
    end else begin
        kq_sm_head1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        unpacked_stream1_blk_n = unpacked_stream1_full_n;
    end else begin
        unpacked_stream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        unpacked_stream1_write = 1'b1;
    end else begin
        unpacked_stream1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln42_fu_122_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_116_p2 = (indvar_flatten13_reg_83 + 14'd1);

assign add_ln43_fu_178_p2 = (indvar_flatten_reg_94 + 9'd1);

assign add_ln44_fu_172_p2 = (select_ln43_fu_158_p3 + 2'd1);

assign and_ln42_fu_146_p2 = (xor_ln42_fu_134_p2 & icmp_ln44_fu_140_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (unpacked_stream1_full_n == 1'b0)) | ((cmp5_reg_277 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (kq_sm_head1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((cmp5_reg_277 == 1'd1) & (kq_sm_head1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln42_reg_268_pp0_iter1_reg == 1'd0) & (unpacked_stream1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmp5_fu_166_p2 = ((select_ln43_fu_158_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_122_p2 = ((indvar_flatten13_reg_83 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_128_p2 = ((indvar_flatten_reg_94 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_140_p2 = ((tip_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_246_p2 = vec_i_data_M_elems_V_1_fu_66 >> zext_ln174_1_fu_243_p1;

assign or_ln43_fu_152_p2 = (icmp_ln43_fu_128_p2 | and_ln42_fu_146_p2);

assign p_shl_fu_226_p3 = {{trunc_ln174_fu_219_p1}, {2'd0}};

assign select_ln43_1_fu_184_p3 = ((icmp_ln43_fu_128_p2[0:0] == 1'b1) ? 9'd1 : add_ln43_fu_178_p2);

assign select_ln43_fu_158_p3 = ((or_ln43_fu_152_p2[0:0] == 1'b1) ? 2'd0 : tip_reg_105);

assign start_out = real_start;

assign sub_ln174_fu_234_p2 = (p_shl_fu_226_p3 - zext_ln174_fu_222_p1);

assign trunc_ln174_fu_219_p1 = select_ln43_reg_272[0:0];

assign trunc_ln49_1_fu_196_p4 = {{kq_sm_head1_dout[10:8]}};

assign trunc_ln49_fu_192_p1 = kq_sm_head1_dout[2:0];

assign unpacked_stream1_din = lshr_ln174_fu_246_p2[2:0];

assign vec_i_data_M_elems_V_fu_206_p3 = {{trunc_ln49_1_fu_196_p4}, {trunc_ln49_fu_192_p1}};

assign xor_ln42_fu_134_p2 = (icmp_ln43_fu_128_p2 ^ 1'd1);

assign zext_ln174_1_fu_243_p1 = sub_ln174_reg_291;

assign zext_ln174_fu_222_p1 = trunc_ln174_fu_219_p1;

endmodule //ATTN0_unpack163
